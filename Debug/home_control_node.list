
home_control_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003cd8  08003cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08003d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000013c  20000068  08003dc8  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00001000  200001a4  08003dc8  000201a4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e944  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023ba  00000000  00000000  0002e9d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a48  00000000  00000000  00030d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000950  00000000  00000000  000317d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004912  00000000  00000000  00032128  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003833  00000000  00000000  00036a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003a26d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000029e8  00000000  00000000  0003a2ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cc0 	.word	0x08003cc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08003cc0 	.word	0x08003cc0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8000168:	f000 fd6a 	bl	8000c40 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800016c:	6878      	ldr	r0, [r7, #4]
 800016e:	f003 fcb9 	bl	8003ae4 <malloc>
 8000172:	4603      	mov	r3, r0
 8000174:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000176:	f000 fd71 	bl	8000c5c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800017a:	68fb      	ldr	r3, [r7, #12]
}
 800017c:	4618      	mov	r0, r3
 800017e:	3710      	adds	r7, #16
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	if( pv )
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d006      	beq.n	80001a0 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8000192:	f000 fd55 	bl	8000c40 <vTaskSuspendAll>
		{
			free( pv );
 8000196:	6878      	ldr	r0, [r7, #4]
 8000198:	f003 fcac 	bl	8003af4 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800019c:	f000 fd5e 	bl	8000c5c <xTaskResumeAll>
	}
}
 80001a0:	bf00      	nop
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}

080001a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	f103 0208 	add.w	r2, r3, #8
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80001c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f103 0208 	add.w	r2, r3, #8
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	f103 0208 	add.w	r2, r3, #8
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr

080001e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001e6:	b480      	push	{r7}
 80001e8:	b083      	sub	sp, #12
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2200      	movs	r2, #0
 80001f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr

080001fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001fe:	b480      	push	{r7}
 8000200:	b085      	sub	sp, #20
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
 8000206:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	68fa      	ldr	r2, [r7, #12]
 8000212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	689a      	ldr	r2, [r3, #8]
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	683a      	ldr	r2, [r7, #0]
 8000222:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	683a      	ldr	r2, [r7, #0]
 8000228:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]
}
 800023a:	bf00      	nop
 800023c:	3714      	adds	r7, #20
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800025a:	d103      	bne.n	8000264 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	691b      	ldr	r3, [r3, #16]
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	e00c      	b.n	800027e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3308      	adds	r3, #8
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	e002      	b.n	8000272 <vListInsert+0x2e>
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	429a      	cmp	r2, r3
 800027c:	d9f6      	bls.n	800026c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	685a      	ldr	r2, [r3, #4]
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	683a      	ldr	r2, [r7, #0]
 800028c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	1c5a      	adds	r2, r3, #1
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	601a      	str	r2, [r3, #0]
}
 80002aa:	bf00      	nop
 80002ac:	3714      	adds	r7, #20
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr

080002b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	691b      	ldr	r3, [r3, #16]
 80002c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	687a      	ldr	r2, [r7, #4]
 80002c8:	6892      	ldr	r2, [r2, #8]
 80002ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	6852      	ldr	r2, [r2, #4]
 80002d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	685a      	ldr	r2, [r3, #4]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d103      	bne.n	80002e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	1e5a      	subs	r2, r3, #1
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	681b      	ldr	r3, [r3, #0]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
	...

08000308 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	3b04      	subs	r3, #4
 8000318:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	3b04      	subs	r3, #4
 8000326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	f023 0201 	bic.w	r2, r3, #1
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	3b04      	subs	r3, #4
 8000336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000338:	4a08      	ldr	r2, [pc, #32]	; (800035c <pxPortInitialiseStack+0x54>)
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	3b14      	subs	r3, #20
 8000342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	3b20      	subs	r3, #32
 800034e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000350:	68fb      	ldr	r3, [r7, #12]
}
 8000352:	4618      	mov	r0, r3
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	08000361 	.word	0x08000361

08000360 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000366:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800036a:	f383 8811 	msr	BASEPRI, r3
 800036e:	f3bf 8f6f 	isb	sy
 8000372:	f3bf 8f4f 	dsb	sy
 8000376:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 8000378:	e7fe      	b.n	8000378 <prvTaskExitError+0x18>
 800037a:	0000      	movs	r0, r0
 800037c:	0000      	movs	r0, r0
	...

08000380 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <pxCurrentTCBConst2>)
 8000382:	6819      	ldr	r1, [r3, #0]
 8000384:	6808      	ldr	r0, [r1, #0]
 8000386:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800038a:	f380 8809 	msr	PSP, r0
 800038e:	f3bf 8f6f 	isb	sy
 8000392:	f04f 0000 	mov.w	r0, #0
 8000396:	f380 8811 	msr	BASEPRI, r0
 800039a:	f04e 0e0d 	orr.w	lr, lr, #13
 800039e:	4770      	bx	lr

080003a0 <pxCurrentTCBConst2>:
 80003a0:	20000084 	.word	0x20000084
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80003a4:	bf00      	nop
 80003a6:	bf00      	nop

080003a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80003a8:	4806      	ldr	r0, [pc, #24]	; (80003c4 <prvPortStartFirstTask+0x1c>)
 80003aa:	6800      	ldr	r0, [r0, #0]
 80003ac:	6800      	ldr	r0, [r0, #0]
 80003ae:	f380 8808 	msr	MSP, r0
 80003b2:	b662      	cpsie	i
 80003b4:	b661      	cpsie	f
 80003b6:	f3bf 8f4f 	dsb	sy
 80003ba:	f3bf 8f6f 	isb	sy
 80003be:	df00      	svc	0
 80003c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80003c2:	bf00      	nop
 80003c4:	e000ed08 	.word	0xe000ed08

080003c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80003cc:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <xPortStartScheduler+0x34>)
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <xPortStartScheduler+0x34>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80003d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80003d8:	4a08      	ldr	r2, [pc, #32]	; (80003fc <xPortStartScheduler+0x34>)
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <xPortStartScheduler+0x34>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80003e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80003e4:	f000 f888 	bl	80004f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <xPortStartScheduler+0x38>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80003ee:	f7ff ffdb 	bl	80003a8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80003f2:	f7ff ffb5 	bl	8000360 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80003f6:	2300      	movs	r3, #0
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	e000ed20 	.word	0xe000ed20
 8000400:	20000000 	.word	0x20000000

08000404 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800040e:	f383 8811 	msr	BASEPRI, r3
 8000412:	f3bf 8f6f 	isb	sy
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <vPortEnterCritical+0x2c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	3301      	adds	r3, #1
 8000422:	4a03      	ldr	r2, [pc, #12]	; (8000430 <vPortEnterCritical+0x2c>)
 8000424:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	20000000 	.word	0x20000000

08000434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <vPortExitCritical+0x2c>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	3b01      	subs	r3, #1
 8000440:	4a07      	ldr	r2, [pc, #28]	; (8000460 <vPortExitCritical+0x2c>)
 8000442:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <vPortExitCritical+0x2c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d104      	bne.n	8000456 <vPortExitCritical+0x22>
 800044c:	2300      	movs	r3, #0
 800044e:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	20000000 	.word	0x20000000
	...

08000470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000470:	f3ef 8009 	mrs	r0, PSP
 8000474:	f3bf 8f6f 	isb	sy
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <pxCurrentTCBConst>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000480:	6010      	str	r0, [r2, #0]
 8000482:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000486:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800048a:	f380 8811 	msr	BASEPRI, r0
 800048e:	f000 fd1f 	bl	8000ed0 <vTaskSwitchContext>
 8000492:	f04f 0000 	mov.w	r0, #0
 8000496:	f380 8811 	msr	BASEPRI, r0
 800049a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800049e:	6819      	ldr	r1, [r3, #0]
 80004a0:	6808      	ldr	r0, [r1, #0]
 80004a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80004a6:	f380 8809 	msr	PSP, r0
 80004aa:	f3bf 8f6f 	isb	sy
 80004ae:	4770      	bx	lr

080004b0 <pxCurrentTCBConst>:
 80004b0:	20000084 	.word	0x20000084
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80004b4:	bf00      	nop
 80004b6:	bf00      	nop

080004b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
	__asm volatile
 80004be:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80004c2:	f383 8811 	msr	BASEPRI, r3
 80004c6:	f3bf 8f6f 	isb	sy
 80004ca:	f3bf 8f4f 	dsb	sy
 80004ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80004d0:	f000 fc52 	bl	8000d78 <xTaskIncrementTick>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d003      	beq.n	80004e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <SysTick_Handler+0x3c>)
 80004dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	2300      	movs	r3, #0
 80004e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	e000ed04 	.word	0xe000ed04

080004f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <vPortSetupTimerInterrupt+0x18>)
 80004fe:	4a05      	ldr	r2, [pc, #20]	; (8000514 <vPortSetupTimerInterrupt+0x1c>)
 8000500:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <vPortSetupTimerInterrupt+0x20>)
 8000504:	2207      	movs	r2, #7
 8000506:	601a      	str	r2, [r3, #0]
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	e000e014 	.word	0xe000e014
 8000514:	0001193f 	.word	0x0001193f
 8000518:	e000e010 	.word	0xe000e010

0800051c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 800052a:	f7ff ff6b 	bl	8000404 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000536:	68f9      	ldr	r1, [r7, #12]
 8000538:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800053a:	fb01 f303 	mul.w	r3, r1, r3
 800053e:	441a      	add	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	2200      	movs	r2, #0
 8000548:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800055a:	3b01      	subs	r3, #1
 800055c:	68f9      	ldr	r1, [r7, #12]
 800055e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000560:	fb01 f303 	mul.w	r3, r1, r3
 8000564:	441a      	add	r2, r3
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	22ff      	movs	r2, #255	; 0xff
 800056e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	22ff      	movs	r2, #255	; 0xff
 8000576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d114      	bne.n	80005aa <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	691b      	ldr	r3, [r3, #16]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d01a      	beq.n	80005be <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3310      	adds	r3, #16
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fcfb 	bl	8000f88 <xTaskRemoveFromEventList>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d012      	beq.n	80005be <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <xQueueGenericReset+0xb0>)
 800059a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	f3bf 8f4f 	dsb	sy
 80005a4:	f3bf 8f6f 	isb	sy
 80005a8:	e009      	b.n	80005be <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	3310      	adds	r3, #16
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fdfa 	bl	80001a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3324      	adds	r3, #36	; 0x24
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fdf5 	bl	80001a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80005be:	f7ff ff39 	bl	8000434 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80005c2:	2301      	movs	r3, #1
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	e000ed04 	.word	0xe000ed04

080005d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	4613      	mov	r3, r2
 80005dc:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d102      	bne.n	80005ea <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
 80005e8:	e004      	b.n	80005f4 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	fb02 f303 	mul.w	r3, r2, r3
 80005f2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	3350      	adds	r3, #80	; 0x50
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fdb1 	bl	8000160 <pvPortMalloc>
 80005fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d00b      	beq.n	800061e <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	3350      	adds	r3, #80	; 0x50
 800060a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800060c:	79fa      	ldrb	r2, [r7, #7]
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	4613      	mov	r3, r2
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	68b9      	ldr	r1, [r7, #8]
 8000618:	68f8      	ldr	r0, [r7, #12]
 800061a:	f000 f805 	bl	8000628 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800061e:	69bb      	ldr	r3, [r7, #24]
	}
 8000620:	4618      	mov	r0, r3
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
 8000634:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d103      	bne.n	8000644 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	69ba      	ldr	r2, [r7, #24]
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	e002      	b.n	800064a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000656:	2101      	movs	r1, #1
 8000658:	69b8      	ldr	r0, [r7, #24]
 800065a:	f7ff ff5f 	bl	800051c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	78fa      	ldrb	r2, [r7, #3]
 8000662:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800067e:	2300      	movs	r3, #0
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000686:	f7ff febd 	bl	8000404 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800068a:	6a3b      	ldr	r3, [r7, #32]
 800068c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800068e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d046      	beq.n	8000724 <xQueueGenericReceive+0xb4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8000696:	6a3b      	ldr	r3, [r7, #32]
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800069c:	68b9      	ldr	r1, [r7, #8]
 800069e:	6a38      	ldr	r0, [r7, #32]
 80006a0:	f000 f8be 	bl	8000820 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d121      	bne.n	80006ee <xQueueGenericReceive+0x7e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	1e5a      	subs	r2, r3, #1
 80006ae:	6a3b      	ldr	r3, [r7, #32]
 80006b0:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80006b2:	6a3b      	ldr	r3, [r7, #32]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d104      	bne.n	80006c4 <xQueueGenericReceive+0x54>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80006ba:	f000 fe5d 	bl	8001378 <pvTaskIncrementMutexHeldCount>
 80006be:	4602      	mov	r2, r0
 80006c0:	6a3b      	ldr	r3, [r7, #32]
 80006c2:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006c4:	6a3b      	ldr	r3, [r7, #32]
 80006c6:	691b      	ldr	r3, [r3, #16]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d027      	beq.n	800071c <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006cc:	6a3b      	ldr	r3, [r7, #32]
 80006ce:	3310      	adds	r3, #16
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fc59 	bl	8000f88 <xTaskRemoveFromEventList>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d01f      	beq.n	800071c <xQueueGenericReceive+0xac>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80006dc:	4b4f      	ldr	r3, [pc, #316]	; (800081c <xQueueGenericReceive+0x1ac>)
 80006de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	f3bf 8f4f 	dsb	sy
 80006e8:	f3bf 8f6f 	isb	sy
 80006ec:	e016      	b.n	800071c <xQueueGenericReceive+0xac>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80006ee:	6a3b      	ldr	r3, [r7, #32]
 80006f0:	69ba      	ldr	r2, [r7, #24]
 80006f2:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80006f4:	6a3b      	ldr	r3, [r7, #32]
 80006f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00f      	beq.n	800071c <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80006fc:	6a3b      	ldr	r3, [r7, #32]
 80006fe:	3324      	adds	r3, #36	; 0x24
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fc41 	bl	8000f88 <xTaskRemoveFromEventList>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d007      	beq.n	800071c <xQueueGenericReceive+0xac>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800070c:	4b43      	ldr	r3, [pc, #268]	; (800081c <xQueueGenericReceive+0x1ac>)
 800070e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	f3bf 8f4f 	dsb	sy
 8000718:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800071c:	f7ff fe8a 	bl	8000434 <vPortExitCritical>
				return pdPASS;
 8000720:	2301      	movs	r3, #1
 8000722:	e077      	b.n	8000814 <xQueueGenericReceive+0x1a4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d103      	bne.n	8000732 <xQueueGenericReceive+0xc2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800072a:	f7ff fe83 	bl	8000434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800072e:	2300      	movs	r3, #0
 8000730:	e070      	b.n	8000814 <xQueueGenericReceive+0x1a4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	2b00      	cmp	r3, #0
 8000736:	d106      	bne.n	8000746 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fc77 	bl	8001030 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000742:	2301      	movs	r3, #1
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000746:	f7ff fe75 	bl	8000434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800074a:	f000 fa79 	bl	8000c40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800074e:	f7ff fe59 	bl	8000404 <vPortEnterCritical>
 8000752:	6a3b      	ldr	r3, [r7, #32]
 8000754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000758:	b25b      	sxtb	r3, r3
 800075a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800075e:	d103      	bne.n	8000768 <xQueueGenericReceive+0xf8>
 8000760:	6a3b      	ldr	r3, [r7, #32]
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800076e:	b25b      	sxtb	r3, r3
 8000770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000774:	d103      	bne.n	800077e <xQueueGenericReceive+0x10e>
 8000776:	6a3b      	ldr	r3, [r7, #32]
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800077e:	f7ff fe59 	bl	8000434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000782:	1d3a      	adds	r2, r7, #4
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fc66 	bl	800105c <xTaskCheckForTimeOut>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d131      	bne.n	80007fa <xQueueGenericReceive+0x18a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000796:	6a38      	ldr	r0, [r7, #32]
 8000798:	f000 f8ba 	bl	8000910 <prvIsQueueEmpty>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d025      	beq.n	80007ee <xQueueGenericReceive+0x17e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80007a2:	6a3b      	ldr	r3, [r7, #32]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d108      	bne.n	80007bc <xQueueGenericReceive+0x14c>
					{
						taskENTER_CRITICAL();
 80007aa:	f7ff fe2b 	bl	8000404 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fd6a 	bl	800128c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80007b8:	f7ff fe3c 	bl	8000434 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	3324      	adds	r3, #36	; 0x24
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fbc9 	bl	8000f5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80007ca:	6a38      	ldr	r0, [r7, #32]
 80007cc:	f000 f84e 	bl	800086c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80007d0:	f000 fa44 	bl	8000c5c <xTaskResumeAll>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	f47f af55 	bne.w	8000686 <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <xQueueGenericReceive+0x1ac>)
 80007de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	f3bf 8f4f 	dsb	sy
 80007e8:	f3bf 8f6f 	isb	sy
 80007ec:	e74b      	b.n	8000686 <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80007ee:	6a38      	ldr	r0, [r7, #32]
 80007f0:	f000 f83c 	bl	800086c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80007f4:	f000 fa32 	bl	8000c5c <xTaskResumeAll>
 80007f8:	e745      	b.n	8000686 <xQueueGenericReceive+0x16>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80007fa:	6a38      	ldr	r0, [r7, #32]
 80007fc:	f000 f836 	bl	800086c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000800:	f000 fa2c 	bl	8000c5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000804:	6a38      	ldr	r0, [r7, #32]
 8000806:	f000 f883 	bl	8000910 <prvIsQueueEmpty>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	f43f af3a 	beq.w	8000686 <xQueueGenericReceive+0x16>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000812:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8000814:	4618      	mov	r0, r3
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	e000ed04 	.word	0xe000ed04

08000820 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	2b00      	cmp	r3, #0
 8000830:	d018      	beq.n	8000864 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	68da      	ldr	r2, [r3, #12]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	441a      	add	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68da      	ldr	r2, [r3, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	429a      	cmp	r2, r3
 800084a:	d303      	bcc.n	8000854 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	68d9      	ldr	r1, [r3, #12]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	461a      	mov	r2, r3
 800085e:	6838      	ldr	r0, [r7, #0]
 8000860:	f003 f950 	bl	8003b04 <memcpy>
	}
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000874:	f7ff fdc6 	bl	8000404 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800087e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000880:	e011      	b.n	80008a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000886:	2b00      	cmp	r3, #0
 8000888:	d012      	beq.n	80008b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3324      	adds	r3, #36	; 0x24
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fb7a 	bl	8000f88 <xTaskRemoveFromEventList>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800089a:	f000 fc23 	bl	80010e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80008a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	dce9      	bgt.n	8000882 <prvUnlockQueue+0x16>
 80008ae:	e000      	b.n	80008b2 <prvUnlockQueue+0x46>
					break;
 80008b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	22ff      	movs	r2, #255	; 0xff
 80008b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80008ba:	f7ff fdbb 	bl	8000434 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80008be:	f7ff fda1 	bl	8000404 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80008ca:	e011      	b.n	80008f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	691b      	ldr	r3, [r3, #16]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d012      	beq.n	80008fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3310      	adds	r3, #16
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fb55 	bl	8000f88 <xTaskRemoveFromEventList>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80008e4:	f000 fbfe 	bl	80010e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80008e8:	7bbb      	ldrb	r3, [r7, #14]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80008f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	dce9      	bgt.n	80008cc <prvUnlockQueue+0x60>
 80008f8:	e000      	b.n	80008fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80008fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	22ff      	movs	r2, #255	; 0xff
 8000900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8000904:	f7ff fd96 	bl	8000434 <vPortExitCritical>
}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000918:	f7ff fd74 	bl	8000404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000920:	2b00      	cmp	r3, #0
 8000922:	d102      	bne.n	800092a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8000924:	2301      	movs	r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	e001      	b.n	800092e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800092e:	f7ff fd81 	bl	8000434 <vPortExitCritical>

	return xReturn;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af04      	add	r7, sp, #16
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	4613      	mov	r3, r2
 800094a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fc05 	bl	8000160 <pvPortMalloc>
 8000956:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d00e      	beq.n	800097c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800095e:	205c      	movs	r0, #92	; 0x5c
 8000960:	f7ff fbfe 	bl	8000160 <pvPortMalloc>
 8000964:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d003      	beq.n	8000974 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	631a      	str	r2, [r3, #48]	; 0x30
 8000972:	e005      	b.n	8000980 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000974:	6978      	ldr	r0, [r7, #20]
 8000976:	f7ff fc05 	bl	8000184 <vPortFree>
 800097a:	e001      	b.n	8000980 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d013      	beq.n	80009ae <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000986:	88fa      	ldrh	r2, [r7, #6]
 8000988:	2300      	movs	r3, #0
 800098a:	9303      	str	r3, [sp, #12]
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	9302      	str	r3, [sp, #8]
 8000990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000992:	9301      	str	r3, [sp, #4]
 8000994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	68b9      	ldr	r1, [r7, #8]
 800099c:	68f8      	ldr	r0, [r7, #12]
 800099e:	f000 f80e 	bl	80009be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80009a2:	69f8      	ldr	r0, [r7, #28]
 80009a4:	f000 f882 	bl	8000aac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
 80009ac:	e002      	b.n	80009b4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80009b4:	69bb      	ldr	r3, [r7, #24]
	}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3720      	adds	r7, #32
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	60f8      	str	r0, [r7, #12]
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
 80009ca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80009cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	461a      	mov	r2, r3
 80009d6:	21a5      	movs	r1, #165	; 0xa5
 80009d8:	f003 f89f 	bl	8003b1a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80009dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009e6:	3b01      	subs	r3, #1
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	f023 0307 	bic.w	r3, r3, #7
 80009f4:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	e012      	b.n	8000a22 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	4413      	add	r3, r2
 8000a02:	7819      	ldrb	r1, [r3, #0]
 8000a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	4413      	add	r3, r2
 8000a0a:	3334      	adds	r3, #52	; 0x34
 8000a0c:	460a      	mov	r2, r1
 8000a0e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	4413      	add	r3, r2
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d006      	beq.n	8000a2a <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d9e9      	bls.n	80009fc <prvInitialiseNewTask+0x3e>
 8000a28:	e000      	b.n	8000a2c <prvInitialiseNewTask+0x6e>
		{
			break;
 8000a2a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d901      	bls.n	8000a3e <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a40:	6a3a      	ldr	r2, [r7, #32]
 8000a42:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a46:	6a3a      	ldr	r2, [r7, #32]
 8000a48:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8000a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a52:	3304      	adds	r3, #4
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fbc6 	bl	80001e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5c:	3318      	adds	r3, #24
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fbc1 	bl	80001e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a6a:	6a3b      	ldr	r3, [r7, #32]
 8000a6c:	f1c3 0205 	rsb	r2, r3, #5
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a88:	683a      	ldr	r2, [r7, #0]
 8000a8a:	68f9      	ldr	r1, [r7, #12]
 8000a8c:	6938      	ldr	r0, [r7, #16]
 8000a8e:	f7ff fc3b 	bl	8000308 <pxPortInitialiseStack>
 8000a92:	4602      	mov	r2, r0
 8000a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a96:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d002      	beq.n	8000aa4 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000aa2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aa4:	bf00      	nop
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000ab4:	f7ff fca6 	bl	8000404 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <prvAddNewTaskToReadyList+0xc0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	4a2b      	ldr	r2, [pc, #172]	; (8000b6c <prvAddNewTaskToReadyList+0xc0>)
 8000ac0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <prvAddNewTaskToReadyList+0xc4>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d109      	bne.n	8000ade <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000aca:	4a29      	ldr	r2, [pc, #164]	; (8000b70 <prvAddNewTaskToReadyList+0xc4>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ad0:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <prvAddNewTaskToReadyList+0xc0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d110      	bne.n	8000afa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000ad8:	f000 fb28 	bl	800112c <prvInitialiseTaskLists>
 8000adc:	e00d      	b.n	8000afa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <prvAddNewTaskToReadyList+0xc8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d109      	bne.n	8000afa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <prvAddNewTaskToReadyList+0xc4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d802      	bhi.n	8000afa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000af4:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <prvAddNewTaskToReadyList+0xc4>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <prvAddNewTaskToReadyList+0xcc>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <prvAddNewTaskToReadyList+0xcc>)
 8000b02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <prvAddNewTaskToReadyList+0xcc>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b10:	2201      	movs	r2, #1
 8000b12:	409a      	lsls	r2, r3
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <prvAddNewTaskToReadyList+0xd0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <prvAddNewTaskToReadyList+0xd0>)
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b22:	4613      	mov	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <prvAddNewTaskToReadyList+0xd4>)
 8000b2c:	441a      	add	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3304      	adds	r3, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4610      	mov	r0, r2
 8000b36:	f7ff fb62 	bl	80001fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000b3a:	f7ff fc7b 	bl	8000434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <prvAddNewTaskToReadyList+0xc8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d00e      	beq.n	8000b64 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <prvAddNewTaskToReadyList+0xc4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d207      	bcs.n	8000b64 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <prvAddNewTaskToReadyList+0xd8>)
 8000b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	f3bf 8f4f 	dsb	sy
 8000b60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000015c 	.word	0x2000015c
 8000b70:	20000084 	.word	0x20000084
 8000b74:	20000168 	.word	0x20000168
 8000b78:	20000178 	.word	0x20000178
 8000b7c:	20000164 	.word	0x20000164
 8000b80:	20000088 	.word	0x20000088
 8000b84:	e000ed04 	.word	0xe000ed04

08000b88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d008      	beq.n	8000bac <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8000b9a:	f000 f851 	bl	8000c40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 fbfd 	bl	80013a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000ba6:	f000 f859 	bl	8000c5c <xTaskResumeAll>
 8000baa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d107      	bne.n	8000bc2 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <vTaskDelay+0x44>)
 8000bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	f3bf 8f4f 	dsb	sy
 8000bbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	e000ed04 	.word	0xe000ed04

08000bd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <vTaskStartScheduler+0x58>)
 8000bd8:	9301      	str	r3, [sp, #4]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2300      	movs	r3, #0
 8000be0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be4:	4911      	ldr	r1, [pc, #68]	; (8000c2c <vTaskStartScheduler+0x5c>)
 8000be6:	4812      	ldr	r0, [pc, #72]	; (8000c30 <vTaskStartScheduler+0x60>)
 8000be8:	f7ff fea8 	bl	800093c <xTaskCreate>
 8000bec:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d114      	bne.n	8000c1e <vTaskStartScheduler+0x4e>
	__asm volatile
 8000bf4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000bf8:	f383 8811 	msr	BASEPRI, r3
 8000bfc:	f3bf 8f6f 	isb	sy
 8000c00:	f3bf 8f4f 	dsb	sy
 8000c04:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <vTaskStartScheduler+0x64>)
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <vTaskStartScheduler+0x68>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <vTaskStartScheduler+0x6c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000c1a:	f7ff fbd5 	bl	80003c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000180 	.word	0x20000180
 8000c2c:	08003cd8 	.word	0x08003cd8
 8000c30:	080010fd 	.word	0x080010fd
 8000c34:	2000017c 	.word	0x2000017c
 8000c38:	20000168 	.word	0x20000168
 8000c3c:	20000160 	.word	0x20000160

08000c40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <vTaskSuspendAll+0x18>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	4a03      	ldr	r2, [pc, #12]	; (8000c58 <vTaskSuspendAll+0x18>)
 8000c4c:	6013      	str	r3, [r2, #0]
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000184 	.word	0x20000184

08000c5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000c6a:	f7ff fbcb 	bl	8000404 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000c6e:	4b39      	ldr	r3, [pc, #228]	; (8000d54 <xTaskResumeAll+0xf8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	4a37      	ldr	r2, [pc, #220]	; (8000d54 <xTaskResumeAll+0xf8>)
 8000c76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c78:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <xTaskResumeAll+0xf8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d161      	bne.n	8000d44 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000c80:	4b35      	ldr	r3, [pc, #212]	; (8000d58 <xTaskResumeAll+0xfc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d05d      	beq.n	8000d44 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c88:	e02e      	b.n	8000ce8 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000c8a:	4b34      	ldr	r3, [pc, #208]	; (8000d5c <xTaskResumeAll+0x100>)
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3318      	adds	r3, #24
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fb0c 	bl	80002b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	3304      	adds	r3, #4
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fb07 	bl	80002b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000caa:	2201      	movs	r2, #1
 8000cac:	409a      	lsls	r2, r3
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <xTaskResumeAll+0x104>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	4a2a      	ldr	r2, [pc, #168]	; (8000d60 <xTaskResumeAll+0x104>)
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4a27      	ldr	r2, [pc, #156]	; (8000d64 <xTaskResumeAll+0x108>)
 8000cc6:	441a      	add	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3304      	adds	r3, #4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4610      	mov	r0, r2
 8000cd0:	f7ff fa95 	bl	80001fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <xTaskResumeAll+0x10c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d302      	bcc.n	8000ce8 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 8000ce2:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <xTaskResumeAll+0x110>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <xTaskResumeAll+0x100>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d1cc      	bne.n	8000c8a <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000cf6:	f000 faa5 	bl	8001244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <xTaskResumeAll+0x114>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d010      	beq.n	8000d28 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000d06:	f000 f837 	bl	8000d78 <xTaskIncrementTick>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <xTaskResumeAll+0x110>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1f1      	bne.n	8000d06 <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <xTaskResumeAll+0x114>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <xTaskResumeAll+0x110>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d009      	beq.n	8000d44 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000d30:	2301      	movs	r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <xTaskResumeAll+0x118>)
 8000d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	f3bf 8f4f 	dsb	sy
 8000d40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000d44:	f7ff fb76 	bl	8000434 <vPortExitCritical>

	return xAlreadyYielded;
 8000d48:	68bb      	ldr	r3, [r7, #8]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000184 	.word	0x20000184
 8000d58:	2000015c 	.word	0x2000015c
 8000d5c:	2000011c 	.word	0x2000011c
 8000d60:	20000164 	.word	0x20000164
 8000d64:	20000088 	.word	0x20000088
 8000d68:	20000084 	.word	0x20000084
 8000d6c:	20000170 	.word	0x20000170
 8000d70:	2000016c 	.word	0x2000016c
 8000d74:	e000ed04 	.word	0xe000ed04

08000d78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d82:	4b48      	ldr	r3, [pc, #288]	; (8000ea4 <xTaskIncrementTick+0x12c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d17c      	bne.n	8000e84 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8000d8a:	4b47      	ldr	r3, [pc, #284]	; (8000ea8 <xTaskIncrementTick+0x130>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000d92:	4a45      	ldr	r2, [pc, #276]	; (8000ea8 <xTaskIncrementTick+0x130>)
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d110      	bne.n	8000dc0 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8000d9e:	4b43      	ldr	r3, [pc, #268]	; (8000eac <xTaskIncrementTick+0x134>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <xTaskIncrementTick+0x138>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a40      	ldr	r2, [pc, #256]	; (8000eac <xTaskIncrementTick+0x134>)
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4a40      	ldr	r2, [pc, #256]	; (8000eb0 <xTaskIncrementTick+0x138>)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	4b40      	ldr	r3, [pc, #256]	; (8000eb4 <xTaskIncrementTick+0x13c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	4a3e      	ldr	r2, [pc, #248]	; (8000eb4 <xTaskIncrementTick+0x13c>)
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	f000 fa42 	bl	8001244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000dc0:	4b3d      	ldr	r3, [pc, #244]	; (8000eb8 <xTaskIncrementTick+0x140>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d34d      	bcc.n	8000e66 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000dca:	4b38      	ldr	r3, [pc, #224]	; (8000eac <xTaskIncrementTick+0x134>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d101      	bne.n	8000dd8 <xTaskIncrementTick+0x60>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e000      	b.n	8000dda <xTaskIncrementTick+0x62>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000dde:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <xTaskIncrementTick+0x140>)
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de4:	601a      	str	r2, [r3, #0]
					break;
 8000de6:	e03e      	b.n	8000e66 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <xTaskIncrementTick+0x134>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d203      	bcs.n	8000e08 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000e00:	4a2d      	ldr	r2, [pc, #180]	; (8000eb8 <xTaskIncrementTick+0x140>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
						break;
 8000e06:	e02e      	b.n	8000e66 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fa51 	bl	80002b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d004      	beq.n	8000e24 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	3318      	adds	r3, #24
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fa48 	bl	80002b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e28:	2201      	movs	r2, #1
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <xTaskIncrementTick+0x144>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	4a22      	ldr	r2, [pc, #136]	; (8000ebc <xTaskIncrementTick+0x144>)
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <xTaskIncrementTick+0x148>)
 8000e44:	441a      	add	r2, r3
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	f7ff f9d6 	bl	80001fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <xTaskIncrementTick+0x14c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d3b4      	bcc.n	8000dca <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8000e60:	2301      	movs	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e64:	e7b1      	b.n	8000dca <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <xTaskIncrementTick+0x14c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e6c:	4914      	ldr	r1, [pc, #80]	; (8000ec0 <xTaskIncrementTick+0x148>)
 8000e6e:	4613      	mov	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	440b      	add	r3, r1
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d907      	bls.n	8000e8e <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	e004      	b.n	8000e8e <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <xTaskIncrementTick+0x150>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <xTaskIncrementTick+0x150>)
 8000e8c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <xTaskIncrementTick+0x154>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 8000e96:	2301      	movs	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8000e9a:	697b      	ldr	r3, [r7, #20]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000184 	.word	0x20000184
 8000ea8:	20000160 	.word	0x20000160
 8000eac:	20000114 	.word	0x20000114
 8000eb0:	20000118 	.word	0x20000118
 8000eb4:	20000174 	.word	0x20000174
 8000eb8:	2000017c 	.word	0x2000017c
 8000ebc:	20000164 	.word	0x20000164
 8000ec0:	20000088 	.word	0x20000088
 8000ec4:	20000084 	.word	0x20000084
 8000ec8:	2000016c 	.word	0x2000016c
 8000ecc:	20000170 	.word	0x20000170

08000ed0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <vTaskSwitchContext+0x78>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <vTaskSwitchContext+0x7c>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000ee4:	e02a      	b.n	8000f3c <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <vTaskSwitchContext+0x7c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <vTaskSwitchContext+0x80>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	f1c3 031f 	rsb	r3, r3, #31
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4a11      	ldr	r2, [pc, #68]	; (8000f54 <vTaskSwitchContext+0x84>)
 8000f0e:	4413      	add	r3, r2
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	3308      	adds	r3, #8
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d104      	bne.n	8000f32 <vTaskSwitchContext+0x62>
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <vTaskSwitchContext+0x88>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000184 	.word	0x20000184
 8000f4c:	20000170 	.word	0x20000170
 8000f50:	20000164 	.word	0x20000164
 8000f54:	20000088 	.word	0x20000088
 8000f58:	20000084 	.word	0x20000084

08000f5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <vTaskPlaceOnEventList+0x28>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	3318      	adds	r3, #24
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff f968 	bl	8000244 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8000f74:	2101      	movs	r1, #1
 8000f76:	6838      	ldr	r0, [r7, #0]
 8000f78:	f000 fa12 	bl	80013a0 <prvAddCurrentTaskToDelayedList>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000084 	.word	0x20000084

08000f88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	3318      	adds	r3, #24
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f989 	bl	80002b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <xTaskRemoveFromEventList+0x90>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d11c      	bne.n	8000fe4 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	3304      	adds	r3, #4
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff f980 	bl	80002b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	2201      	movs	r2, #1
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <xTaskRemoveFromEventList+0x94>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <xTaskRemoveFromEventList+0x94>)
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4a13      	ldr	r2, [pc, #76]	; (8001020 <xTaskRemoveFromEventList+0x98>)
 8000fd4:	441a      	add	r2, r3
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4610      	mov	r0, r2
 8000fde:	f7ff f90e 	bl	80001fe <vListInsertEnd>
 8000fe2:	e005      	b.n	8000ff0 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	3318      	adds	r3, #24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480e      	ldr	r0, [pc, #56]	; (8001024 <xTaskRemoveFromEventList+0x9c>)
 8000fec:	f7ff f907 	bl	80001fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <xTaskRemoveFromEventList+0xa0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d905      	bls.n	800100a <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8000ffe:	2301      	movs	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <xTaskRemoveFromEventList+0xa4>)
 8001004:	2201      	movs	r2, #1
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e001      	b.n	800100e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000184 	.word	0x20000184
 800101c:	20000164 	.word	0x20000164
 8001020:	20000088 	.word	0x20000088
 8001024:	2000011c 	.word	0x2000011c
 8001028:	20000084 	.word	0x20000084
 800102c:	20000170 	.word	0x20000170

08001030 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <vTaskSetTimeOutState+0x24>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <vTaskSetTimeOutState+0x28>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	605a      	str	r2, [r3, #4]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000174 	.word	0x20000174
 8001058:	20000160 	.word	0x20000160

0800105c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8001066:	f7ff f9cd 	bl	8000404 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <xTaskCheckForTimeOut+0x80>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001078:	d102      	bne.n	8001080 <xTaskCheckForTimeOut+0x24>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e026      	b.n	80010ce <xTaskCheckForTimeOut+0x72>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <xTaskCheckForTimeOut+0x84>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d007      	beq.n	800109c <xTaskCheckForTimeOut+0x40>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	429a      	cmp	r2, r3
 8001094:	d802      	bhi.n	800109c <xTaskCheckForTimeOut+0x40>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001096:	2301      	movs	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	e018      	b.n	80010ce <xTaskCheckForTimeOut+0x72>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	1ad2      	subs	r2, r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d20e      	bcs.n	80010ca <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6859      	ldr	r1, [r3, #4]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1acb      	subs	r3, r1, r3
 80010b8:	441a      	add	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffb6 	bl	8001030 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	e001      	b.n	80010ce <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
 80010ca:	2301      	movs	r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80010ce:	f7ff f9b1 	bl	8000434 <vPortExitCritical>

	return xReturn;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000160 	.word	0x20000160
 80010e0:	20000174 	.word	0x20000174

080010e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <vTaskMissedYield+0x14>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000170 	.word	0x20000170

080010fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001104:	f000 f852 	bl	80011ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <prvIdleTask+0x28>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d9f9      	bls.n	8001104 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <prvIdleTask+0x2c>)
 8001112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	f3bf 8f4f 	dsb	sy
 800111c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001120:	e7f0      	b.n	8001104 <prvIdleTask+0x8>
 8001122:	bf00      	nop
 8001124:	20000088 	.word	0x20000088
 8001128:	e000ed04 	.word	0xe000ed04

0800112c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	e00c      	b.n	8001152 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <prvInitialiseTaskLists+0x60>)
 8001144:	4413      	add	r3, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f82e 	bl	80001a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3301      	adds	r3, #1
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b04      	cmp	r3, #4
 8001156:	d9ef      	bls.n	8001138 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <prvInitialiseTaskLists+0x64>)
 800115a:	f7ff f825 	bl	80001a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <prvInitialiseTaskLists+0x68>)
 8001160:	f7ff f822 	bl	80001a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <prvInitialiseTaskLists+0x6c>)
 8001166:	f7ff f81f 	bl	80001a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800116a:	480c      	ldr	r0, [pc, #48]	; (800119c <prvInitialiseTaskLists+0x70>)
 800116c:	f7ff f81c 	bl	80001a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001170:	480b      	ldr	r0, [pc, #44]	; (80011a0 <prvInitialiseTaskLists+0x74>)
 8001172:	f7ff f819 	bl	80001a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <prvInitialiseTaskLists+0x78>)
 8001178:	4a05      	ldr	r2, [pc, #20]	; (8001190 <prvInitialiseTaskLists+0x64>)
 800117a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <prvInitialiseTaskLists+0x7c>)
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <prvInitialiseTaskLists+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000088 	.word	0x20000088
 8001190:	200000ec 	.word	0x200000ec
 8001194:	20000100 	.word	0x20000100
 8001198:	2000011c 	.word	0x2000011c
 800119c:	20000130 	.word	0x20000130
 80011a0:	20000148 	.word	0x20000148
 80011a4:	20000114 	.word	0x20000114
 80011a8:	20000118 	.word	0x20000118

080011ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80011b2:	e028      	b.n	8001206 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80011b4:	f7ff fd44 	bl	8000c40 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <prvCheckTasksWaitingTermination+0x6c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf0c      	ite	eq
 80011c0:	2301      	moveq	r3, #1
 80011c2:	2300      	movne	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80011c8:	f7ff fd48 	bl	8000c5c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d119      	bne.n	8001206 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80011d2:	f7ff f917 	bl	8000404 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <prvCheckTasksWaitingTermination+0x6c>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	3304      	adds	r3, #4
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f866 	bl	80002b4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <prvCheckTasksWaitingTermination+0x70>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <prvCheckTasksWaitingTermination+0x70>)
 80011f0:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <prvCheckTasksWaitingTermination+0x74>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	4a09      	ldr	r2, [pc, #36]	; (8001220 <prvCheckTasksWaitingTermination+0x74>)
 80011fa:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80011fc:	f7ff f91a 	bl	8000434 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001200:	6838      	ldr	r0, [r7, #0]
 8001202:	f000 f80f 	bl	8001224 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <prvCheckTasksWaitingTermination+0x74>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1d2      	bne.n	80011b4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000130 	.word	0x20000130
 800121c:	2000015c 	.word	0x2000015c
 8001220:	20000144 	.word	0x20000144

08001224 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	4618      	mov	r0, r3
 8001232:	f7fe ffa7 	bl	8000184 <vPortFree>
			vPortFree( pxTCB );
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7fe ffa4 	bl	8000184 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <prvResetNextTaskUnblockTime+0x40>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <prvResetNextTaskUnblockTime+0x14>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <prvResetNextTaskUnblockTime+0x16>
 8001258:	2300      	movs	r3, #0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d004      	beq.n	8001268 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <prvResetNextTaskUnblockTime+0x44>)
 8001260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001264:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001266:	e008      	b.n	800127a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <prvResetNextTaskUnblockTime+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <prvResetNextTaskUnblockTime+0x44>)
 8001278:	6013      	str	r3, [r2, #0]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	20000114 	.word	0x20000114
 8001288:	2000017c 	.word	0x2000017c

0800128c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d062      	beq.n	8001364 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a2:	4b32      	ldr	r3, [pc, #200]	; (800136c <vTaskPriorityInherit+0xe0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d25b      	bcs.n	8001364 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db06      	blt.n	80012c2 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012b4:	4b2d      	ldr	r3, [pc, #180]	; (800136c <vTaskPriorityInherit+0xe0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	f1c3 0205 	rsb	r2, r3, #5
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6959      	ldr	r1, [r3, #20]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4a27      	ldr	r2, [pc, #156]	; (8001370 <vTaskPriorityInherit+0xe4>)
 80012d4:	4413      	add	r3, r2
 80012d6:	4299      	cmp	r1, r3
 80012d8:	d101      	bne.n	80012de <vTaskPriorityInherit+0x52>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <vTaskPriorityInherit+0x54>
 80012de:	2300      	movs	r3, #0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d03a      	beq.n	800135a <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3304      	adds	r3, #4
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7fe ffe3 	bl	80002b4 <uxListRemove>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d115      	bne.n	8001320 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f8:	491d      	ldr	r1, [pc, #116]	; (8001370 <vTaskPriorityInherit+0xe4>)
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10a      	bne.n	8001320 <vTaskPriorityInherit+0x94>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	2201      	movs	r2, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43da      	mvns	r2, r3
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <vTaskPriorityInherit+0xe8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4013      	ands	r3, r2
 800131c:	4a15      	ldr	r2, [pc, #84]	; (8001374 <vTaskPriorityInherit+0xe8>)
 800131e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <vTaskPriorityInherit+0xe0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132e:	2201      	movs	r2, #1
 8001330:	409a      	lsls	r2, r3
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <vTaskPriorityInherit+0xe8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4313      	orrs	r3, r2
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <vTaskPriorityInherit+0xe8>)
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4a09      	ldr	r2, [pc, #36]	; (8001370 <vTaskPriorityInherit+0xe4>)
 800134a:	441a      	add	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3304      	adds	r3, #4
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f7fe ff53 	bl	80001fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001358:	e004      	b.n	8001364 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <vTaskPriorityInherit+0xe0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000084 	.word	0x20000084
 8001370:	20000088 	.word	0x20000088
 8001374:	20000164 	.word	0x20000164

08001378 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <pvTaskIncrementMutexHeldCount+0x24>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <pvTaskIncrementMutexHeldCount+0x24>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800138a:	3201      	adds	r2, #1
 800138c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800138e:	4b03      	ldr	r3, [pc, #12]	; (800139c <pvTaskIncrementMutexHeldCount+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
	}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000084 	.word	0x20000084

080013a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80013aa:	4b29      	ldr	r3, [pc, #164]	; (8001450 <prvAddCurrentTaskToDelayedList+0xb0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80013b0:	4b28      	ldr	r3, [pc, #160]	; (8001454 <prvAddCurrentTaskToDelayedList+0xb4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3304      	adds	r3, #4
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7fe ff7c 	bl	80002b4 <uxListRemove>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10b      	bne.n	80013da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80013c2:	4b24      	ldr	r3, [pc, #144]	; (8001454 <prvAddCurrentTaskToDelayedList+0xb4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c8:	2201      	movs	r2, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <prvAddCurrentTaskToDelayedList+0xb8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4013      	ands	r3, r2
 80013d6:	4a20      	ldr	r2, [pc, #128]	; (8001458 <prvAddCurrentTaskToDelayedList+0xb8>)
 80013d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013e0:	d10a      	bne.n	80013f8 <prvAddCurrentTaskToDelayedList+0x58>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d007      	beq.n	80013f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <prvAddCurrentTaskToDelayedList+0xb4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3304      	adds	r3, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	481a      	ldr	r0, [pc, #104]	; (800145c <prvAddCurrentTaskToDelayedList+0xbc>)
 80013f2:	f7fe ff04 	bl	80001fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80013f6:	e026      	b.n	8001446 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	429a      	cmp	r2, r3
 800140e:	d209      	bcs.n	8001424 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3304      	adds	r3, #4
 800141a:	4619      	mov	r1, r3
 800141c:	4610      	mov	r0, r2
 800141e:	f7fe ff11 	bl	8000244 <vListInsert>
}
 8001422:	e010      	b.n	8001446 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3304      	adds	r3, #4
 800142e:	4619      	mov	r1, r3
 8001430:	4610      	mov	r0, r2
 8001432:	f7fe ff07 	bl	8000244 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	429a      	cmp	r2, r3
 800143e:	d202      	bcs.n	8001446 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001440:	4a09      	ldr	r2, [pc, #36]	; (8001468 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	6013      	str	r3, [r2, #0]
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000160 	.word	0x20000160
 8001454:	20000084 	.word	0x20000084
 8001458:	20000164 	.word	0x20000164
 800145c:	20000148 	.word	0x20000148
 8001460:	20000118 	.word	0x20000118
 8001464:	20000114 	.word	0x20000114
 8001468:	2000017c 	.word	0x2000017c

0800146c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	78db      	ldrb	r3, [r3, #3]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	78db      	ldrb	r3, [r3, #3]
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	789b      	ldrb	r3, [r3, #2]
 80014a8:	461a      	mov	r2, r3
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d044      	beq.n	8001544 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	e038      	b.n	8001538 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80014c6:	2201      	movs	r2, #1
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d126      	bne.n	8001532 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80014ea:	220f      	movs	r2, #15
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	4013      	ands	r3, r2
 80014fc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4313      	orrs	r3, r2
 800150a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	78db      	ldrb	r3, [r3, #3]
 8001510:	2b28      	cmp	r3, #40	; 0x28
 8001512:	d105      	bne.n	8001520 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001514:	2201      	movs	r2, #1
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	409a      	lsls	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	e008      	b.n	8001532 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	78db      	ldrb	r3, [r3, #3]
 8001524:	2b48      	cmp	r3, #72	; 0x48
 8001526:	d104      	bne.n	8001532 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001528:	2201      	movs	r2, #1
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	409a      	lsls	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	3301      	adds	r3, #1
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2b07      	cmp	r3, #7
 800153c:	d9c3      	bls.n	80014c6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	2bff      	cmp	r3, #255	; 0xff
 800154a:	d946      	bls.n	80015da <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	e03a      	b.n	80015ce <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	3308      	adds	r3, #8
 800155c:	2201      	movs	r2, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	429a      	cmp	r2, r3
 8001576:	d127      	bne.n	80015c8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800157e:	220f      	movs	r2, #15
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	43db      	mvns	r3, r3
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	4013      	ands	r3, r2
 8001590:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	4313      	orrs	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	78db      	ldrb	r3, [r3, #3]
 80015a4:	2b28      	cmp	r3, #40	; 0x28
 80015a6:	d105      	bne.n	80015b4 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	3308      	adds	r3, #8
 80015ac:	2201      	movs	r2, #1
 80015ae:	409a      	lsls	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	78db      	ldrb	r3, [r3, #3]
 80015b8:	2b48      	cmp	r3, #72	; 0x48
 80015ba:	d105      	bne.n	80015c8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	3308      	adds	r3, #8
 80015c0:	2201      	movs	r2, #1
 80015c2:	409a      	lsls	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	3301      	adds	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b07      	cmp	r3, #7
 80015d2:	d9c1      	bls.n	8001558 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	605a      	str	r2, [r3, #4]
  }
}
 80015da:	bf00      	nop
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80015f0:	887a      	ldrh	r2, [r7, #2]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	611a      	str	r2, [r3, #16]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800160c:	887a      	ldrh	r2, [r7, #2]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	615a      	str	r2, [r3, #20]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800162e:	4909      	ldr	r1, [pc, #36]	; (8001654 <RCC_APB2PeriphClockCmd+0x38>)
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <RCC_APB2PeriphClockCmd+0x38>)
 8001632:	699a      	ldr	r2, [r3, #24]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4313      	orrs	r3, r2
 8001638:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800163a:	e006      	b.n	800164a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800163c:	4905      	ldr	r1, [pc, #20]	; (8001654 <RCC_APB2PeriphClockCmd+0x38>)
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <RCC_APB2PeriphClockCmd+0x38>)
 8001640:	699a      	ldr	r2, [r3, #24]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	43db      	mvns	r3, r3
 8001646:	4013      	ands	r3, r2
 8001648:	618b      	str	r3, [r1, #24]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	40021000 	.word	0x40021000

08001658 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 800166c:	89fb      	ldrh	r3, [r7, #14]
 800166e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001672:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	881a      	ldrh	r2, [r3, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	885b      	ldrh	r3, [r3, #2]
 800167c:	4313      	orrs	r3, r2
 800167e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001684:	4313      	orrs	r3, r2
 8001686:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800168c:	4313      	orrs	r3, r2
 800168e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001694:	4313      	orrs	r3, r2
 8001696:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800169c:	4313      	orrs	r3, r2
 800169e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	89fb      	ldrh	r3, [r7, #14]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	89fa      	ldrh	r2, [r7, #14]
 80016ba:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	8b9b      	ldrh	r3, [r3, #28]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	8a1a      	ldrh	r2, [r3, #16]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	821a      	strh	r2, [r3, #16]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	460b      	mov	r3, r1
 80016e8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8001700:	e007      	b.n	8001712 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800170c:	b29a      	uxth	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	801a      	strh	r2, [r3, #0]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	819a      	strh	r2, [r3, #12]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	899b      	ldrh	r3, [r3, #12]
 8001744:	b29b      	uxth	r3, r3
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d008      	beq.n	8001774 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	889b      	ldrh	r3, [r3, #4]
 8001766:	b29b      	uxth	r3, r3
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	b29a      	uxth	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 8001772:	e007      	b.n	8001784 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	889b      	ldrh	r3, [r3, #4]
 8001778:	b29b      	uxth	r3, r3
 800177a:	f023 0304 	bic.w	r3, r3, #4
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	809a      	strh	r2, [r3, #4]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	891b      	ldrh	r3, [r3, #8]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	4013      	ands	r3, r2
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80017ae:	2301      	movs	r3, #1
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	e001      	b.n	80017b8 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <MqttClient_HandlePayload>:
#endif

/* Private functions */
static int MqttClient_HandlePayload(MqttClient* client, MqttMessage* msg,
    int timeout_ms, void* p_decode, word16* packet_id)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b091      	sub	sp, #68	; 0x44
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 80017d2:	2300      	movs	r3, #0
 80017d4:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch (msg->type)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	791b      	ldrb	r3, [r3, #4]
 80017da:	3b02      	subs	r3, #2
 80017dc:	2b0b      	cmp	r3, #11
 80017de:	f200 817e 	bhi.w	8001ade <MqttClient_HandlePayload+0x31a>
 80017e2:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <MqttClient_HandlePayload+0x24>)
 80017e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e8:	08001819 	.word	0x08001819
 80017ec:	0800183f 	.word	0x0800183f
 80017f0:	080019cf 	.word	0x080019cf
 80017f4:	080019cf 	.word	0x080019cf
 80017f8:	080019cf 	.word	0x080019cf
 80017fc:	080019cf 	.word	0x080019cf
 8001800:	08001adf 	.word	0x08001adf
 8001804:	08001a5f 	.word	0x08001a5f
 8001808:	08001adf 	.word	0x08001adf
 800180c:	08001a95 	.word	0x08001a95
 8001810:	08001adf 	.word	0x08001adf
 8001814:	08001acb 	.word	0x08001acb
    {
        case MQTT_PACKET_TYPE_CONNECT_ACK:
        {
            /* Decode connect ack */
            MqttConnectAck connect_ack, *p_connect_ack = &connect_ack;
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
            if (p_decode) {
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MqttClient_HandlePayload+0x64>
                p_connect_ack = (MqttConnectAck*)p_decode;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            rc = MqttDecode_ConnectAck(client->rx_buf, client->packet.buf_len,
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6918      	ldr	r0, [r3, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001832:	4619      	mov	r1, r3
 8001834:	f000 fe12 	bl	800245c <MqttDecode_ConnectAck>
 8001838:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                                p_connect_ack);
            break;
 800183a:	bf00      	nop
 800183c:	e154      	b.n	8001ae8 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_PUBLISH:
        {
            byte msg_done;

            if (msg->buffer_new) {
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	7e1b      	ldrb	r3, [r3, #24]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00d      	beq.n	8001862 <MqttClient_HandlePayload+0x9e>
                /* Decode publish message */
                rc = MqttDecode_Publish(client->rx_buf, client->packet.buf_len, msg);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6918      	ldr	r0, [r3, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	4619      	mov	r1, r3
 8001852:	f000 feca 	bl	80025ea <MqttDecode_Publish>
 8001856:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 8001858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800185a:	2b00      	cmp	r3, #0
 800185c:	dc01      	bgt.n	8001862 <MqttClient_HandlePayload+0x9e>
                    return rc;
 800185e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001860:	e143      	b.n	8001aea <MqttClient_HandlePayload+0x326>
            }

            /* Handle packet callback and read remaining payload */
            do {
                /* Determine if message is done */
                msg_done = ((msg->buffer_pos + msg->buffer_len) >= msg->total_len) ? 1 : 0;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	6a1a      	ldr	r2, [r3, #32]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	441a      	add	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	bf2c      	ite	cs
 8001874:	2301      	movcs	r3, #1
 8001876:	2300      	movcc	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if (msg->stat != MQTT_MSG_READ_PAYLOAD) {
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b04      	cmp	r3, #4
 8001884:	d029      	beq.n	80018da <MqttClient_HandlePayload+0x116>
                    /* Issue callback for new message */
                    if (client->msg_cb) {
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188a:	2b00      	cmp	r3, #0
 800188c:	d022      	beq.n	80018d4 <MqttClient_HandlePayload+0x110>
                        if (!msg->buffer_new) {
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	7e1b      	ldrb	r3, [r3, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d105      	bne.n	80018a2 <MqttClient_HandlePayload+0xde>
                            /* Reset topic name since valid on new message only */
                            msg->topic_name = NULL;
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
                            msg->topic_name_len = 0;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2200      	movs	r2, #0
 80018a0:	819a      	strh	r2, [r3, #12]
                        }
                        /* if using the temp publish message buffer,
                           then populate message context with client context */
                        if (&client->msg == msg)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d103      	bne.n	80018b6 <MqttClient_HandlePayload+0xf2>
                            msg->ctx = client->ctx;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24
                        rc = client->msg_cb(client, msg, msg->buffer_new, msg_done);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	7e1a      	ldrb	r2, [r3, #24]
 80018be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	47a0      	blx	r4
 80018c8:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc != MQTT_CODE_SUCCESS) {
 80018ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MqttClient_HandlePayload+0x110>
                            return rc;
 80018d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d2:	e10a      	b.n	8001aea <MqttClient_HandlePayload+0x326>
                        };
                    }
                    msg->buffer_new = 0;
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2200      	movs	r2, #0
 80018d8:	761a      	strb	r2, [r3, #24]
                }

                /* Read payload */
                if (!msg_done) {
 80018da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d13b      	bne.n	800195a <MqttClient_HandlePayload+0x196>
                    int msg_len;

                    /* add last length to position and reset len */
                    msg->buffer_pos += msg->buffer_len;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	6a1a      	ldr	r2, [r3, #32]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	441a      	add	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	621a      	str	r2, [r3, #32]
                    msg->buffer_len = 0;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]

                    /* set state to reading payload */
                    msg->stat = MQTT_MSG_READ_PAYLOAD;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2204      	movs	r2, #4
 80018fa:	701a      	strb	r2, [r3, #0]

                    msg_len = (msg->total_len - msg->buffer_pos);
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
                    if (msg_len > client->rx_buf_len) {
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	695a      	ldr	r2, [r3, #20]
 800190c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190e:	429a      	cmp	r2, r3
 8001910:	da02      	bge.n	8001918 <MqttClient_HandlePayload+0x154>
                        msg_len = client->rx_buf_len;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
                    }

                    /* make sure there is something to read */
                    rc = MQTT_CODE_SUCCESS;
 8001918:	2300      	movs	r3, #0
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    if (msg_len > 0) {
 800191c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191e:	2b00      	cmp	r3, #0
 8001920:	dd16      	ble.n	8001950 <MqttClient_HandlePayload+0x18c>
                        rc = MqttSocket_Read(client, client->rx_buf, msg_len, timeout_ms);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6919      	ldr	r1, [r3, #16]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f001 f959 	bl	8002be2 <MqttSocket_Read>
 8001930:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc > 0) {
 8001932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001934:	2b00      	cmp	r3, #0
 8001936:	dd0b      	ble.n	8001950 <MqttClient_HandlePayload+0x18c>
                            /* make sure state is back to read */
                            msg->stat = MQTT_MSG_READ;
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2203      	movs	r2, #3
 800193c:	701a      	strb	r2, [r3, #0]

                            /* Update message */
                            msg->buffer = client->rx_buf;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	691a      	ldr	r2, [r3, #16]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	615a      	str	r2, [r3, #20]
                            msg->buffer_len = rc;
 8001946:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	61da      	str	r2, [r3, #28]
                            rc = MQTT_CODE_SUCCESS;
 800194c:	2300      	movs	r3, #0
 800194e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }
                    if (rc < 0) {
 8001950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001952:	2b00      	cmp	r3, #0
 8001954:	da01      	bge.n	800195a <MqttClient_HandlePayload+0x196>
                        return rc;
 8001956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001958:	e0c7      	b.n	8001aea <MqttClient_HandlePayload+0x326>
                    }
                }
            } while (!msg_done);
 800195a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800195e:	2b00      	cmp	r3, #0
 8001960:	f43f af7f 	beq.w	8001862 <MqttClient_HandlePayload+0x9e>

            /* Handle Qos */
            if (msg->qos > MQTT_QOS_0) {
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	795b      	ldrb	r3, [r3, #5]
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80ba 	beq.w	8001ae2 <MqttClient_HandlePayload+0x31e>
                MqttPublishResp publish_resp;
                MqttPacketType type;

                *packet_id = msg->packet_id;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	885a      	ldrh	r2, [r3, #2]
 8001972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001974:	801a      	strh	r2, [r3, #0]

                /* Determine packet type to write */
                type = (msg->qos == MQTT_QOS_1) ?
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	795b      	ldrb	r3, [r3, #5]
                    MQTT_PACKET_TYPE_PUBLISH_ACK :
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <MqttClient_HandlePayload+0x1be>
 800197e:	2304      	movs	r3, #4
 8001980:	e000      	b.n	8001984 <MqttClient_HandlePayload+0x1c0>
 8001982:	2305      	movs	r3, #5
                type = (msg->qos == MQTT_QOS_1) ?
 8001984:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    MQTT_PACKET_TYPE_PUBLISH_REC;
                publish_resp.packet_id = msg->packet_id;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	885b      	ldrh	r3, [r3, #2]
 800198c:	843b      	strh	r3, [r7, #32]

                /* Encode publish response */
                rc = MqttEncode_PublishResp(client->tx_buf,
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6898      	ldr	r0, [r3, #8]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	68d9      	ldr	r1, [r3, #12]
 8001996:	f107 0320 	add.w	r3, r7, #32
 800199a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800199e:	f000 fe9b 	bl	80026d8 <MqttEncode_PublishResp>
 80019a2:	63f8      	str	r0, [r7, #60]	; 0x3c
                                    client->tx_buf_len, type, &publish_resp);
                if (rc <= 0) {
 80019a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	dc01      	bgt.n	80019ae <MqttClient_HandlePayload+0x1ea>
                    return rc;
 80019aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ac:	e09d      	b.n	8001aea <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf,
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6899      	ldr	r1, [r3, #8]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	461a      	mov	r2, r3
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 ffaf 	bl	8002928 <MqttPacket_Write>
 80019ca:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                    client->packet.buf_len);
            }
            break;
 80019cc:	e089      	b.n	8001ae2 <MqttClient_HandlePayload+0x31e>
        case MQTT_PACKET_TYPE_PUBLISH_ACK:
        case MQTT_PACKET_TYPE_PUBLISH_REC:
        case MQTT_PACKET_TYPE_PUBLISH_REL:
        case MQTT_PACKET_TYPE_PUBLISH_COMP:
        {
            MqttPublishResp publish_resp, *p_publish_resp = &publish_resp;
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	633b      	str	r3, [r7, #48]	; 0x30
            if (p_decode) {
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MqttClient_HandlePayload+0x21a>
                p_publish_resp = (MqttPublishResp*)p_decode;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* Decode publish response message */
            rc = MqttDecode_PublishResp(client->rx_buf, client->packet.buf_len,
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6918      	ldr	r0, [r3, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	791a      	ldrb	r2, [r3, #4]
 80019ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ec:	f000 feba 	bl	8002764 <MqttDecode_PublishResp>
 80019f0:	63f8      	str	r0, [r7, #60]	; 0x3c
                msg->type, p_publish_resp);
            if (rc <= 0) {
 80019f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	dc01      	bgt.n	80019fc <MqttClient_HandlePayload+0x238>
                return rc;
 80019f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019fa:	e076      	b.n	8001aea <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_publish_resp->packet_id;
 80019fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fe:	881a      	ldrh	r2, [r3, #0]
 8001a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a02:	801a      	strh	r2, [r3, #0]

            /* If Qos then send response */
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	791b      	ldrb	r3, [r3, #4]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d003      	beq.n	8001a14 <MqttClient_HandlePayload+0x250>
                msg->type == MQTT_PACKET_TYPE_PUBLISH_REL) {
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	791b      	ldrb	r3, [r3, #4]
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 8001a10:	2b06      	cmp	r3, #6
 8001a12:	d168      	bne.n	8001ae6 <MqttClient_HandlePayload+0x322>

                /* Encode publish response */
                publish_resp.packet_id = p_publish_resp->packet_id;
 8001a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	83bb      	strh	r3, [r7, #28]
                rc = MqttEncode_PublishResp(client->tx_buf,
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6898      	ldr	r0, [r3, #8]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	68d9      	ldr	r1, [r3, #12]
                    client->tx_buf_len, msg->type+1, &publish_resp);
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	791b      	ldrb	r3, [r3, #4]
                rc = MqttEncode_PublishResp(client->tx_buf,
 8001a26:	3301      	adds	r3, #1
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	f000 fe53 	bl	80026d8 <MqttEncode_PublishResp>
 8001a32:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 8001a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	dc01      	bgt.n	8001a3e <MqttClient_HandlePayload+0x27a>
                    return rc;
 8001a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a3c:	e055      	b.n	8001aea <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf, client->packet.buf_len);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6899      	ldr	r1, [r3, #8]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	461a      	mov	r2, r3
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 ff67 	bl	8002928 <MqttPacket_Write>
 8001a5a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001a5c:	e044      	b.n	8001ae8 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_SUBSCRIBE_ACK:
        {
            /* Decode subscribe ack */
            MqttSubscribeAck subscribe_ack;
            MqttSubscribeAck *p_subscribe_ack = &subscribe_ack;
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (p_decode) {
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MqttClient_HandlePayload+0x2aa>
                p_subscribe_ack = (MqttSubscribeAck*)p_decode;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            rc = MqttDecode_SubscribeAck(client->rx_buf, client->packet.buf_len,
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6918      	ldr	r0, [r3, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f000 feb0 	bl	80027de <MqttDecode_SubscribeAck>
 8001a7e:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_subscribe_ack);
            if (rc <= 0) {
 8001a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	dc01      	bgt.n	8001a8a <MqttClient_HandlePayload+0x2c6>
                return rc;
 8001a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a88:	e02f      	b.n	8001aea <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_subscribe_ack->packet_id;
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	881a      	ldrh	r2, [r3, #0]
 8001a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a90:	801a      	strh	r2, [r3, #0]
 8001a92:	e029      	b.n	8001ae8 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK:
        {
            /* Decode unsubscribe ack */
            MqttUnsubscribeAck unsubscribe_ack;
            MqttUnsubscribeAck *p_unsubscribe_ack = &unsubscribe_ack;
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28

            if (p_decode) {
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MqttClient_HandlePayload+0x2e0>
                p_unsubscribe_ack = (MqttUnsubscribeAck*)p_decode;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            rc = MqttDecode_UnsubscribeAck(client->rx_buf, client->packet.buf_len,
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6918      	ldr	r0, [r3, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f000 fed5 	bl	800285e <MqttDecode_UnsubscribeAck>
 8001ab4:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_unsubscribe_ack);
            if (rc <= 0) {
 8001ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	dc01      	bgt.n	8001ac0 <MqttClient_HandlePayload+0x2fc>
                return rc;
 8001abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001abe:	e014      	b.n	8001aea <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_unsubscribe_ack->packet_id;
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	881a      	ldrh	r2, [r3, #0]
 8001ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ac6:	801a      	strh	r2, [r3, #0]
 8001ac8:	e00e      	b.n	8001ae8 <MqttClient_HandlePayload+0x324>
            break;
        }
        case MQTT_PACKET_TYPE_PING_RESP:
        {
            /* Decode ping */
            rc = MqttDecode_Ping(client->rx_buf, client->packet.buf_len);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	f000 feff 	bl	80028d8 <MqttDecode_Ping>
 8001ada:	63f8      	str	r0, [r7, #60]	; 0x3c
            break;
 8001adc:	e004      	b.n	8001ae8 <MqttClient_HandlePayload+0x324>
            /* Other types are server side only, ignore */
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitMessage: Invalid client packet type %u!",
                msg->type);
        #endif
            break;
 8001ade:	bf00      	nop
 8001ae0:	e002      	b.n	8001ae8 <MqttClient_HandlePayload+0x324>
            break;
 8001ae2:	bf00      	nop
 8001ae4:	e000      	b.n	8001ae8 <MqttClient_HandlePayload+0x324>
            break;
 8001ae6:	bf00      	nop
        }
    } /* switch (msg->type) */

    return rc;
 8001ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3744      	adds	r7, #68	; 0x44
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd90      	pop	{r4, r7, pc}
 8001af2:	bf00      	nop

08001af4 <MqttClient_WaitType>:

static int MqttClient_WaitType(MqttClient *client, MqttMessage* msg,
    int timeout_ms, byte wait_type, word16 wait_packet_id, void* p_decode)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	70fb      	strb	r3, [r7, #3]
    int rc;
    word16 packet_id = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	82fb      	strh	r3, [r7, #22]

wait_again:

    switch (msg->stat)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d85e      	bhi.n	8001bcc <MqttClient_WaitType+0xd8>
 8001b0e:	a201      	add	r2, pc, #4	; (adr r2, 8001b14 <MqttClient_WaitType+0x20>)
 8001b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b14:	08001b29 	.word	0x08001b29
 8001b18:	08001b2f 	.word	0x08001b2f
 8001b1c:	08001bcd 	.word	0x08001bcd
 8001b20:	08001b85 	.word	0x08001b85
 8001b24:	08001b85 	.word	0x08001b85
    {
        case MQTT_MSG_BEGIN:
        {
            /* reset the packet state */
            client->packet.stat = MQTT_PK_BEGIN;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	771a      	strb	r2, [r3, #28]
        case MQTT_MSG_WAIT:
        {
            MqttPacket* header;

            /* Wait for packet */
            rc = MqttPacket_Read(client, client->rx_buf, client->rx_buf_len, timeout_ms);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6919      	ldr	r1, [r3, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 ff08 	bl	800294e <MqttPacket_Read>
 8001b3e:	61f8      	str	r0, [r7, #28]
            if (rc <= 0) {
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	dc01      	bgt.n	8001b4a <MqttClient_WaitType+0x56>
                return rc;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	e049      	b.n	8001bde <MqttClient_WaitType+0xea>
            }

            msg->stat = MQTT_MSG_WAIT;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
            client->packet.buf_len = rc;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	629a      	str	r2, [r3, #40]	; 0x28

            /* Determine packet type */
            header = (MqttPacket*)client->rx_buf;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	61bb      	str	r3, [r7, #24]
            msg->type = MQTT_PACKET_TYPE_GET(header->type_flags);
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	711a      	strb	r2, [r3, #4]
            msg->qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	105b      	asrs	r3, r3, #1
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	715a      	strb	r2, [r3, #5]
            msg->buffer_new = 1;
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	761a      	strb	r2, [r3, #24]
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("Read Packet: Len %d, Type %d, Qos %d",
                client->packet.buf_len, msg->type, msg->qos);
        #endif

            msg->stat = MQTT_MSG_READ;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2203      	movs	r2, #3
 8001b82:	701a      	strb	r2, [r3, #0]
        }

        case MQTT_MSG_READ:
        case MQTT_MSG_READ_PAYLOAD:
        {
            rc = MqttClient_HandlePayload(client, msg, timeout_ms, p_decode,
 8001b84:	f107 0316 	add.w	r3, r7, #22
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	68b9      	ldr	r1, [r7, #8]
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7ff fe17 	bl	80017c4 <MqttClient_HandlePayload>
 8001b96:	61f8      	str	r0, [r7, #28]
                                                                &packet_id);
            if (rc < 0) {
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	da01      	bge.n	8001ba2 <MqttClient_WaitType+0xae>
                return rc;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	e01d      	b.n	8001bde <MqttClient_WaitType+0xea>
            }
            rc = MQTT_CODE_SUCCESS;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]

            /* Check for type and packet id */
            if (wait_type < MQTT_PACKET_TYPE_MAX) {
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	2b0e      	cmp	r3, #14
 8001baa:	d813      	bhi.n	8001bd4 <MqttClient_WaitType+0xe0>
                if (wait_type == msg->type) {
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	791b      	ldrb	r3, [r3, #4]
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d106      	bne.n	8001bc4 <MqttClient_WaitType+0xd0>
                    if (wait_packet_id == 0 || wait_packet_id == packet_id) {
 8001bb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00c      	beq.n	8001bd6 <MqttClient_WaitType+0xe2>
 8001bbc:	8afb      	ldrh	r3, [r7, #22]
 8001bbe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d008      	beq.n	8001bd6 <MqttClient_WaitType+0xe2>
                        /* We found the packet type and id */
                        break;
                    }
                }

                msg->stat = MQTT_MSG_BEGIN;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
                goto wait_again;
 8001bca:	e79c      	b.n	8001b06 <MqttClient_WaitType+0x12>
        {
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitType: Invalid state %d!",
                msg->stat);
        #endif
            rc = MQTT_CODE_ERROR_STAT;
 8001bcc:	f06f 0309 	mvn.w	r3, #9
 8001bd0:	61fb      	str	r3, [r7, #28]
            break;
 8001bd2:	e000      	b.n	8001bd6 <MqttClient_WaitType+0xe2>
            break;
 8001bd4:	bf00      	nop
        }
    } /* switch (msg->stat) */

    /* reset state */
    msg->stat = MQTT_MSG_BEGIN;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]

    return rc;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop

08001be8 <MqttClient_Init>:
int MqttClient_Init(MqttClient *client, MqttNet* net,
    MqttMsgCb msg_cb,
    byte* tx_buf, int tx_buf_len,
    byte* rx_buf, int rx_buf_len,
    int cmd_timeout_ms)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]

    /* Check arguments */
    if (client == NULL ||
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00b      	beq.n	8001c18 <MqttClient_Init+0x30>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <MqttClient_Init+0x30>
        tx_buf == NULL || tx_buf_len <= 0 ||
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	dd05      	ble.n	8001c18 <MqttClient_Init+0x30>
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <MqttClient_Init+0x30>
        rx_buf == NULL || rx_buf_len <= 0) {
 8001c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	dc02      	bgt.n	8001c1e <MqttClient_Init+0x36>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c1c:	e01c      	b.n	8001c58 <MqttClient_Init+0x70>
    }

    /* Initialize the client structure to zero */
    XMEMSET(client, 0, sizeof(MqttClient));
 8001c1e:	226c      	movs	r2, #108	; 0x6c
 8001c20:	2100      	movs	r1, #0
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f001 ff79 	bl	8003b1a <memset>

    /* Setup client structure */
    client->msg_cb = msg_cb;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	63da      	str	r2, [r3, #60]	; 0x3c
    client->tx_buf = tx_buf;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	609a      	str	r2, [r3, #8]
    client->tx_buf_len = tx_buf_len;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a3a      	ldr	r2, [r7, #32]
 8001c38:	60da      	str	r2, [r3, #12]
    client->rx_buf = rx_buf;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3e:	611a      	str	r2, [r3, #16]
    client->rx_buf_len = rx_buf_len;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c44:	615a      	str	r2, [r3, #20]
    client->cmd_timeout_ms = cmd_timeout_ms;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c4a:	605a      	str	r2, [r3, #4]

    /* Init socket */
    rc = MqttSocket_Init(client, net);
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 ff1a 	bl	8002a88 <MqttSocket_Init>
 8001c54:	6178      	str	r0, [r7, #20]

    return rc;
 8001c56:	697b      	ldr	r3, [r7, #20]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <MqttClient_Connect>:

int MqttClient_Connect(MqttClient *client, MqttConnect *connect)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
    int rc, len;

    /* Validate required arguments */
    if (client == NULL || connect == NULL) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <MqttClient_Connect+0x16>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <MqttClient_Connect+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c7a:	e034      	b.n	8001ce6 <MqttClient_Connect+0x86>
    }

    if (connect->stat == MQTT_MSG_BEGIN) {
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d120      	bne.n	8001cc6 <MqttClient_Connect+0x66>

        /* Encode the connect packet */
        rc = MqttEncode_Connect(client->tx_buf, client->tx_buf_len, connect);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6898      	ldr	r0, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f000 fab4 	bl	80021fc <MqttEncode_Connect>
 8001c94:	60f8      	str	r0, [r7, #12]
        if (rc <= 0) {
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	dc01      	bgt.n	8001ca0 <MqttClient_Connect+0x40>
            return rc;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	e022      	b.n	8001ce6 <MqttClient_Connect+0x86>
        }
        len = rc;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	60bb      	str	r3, [r7, #8]

        /* Send connect packet */
        rc = MqttPacket_Write(client, client->tx_buf, len);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	4619      	mov	r1, r3
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fe3b 	bl	8002928 <MqttPacket_Write>
 8001cb2:	60f8      	str	r0, [r7, #12]
        if (rc != len) {
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <MqttClient_Connect+0x60>
            return rc;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	e012      	b.n	8001ce6 <MqttClient_Connect+0x86>
        }
        connect->stat = MQTT_MSG_WAIT;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]
	broker_decode_connect(&broker, local_host.data, &stat);
	broker_send_conn_ack(&broker, &stat);
*/

    /* Wait for connect ack packet */
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685a      	ldr	r2, [r3, #4]
        MQTT_PACKET_TYPE_CONNECT_ACK, 0, &connect->ack);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	331c      	adds	r3, #28
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2302      	movs	r3, #2
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ff09 	bl	8001af4 <MqttClient_WaitType>
 8001ce2:	60f8      	str	r0, [r7, #12]

    return rc;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <MqttClient_Publish>:

int MqttClient_Publish(MqttClient *client, MqttPublish *publish)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]

    /* Validate required arguments */
    if (client == NULL || publish == NULL) {
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <MqttClient_Publish+0x1a>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d102      	bne.n	8001d10 <MqttClient_Publish+0x20>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d0e:	e09e      	b.n	8001e4e <MqttClient_Publish+0x15e>
    }

    switch (publish->stat)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	f200 8099 	bhi.w	8001e4c <MqttClient_Publish+0x15c>
 8001d1a:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <MqttClient_Publish+0x30>)
 8001d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d20:	08001d35 	.word	0x08001d35
 8001d24:	08001e01 	.word	0x08001e01
 8001d28:	08001d57 	.word	0x08001d57
 8001d2c:	08001e43 	.word	0x08001e43
 8001d30:	08001e43 	.word	0x08001e43
    {
        case MQTT_MSG_BEGIN:
        {
            /* Encode the publish packet */
            rc = MqttEncode_Publish(client->tx_buf, client->tx_buf_len, publish);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6898      	ldr	r0, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f000 fbc4 	bl	80024cc <MqttEncode_Publish>
 8001d44:	60f8      	str	r0, [r7, #12]
            if (rc <= 0) {
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	dc01      	bgt.n	8001d50 <MqttClient_Publish+0x60>
                return rc;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	e07e      	b.n	8001e4e <MqttClient_Publish+0x15e>
            }

            client->write.len = rc;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	639a      	str	r2, [r3, #56]	; 0x38
            FALL_THROUGH;
        }

        case MQTT_MSG_WRITE:
        {
            publish->stat = MQTT_MSG_WRITE;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2202      	movs	r2, #2
 8001d5a:	701a      	strb	r2, [r3, #0]

            /* Send packet and payload */
            do {
                rc = MqttPacket_Write(client, client->tx_buf, client->write.len);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6899      	ldr	r1, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d64:	461a      	mov	r2, r3
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fdde 	bl	8002928 <MqttPacket_Write>
 8001d6c:	60f8      	str	r0, [r7, #12]
                if (rc < 0) {
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	da01      	bge.n	8001d78 <MqttClient_Publish+0x88>
                    return rc;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	e06a      	b.n	8001e4e <MqttClient_Publish+0x15e>
                }

                publish->buffer_pos += publish->buffer_len;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6a1a      	ldr	r2, [r3, #32]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	441a      	add	r2, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	621a      	str	r2, [r3, #32]
                publish->buffer_len = 0;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61da      	str	r2, [r3, #28]

                /* Check if we are done sending publish message */
                if (publish->buffer_pos >= publish->total_len) {
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6a1a      	ldr	r2, [r3, #32]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d302      	bcc.n	8001d9e <MqttClient_Publish+0xae>
                    rc = MQTT_CODE_SUCCESS;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
                    break;
 8001d9c:	e028      	b.n	8001df0 <MqttClient_Publish+0x100>
                }

                /* Build packet payload to send */
                client->write.len = (publish->total_len - publish->buffer_pos);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	639a      	str	r2, [r3, #56]	; 0x38
                if (client->write.len > client->tx_buf_len) {
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	dd03      	ble.n	8001dc2 <MqttClient_Publish+0xd2>
                    client->write.len = client->tx_buf_len;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	639a      	str	r2, [r3, #56]	; 0x38
                }
                publish->buffer_len = client->write.len;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	61da      	str	r2, [r3, #28]
                XMEMCPY(client->tx_buf, &publish->buffer[publish->buffer_pos],
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6898      	ldr	r0, [r3, #8]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	18d1      	adds	r1, r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	461a      	mov	r2, r3
 8001de0:	f001 fe90 	bl	8003b04 <memcpy>

            #ifdef WOLFMQTT_NONBLOCK
                return MQTT_CODE_CONTINUE;
            #endif

            } while (publish->buffer_pos < publish->total_len);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	6a1a      	ldr	r2, [r3, #32]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3b5      	bcc.n	8001d5c <MqttClient_Publish+0x6c>

            /* if not expecting a reply, the reset state and exit */
            if (publish->qos == MQTT_QOS_0) {
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	795b      	ldrb	r3, [r3, #5]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d103      	bne.n	8001e00 <MqttClient_Publish+0x110>
                publish->stat = MQTT_MSG_BEGIN;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
                break;
 8001dfe:	e025      	b.n	8001e4c <MqttClient_Publish+0x15c>
            FALL_THROUGH;
        }

        case MQTT_MSG_WAIT:
        {
            publish->stat = MQTT_MSG_WAIT;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]

            /* Handle QoS */
            if (publish->qos > MQTT_QOS_0) {
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	795b      	ldrb	r3, [r3, #5]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d01d      	beq.n	8001e4a <MqttClient_Publish+0x15a>
                /* Determine packet type to wait for */
                MqttPacketType type = (publish->qos == MQTT_QOS_1) ?
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	795b      	ldrb	r3, [r3, #5]
                    MQTT_PACKET_TYPE_PUBLISH_ACK : MQTT_PACKET_TYPE_PUBLISH_COMP;
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <MqttClient_Publish+0x12a>
 8001e16:	2304      	movs	r3, #4
 8001e18:	e000      	b.n	8001e1c <MqttClient_Publish+0x12c>
 8001e1a:	2307      	movs	r3, #7
                MqttPacketType type = (publish->qos == MQTT_QOS_1) ?
 8001e1c:	72fb      	strb	r3, [r7, #11]

                /* Wait for publish response packet */
                rc = MqttClient_WaitType(client, &client->msg,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6858      	ldr	r0, [r3, #4]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	885b      	ldrh	r3, [r3, #2]
 8001e2c:	7afc      	ldrb	r4, [r7, #11]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	9201      	str	r2, [sp, #4]
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	4623      	mov	r3, r4
 8001e36:	4602      	mov	r2, r0
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff fe5b 	bl	8001af4 <MqttClient_WaitType>
 8001e3e:	60f8      	str	r0, [r7, #12]
                    client->cmd_timeout_ms, type, publish->packet_id, NULL);
            }

            break;
 8001e40:	e003      	b.n	8001e4a <MqttClient_Publish+0x15a>
        case MQTT_MSG_READ_PAYLOAD:
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_Publish: Invalid state %d!",
                publish->stat);
        #endif
            rc = MQTT_CODE_ERROR_STAT;
 8001e42:	f06f 0309 	mvn.w	r3, #9
 8001e46:	60fb      	str	r3, [r7, #12]
            break;
 8001e48:	e000      	b.n	8001e4c <MqttClient_Publish+0x15c>
            break;
 8001e4a:	bf00      	nop
    } /* switch (publish->stat) */

    return rc;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd90      	pop	{r4, r7, pc}
 8001e56:	bf00      	nop

08001e58 <MqttClient_WaitMessage>:
    return MQTT_CODE_SUCCESS;
}


int MqttClient_WaitMessage(MqttClient *client, int timeout_ms)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
    return MqttClient_WaitType(client, &client->msg, timeout_ms,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	230f      	movs	r3, #15
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff fe3d 	bl	8001af4 <MqttClient_WaitType>
 8001e7a:	4603      	mov	r3, r0
        MQTT_PACKET_TYPE_MAX, 0, NULL);
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <MqttEncode_FixedHeader>:
#include "mqtt_client.h"

/* Positive return value is header length, zero or negative indicates error */
static int MqttEncode_FixedHeader(byte *tx_buf, int tx_buf_len, int remain_len,
    byte type, byte retain, byte qos, byte duplicate)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)tx_buf;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	617b      	str	r3, [r7, #20]

    /* Encode fixed header */
    header->type_flags = MQTT_PACKET_TYPE_SET(type) | MQTT_PACKET_FLAGS_SET(0);
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	701a      	strb	r2, [r3, #0]
    if (retain) {
 8001ea0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <MqttEncode_FixedHeader+0x32>
        header->type_flags |= MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_RETAIN);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	701a      	strb	r2, [r3, #0]
    }
    if (qos) {
 8001eb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00e      	beq.n	8001edc <MqttEncode_FixedHeader+0x58>
        header->type_flags |= MQTT_PACKET_FLAGS_SET_QOS(qos);
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b25a      	sxtb	r2, r3
 8001ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	b25b      	sxtb	r3, r3
 8001ecc:	f003 0306 	and.w	r3, r3, #6
 8001ed0:	b25b      	sxtb	r3, r3
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	b25b      	sxtb	r3, r3
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	701a      	strb	r2, [r3, #0]
    }
    if (duplicate) {
 8001edc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d006      	beq.n	8001ef2 <MqttEncode_FixedHeader+0x6e>
        header->type_flags |=
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	701a      	strb	r2, [r3, #0]
            MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_DUPLICATE);
    }

    /* Encode the length remaining into the header */
    header_len = MqttEncode_RemainLen(header, tx_buf_len, remain_len);
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f000 f89f 	bl	800203a <MqttEncode_RemainLen>
 8001efc:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	da01      	bge.n	8001f08 <MqttEncode_FixedHeader+0x84>
        return header_len;
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	e000      	b.n	8001f0a <MqttEncode_FixedHeader+0x86>
    }

    return header_len;
 8001f08:	693b      	ldr	r3, [r7, #16]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <MqttDecode_FixedHeader>:

static int MqttDecode_FixedHeader(byte *rx_buf, int rx_buf_len,
    int *remain_len, byte type, MqttQoS *p_qos, byte *p_retain,
    byte *p_duplicate)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)rx_buf;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	617b      	str	r3, [r7, #20]

    /* Decode the length remaining */
    header_len = MqttDecode_RemainLen(header, rx_buf_len, remain_len);
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	6978      	ldr	r0, [r7, #20]
 8001f2a:	f000 f840 	bl	8001fae <MqttDecode_RemainLen>
 8001f2e:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	da01      	bge.n	8001f3a <MqttDecode_FixedHeader+0x28>
        return header_len;
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	e035      	b.n	8001fa6 <MqttDecode_FixedHeader+0x94>
    }

    /* Validate packet type */
    if (MQTT_PACKET_TYPE_GET(header->type_flags) != type) {
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	f003 020f 	and.w	r2, r3, #15
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d002      	beq.n	8001f52 <MqttDecode_FixedHeader+0x40>
        return MQTT_CODE_ERROR_PACKET_TYPE;
 8001f4c:	f06f 0303 	mvn.w	r3, #3
 8001f50:	e029      	b.n	8001fa6 <MqttDecode_FixedHeader+0x94>
    }

    /* Extract header flags */
    if (p_qos) {
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <MqttDecode_FixedHeader+0x56>
        *p_qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	105b      	asrs	r3, r3, #1
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	701a      	strb	r2, [r3, #0]
    }
    if (p_retain) {
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <MqttDecode_FixedHeader+0x74>
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
            MQTT_PACKET_FLAG_RETAIN) ? 1 : 0;
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bf14      	ite	ne
 8001f7a:	2301      	movne	r3, #1
 8001f7c:	2300      	moveq	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	461a      	mov	r2, r3
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	701a      	strb	r2, [r3, #0]
    }
    if (p_duplicate) {
 8001f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00b      	beq.n	8001fa4 <MqttDecode_FixedHeader+0x92>
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
            MQTT_PACKET_FLAG_DUPLICATE) ? 1 : 0;
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf14      	ite	ne
 8001f98:	2301      	movne	r3, #1
 8001f9a:	2300      	moveq	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	701a      	strb	r2, [r3, #0]
    }

    return header_len;
 8001fa4:	693b      	ldr	r3, [r7, #16]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <MqttDecode_RemainLen>:


/* Packet Element Encoders/Decoders */
/* Returns number of decoded bytes, errors are negative value */
int MqttDecode_RemainLen(MqttPacket *header, int buf_len, int *remain_len)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b089      	sub	sp, #36	; 0x24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
    int decode_bytes = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
    int multiplier = 1;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	61bb      	str	r3, [r7, #24]
    byte tmp_len;

    if (header == NULL || remain_len == NULL || buf_len <= 0) {
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <MqttDecode_RemainLen+0x26>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <MqttDecode_RemainLen+0x26>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	dc02      	bgt.n	8001fda <MqttDecode_RemainLen+0x2c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fd8:	e02a      	b.n	8002030 <MqttDecode_RemainLen+0x82>
    }

    *remain_len = 0;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
    do {
        /* Check decoded length byte count */
        if ((decode_bytes + 1) >= buf_len) {
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	db01      	blt.n	8001fee <MqttDecode_RemainLen+0x40>
            return 0; /* Zero incidates we need another byte */
 8001fea:	2300      	movs	r3, #0
 8001fec:	e020      	b.n	8002030 <MqttDecode_RemainLen+0x82>
        }
        if (decode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	dd02      	ble.n	8001ffa <MqttDecode_RemainLen+0x4c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8001ff4:	f06f 0302 	mvn.w	r3, #2
 8001ff8:	e01a      	b.n	8002030 <MqttDecode_RemainLen+0x82>
        }

        /* Decode Length */
        tmp_len = header->len[decode_bytes++];
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	61fa      	str	r2, [r7, #28]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	785b      	ldrb	r3, [r3, #1]
 8002006:	75fb      	strb	r3, [r7, #23]
        *remain_len += (tmp_len & ~MQTT_PACKET_LEN_ENCODE_MASK) * multiplier;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	7dfb      	ldrb	r3, [r7, #23]
 800200e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002012:	69b9      	ldr	r1, [r7, #24]
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	441a      	add	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	601a      	str	r2, [r3, #0]
        multiplier *= MQTT_PACKET_LEN_ENCODE_MASK;
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	01db      	lsls	r3, r3, #7
 8002022:	61bb      	str	r3, [r7, #24]
    } while (tmp_len & MQTT_PACKET_LEN_ENCODE_MASK);
 8002024:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002028:	2b00      	cmp	r3, #0
 800202a:	dbd9      	blt.n	8001fe0 <MqttDecode_RemainLen+0x32>

    return decode_bytes + 1; /* Add byte for header flags/type */
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	3301      	adds	r3, #1
}
 8002030:	4618      	mov	r0, r3
 8002032:	3724      	adds	r7, #36	; 0x24
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <MqttEncode_RemainLen>:

/* Returns number of encoded bytes, errors are negative value */
int MqttEncode_RemainLen(MqttPacket *header, int buf_len, int remain_len)
{
 800203a:	b480      	push	{r7}
 800203c:	b087      	sub	sp, #28
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
    int encode_bytes = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
    byte tmp_len;

    if (header == NULL || remain_len < 0) {
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <MqttEncode_RemainLen+0x1c>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	da02      	bge.n	800205c <MqttEncode_RemainLen+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800205a:	e02e      	b.n	80020ba <MqttEncode_RemainLen+0x80>
    }

    do {
        /* Check decoded length byte count */
        if ((encode_bytes + 1) >= buf_len) {
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	429a      	cmp	r2, r3
 8002064:	db01      	blt.n	800206a <MqttEncode_RemainLen+0x30>
            return 0; /* Zero incidates we need another byte */
 8002066:	2300      	movs	r3, #0
 8002068:	e027      	b.n	80020ba <MqttEncode_RemainLen+0x80>
        }
        if (encode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b03      	cmp	r3, #3
 800206e:	dd02      	ble.n	8002076 <MqttEncode_RemainLen+0x3c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8002070:	f06f 0302 	mvn.w	r3, #2
 8002074:	e021      	b.n	80020ba <MqttEncode_RemainLen+0x80>
        }

        /* Encode length */
        tmp_len = (remain_len % MQTT_PACKET_LEN_ENCODE_MASK);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	425a      	negs	r2, r3
 800207a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800207e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002082:	bf58      	it	pl
 8002084:	4253      	negpl	r3, r2
 8002086:	74fb      	strb	r3, [r7, #19]
        remain_len /= MQTT_PACKET_LEN_ENCODE_MASK;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	da00      	bge.n	8002090 <MqttEncode_RemainLen+0x56>
 800208e:	337f      	adds	r3, #127	; 0x7f
 8002090:	11db      	asrs	r3, r3, #7
 8002092:	607b      	str	r3, [r7, #4]

        /* If more length, set the top bit of this byte */
        if (remain_len > 0) {
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	dd03      	ble.n	80020a2 <MqttEncode_RemainLen+0x68>
            tmp_len |= MQTT_PACKET_LEN_ENCODE_MASK;
 800209a:	7cfb      	ldrb	r3, [r7, #19]
 800209c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020a0:	74fb      	strb	r3, [r7, #19]
        }
        header->len[encode_bytes++] = tmp_len;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	617a      	str	r2, [r7, #20]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	7cfa      	ldrb	r2, [r7, #19]
 80020ae:	705a      	strb	r2, [r3, #1]
    } while (remain_len > 0);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	dcd2      	bgt.n	800205c <MqttEncode_RemainLen+0x22>

    return encode_bytes + 1; /* Add byte for header flags/type */
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3301      	adds	r3, #1
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <MqttDecode_Num>:

/* Returns number of buffer bytes decoded */
int MqttDecode_Num(byte* buf, word16 *len)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
    if (len) {
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d011      	beq.n	80020f8 <MqttDecode_Num+0x34>
        *len = buf[0];
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
        *len = (*len << 8) | buf[1];
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	b21a      	sxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3301      	adds	r3, #1
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	801a      	strh	r2, [r3, #0]
    }
    return MQTT_DATA_LEN_SIZE;
 80020f8:	2302      	movs	r3, #2
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <MqttEncode_Num>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Num(byte *buf, word16 len)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
    buf[0] = len >> 8;
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	b29b      	uxth	r3, r3
 8002116:	b2da      	uxtb	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	701a      	strb	r2, [r3, #0]
    buf[1] = len & 0xFF;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3301      	adds	r3, #1
 8002120:	887a      	ldrh	r2, [r7, #2]
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]
    return MQTT_DATA_LEN_SIZE;
 8002126:	2302      	movs	r3, #2
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <MqttDecode_String>:

/* Returns number of buffer bytes decoded */
/* Returns pointer to string (which is not guarenteed to be null terminated) */
int MqttDecode_String(byte *buf, const char **pstr, word16 *pstr_len)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
    int len;
    word16 str_len;
    len = MqttDecode_Num(buf, &str_len);
 800213e:	f107 0312 	add.w	r3, r7, #18
 8002142:	4619      	mov	r1, r3
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f7ff ffbd 	bl	80020c4 <MqttDecode_Num>
 800214a:	6178      	str	r0, [r7, #20]
    buf += len;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4413      	add	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
    if (pstr_len) {
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <MqttDecode_String+0x2e>
        *pstr_len = str_len;
 800215a:	8a7a      	ldrh	r2, [r7, #18]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	801a      	strh	r2, [r3, #0]
    }
    if (pstr) {
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <MqttDecode_String+0x3a>
        *pstr = (char*)buf;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	601a      	str	r2, [r3, #0]
    }
    return len + str_len;
 800216c:	8a7b      	ldrh	r3, [r7, #18]
 800216e:	461a      	mov	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	4413      	add	r3, r2
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <MqttEncode_String>:

/* Returns number of buffer bytes encoded */
int MqttEncode_String(byte *buf, const char *str)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
    int str_len = (int)XSTRLEN(str);
 8002186:	6838      	ldr	r0, [r7, #0]
 8002188:	f7fd ffe2 	bl	8000150 <strlen>
 800218c:	4603      	mov	r3, r0
 800218e:	60fb      	str	r3, [r7, #12]
    int len = (int)MqttEncode_Num(buf, (word16)str_len);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	b29b      	uxth	r3, r3
 8002194:	4619      	mov	r1, r3
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ffb4 	bl	8002104 <MqttEncode_Num>
 800219c:	60b8      	str	r0, [r7, #8]
    buf += len;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	607b      	str	r3, [r7, #4]
    XMEMCPY(buf, str, str_len);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	461a      	mov	r2, r3
 80021aa:	6839      	ldr	r1, [r7, #0]
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f001 fca9 	bl	8003b04 <memcpy>
    return len + str_len;
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4413      	add	r3, r2
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <MqttEncode_Data>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Data(byte *buf, const byte *data, word16 data_len)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	4613      	mov	r3, r2
 80021cc:	80fb      	strh	r3, [r7, #6]
    int len = (int)MqttEncode_Num(buf, data_len);
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	4619      	mov	r1, r3
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f7ff ff96 	bl	8002104 <MqttEncode_Num>
 80021d8:	6178      	str	r0, [r7, #20]
    buf += len;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4413      	add	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
    XMEMCPY(buf, data, data_len);
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	461a      	mov	r2, r3
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f001 fc8b 	bl	8003b04 <memcpy>
    return len + data_len;
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	4413      	add	r3, r2
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <MqttEncode_Connect>:


/* Packet Type Encoders/Decoders */
int MqttEncode_Connect(byte *tx_buf, int tx_buf_len, MqttConnect *connect)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08e      	sub	sp, #56	; 0x38
 8002200:	af04      	add	r7, sp, #16
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    MqttConnectPacket packet = MQTT_CONNECT_INIT;
 8002208:	4a93      	ldr	r2, [pc, #588]	; (8002458 <MqttEncode_Connect+0x25c>)
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002210:	c303      	stmia	r3!, {r0, r1}
 8002212:	801a      	strh	r2, [r3, #0]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || connect == NULL || connect->client_id == NULL) {
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <MqttEncode_Connect+0x2c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <MqttEncode_Connect+0x2c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <MqttEncode_Connect+0x32>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800222c:	e110      	b.n	8002450 <MqttEncode_Connect+0x254>
    }

    /* Determine packet length */
    /* MQTT Version 4 header is 10 bytes */
    remain_len = sizeof(MqttConnectPacket);
 800222e:	230a      	movs	r3, #10
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
    remain_len += (int)XSTRLEN(connect->client_id) + MQTT_DATA_LEN_SIZE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fd ff8a 	bl	8000150 <strlen>
 800223c:	4603      	mov	r3, r0
 800223e:	3302      	adds	r3, #2
 8002240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002242:	4413      	add	r3, r2
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
    if (connect->enable_lwt) {
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7b1b      	ldrb	r3, [r3, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d02c      	beq.n	80022a8 <MqttEncode_Connect+0xac>
        /* Verify all required fields are present */
        if (connect->lwt_msg == NULL ||
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00e      	beq.n	8002274 <MqttEncode_Connect+0x78>
            connect->lwt_msg->topic_name == NULL ||
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	689b      	ldr	r3, [r3, #8]
        if (connect->lwt_msg == NULL ||
 800225c:	2b00      	cmp	r3, #0
 800225e:	d009      	beq.n	8002274 <MqttEncode_Connect+0x78>
            connect->lwt_msg->buffer == NULL ||
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	695b      	ldr	r3, [r3, #20]
            connect->lwt_msg->topic_name == NULL ||
 8002266:	2b00      	cmp	r3, #0
 8002268:	d004      	beq.n	8002274 <MqttEncode_Connect+0x78>
            connect->lwt_msg->total_len <= 0)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	691b      	ldr	r3, [r3, #16]
            connect->lwt_msg->buffer == NULL ||
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <MqttEncode_Connect+0x7e>
        {
            return MQTT_CODE_ERROR_BAD_ARG;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002278:	e0ea      	b.n	8002450 <MqttEncode_Connect+0x254>
        }

        remain_len += (int)XSTRLEN(connect->lwt_msg->topic_name);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4618      	mov	r0, r3
 8002282:	f7fd ff65 	bl	8000150 <strlen>
 8002286:	4603      	mov	r3, r0
 8002288:	461a      	mov	r2, r3
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	4413      	add	r3, r2
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	3302      	adds	r3, #2
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += connect->lwt_msg->total_len;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	4413      	add	r3, r2
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	3302      	adds	r3, #2
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->username) {
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d009      	beq.n	80022c4 <MqttEncode_Connect+0xc8>
        remain_len += (int)XSTRLEN(connect->username) + MQTT_DATA_LEN_SIZE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fd ff4b 	bl	8000150 <strlen>
 80022ba:	4603      	mov	r3, r0
 80022bc:	3302      	adds	r3, #2
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	4413      	add	r3, r2
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->password) {
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d009      	beq.n	80022e0 <MqttEncode_Connect+0xe4>
        remain_len += (int)XSTRLEN(connect->password) + MQTT_DATA_LEN_SIZE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fd ff3d 	bl	8000150 <strlen>
 80022d6:	4603      	mov	r3, r0
 80022d8:	3302      	adds	r3, #2
 80022da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022dc:	4413      	add	r3, r2
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 80022e0:	2300      	movs	r3, #0
 80022e2:	9302      	str	r3, [sp, #8]
 80022e4:	2300      	movs	r3, #0
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	2300      	movs	r3, #0
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2301      	movs	r3, #1
 80022ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7ff fdc6 	bl	8001e84 <MqttEncode_FixedHeader>
 80022f8:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT, 0, 0, 0);
    if (header_len < 0) {
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	da01      	bge.n	8002304 <MqttEncode_Connect+0x108>
        return header_len;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	e0a5      	b.n	8002450 <MqttEncode_Connect+0x254>
    }
    tx_payload = &tx_buf[header_len];
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4413      	add	r3, r2
 800230a:	623b      	str	r3, [r7, #32]

    /* Encode variable header */
    /* Set connection flags */
    if (connect->clean_session) {
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	791b      	ldrb	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d004      	beq.n	800231e <MqttEncode_Connect+0x122>
        packet.flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	f043 0302 	orr.w	r3, r3, #2
 800231a:	b2db      	uxtb	r3, r3
 800231c:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->enable_lwt) {
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7b1b      	ldrb	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d021      	beq.n	800236a <MqttEncode_Connect+0x16e>
        packet.flags |= MQTT_CONNECT_FLAG_WILL_FLAG;
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	f043 0304 	orr.w	r3, r3, #4
 800232c:	b2db      	uxtb	r3, r3
 800232e:	75fb      	strb	r3, [r7, #23]

        if (connect->lwt_msg->qos) {
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	795b      	ldrb	r3, [r3, #5]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00d      	beq.n	8002356 <MqttEncode_Connect+0x15a>
            packet.flags |= MQTT_CONNECT_FLAG_SET_QOS(connect->lwt_msg->qos);
 800233a:	7dfb      	ldrb	r3, [r7, #23]
 800233c:	b25a      	sxtb	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	795b      	ldrb	r3, [r3, #5]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	b25b      	sxtb	r3, r3
 8002348:	f003 0318 	and.w	r3, r3, #24
 800234c:	b25b      	sxtb	r3, r3
 800234e:	4313      	orrs	r3, r2
 8002350:	b25b      	sxtb	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	75fb      	strb	r3, [r7, #23]
        }
        if (connect->lwt_msg->retain) {
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	799b      	ldrb	r3, [r3, #6]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <MqttEncode_Connect+0x16e>
            packet.flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8002360:	7dfb      	ldrb	r3, [r7, #23]
 8002362:	f043 0320 	orr.w	r3, r3, #32
 8002366:	b2db      	uxtb	r3, r3
 8002368:	75fb      	strb	r3, [r7, #23]
        }
    }
    if (connect->username) {
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <MqttEncode_Connect+0x180>
        packet.flags |= MQTT_CONNECT_FLAG_USERNAME;
 8002372:	7dfb      	ldrb	r3, [r7, #23]
 8002374:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002378:	b2db      	uxtb	r3, r3
 800237a:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->password) {
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <MqttEncode_Connect+0x192>
        packet.flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800238a:	b2db      	uxtb	r3, r3
 800238c:	75fb      	strb	r3, [r7, #23]
    }
    MqttEncode_Num((byte*)&packet.keep_alive, connect->keep_alive_sec);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	885a      	ldrh	r2, [r3, #2]
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	3308      	adds	r3, #8
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff feb2 	bl	8002104 <MqttEncode_Num>
    XMEMCPY(tx_payload, &packet, sizeof(MqttConnectPacket));
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f107 0310 	add.w	r3, r7, #16
 80023a8:	cb03      	ldmia	r3!, {r0, r1}
 80023aa:	6010      	str	r0, [r2, #0]
 80023ac:	6051      	str	r1, [r2, #4]
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	8113      	strh	r3, [r2, #8]
    tx_payload += sizeof(MqttConnectPacket);
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	330a      	adds	r3, #10
 80023b6:	623b      	str	r3, [r7, #32]

    /* Encode payload */
    tx_payload += MqttEncode_String(tx_payload, connect->client_id);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4619      	mov	r1, r3
 80023be:	6a38      	ldr	r0, [r7, #32]
 80023c0:	f7ff fedc 	bl	800217c <MqttEncode_String>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	4413      	add	r3, r2
 80023cc:	623b      	str	r3, [r7, #32]
    if (connect->enable_lwt) {
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7b1b      	ldrb	r3, [r3, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01b      	beq.n	800240e <MqttEncode_Connect+0x212>
        tx_payload += MqttEncode_String(tx_payload,
            connect->lwt_msg->topic_name);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_String(tx_payload,
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	4619      	mov	r1, r3
 80023de:	6a38      	ldr	r0, [r7, #32]
 80023e0:	f7ff fecc 	bl	800217c <MqttEncode_String>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	4413      	add	r3, r2
 80023ec:	623b      	str	r3, [r7, #32]
        tx_payload += MqttEncode_Data(tx_payload,
            connect->lwt_msg->buffer, (word16)connect->lwt_msg->total_len);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	6959      	ldr	r1, [r3, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_Data(tx_payload,
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	6a38      	ldr	r0, [r7, #32]
 8002400:	f7ff fede 	bl	80021c0 <MqttEncode_Data>
 8002404:	4603      	mov	r3, r0
 8002406:	461a      	mov	r2, r3
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	4413      	add	r3, r2
 800240c:	623b      	str	r3, [r7, #32]
    }
    if (connect->username) {
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <MqttEncode_Connect+0x230>
        tx_payload += MqttEncode_String(tx_payload, connect->username);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	4619      	mov	r1, r3
 800241c:	6a38      	ldr	r0, [r7, #32]
 800241e:	f7ff fead 	bl	800217c <MqttEncode_String>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	4413      	add	r3, r2
 800242a:	623b      	str	r3, [r7, #32]
    }
    if (connect->password) {
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <MqttEncode_Connect+0x24e>
        tx_payload += MqttEncode_String(tx_payload, connect->password);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	4619      	mov	r1, r3
 800243a:	6a38      	ldr	r0, [r7, #32]
 800243c:	f7ff fe9e 	bl	800217c <MqttEncode_String>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	4413      	add	r3, r2
 8002448:	623b      	str	r3, [r7, #32]
    }
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	4413      	add	r3, r2
}
 8002450:	4618      	mov	r0, r3
 8002452:	3728      	adds	r7, #40	; 0x28
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	08003ce0 	.word	0x08003ce0

0800245c <MqttDecode_ConnectAck>:

int MqttDecode_ConnectAck(byte *rx_buf, int rx_buf_len,
    MqttConnectAck *connect_ack)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08c      	sub	sp, #48	; 0x30
 8002460:	af04      	add	r7, sp, #16
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <MqttDecode_ConnectAck+0x18>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	dc02      	bgt.n	800247a <MqttDecode_ConnectAck+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002478:	e024      	b.n	80024c4 <MqttDecode_ConnectAck+0x68>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 800247a:	f107 0214 	add.w	r2, r7, #20
 800247e:	2300      	movs	r3, #0
 8002480:	9302      	str	r3, [sp, #8]
 8002482:	2300      	movs	r3, #0
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	2300      	movs	r3, #0
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	2302      	movs	r3, #2
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f7ff fd3f 	bl	8001f12 <MqttDecode_FixedHeader>
 8002494:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b00      	cmp	r3, #0
 800249a:	da01      	bge.n	80024a0 <MqttDecode_ConnectAck+0x44>
        return header_len;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	e011      	b.n	80024c4 <MqttDecode_ConnectAck+0x68>
    }
    rx_payload = &rx_buf[header_len];
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4413      	add	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (connect_ack) {
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <MqttDecode_ConnectAck+0x62>
        connect_ack->flags = rx_payload[0];
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	701a      	strb	r2, [r3, #0]
        connect_ack->return_code = rx_payload[1];
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	785a      	ldrb	r2, [r3, #1]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	705a      	strb	r2, [r3, #1]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	4413      	add	r3, r2
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <MqttEncode_Publish>:

int MqttEncode_Publish(byte *tx_buf, int tx_buf_len, MqttPublish *publish)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08c      	sub	sp, #48	; 0x30
 80024d0:	af04      	add	r7, sp, #16
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
    int header_len, variable_len, payload_len = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	61bb      	str	r3, [r7, #24]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || publish == NULL) {
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <MqttEncode_Publish+0x1c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <MqttEncode_Publish+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 80024e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ec:	e079      	b.n	80025e2 <MqttEncode_Publish+0x116>
    }

    /* Determine packet length */
    variable_len = (int)XSTRLEN(publish->topic_name) + MQTT_DATA_LEN_SIZE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fd fe2c 	bl	8000150 <strlen>
 80024f8:	4603      	mov	r3, r0
 80024fa:	3302      	adds	r3, #2
 80024fc:	61fb      	str	r3, [r7, #28]
    if (publish->qos > MQTT_QOS_0) {
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	795b      	ldrb	r3, [r3, #5]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <MqttEncode_Publish+0x4e>
        if (publish->packet_id == 0) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	885b      	ldrh	r3, [r3, #2]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d102      	bne.n	8002514 <MqttEncode_Publish+0x48>
            return MQTT_CODE_ERROR_PACKET_ID;
 800250e:	f06f 0304 	mvn.w	r3, #4
 8002512:	e066      	b.n	80025e2 <MqttEncode_Publish+0x116>
        }
        variable_len += MQTT_DATA_LEN_SIZE; /* For packet_id */
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	3302      	adds	r3, #2
 8002518:	61fb      	str	r3, [r7, #28]
    }
    if (publish->buffer && publish->total_len > 0) {
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <MqttEncode_Publish+0x64>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <MqttEncode_Publish+0x64>
        payload_len = publish->total_len;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	61bb      	str	r3, [r7, #24]
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	18d0      	adds	r0, r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	799b      	ldrb	r3, [r3, #6]
        variable_len + payload_len, MQTT_PACKET_TYPE_PUBLISH,
        publish->retain, publish->qos, publish->duplicate);
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	7952      	ldrb	r2, [r2, #5]
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	79c9      	ldrb	r1, [r1, #7]
 8002542:	9102      	str	r1, [sp, #8]
 8002544:	9201      	str	r2, [sp, #4]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2303      	movs	r3, #3
 800254a:	4602      	mov	r2, r0
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f7ff fc98 	bl	8001e84 <MqttEncode_FixedHeader>
 8002554:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	da01      	bge.n	8002560 <MqttEncode_Publish+0x94>
        return header_len;
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	e040      	b.n	80025e2 <MqttEncode_Publish+0x116>
    }
    tx_payload = &tx_buf[header_len];
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4413      	add	r3, r2
 8002566:	617b      	str	r3, [r7, #20]

    /* Encode variable header */
    tx_payload += MqttEncode_String(tx_payload, publish->topic_name);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	4619      	mov	r1, r3
 800256e:	6978      	ldr	r0, [r7, #20]
 8002570:	f7ff fe04 	bl	800217c <MqttEncode_String>
 8002574:	4603      	mov	r3, r0
 8002576:	461a      	mov	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	4413      	add	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
    if (publish->qos > MQTT_QOS_0) {
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	795b      	ldrb	r3, [r3, #5]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <MqttEncode_Publish+0xd0>
        tx_payload += MqttEncode_Num(tx_payload, publish->packet_id);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	885b      	ldrh	r3, [r3, #2]
 800258a:	4619      	mov	r1, r3
 800258c:	6978      	ldr	r0, [r7, #20]
 800258e:	f7ff fdb9 	bl	8002104 <MqttEncode_Num>
 8002592:	4603      	mov	r3, r0
 8002594:	461a      	mov	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	4413      	add	r3, r2
 800259a:	617b      	str	r3, [r7, #20]
    }

    /* Encode payload */
    if (payload_len > 0) {
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	dd14      	ble.n	80025cc <MqttEncode_Publish+0x100>

        /* Determine max size to copy into tx_payload */
        if (payload_len > (tx_buf_len - (header_len + variable_len))) {
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	4413      	add	r3, r2
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	1ad2      	subs	r2, r2, r3
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	da05      	bge.n	80025be <MqttEncode_Publish+0xf2>
            payload_len = (tx_buf_len - (header_len + variable_len));
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	4413      	add	r3, r2
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	61bb      	str	r3, [r7, #24]
        }
        XMEMCPY(tx_payload, publish->buffer, payload_len);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4619      	mov	r1, r3
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f001 fa9c 	bl	8003b04 <memcpy>
    }
    publish->buffer_pos = 0;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	61da      	str	r2, [r3, #28]

    /* Return length of packet placed into tx_buf */
    return header_len + variable_len + payload_len;
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	441a      	add	r2, r3
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4413      	add	r3, r2
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3720      	adds	r7, #32
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <MqttDecode_Publish>:

int MqttDecode_Publish(byte *rx_buf, int rx_buf_len, MqttPublish *publish)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b08e      	sub	sp, #56	; 0x38
 80025ee:	af04      	add	r7, sp, #16
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, variable_len, payload_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || publish == NULL) {
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <MqttDecode_Publish+0x1e>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	dd02      	ble.n	8002608 <MqttDecode_Publish+0x1e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <MqttDecode_Publish+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800260c:	e060      	b.n	80026d0 <MqttDecode_Publish+0xe6>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3305      	adds	r3, #5
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	3206      	adds	r2, #6
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	3107      	adds	r1, #7
 800261a:	f107 0014 	add.w	r0, r7, #20
 800261e:	9102      	str	r1, [sp, #8]
 8002620:	9201      	str	r2, [sp, #4]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	2303      	movs	r3, #3
 8002626:	4602      	mov	r2, r0
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f7ff fc71 	bl	8001f12 <MqttDecode_FixedHeader>
 8002630:	61f8      	str	r0, [r7, #28]
        &remain_len, MQTT_PACKET_TYPE_PUBLISH, &publish->qos,
        &publish->retain, &publish->duplicate);
    if (header_len < 0) {
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	2b00      	cmp	r3, #0
 8002636:	da01      	bge.n	800263c <MqttDecode_Publish+0x52>
        return header_len;
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	e049      	b.n	80026d0 <MqttDecode_Publish+0xe6>
    }
    rx_payload = &rx_buf[header_len];
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4413      	add	r3, r2
 8002642:	623b      	str	r3, [r7, #32]

    /* Decode variable header */
    variable_len = MqttDecode_String(rx_payload, &publish->topic_name,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f103 0108 	add.w	r1, r3, #8
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	330c      	adds	r3, #12
 800264e:	461a      	mov	r2, r3
 8002650:	6a38      	ldr	r0, [r7, #32]
 8002652:	f7ff fd6e 	bl	8002132 <MqttDecode_String>
 8002656:	6278      	str	r0, [r7, #36]	; 0x24
        &publish->topic_name_len);
    rx_payload += variable_len;
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	6a3a      	ldr	r2, [r7, #32]
 800265c:	4413      	add	r3, r2
 800265e:	623b      	str	r3, [r7, #32]

    /* If QoS > 0 then get packet Id */
    if (publish->qos > MQTT_QOS_0) {
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	795b      	ldrb	r3, [r3, #5]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00c      	beq.n	8002682 <MqttDecode_Publish+0x98>
        variable_len += MqttDecode_Num(rx_payload, &publish->packet_id);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3302      	adds	r3, #2
 800266c:	4619      	mov	r1, r3
 800266e:	6a38      	ldr	r0, [r7, #32]
 8002670:	f7ff fd28 	bl	80020c4 <MqttDecode_Num>
 8002674:	4602      	mov	r2, r0
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	4413      	add	r3, r2
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
        rx_payload += MQTT_DATA_LEN_SIZE;
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	3302      	adds	r3, #2
 8002680:	623b      	str	r3, [r7, #32]
    }

    /* Decode Payload */
    payload_len = remain_len - variable_len;
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	61bb      	str	r3, [r7, #24]
    publish->buffer = rx_payload;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	615a      	str	r2, [r3, #20]
    publish->buffer_pos = 0;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	61da      	str	r2, [r3, #28]
    publish->total_len = payload_len;
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	611a      	str	r2, [r3, #16]

    /* Only return the length provided in rx_buf_len */
    if ((int)publish->buffer_len >
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4619      	mov	r1, r3
        (rx_buf_len - (header_len + variable_len)))
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	4413      	add	r3, r2
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	1ad3      	subs	r3, r2, r3
    if ((int)publish->buffer_len >
 80026b2:	4299      	cmp	r1, r3
 80026b4:	dd07      	ble.n	80026c6 <MqttDecode_Publish+0xdc>
    {
        publish->buffer_len = (rx_buf_len - (header_len + variable_len));
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	4413      	add	r3, r2
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	61da      	str	r2, [r3, #28]
    }

    return header_len + variable_len + payload_len;
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	441a      	add	r2, r3
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	4413      	add	r3, r2
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3728      	adds	r7, #40	; 0x28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <MqttEncode_PublishResp>:

int MqttEncode_PublishResp(byte* tx_buf, int tx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08c      	sub	sp, #48	; 0x30
 80026dc:	af04      	add	r7, sp, #16
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *tx_payload;
    MqttQoS qos;

    /* Validate required arguments */
    if (tx_buf == NULL || publish_resp == NULL) {
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <MqttEncode_PublishResp+0x1c>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d102      	bne.n	80026fa <MqttEncode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026f8:	e030      	b.n	800275c <MqttEncode_PublishResp+0x84>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 80026fa:	2302      	movs	r3, #2
 80026fc:	61fb      	str	r3, [r7, #28]

    /* Determine Qos value */
    qos = (type == MQTT_PACKET_TYPE_PUBLISH_REL) ? MQTT_QOS_1 : MQTT_QOS_0;
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	2b06      	cmp	r3, #6
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	76fb      	strb	r3, [r7, #27]

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 800270c:	79fa      	ldrb	r2, [r7, #7]
 800270e:	2300      	movs	r3, #0
 8002710:	9302      	str	r3, [sp, #8]
 8002712:	7efb      	ldrb	r3, [r7, #27]
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	2300      	movs	r3, #0
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	4613      	mov	r3, r2
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f7ff fbaf 	bl	8001e84 <MqttEncode_FixedHeader>
 8002726:	6178      	str	r0, [r7, #20]
        type, 0, qos, 0);
    if (header_len < 0) {
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	da01      	bge.n	8002732 <MqttEncode_PublishResp+0x5a>
        return header_len;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	e014      	b.n	800275c <MqttEncode_PublishResp+0x84>
    }
    tx_payload = &tx_buf[header_len];
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	613b      	str	r3, [r7, #16]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], publish_resp->packet_id);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	441a      	add	r2, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	4619      	mov	r1, r3
 8002746:	4610      	mov	r0, r2
 8002748:	f7ff fcdc 	bl	8002104 <MqttEncode_Num>
 800274c:	4603      	mov	r3, r0
 800274e:	461a      	mov	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4413      	add	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4413      	add	r3, r2
}
 800275c:	4618      	mov	r0, r3
 800275e:	3720      	adds	r7, #32
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <MqttDecode_PublishResp>:

int MqttDecode_PublishResp(byte* rx_buf, int rx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08c      	sub	sp, #48	; 0x30
 8002768:	af04      	add	r7, sp, #16
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <MqttDecode_PublishResp+0x1c>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	dc02      	bgt.n	8002786 <MqttDecode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002784:	e027      	b.n	80027d6 <MqttDecode_PublishResp+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8002786:	79f9      	ldrb	r1, [r7, #7]
 8002788:	f107 0214 	add.w	r2, r7, #20
 800278c:	2300      	movs	r3, #0
 800278e:	9302      	str	r3, [sp, #8]
 8002790:	2300      	movs	r3, #0
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	2300      	movs	r3, #0
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	460b      	mov	r3, r1
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7ff fbb8 	bl	8001f12 <MqttDecode_FixedHeader>
 80027a2:	61f8      	str	r0, [r7, #28]
        type, NULL, NULL, NULL);
    if (header_len < 0) {
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	da01      	bge.n	80027ae <MqttDecode_PublishResp+0x4a>
        return header_len;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	e013      	b.n	80027d6 <MqttDecode_PublishResp+0x72>
    }
    rx_payload = &rx_buf[header_len];
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (publish_resp) {
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d009      	beq.n	80027d0 <MqttDecode_PublishResp+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &publish_resp->packet_id);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4619      	mov	r1, r3
 80027c0:	69b8      	ldr	r0, [r7, #24]
 80027c2:	f7ff fc7f 	bl	80020c4 <MqttDecode_Num>
 80027c6:	4603      	mov	r3, r0
 80027c8:	461a      	mov	r2, r3
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4413      	add	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3720      	adds	r7, #32
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <MqttDecode_SubscribeAck>:
    return header_len + remain_len;
}

int MqttDecode_SubscribeAck(byte* rx_buf, int rx_buf_len,
    MqttSubscribeAck *subscribe_ack)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b08c      	sub	sp, #48	; 0x30
 80027e2:	af04      	add	r7, sp, #16
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || subscribe_ack == NULL) {
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <MqttDecode_SubscribeAck+0x1e>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	dd02      	ble.n	80027fc <MqttDecode_SubscribeAck+0x1e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <MqttDecode_SubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002800:	e029      	b.n	8002856 <MqttDecode_SubscribeAck+0x78>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8002802:	f107 0214 	add.w	r2, r7, #20
 8002806:	2300      	movs	r3, #0
 8002808:	9302      	str	r3, [sp, #8]
 800280a:	2300      	movs	r3, #0
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	2300      	movs	r3, #0
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2309      	movs	r3, #9
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7ff fb7b 	bl	8001f12 <MqttDecode_FixedHeader>
 800281c:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_SUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	da01      	bge.n	8002828 <MqttDecode_SubscribeAck+0x4a>
        return header_len;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	e016      	b.n	8002856 <MqttDecode_SubscribeAck+0x78>
    }
    rx_payload = &rx_buf[header_len];
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4413      	add	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (subscribe_ack) {
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00c      	beq.n	8002850 <MqttDecode_SubscribeAck+0x72>
        rx_payload += MqttDecode_Num(rx_payload, &subscribe_ack->packet_id);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4619      	mov	r1, r3
 800283a:	69b8      	ldr	r0, [r7, #24]
 800283c:	f7ff fc42 	bl	80020c4 <MqttDecode_Num>
 8002840:	4603      	mov	r3, r0
 8002842:	461a      	mov	r2, r3
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        subscribe_ack->return_codes = rx_payload; /* List of return codes */
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	605a      	str	r2, [r3, #4]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	4413      	add	r3, r2
}
 8002856:	4618      	mov	r0, r3
 8002858:	3720      	adds	r7, #32
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <MqttDecode_UnsubscribeAck>:
    return header_len + remain_len;
}

int MqttDecode_UnsubscribeAck(byte *rx_buf, int rx_buf_len,
    MqttUnsubscribeAck *unsubscribe_ack)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b08c      	sub	sp, #48	; 0x30
 8002862:	af04      	add	r7, sp, #16
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || unsubscribe_ack == NULL) {
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <MqttDecode_UnsubscribeAck+0x1e>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	dd02      	ble.n	800287c <MqttDecode_UnsubscribeAck+0x1e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <MqttDecode_UnsubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002880:	e026      	b.n	80028d0 <MqttDecode_UnsubscribeAck+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8002882:	f107 0214 	add.w	r2, r7, #20
 8002886:	2300      	movs	r3, #0
 8002888:	9302      	str	r3, [sp, #8]
 800288a:	2300      	movs	r3, #0
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	2300      	movs	r3, #0
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	230b      	movs	r3, #11
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff fb3b 	bl	8001f12 <MqttDecode_FixedHeader>
 800289c:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	da01      	bge.n	80028a8 <MqttDecode_UnsubscribeAck+0x4a>
        return header_len;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	e013      	b.n	80028d0 <MqttDecode_UnsubscribeAck+0x72>
    }
    rx_payload = &rx_buf[header_len];
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4413      	add	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (unsubscribe_ack) {
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <MqttDecode_UnsubscribeAck+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &unsubscribe_ack->packet_id);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4619      	mov	r1, r3
 80028ba:	69b8      	ldr	r0, [r7, #24]
 80028bc:	f7ff fc02 	bl	80020c4 <MqttDecode_Num>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	4413      	add	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	4413      	add	r3, r2
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3720      	adds	r7, #32
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <MqttDecode_Ping>:
    /* Return total length of packet */
    return header_len + remain_len;
}

int MqttDecode_Ping(byte *rx_buf, int rx_buf_len)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af04      	add	r7, sp, #16
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
    int header_len, remain_len;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <MqttDecode_Ping+0x16>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	dc02      	bgt.n	80028f4 <MqttDecode_Ping+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028f2:	e015      	b.n	8002920 <MqttDecode_Ping+0x48>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80028f4:	f107 0208 	add.w	r2, r7, #8
 80028f8:	2300      	movs	r3, #0
 80028fa:	9302      	str	r3, [sp, #8]
 80028fc:	2300      	movs	r3, #0
 80028fe:	9301      	str	r3, [sp, #4]
 8002900:	2300      	movs	r3, #0
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	230d      	movs	r3, #13
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fb02 	bl	8001f12 <MqttDecode_FixedHeader>
 800290e:	60f8      	str	r0, [r7, #12]
        MQTT_PACKET_TYPE_PING_RESP, NULL, NULL, NULL);
    if (header_len < 0) {
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	da01      	bge.n	800291a <MqttDecode_Ping+0x42>
        return header_len;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	e002      	b.n	8002920 <MqttDecode_Ping+0x48>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4413      	add	r3, r2
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <MqttPacket_Write>:
    return header_len;
}


int MqttPacket_Write(MqttClient *client, byte* tx_buf, int tx_buf_len)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
    int rc;
    rc = MqttSocket_Write(client, tx_buf, tx_buf_len, client->cmd_timeout_ms);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f8e9 	bl	8002b14 <MqttSocket_Write>
 8002942:	6178      	str	r0, [r7, #20]
    return rc;
 8002944:	697b      	ldr	r3, [r7, #20]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <MqttPacket_Read>:

/* Read return code is length when > 0 */
int MqttPacket_Read(MqttClient *client, byte* rx_buf, int rx_buf_len,
    int timeout_ms)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b088      	sub	sp, #32
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	603b      	str	r3, [r7, #0]
    int rc, len, remain_read = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
    MqttPacket* header = (MqttPacket*)rx_buf;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	61bb      	str	r3, [r7, #24]

    switch (client->packet.stat)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	7f1b      	ldrb	r3, [r3, #28]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d01e      	beq.n	80029aa <MqttPacket_Read+0x5c>
 800296c:	2b02      	cmp	r3, #2
 800296e:	d057      	beq.n	8002a20 <MqttPacket_Read+0xd2>
 8002970:	2b00      	cmp	r3, #0
 8002972:	d17e      	bne.n	8002a72 <MqttPacket_Read+0x124>
    {
        case MQTT_PK_BEGIN:
        {
            client->packet.header_len = 2;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2202      	movs	r2, #2
 8002978:	621a      	str	r2, [r3, #32]
            client->packet.remain_len = 0;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	625a      	str	r2, [r3, #36]	; 0x24

            /* Read fix header portion */
            rc = MqttSocket_Read(client, rx_buf, client->packet.header_len, timeout_ms);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a1a      	ldr	r2, [r3, #32]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f92a 	bl	8002be2 <MqttSocket_Read>
 800298e:	6178      	str	r0, [r7, #20]
            if (rc < 0) {
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	da01      	bge.n	800299a <MqttPacket_Read+0x4c>
                return rc;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	e072      	b.n	8002a80 <MqttPacket_Read+0x132>
            }
            else if (rc != client->packet.header_len) {
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a1a      	ldr	r2, [r3, #32]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d002      	beq.n	80029aa <MqttPacket_Read+0x5c>
                return MQTT_CODE_ERROR_NETWORK;
 80029a4:	f06f 0307 	mvn.w	r3, #7
 80029a8:	e06a      	b.n	8002a80 <MqttPacket_Read+0x132>
            FALL_THROUGH;
        }

        case MQTT_PK_READ_HEAD:
        {
            client->packet.stat = MQTT_PK_READ_HEAD;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	771a      	strb	r2, [r3, #28]

            do {
                /* Try and decode remaining length */
                rc = MqttDecode_RemainLen(header, client->packet.header_len, &client->packet.remain_len);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a19      	ldr	r1, [r3, #32]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3324      	adds	r3, #36	; 0x24
 80029b8:	461a      	mov	r2, r3
 80029ba:	69b8      	ldr	r0, [r7, #24]
 80029bc:	f7ff faf7 	bl	8001fae <MqttDecode_RemainLen>
 80029c0:	6178      	str	r0, [r7, #20]
                if (rc < 0) { /* Indicates error */
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	da01      	bge.n	80029cc <MqttPacket_Read+0x7e>
                    return rc;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	e059      	b.n	8002a80 <MqttPacket_Read+0x132>
                }
                /* Indicates decode success and rc is len of header */
                else if (rc > 0) {
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	dd03      	ble.n	80029da <MqttPacket_Read+0x8c>
                    client->packet.header_len = rc;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	621a      	str	r2, [r3, #32]
                    break; /* exit while */
 80029d8:	e022      	b.n	8002a20 <MqttPacket_Read+0xd2>
                }

                /* Read next byte and try decode again */
                len = 1;
 80029da:	2301      	movs	r3, #1
 80029dc:	613b      	str	r3, [r7, #16]
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len], len, timeout_ms);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	1899      	adds	r1, r3, r2
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f8f8 	bl	8002be2 <MqttSocket_Read>
 80029f2:	6178      	str	r0, [r7, #20]
                if (rc < 0) {
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	da01      	bge.n	80029fe <MqttPacket_Read+0xb0>
                    return rc;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	e040      	b.n	8002a80 <MqttPacket_Read+0x132>
                }
                else if (rc != len) {
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d002      	beq.n	8002a0c <MqttPacket_Read+0xbe>
                    return MQTT_CODE_ERROR_NETWORK;
 8002a06:	f06f 0307 	mvn.w	r3, #7
 8002a0a:	e039      	b.n	8002a80 <MqttPacket_Read+0x132>
                }
                client->packet.header_len += len;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a1a      	ldr	r2, [r3, #32]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	441a      	add	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	621a      	str	r2, [r3, #32]

            } while (client->packet.header_len < MQTT_PACKET_MAX_SIZE);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	ddc7      	ble.n	80029b0 <MqttPacket_Read+0x62>
            FALL_THROUGH;
        }

        case MQTT_PK_READ:
        {
            client->packet.stat = MQTT_PK_READ;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2202      	movs	r2, #2
 8002a24:	771a      	strb	r2, [r3, #28]

            /* Make sure it does not overflow rx_buf */
            if (client->packet.remain_len > (rx_buf_len - client->packet.header_len)) {
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	1acb      	subs	r3, r1, r3
 8002a32:	429a      	cmp	r2, r3
 8002a34:	dd05      	ble.n	8002a42 <MqttPacket_Read+0xf4>
                client->packet.remain_len = rx_buf_len - client->packet.header_len;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	1ad2      	subs	r2, r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24
            }

            /* Read remaining */
            if (client->packet.remain_len > 0) {
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	dd12      	ble.n	8002a70 <MqttPacket_Read+0x122>
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len],
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	1899      	adds	r1, r3, r2
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f8c1 	bl	8002be2 <MqttSocket_Read>
 8002a60:	6178      	str	r0, [r7, #20]
                    client->packet.remain_len, timeout_ms);
                if (rc <= 0) {
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	dc01      	bgt.n	8002a6c <MqttPacket_Read+0x11e>
                    return rc;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	e009      	b.n	8002a80 <MqttPacket_Read+0x132>
                }
                remain_read = rc;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	61fb      	str	r3, [r7, #28]
            }

            break;
 8002a70:	bf00      	nop
        }
    } /* switch (client->packet.stat) */

    /* reset state */
    client->packet.stat = MQTT_PK_BEGIN;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]

    /* Return read length */
    return client->packet.header_len + remain_read;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1a      	ldr	r2, [r3, #32]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4413      	add	r3, r2
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3720      	adds	r7, #32
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <MqttSocket_Init>:
#endif


/* Public Functions */
int MqttSocket_Init(MqttClient *client, MqttNet *net)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
    int rc = MQTT_CODE_ERROR_BAD_ARG;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a96:	60fb      	str	r3, [r7, #12]
    if (client) {
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01d      	beq.n	8002ada <MqttSocket_Init+0x52>
        client->net = net;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	619a      	str	r2, [r3, #24]
        client->flags &= ~(MQTT_CLIENT_FLAG_IS_CONNECTED |
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 0203 	bic.w	r2, r3, #3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	601a      	str	r2, [r3, #0]
        client->tls.ssl = NULL;
        client->tls.timeout_ms = client->cmd_timeout_ms;
    #endif

        /* Validate callbacks are not null! */
        if (net && net->connect && net->read && net->write && net->disconnect) {
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d011      	beq.n	8002ada <MqttSocket_Init+0x52>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00d      	beq.n	8002ada <MqttSocket_Init+0x52>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <MqttSocket_Init+0x52>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <MqttSocket_Init+0x52>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MqttSocket_Init+0x52>
            rc = MQTT_CODE_SUCCESS;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
        }
    }
    return rc;
 8002ada:	68fb      	ldr	r3, [r7, #12]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <MqttSocket_WriteDo>:

static int MqttSocket_WriteDo(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 8002ae6:	b590      	push	{r4, r7, lr}
 8002ae8:	b087      	sub	sp, #28
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->write(client->net->context, buf, buf_len,
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	68dc      	ldr	r4, [r3, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	47a0      	blx	r4
 8002b08:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Write: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 8002b0a:	697b      	ldr	r3, [r7, #20]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd90      	pop	{r4, r7, pc}

08002b14 <MqttSocket_Write>:

int MqttSocket_Write(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->write == NULL ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00e      	beq.n	8002b46 <MqttSocket_Write+0x32>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <MqttSocket_Write+0x32>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <MqttSocket_Write+0x32>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <MqttSocket_Write+0x32>
        buf == NULL || buf_len <= 0) {
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	dc02      	bgt.n	8002b4c <MqttSocket_Write+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b4a:	e02f      	b.n	8002bac <MqttSocket_Write+0x98>
    }

    /* check for buffer position overflow */
    if (client->write.pos >= buf_len) {
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	db02      	blt.n	8002b5c <MqttSocket_Write+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8002b56:	f06f 0301 	mvn.w	r3, #1
 8002b5a:	e027      	b.n	8002bac <MqttSocket_Write+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	461a      	mov	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1899      	adds	r1, r3, r2
            buf_len - client->write.pos, timeout_ms);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	1ad2      	subs	r2, r2, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f7ff ffb8 	bl	8002ae6 <MqttSocket_WriteDo>
 8002b76:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	dd0b      	ble.n	8002b96 <MqttSocket_Write+0x82>
            break;
        }
        client->write.pos += rc;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	441a      	add	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	635a      	str	r2, [r3, #52]	; 0x34
    } while (client->write.pos < buf_len);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	dbe3      	blt.n	8002b5c <MqttSocket_Write+0x48>
 8002b94:	e000      	b.n	8002b98 <MqttSocket_Write+0x84>
            break;
 8002b96:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	dd05      	ble.n	8002baa <MqttSocket_Write+0x96>
        /* return length write and reset position */
        rc = client->write.pos;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba2:	617b      	str	r3, [r7, #20]
        client->write.pos = 0;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return rc;
 8002baa:	697b      	ldr	r3, [r7, #20]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <MqttSocket_ReadDo>:

static int MqttSocket_ReadDo(MqttClient *client, byte* buf, int buf_len,
    int timeout_ms)
{
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->read(client->net->context, buf, buf_len, timeout_ms);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	689c      	ldr	r4, [r3, #8]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	47a0      	blx	r4
 8002bd6:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Read: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 8002bd8:	697b      	ldr	r3, [r7, #20]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}

08002be2 <MqttSocket_Read>:

int MqttSocket_Read(MqttClient *client, byte* buf, int buf_len, int timeout_ms)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->read == NULL ||
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00e      	beq.n	8002c14 <MqttSocket_Read+0x32>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <MqttSocket_Read+0x32>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <MqttSocket_Read+0x32>
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <MqttSocket_Read+0x32>
        buf == NULL || buf_len <= 0) {
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	dc02      	bgt.n	8002c1a <MqttSocket_Read+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c18:	e02f      	b.n	8002c7a <MqttSocket_Read+0x98>
    }

    /* check for buffer position overflow */
    if (client->read.pos >= buf_len) {
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	db02      	blt.n	8002c2a <MqttSocket_Read+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8002c24:	f06f 0301 	mvn.w	r3, #1
 8002c28:	e027      	b.n	8002c7a <MqttSocket_Read+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	1899      	adds	r1, r3, r2
            buf_len - client->read.pos, timeout_ms);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	1ad2      	subs	r2, r2, r3
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f7ff ffb8 	bl	8002bb4 <MqttSocket_ReadDo>
 8002c44:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	dd0b      	ble.n	8002c64 <MqttSocket_Read+0x82>
            break;
        }
        client->read.pos += rc;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	441a      	add	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	62da      	str	r2, [r3, #44]	; 0x2c
    } while (client->read.pos < buf_len);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	dbe3      	blt.n	8002c2a <MqttSocket_Read+0x48>
 8002c62:	e000      	b.n	8002c66 <MqttSocket_Read+0x84>
            break;
 8002c64:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	dd05      	ble.n	8002c78 <MqttSocket_Read+0x96>
        /* return length read and reset position */
        rc = client->read.pos;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	617b      	str	r3, [r7, #20]
        client->read.pos = 0;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    return rc;
 8002c78:	697b      	ldr	r3, [r7, #20]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <l3_send_packet>:





void l3_send_packet (uint8_t addr, uint8_t * data, uint8_t len){
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08c      	sub	sp, #48	; 0x30
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	6039      	str	r1, [r7, #0]
 8002c8e:	71fb      	strb	r3, [r7, #7]
 8002c90:	4613      	mov	r3, r2
 8002c92:	71bb      	strb	r3, [r7, #6]
	uint8_t pos=0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t frame[FRAME_SIZE];
	uint8_t frm_nb = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t total_frames_nb;
	uint8_t remaining_len = len;
 8002ca0:	79bb      	ldrb	r3, [r7, #6]
 8002ca2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t size_to_send;

	total_frames_nb = (len + (L2_DATA_SIZE - 1)) / L2_DATA_SIZE;
 8002ca6:	79bb      	ldrb	r3, [r7, #6]
 8002ca8:	331d      	adds	r3, #29
 8002caa:	4a25      	ldr	r2, [pc, #148]	; (8002d40 <l3_send_packet+0xbc>)
 8002cac:	fb82 1203 	smull	r1, r2, r2, r3
 8002cb0:	441a      	add	r2, r3
 8002cb2:	1112      	asrs	r2, r2, #4
 8002cb4:	17db      	asrs	r3, r3, #31
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	while (frm_nb < total_frames_nb){
 8002cbc:	e035      	b.n	8002d2a <l3_send_packet+0xa6>
		memset(&frame[0], 0, FRAME_SIZE);
 8002cbe:	f107 0308 	add.w	r3, r7, #8
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 ff27 	bl	8003b1a <memset>

		frame[H_FRM] = frm_nb;
 8002ccc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002cd0:	723b      	strb	r3, [r7, #8]
		frame[H_TOTAL] = total_frames_nb;
 8002cd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002cd6:	727b      	strb	r3, [r7, #9]

		size_to_send = (remaining_len > L2_DATA_SIZE)? L2_DATA_SIZE : remaining_len;
 8002cd8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cdc:	2b1e      	cmp	r3, #30
 8002cde:	bf28      	it	cs
 8002ce0:	231e      	movcs	r3, #30
 8002ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		memcpy(&frame[0 + L2_HEAD_SIZE], &data[pos], size_to_send);
 8002ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	18d1      	adds	r1, r2, r3
 8002cee:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002cf2:	f107 0308 	add.w	r3, r7, #8
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 ff03 	bl	8003b04 <memcpy>
		nrf24_send(frame);
 8002cfe:	f107 0308 	add.w	r3, r7, #8
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f998 	bl	8003038 <nrf24_send>

		remaining_len -= size_to_send;
 8002d08:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002d0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		pos += L2_DATA_SIZE;
 8002d16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d1a:	331e      	adds	r3, #30
 8002d1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		frm_nb++;
 8002d20:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d24:	3301      	adds	r3, #1
 8002d26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	while (frm_nb < total_frames_nb){
 8002d2a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002d2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d3c3      	bcc.n	8002cbe <l3_send_packet+0x3a>
	}
}
 8002d36:	bf00      	nop
 8002d38:	3730      	adds	r7, #48	; 0x30
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	88888889 	.word	0x88888889

08002d44 <l3_receive_packet>:





bool l3_receive_packet(uint8_t *data, uint8_t * packet_buff){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
	if (data[H_FRM] < data[H_TOTAL]){
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3301      	adds	r3, #1
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d21a      	bcs.n	8002d92 <l3_receive_packet+0x4e>
		uint8_t frm_nb = data[H_FRM];
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	73fb      	strb	r3, [r7, #15]
		memcpy(&packet_buff[L2_DATA_SIZE * frm_nb], &data[0+ L2_HEAD_SIZE], L2_DATA_SIZE);
 8002d62:	7bfa      	ldrb	r2, [r7, #15]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	1898      	adds	r0, r3, r2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3302      	adds	r3, #2
 8002d76:	221e      	movs	r2, #30
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f000 fec3 	bl	8003b04 <memcpy>
		if ((data[H_FRM]+1) == data[H_TOTAL]){
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	3301      	adds	r3, #1
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	3201      	adds	r2, #1
 8002d88:	7812      	ldrb	r2, [r2, #0]
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d101      	bne.n	8002d92 <l3_receive_packet+0x4e>
			return true;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <l3_receive_packet+0x50>
		}
	}
	return false;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <nRF24_restore_defaults>:



// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_restore_defaults(void) {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nrf24_configRegister(nRF24_REG_CONFIG, 0x08);
 8002da2:	2108      	movs	r1, #8
 8002da4:	2000      	movs	r0, #0
 8002da6:	f000 fa12 	bl	80031ce <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_EN_AA, 0x3F);
 8002daa:	213f      	movs	r1, #63	; 0x3f
 8002dac:	2001      	movs	r0, #1
 8002dae:	f000 fa0e 	bl	80031ce <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_EN_RXADDR, 0x03);
 8002db2:	2103      	movs	r1, #3
 8002db4:	2002      	movs	r0, #2
 8002db6:	f000 fa0a 	bl	80031ce <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_SETUP_AW, 0x03);
 8002dba:	2103      	movs	r1, #3
 8002dbc:	2003      	movs	r0, #3
 8002dbe:	f000 fa06 	bl	80031ce <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_SETUP_RETR, 0x03);
 8002dc2:	2103      	movs	r1, #3
 8002dc4:	2004      	movs	r0, #4
 8002dc6:	f000 fa02 	bl	80031ce <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RF_CH, 0x02);
 8002dca:	2102      	movs	r1, #2
 8002dcc:	2005      	movs	r0, #5
 8002dce:	f000 f9fe 	bl	80031ce <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RF_SETUP, 0x0E);
 8002dd2:	210e      	movs	r1, #14
 8002dd4:	2006      	movs	r0, #6
 8002dd6:	f000 f9fa 	bl	80031ce <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_STATUS, 0x00);
 8002dda:	2100      	movs	r1, #0
 8002ddc:	2007      	movs	r0, #7
 8002dde:	f000 f9f6 	bl	80031ce <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P0, 0x00);
 8002de2:	2100      	movs	r1, #0
 8002de4:	2011      	movs	r0, #17
 8002de6:	f000 f9f2 	bl	80031ce <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P1, 0x00);
 8002dea:	2100      	movs	r1, #0
 8002dec:	2012      	movs	r0, #18
 8002dee:	f000 f9ee 	bl	80031ce <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P2, 0x00);
 8002df2:	2100      	movs	r1, #0
 8002df4:	2013      	movs	r0, #19
 8002df6:	f000 f9ea 	bl	80031ce <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P3, 0x00);
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	2014      	movs	r0, #20
 8002dfe:	f000 f9e6 	bl	80031ce <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P4, 0x00);
 8002e02:	2100      	movs	r1, #0
 8002e04:	2015      	movs	r0, #21
 8002e06:	f000 f9e2 	bl	80031ce <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P5, 0x00);
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	2016      	movs	r0, #22
 8002e0e:	f000 f9de 	bl	80031ce <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_DYNPD, 0x00);
 8002e12:	2100      	movs	r1, #0
 8002e14:	201c      	movs	r0, #28
 8002e16:	f000 f9da 	bl	80031ce <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_FEATURE, 0x00);
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	201d      	movs	r0, #29
 8002e1e:	f000 f9d6 	bl	80031ce <nrf24_configRegister>

	// Clear the FIFO's
	spi_transfer(FLUSH_RX);
 8002e22:	20e2      	movs	r0, #226	; 0xe2
 8002e24:	f000 f985 	bl	8003132 <spi_transfer>
    spi_transfer(FLUSH_TX);
 8002e28:	20e1      	movs	r0, #225	; 0xe1
 8002e2a:	f000 f982 	bl	8003132 <spi_transfer>

	// Clear any pending interrupt flags
	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
    uint8_t reg;

	nrf24_readRegister(nRF24_REG_STATUS, &reg, 1);
 8002e2e:	1dfb      	adds	r3, r7, #7
 8002e30:	2201      	movs	r2, #1
 8002e32:	4619      	mov	r1, r3
 8002e34:	2007      	movs	r0, #7
 8002e36:	f000 f9ea 	bl	800320e <nrf24_readRegister>
	reg |= nRF24_MASK_STATUS_IRQ;
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	71fb      	strb	r3, [r7, #7]
	//nRF24_WriteReg(nRF24_REG_STATUS, reg);
	nrf24_configRegister(nRF24_REG_STATUS, reg);
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	4619      	mov	r1, r3
 8002e48:	2007      	movs	r0, #7
 8002e4a:	f000 f9c0 	bl	80031ce <nrf24_configRegister>


}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <nrf24_init>:
	}
}

/* init the hardware pins */
void nrf24_init() 
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	af00      	add	r7, sp, #0
	nRF24_GPIO_Init();
 8002e5a:	f000 fa19 	bl	8003290 <nRF24_GPIO_Init>
    nrf24_ce_digitalWrite(LOW);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f000 f806 	bl	8002e70 <nrf24_ce_digitalWrite>
    nrf24_csn_digitalWrite(HIGH);    
 8002e64:	2001      	movs	r0, #1
 8002e66:	f000 f81b 	bl	8002ea0 <nrf24_csn_digitalWrite>
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <nrf24_ce_digitalWrite>:

void nrf24_ce_digitalWrite(uint8_t state)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
    if(state)
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <nrf24_ce_digitalWrite+0x1a>
    {
    	nRF24_CE_H();
 8002e80:	2101      	movs	r1, #1
 8002e82:	4806      	ldr	r0, [pc, #24]	; (8002e9c <nrf24_ce_digitalWrite+0x2c>)
 8002e84:	f7fe fbae 	bl	80015e4 <GPIO_SetBits>
    }
    else
    {
    	 nRF24_CE_L();
    }
}
 8002e88:	e003      	b.n	8002e92 <nrf24_ce_digitalWrite+0x22>
    	 nRF24_CE_L();
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4803      	ldr	r0, [pc, #12]	; (8002e9c <nrf24_ce_digitalWrite+0x2c>)
 8002e8e:	f7fe fbb7 	bl	8001600 <GPIO_ResetBits>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40010c00 	.word	0x40010c00

08002ea0 <nrf24_csn_digitalWrite>:


void nrf24_csn_digitalWrite(uint8_t state)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
    if(state)
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <nrf24_csn_digitalWrite+0x1a>
    {
    	nRF24_CSN_H();
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	4806      	ldr	r0, [pc, #24]	; (8002ecc <nrf24_csn_digitalWrite+0x2c>)
 8002eb4:	f7fe fb96 	bl	80015e4 <GPIO_SetBits>
    }
    else
    {
    	nRF24_CSN_L();
    }
}
 8002eb8:	e003      	b.n	8002ec2 <nrf24_csn_digitalWrite+0x22>
    	nRF24_CSN_L();
 8002eba:	2102      	movs	r1, #2
 8002ebc:	4803      	ldr	r0, [pc, #12]	; (8002ecc <nrf24_csn_digitalWrite+0x2c>)
 8002ebe:	f7fe fb9f 	bl	8001600 <GPIO_ResetBits>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40010c00 	.word	0x40010c00

08002ed0 <nrf24_config>:



/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	460a      	mov	r2, r1
 8002eda:	71fb      	strb	r3, [r7, #7]
 8002edc:	4613      	mov	r3, r2
 8002ede:	71bb      	strb	r3, [r7, #6]
    /* Use static payload length ... */
    payload_len = pay_length;
 8002ee0:	4a1f      	ldr	r2, [pc, #124]	; (8002f60 <nrf24_config+0x90>)
 8002ee2:	79bb      	ldrb	r3, [r7, #6]
 8002ee4:	7013      	strb	r3, [r2, #0]

    // Set RF channel
    nrf24_configRegister(RF_CH,channel);
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	2005      	movs	r0, #5
 8002eec:	f000 f96f 	bl	80031ce <nrf24_configRegister>

    // Set length of incoming payload 
    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2011      	movs	r0, #17
 8002ef4:	f000 f96b 	bl	80031ce <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <nrf24_config+0x90>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	4619      	mov	r1, r3
 8002efe:	2012      	movs	r0, #18
 8002f00:	f000 f965 	bl	80031ce <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
 8002f04:	2100      	movs	r1, #0
 8002f06:	2013      	movs	r0, #19
 8002f08:	f000 f961 	bl	80031ce <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	2014      	movs	r0, #20
 8002f10:	f000 f95d 	bl	80031ce <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
 8002f14:	2100      	movs	r1, #0
 8002f16:	2015      	movs	r0, #21
 8002f18:	f000 f959 	bl	80031ce <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	2016      	movs	r0, #22
 8002f20:	f000 f955 	bl	80031ce <nrf24_configRegister>

    // 1 Mbps, TX gain: 0dbm
    nrf24_configRegister(RF_SETUP, (1 << RF_DR_LOW)|((0x03)<<RF_PWR));
 8002f24:	2126      	movs	r1, #38	; 0x26
 8002f26:	2006      	movs	r0, #6
 8002f28:	f000 f951 	bl	80031ce <nrf24_configRegister>

    // CRC enable, 1 byte CRC length
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
 8002f2c:	2108      	movs	r1, #8
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f000 f94d 	bl	80031ce <nrf24_configRegister>

    // Auto Acknowledgment
    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
 8002f34:	2103      	movs	r1, #3
 8002f36:	2001      	movs	r0, #1
 8002f38:	f000 f949 	bl	80031ce <nrf24_configRegister>

    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
 8002f3c:	2103      	movs	r1, #3
 8002f3e:	2002      	movs	r0, #2
 8002f40:	f000 f945 	bl	80031ce <nrf24_configRegister>

    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
 8002f44:	214f      	movs	r1, #79	; 0x4f
 8002f46:	2004      	movs	r0, #4
 8002f48:	f000 f941 	bl	80031ce <nrf24_configRegister>

    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	201c      	movs	r0, #28
 8002f50:	f000 f93d 	bl	80031ce <nrf24_configRegister>

    // Start listening
    nrf24_powerUpRx();
 8002f54:	f000 f8c6 	bl	80030e4 <nrf24_powerUpRx>
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000194 	.word	0x20000194

08002f64 <nrf24_rx_address>:

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
    nrf24_ce_digitalWrite(LOW);
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f7ff ff7f 	bl	8002e70 <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 8002f72:	2205      	movs	r2, #5
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	200b      	movs	r0, #11
 8002f78:	f000 f968 	bl	800324c <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	f7ff ff77 	bl	8002e70 <nrf24_ce_digitalWrite>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 8002f92:	2205      	movs	r2, #5
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	200a      	movs	r0, #10
 8002f98:	f000 f958 	bl	800324c <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	2010      	movs	r0, #16
 8002fa2:	f000 f953 	bl	800324c <nrf24_writeRegister>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
 8002fb4:	f000 f883 	bl	80030be <nrf24_getStatus>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	71fb      	strb	r3, [r7, #7]

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <nrf24_dataReady+0x1c>
    {
        return 1;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e007      	b.n	8002fda <nrf24_dataReady+0x2c>
    }

    return !nrf24_rxFifoEmpty();;
 8002fca:	f000 f80a 	bl	8002fe2 <nrf24_rxFifoEmpty>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
 8002fe8:	1dfb      	adds	r3, r7, #7
 8002fea:	2201      	movs	r2, #1
 8002fec:	4619      	mov	r1, r3
 8002fee:	2017      	movs	r0, #23
 8002ff0:	f000 f90d 	bl	800320e <nrf24_readRegister>
    
    return (fifoStatus & (1 << RX_EMPTY));
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <nrf24_getData>:
    return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);                               
 800300c:	2000      	movs	r0, #0
 800300e:	f7ff ff47 	bl	8002ea0 <nrf24_csn_digitalWrite>

    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
 8003012:	2061      	movs	r0, #97	; 0x61
 8003014:	f000 f88d 	bl	8003132 <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <nrf24_getData+0x30>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f898 	bl	8003156 <nrf24_transferSync>
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
 8003026:	2001      	movs	r0, #1
 8003028:	f7ff ff3a 	bl	8002ea0 <nrf24_csn_digitalWrite>

    /* Reset status register */
 //   nrf24_configRegister(STATUS,(1<<RX_DR));
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000194 	.word	0x20000194

08003038 <nrf24_send>:
}

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value) 
{    
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
    /* Go to Standby-I first */
    nrf24_ce_digitalWrite(LOW);
 8003040:	2000      	movs	r0, #0
 8003042:	f7ff ff15 	bl	8002e70 <nrf24_ce_digitalWrite>
     
    /* Set to transmitter mode , Power up if needed */
    nrf24_powerUpTx();
 8003046:	f000 f868 	bl	800311a <nrf24_powerUpTx>
//    _delay_ms(50);
    /* Do we really need to flush TX fifo each time ? */
    #if 1
        /* Pull down chip select */
        nrf24_csn_digitalWrite(LOW);           
 800304a:	2000      	movs	r0, #0
 800304c:	f7ff ff28 	bl	8002ea0 <nrf24_csn_digitalWrite>

        /* Write cmd to flush transmit FIFO */
        spi_transfer(FLUSH_TX);     
 8003050:	20e1      	movs	r0, #225	; 0xe1
 8003052:	f000 f86e 	bl	8003132 <spi_transfer>

        /* Pull up chip select */
        nrf24_csn_digitalWrite(HIGH);                    
 8003056:	2001      	movs	r0, #1
 8003058:	f7ff ff22 	bl	8002ea0 <nrf24_csn_digitalWrite>
    #endif 

    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);
 800305c:	2000      	movs	r0, #0
 800305e:	f7ff ff1f 	bl	8002ea0 <nrf24_csn_digitalWrite>

    /* Write cmd to write payload */
    spi_transfer(W_TX_PAYLOAD);
 8003062:	20a0      	movs	r0, #160	; 0xa0
 8003064:	f000 f865 	bl	8003132 <spi_transfer>

    /* Write payload */
    nrf24_transmitSync(value,payload_len);   
 8003068:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <nrf24_send+0x5c>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	4619      	mov	r1, r3
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f892 	bl	8003198 <nrf24_transmitSync>

    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
 8003074:	2001      	movs	r0, #1
 8003076:	f7ff ff13 	bl	8002ea0 <nrf24_csn_digitalWrite>

    /* Start the transmission */
    nrf24_ce_digitalWrite(HIGH);
 800307a:	2001      	movs	r0, #1
 800307c:	f7ff fef8 	bl	8002e70 <nrf24_ce_digitalWrite>
    while (nrf24_isSending());
 8003080:	bf00      	nop
 8003082:	f000 f809 	bl	8003098 <nrf24_isSending>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1fa      	bne.n	8003082 <nrf24_send+0x4a>

}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000194 	.word	0x20000194

08003098 <nrf24_isSending>:

uint8_t nrf24_isSending()
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
    uint8_t status;

    /* read the current status */
    status = nrf24_getStatus();
 800309e:	f000 f80e 	bl	80030be <nrf24_getStatus>
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
                
    /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
    if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <nrf24_isSending+0x1c>
    {        
        return 0; /* false */
 80030b0:	2300      	movs	r3, #0
 80030b2:	e000      	b.n	80030b6 <nrf24_isSending+0x1e>
    }

    return 1; /* true */
 80030b4:	2301      	movs	r3, #1

}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <nrf24_getStatus>:

uint8_t nrf24_getStatus()
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7ff feeb 	bl	8002ea0 <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
 80030ca:	20ff      	movs	r0, #255	; 0xff
 80030cc:	f000 f831 	bl	8003132 <spi_transfer>
 80030d0:	4603      	mov	r3, r0
 80030d2:	71fb      	strb	r3, [r7, #7]
    nrf24_csn_digitalWrite(HIGH);
 80030d4:	2001      	movs	r0, #1
 80030d6:	f7ff fee3 	bl	8002ea0 <nrf24_csn_digitalWrite>
    return rv;
 80030da:	79fb      	ldrb	r3, [r7, #7]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <nrf24_powerUpRx>:
        return 0xFF;
    }
}

void nrf24_powerUpRx()
{     
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
    nrf24_csn_digitalWrite(LOW);
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7ff fed9 	bl	8002ea0 <nrf24_csn_digitalWrite>
    spi_transfer(FLUSH_RX);
 80030ee:	20e2      	movs	r0, #226	; 0xe2
 80030f0:	f000 f81f 	bl	8003132 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 80030f4:	2001      	movs	r0, #1
 80030f6:	f7ff fed3 	bl	8002ea0 <nrf24_csn_digitalWrite>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 80030fa:	2170      	movs	r1, #112	; 0x70
 80030fc:	2007      	movs	r0, #7
 80030fe:	f000 f866 	bl	80031ce <nrf24_configRegister>

    nrf24_ce_digitalWrite(LOW);    
 8003102:	2000      	movs	r0, #0
 8003104:	f7ff feb4 	bl	8002e70 <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
 8003108:	210b      	movs	r1, #11
 800310a:	2000      	movs	r0, #0
 800310c:	f000 f85f 	bl	80031ce <nrf24_configRegister>
    nrf24_ce_digitalWrite(HIGH);
 8003110:	2001      	movs	r0, #1
 8003112:	f7ff fead 	bl	8002e70 <nrf24_ce_digitalWrite>
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}

0800311a <nrf24_powerUpTx>:

void nrf24_powerUpTx()
{
 800311a:	b580      	push	{r7, lr}
 800311c:	af00      	add	r7, sp, #0
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 800311e:	2170      	movs	r1, #112	; 0x70
 8003120:	2007      	movs	r0, #7
 8003122:	f000 f854 	bl	80031ce <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
 8003126:	210a      	movs	r1, #10
 8003128:	2000      	movs	r0, #0
 800312a:	f000 f850 	bl	80031ce <nrf24_configRegister>
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}

08003132 <spi_transfer>:
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
}

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	71fb      	strb	r3, [r7, #7]
    uint8_t rx = 0;    
 800313c:	2300      	movs	r3, #0
 800313e:	73fb      	strb	r3, [r7, #15]

	rx  = nRF24_LL_RW(tx);
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f91a 	bl	800337c <nRF24_LL_RW>
 8003148:	4603      	mov	r3, r0
 800314a:	73fb      	strb	r3, [r7, #15]

    return rx;
 800314c:	7bfb      	ldrb	r3, [r7, #15]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
 8003156:	b590      	push	{r4, r7, lr}
 8003158:	b087      	sub	sp, #28
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	4613      	mov	r3, r2
 8003162:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    for(i=0;i<len;i++)
 8003164:	2300      	movs	r3, #0
 8003166:	75fb      	strb	r3, [r7, #23]
 8003168:	e00e      	b.n	8003188 <nrf24_transferSync+0x32>
    {
        datain[i] = spi_transfer(dataout[i]);
 800316a:	7dfb      	ldrb	r3, [r7, #23]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	18d4      	adds	r4, r2, r3
 8003170:	7dfb      	ldrb	r3, [r7, #23]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4413      	add	r3, r2
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ffda 	bl	8003132 <spi_transfer>
 800317e:	4603      	mov	r3, r0
 8003180:	7023      	strb	r3, [r4, #0]
    for(i=0;i<len;i++)
 8003182:	7dfb      	ldrb	r3, [r7, #23]
 8003184:	3301      	adds	r3, #1
 8003186:	75fb      	strb	r3, [r7, #23]
 8003188:	7dfa      	ldrb	r2, [r7, #23]
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	429a      	cmp	r2, r3
 800318e:	d3ec      	bcc.n	800316a <nrf24_transferSync+0x14>
    }

}
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	bd90      	pop	{r4, r7, pc}

08003198 <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    
    for(i=0;i<len;i++)
 80031a4:	2300      	movs	r3, #0
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	e009      	b.n	80031be <nrf24_transmitSync+0x26>
    {
        spi_transfer(dataout[i]);
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	4413      	add	r3, r2
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ffbd 	bl	8003132 <spi_transfer>
    for(i=0;i<len;i++)
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	3301      	adds	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
 80031be:	7bfa      	ldrb	r2, [r7, #15]
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d3f1      	bcc.n	80031aa <nrf24_transmitSync+0x12>
    }

}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	460a      	mov	r2, r1
 80031d8:	71fb      	strb	r3, [r7, #7]
 80031da:	4613      	mov	r3, r2
 80031dc:	71bb      	strb	r3, [r7, #6]
    nrf24_csn_digitalWrite(LOW);
 80031de:	2000      	movs	r0, #0
 80031e0:	f7ff fe5e 	bl	8002ea0 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f043 0320 	orr.w	r3, r3, #32
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ff9d 	bl	8003132 <spi_transfer>
    spi_transfer(value);
 80031f8:	79bb      	ldrb	r3, [r7, #6]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff99 	bl	8003132 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 8003200:	2001      	movs	r0, #1
 8003202:	f7ff fe4d 	bl	8002ea0 <nrf24_csn_digitalWrite>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	6039      	str	r1, [r7, #0]
 8003218:	71fb      	strb	r3, [r7, #7]
 800321a:	4613      	mov	r3, r2
 800321c:	71bb      	strb	r3, [r7, #6]
    nrf24_csn_digitalWrite(LOW);
 800321e:	2000      	movs	r0, #0
 8003220:	f7ff fe3e 	bl	8002ea0 <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	b2db      	uxtb	r3, r3
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff80 	bl	8003132 <spi_transfer>
    nrf24_transferSync(value,value,len);
 8003232:	79bb      	ldrb	r3, [r7, #6]
 8003234:	461a      	mov	r2, r3
 8003236:	6839      	ldr	r1, [r7, #0]
 8003238:	6838      	ldr	r0, [r7, #0]
 800323a:	f7ff ff8c 	bl	8003156 <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
 800323e:	2001      	movs	r0, #1
 8003240:	f7ff fe2e 	bl	8002ea0 <nrf24_csn_digitalWrite>
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	6039      	str	r1, [r7, #0]
 8003256:	71fb      	strb	r3, [r7, #7]
 8003258:	4613      	mov	r3, r2
 800325a:	71bb      	strb	r3, [r7, #6]
    nrf24_csn_digitalWrite(LOW);
 800325c:	2000      	movs	r0, #0
 800325e:	f7ff fe1f 	bl	8002ea0 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f043 0320 	orr.w	r3, r3, #32
 800326e:	b2db      	uxtb	r3, r3
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff5e 	bl	8003132 <spi_transfer>
    nrf24_transmitSync(value,len);
 8003276:	79bb      	ldrb	r3, [r7, #6]
 8003278:	4619      	mov	r1, r3
 800327a:	6838      	ldr	r0, [r7, #0]
 800327c:	f7ff ff8c 	bl	8003198 <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 8003280:	2001      	movs	r0, #1
 8003282:	f7ff fe0d 	bl	8002ea0 <nrf24_csn_digitalWrite>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <nRF24_GPIO_Init>:
#include <nrf24_platform.h>
#include "nrf24.h"

// Configure the GPIO lines of the nRF24L01 transceiver
// note: IRQ pin must be configured separately
void nRF24_GPIO_Init(void) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8003296:	2101      	movs	r1, #1
 8003298:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800329c:	f7fe f9be 	bl	800161c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80032a0:	2101      	movs	r1, #1
 80032a2:	2004      	movs	r0, #4
 80032a4:	f7fe f9ba 	bl	800161c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80032a8:	2101      	movs	r1, #1
 80032aa:	2008      	movs	r0, #8
 80032ac:	f7fe f9b6 	bl	800161c <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 80032b0:	23e0      	movs	r3, #224	; 0xe0
 80032b2:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80032b4:	2318      	movs	r3, #24
 80032b6:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80032b8:	2301      	movs	r3, #1
 80032ba:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80032bc:	f107 0308 	add.w	r3, r7, #8
 80032c0:	4619      	mov	r1, r3
 80032c2:	482a      	ldr	r0, [pc, #168]	; (800336c <nRF24_GPIO_Init+0xdc>)
 80032c4:	f7fe f8d2 	bl	800146c <GPIO_Init>



	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 80032c8:	2340      	movs	r3, #64	; 0x40
 80032ca:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80032cc:	2310      	movs	r3, #16
 80032ce:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80032d0:	2301      	movs	r3, #1
 80032d2:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80032d4:	f107 0308 	add.w	r3, r7, #8
 80032d8:	4619      	mov	r1, r3
 80032da:	4825      	ldr	r0, [pc, #148]	; (8003370 <nRF24_GPIO_Init+0xe0>)
 80032dc:	f7fe f8c6 	bl	800146c <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80032e0:	2300      	movs	r3, #0
 80032e2:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80032e4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80032e8:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80032ea:	2300      	movs	r3, #0
 80032ec:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80032ee:	2300      	movs	r3, #0
 80032f0:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80032f2:	2300      	movs	r3, #0
 80032f4:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80032f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032fa:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 80032fc:	2318      	movs	r3, #24
 80032fe:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8003300:	2300      	movs	r3, #0
 8003302:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8003304:	2307      	movs	r3, #7
 8003306:	83bb      	strh	r3, [r7, #28]
	SPI_SSOutputCmd(SPI1, ENABLE);
 8003308:	2101      	movs	r1, #1
 800330a:	481a      	ldr	r0, [pc, #104]	; (8003374 <nRF24_GPIO_Init+0xe4>)
 800330c:	f7fe fa20 	bl	8001750 <SPI_SSOutputCmd>
	SPI_Init(SPI1, &SPI_InitStructure);
 8003310:	f107 030c 	add.w	r3, r7, #12
 8003314:	4619      	mov	r1, r3
 8003316:	4817      	ldr	r0, [pc, #92]	; (8003374 <nRF24_GPIO_Init+0xe4>)
 8003318:	f7fe f99e 	bl	8001658 <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI1, ENABLE);
 800331c:	2101      	movs	r1, #1
 800331e:	4815      	ldr	r0, [pc, #84]	; (8003374 <nRF24_GPIO_Init+0xe4>)
 8003320:	f7fe f9dd 	bl	80016de <SPI_Cmd>


	GPIO_InitTypeDef PORT;

	// Enable the nRF24L01 GPIO peripherals
	RCC->APB2ENR |= nRF24_GPIO_PERIPHERALS;
 8003324:	4a14      	ldr	r2, [pc, #80]	; (8003378 <nRF24_GPIO_Init+0xe8>)
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <nRF24_GPIO_Init+0xe8>)
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f043 0308 	orr.w	r3, r3, #8
 800332e:	6193      	str	r3, [r2, #24]

	// Configure CSN pin
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 8003330:	2310      	movs	r3, #16
 8003332:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8003334:	2302      	movs	r3, #2
 8003336:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = nRF24_CSN_PIN;
 8003338:	2302      	movs	r3, #2
 800333a:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(nRF24_CSN_PORT, &PORT);
 800333c:	1d3b      	adds	r3, r7, #4
 800333e:	4619      	mov	r1, r3
 8003340:	480b      	ldr	r0, [pc, #44]	; (8003370 <nRF24_GPIO_Init+0xe0>)
 8003342:	f7fe f893 	bl	800146c <GPIO_Init>
	nRF24_CSN_H();
 8003346:	2102      	movs	r1, #2
 8003348:	4809      	ldr	r0, [pc, #36]	; (8003370 <nRF24_GPIO_Init+0xe0>)
 800334a:	f7fe f94b 	bl	80015e4 <GPIO_SetBits>

	// Configure CE pin
	PORT.GPIO_Pin = nRF24_CE_PIN;
 800334e:	2301      	movs	r3, #1
 8003350:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(nRF24_CE_PORT, &PORT);
 8003352:	1d3b      	adds	r3, r7, #4
 8003354:	4619      	mov	r1, r3
 8003356:	4806      	ldr	r0, [pc, #24]	; (8003370 <nRF24_GPIO_Init+0xe0>)
 8003358:	f7fe f888 	bl	800146c <GPIO_Init>
	nRF24_CE_L();
 800335c:	2101      	movs	r1, #1
 800335e:	4804      	ldr	r0, [pc, #16]	; (8003370 <nRF24_GPIO_Init+0xe0>)
 8003360:	f7fe f94e 	bl	8001600 <GPIO_ResetBits>
}
 8003364:	bf00      	nop
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40010800 	.word	0x40010800
 8003370:	40010c00 	.word	0x40010c00
 8003374:	40013000 	.word	0x40013000
 8003378:	40021000 	.word	0x40021000

0800337c <nRF24_LL_RW>:

// Low level SPI transmit/receive function (hardware depended)
// input:
//   data - value to transmit via SPI
// return: value received from SPI
uint8_t nRF24_LL_RW(uint8_t data) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 8003386:	bf00      	nop
 8003388:	2102      	movs	r1, #2
 800338a:	480e      	ldr	r0, [pc, #56]	; (80033c4 <nRF24_LL_RW+0x48>)
 800338c:	f7fe f9ff 	bl	800178e <SPI_I2S_GetFlagStatus>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f8      	beq.n	8003388 <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	b29b      	uxth	r3, r3
 800339a:	4619      	mov	r1, r3
 800339c:	4809      	ldr	r0, [pc, #36]	; (80033c4 <nRF24_LL_RW+0x48>)
 800339e:	f7fe f9bd 	bl	800171c <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 80033a2:	bf00      	nop
 80033a4:	2101      	movs	r1, #1
 80033a6:	4807      	ldr	r0, [pc, #28]	; (80033c4 <nRF24_LL_RW+0x48>)
 80033a8:	f7fe f9f1 	bl	800178e <SPI_I2S_GetFlagStatus>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f8      	beq.n	80033a4 <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 80033b2:	4804      	ldr	r0, [pc, #16]	; (80033c4 <nRF24_LL_RW+0x48>)
 80033b4:	f7fe f9c0 	bl	8001738 <SPI_I2S_ReceiveData>
 80033b8:	4603      	mov	r3, r0
 80033ba:	b2db      	uxtb	r3, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40013000 	.word	0x40013000

080033c8 <gpio_init>:
#include "rtc.h"
QueueHandle_t internalMsgQueue;
QueueHandle_t externalMsgQueue;


void  gpio_init(void){
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80033ce:	2101      	movs	r1, #1
 80033d0:	2010      	movs	r0, #16
 80033d2:	f7fe f923 	bl	800161c <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef PORT;
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 80033d6:	2310      	movs	r3, #16
 80033d8:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 80033da:	2302      	movs	r3, #2
 80033dc:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_13;
 80033de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033e2:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOC, &PORT);
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	4619      	mov	r1, r3
 80033e8:	480c      	ldr	r0, [pc, #48]	; (800341c <gpio_init+0x54>)
 80033ea:	f7fe f83f 	bl	800146c <GPIO_Init>
	GPIOC->ODR |= GPIO_Pin_13;
 80033ee:	4a0b      	ldr	r2, [pc, #44]	; (800341c <gpio_init+0x54>)
 80033f0:	4b0a      	ldr	r3, [pc, #40]	; (800341c <gpio_init+0x54>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033f8:	60d3      	str	r3, [r2, #12]

	PORT.GPIO_Mode =  GPIO_Mode_IPU;
 80033fa:	2348      	movs	r3, #72	; 0x48
 80033fc:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 80033fe:	2302      	movs	r3, #2
 8003400:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_11;
 8003402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003406:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOB, &PORT);
 8003408:	1d3b      	adds	r3, r7, #4
 800340a:	4619      	mov	r1, r3
 800340c:	4804      	ldr	r0, [pc, #16]	; (8003420 <gpio_init+0x58>)
 800340e:	f7fe f82d 	bl	800146c <GPIO_Init>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40011000 	.word	0x40011000
 8003420:	40010c00 	.word	0x40010c00

08003424 <main>:



 int main(){
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af02      	add	r7, sp, #8



	 RTC_Init();
 800342a:	f000 f867 	bl	80034fc <RTC_Init>
	 RtcClear();
 800342e:	f000 f829 	bl	8003484 <RtcClear>
	 internalMsgQueue = xQueueCreate(OUTPUT_QUEUE_SIZE, sizeof(msgDataInt_t));
 8003432:	2200      	movs	r2, #0
 8003434:	211a      	movs	r1, #26
 8003436:	2010      	movs	r0, #16
 8003438:	f7fd f8ca 	bl	80005d0 <xQueueGenericCreate>
 800343c:	4602      	mov	r2, r0
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <main+0x50>)
 8003440:	601a      	str	r2, [r3, #0]
	 externalMsgQueue = xQueueCreate(OUTPUT_QUEUE_SIZE, sizeof(msgDataExt_t));
 8003442:	2200      	movs	r2, #0
 8003444:	2120      	movs	r1, #32
 8003446:	2010      	movs	r0, #16
 8003448:	f7fd f8c2 	bl	80005d0 <xQueueGenericCreate>
 800344c:	4602      	mov	r2, r0
 800344e:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <main+0x54>)
 8003450:	601a      	str	r2, [r3, #0]

	 //	xTaskCreate( ThreadLightSensor, "ThreadLigtSensor", 256, NULL, tskIDLE_PRIORITY + 1, NULL);
	 //	xTaskCreate( ThreadSupervisor, "Supervisor", 1024, NULL, tskIDLE_PRIORITY + 1, NULL);
	 	xTaskCreate( ThreadCommunication, "Communication", 2048, NULL, tskIDLE_PRIORITY + 1, NULL);
 8003452:	2300      	movs	r3, #0
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	2301      	movs	r3, #1
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	2300      	movs	r3, #0
 800345c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003460:	4906      	ldr	r1, [pc, #24]	; (800347c <main+0x58>)
 8003462:	4807      	ldr	r0, [pc, #28]	; (8003480 <main+0x5c>)
 8003464:	f7fd fa6a 	bl	800093c <xTaskCreate>
	 	vTaskStartScheduler();
 8003468:	f7fd fbb2 	bl	8000bd0 <vTaskStartScheduler>
 800346c:	2300      	movs	r3, #0





 }
 800346e:	4618      	mov	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000198 	.word	0x20000198
 8003478:	2000019c 	.word	0x2000019c
 800347c:	08003cec 	.word	0x08003cec
 8003480:	080038c5 	.word	0x080038c5

08003484 <RtcClear>:
#include "stm32f10x.h"




void RtcClear (void){
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0

	PWR->CR |= PWR_CR_DBP;
 8003488:	4a1a      	ldr	r2, [pc, #104]	; (80034f4 <RtcClear+0x70>)
 800348a:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <RtcClear+0x70>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003492:	6013      	str	r3, [r2, #0]
	RCC->BDCR |= RCC_BDCR_BDRST;
 8003494:	4a18      	ldr	r2, [pc, #96]	; (80034f8 <RtcClear+0x74>)
 8003496:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <RtcClear+0x74>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349e:	6213      	str	r3, [r2, #32]
	RCC->BDCR &= ~RCC_BDCR_BDRST;
 80034a0:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <RtcClear+0x74>)
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <RtcClear+0x74>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034aa:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_LSEON;
 80034ac:	4a12      	ldr	r2, [pc, #72]	; (80034f8 <RtcClear+0x74>)
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <RtcClear+0x74>)
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6213      	str	r3, [r2, #32]
	while (!(RCC->BDCR & RCC_BDCR_LSERDY));
 80034b8:	bf00      	nop
 80034ba:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <RtcClear+0x74>)
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f9      	beq.n	80034ba <RtcClear+0x36>
	RCC->BDCR |= RCC_BDCR_RTCSEL_LSE;
 80034c6:	4a0c      	ldr	r2, [pc, #48]	; (80034f8 <RtcClear+0x74>)
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <RtcClear+0x74>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d0:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_RTCEN;
 80034d2:	4a09      	ldr	r2, [pc, #36]	; (80034f8 <RtcClear+0x74>)
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <RtcClear+0x74>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034dc:	6213      	str	r3, [r2, #32]
	PWR->CR &= ~PWR_CR_DBP;
 80034de:	4a05      	ldr	r2, [pc, #20]	; (80034f4 <RtcClear+0x70>)
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <RtcClear+0x70>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034e8:	6013      	str	r3, [r2, #0]

}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40007000 	.word	0x40007000
 80034f8:	40021000 	.word	0x40021000

080034fc <RTC_Init>:


void RTC_Init (void){
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003500:	4a32      	ldr	r2, [pc, #200]	; (80035cc <RTC_Init+0xd0>)
 8003502:	4b32      	ldr	r3, [pc, #200]	; (80035cc <RTC_Init+0xd0>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350a:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_BKPEN;
 800350c:	4a2f      	ldr	r2, [pc, #188]	; (80035cc <RTC_Init+0xd0>)
 800350e:	4b2f      	ldr	r3, [pc, #188]	; (80035cc <RTC_Init+0xd0>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003516:	61d3      	str	r3, [r2, #28]
	PWR->CR |= PWR_CR_DBP;
 8003518:	4a2d      	ldr	r2, [pc, #180]	; (80035d0 <RTC_Init+0xd4>)
 800351a:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <RTC_Init+0xd4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003522:	6013      	str	r3, [r2, #0]
	RCC->BDCR &= ~RCC_BDCR_BDRST;
 8003524:	4a29      	ldr	r2, [pc, #164]	; (80035cc <RTC_Init+0xd0>)
 8003526:	4b29      	ldr	r3, [pc, #164]	; (80035cc <RTC_Init+0xd0>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352e:	6213      	str	r3, [r2, #32]

	RCC->BDCR |= RCC_BDCR_LSEON;
 8003530:	4a26      	ldr	r2, [pc, #152]	; (80035cc <RTC_Init+0xd0>)
 8003532:	4b26      	ldr	r3, [pc, #152]	; (80035cc <RTC_Init+0xd0>)
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6213      	str	r3, [r2, #32]
	while (!(RCC->BDCR & RCC_BDCR_LSERDY));
 800353c:	bf00      	nop
 800353e:	4b23      	ldr	r3, [pc, #140]	; (80035cc <RTC_Init+0xd0>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f9      	beq.n	800353e <RTC_Init+0x42>
	RCC->BDCR |= RCC_BDCR_RTCSEL_LSE;
 800354a:	4a20      	ldr	r2, [pc, #128]	; (80035cc <RTC_Init+0xd0>)
 800354c:	4b1f      	ldr	r3, [pc, #124]	; (80035cc <RTC_Init+0xd0>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003554:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_RTCEN;
 8003556:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <RTC_Init+0xd0>)
 8003558:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <RTC_Init+0xd0>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003560:	6213      	str	r3, [r2, #32]

	while (!(RTC->CRL & RTC_CRL_RTOFF));
 8003562:	bf00      	nop
 8003564:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <RTC_Init+0xd8>)
 8003566:	889b      	ldrh	r3, [r3, #4]
 8003568:	b29b      	uxth	r3, r3
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f8      	beq.n	8003564 <RTC_Init+0x68>
	RTC->CRL |= RTC_CRL_CNF;
 8003572:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <RTC_Init+0xd8>)
 8003574:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <RTC_Init+0xd8>)
 8003576:	889b      	ldrh	r3, [r3, #4]
 8003578:	b29b      	uxth	r3, r3
 800357a:	f043 0310 	orr.w	r3, r3, #16
 800357e:	b29b      	uxth	r3, r3
 8003580:	8093      	strh	r3, [r2, #4]

	RTC->PRLL = 0x7FFF;
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <RTC_Init+0xd8>)
 8003584:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003588:	819a      	strh	r2, [r3, #12]
	RTC->CNTH =0;
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <RTC_Init+0xd8>)
 800358c:	2200      	movs	r2, #0
 800358e:	831a      	strh	r2, [r3, #24]
	RTC->CNTL =0;
 8003590:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <RTC_Init+0xd8>)
 8003592:	2200      	movs	r2, #0
 8003594:	839a      	strh	r2, [r3, #28]

	RTC->CRL &= RTC_CRL_CNF;
 8003596:	4a0f      	ldr	r2, [pc, #60]	; (80035d4 <RTC_Init+0xd8>)
 8003598:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <RTC_Init+0xd8>)
 800359a:	889b      	ldrh	r3, [r3, #4]
 800359c:	b29b      	uxth	r3, r3
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	8093      	strh	r3, [r2, #4]
	while (!(RTC->CRL & RTC_CRL_RTOFF));
 80035a6:	bf00      	nop
 80035a8:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <RTC_Init+0xd8>)
 80035aa:	889b      	ldrh	r3, [r3, #4]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f8      	beq.n	80035a8 <RTC_Init+0xac>
	PWR->CR &= ~PWR_CR_DBP;
 80035b6:	4a06      	ldr	r2, [pc, #24]	; (80035d0 <RTC_Init+0xd4>)
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <RTC_Init+0xd4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035c0:	6013      	str	r3, [r2, #0]
}
 80035c2:	bf00      	nop
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40007000 	.word	0x40007000
 80035d4:	40002800 	.word	0x40002800

080035d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003610 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80035dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80035de:	e003      	b.n	80035e8 <LoopCopyDataInit>

080035e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80035e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80035e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80035e6:	3104      	adds	r1, #4

080035e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80035e8:	480b      	ldr	r0, [pc, #44]	; (8003618 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80035ea:	4b0c      	ldr	r3, [pc, #48]	; (800361c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80035ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80035ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80035f0:	d3f6      	bcc.n	80035e0 <CopyDataInit>
	ldr	r2, =_sbss
 80035f2:	4a0b      	ldr	r2, [pc, #44]	; (8003620 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80035f4:	e002      	b.n	80035fc <LoopFillZerobss>

080035f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80035f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80035f8:	f842 3b04 	str.w	r3, [r2], #4

080035fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80035fc:	4b09      	ldr	r3, [pc, #36]	; (8003624 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80035fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003600:	d3f9      	bcc.n	80035f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003602:	f000 f82b 	bl	800365c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003606:	f000 fa49 	bl	8003a9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800360a:	f7ff ff0b 	bl	8003424 <main>
	bx	lr
 800360e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003610:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8003614:	08003d60 	.word	0x08003d60
	ldr	r0, =_sdata
 8003618:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800361c:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8003620:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8003624:	200001a4 	.word	0x200001a4

08003628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003628:	e7fe      	b.n	8003628 <ADC1_2_IRQHandler>

0800362a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0
}
 800362e:	bf00      	nop
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800363a:	e7fe      	b.n	800363a <HardFault_Handler+0x4>

0800363c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003640:	e7fe      	b.n	8003640 <MemManage_Handler+0x4>

08003642 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003642:	b480      	push	{r7}
 8003644:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003646:	e7fe      	b.n	8003646 <BusFault_Handler+0x4>

08003648 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800364c:	e7fe      	b.n	800364c <UsageFault_Handler+0x4>

0800364e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800364e:	b480      	push	{r7}
 8003650:	af00      	add	r7, sp, #0
}
 8003652:	bf00      	nop
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
	...

0800365c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003660:	4a15      	ldr	r2, [pc, #84]	; (80036b8 <SystemInit+0x5c>)
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <SystemInit+0x5c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800366c:	4912      	ldr	r1, [pc, #72]	; (80036b8 <SystemInit+0x5c>)
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <SystemInit+0x5c>)
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	4b12      	ldr	r3, [pc, #72]	; (80036bc <SystemInit+0x60>)
 8003674:	4013      	ands	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003678:	4a0f      	ldr	r2, [pc, #60]	; (80036b8 <SystemInit+0x5c>)
 800367a:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <SystemInit+0x5c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003686:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003688:	4a0b      	ldr	r2, [pc, #44]	; (80036b8 <SystemInit+0x5c>)
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <SystemInit+0x5c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003692:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003694:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <SystemInit+0x5c>)
 8003696:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <SystemInit+0x5c>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800369e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <SystemInit+0x5c>)
 80036a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80036a6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80036a8:	f000 f80c 	bl	80036c4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <SystemInit+0x64>)
 80036ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80036b4:	bf00      	nop
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000
 80036bc:	f8ff0000 	.word	0xf8ff0000
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80036c8:	f000 f802 	bl	80036d0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80036cc:	bf00      	nop
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	607b      	str	r3, [r7, #4]
 80036da:	2300      	movs	r3, #0
 80036dc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80036de:	4a3a      	ldr	r2, [pc, #232]	; (80037c8 <SetSysClockTo72+0xf8>)
 80036e0:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <SetSysClockTo72+0xf8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80036ea:	4b37      	ldr	r3, [pc, #220]	; (80037c8 <SetSysClockTo72+0xf8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3301      	adds	r3, #1
 80036f8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d103      	bne.n	8003708 <SetSysClockTo72+0x38>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003706:	d1f0      	bne.n	80036ea <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003708:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <SetSysClockTo72+0xf8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003714:	2301      	movs	r3, #1
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	e001      	b.n	800371e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800371a:	2300      	movs	r3, #0
 800371c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d14b      	bne.n	80037bc <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8003724:	4a29      	ldr	r2, [pc, #164]	; (80037cc <SetSysClockTo72+0xfc>)
 8003726:	4b29      	ldr	r3, [pc, #164]	; (80037cc <SetSysClockTo72+0xfc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f043 0310 	orr.w	r3, r3, #16
 800372e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8003730:	4a26      	ldr	r2, [pc, #152]	; (80037cc <SetSysClockTo72+0xfc>)
 8003732:	4b26      	ldr	r3, [pc, #152]	; (80037cc <SetSysClockTo72+0xfc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800373c:	4a23      	ldr	r2, [pc, #140]	; (80037cc <SetSysClockTo72+0xfc>)
 800373e:	4b23      	ldr	r3, [pc, #140]	; (80037cc <SetSysClockTo72+0xfc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f043 0302 	orr.w	r3, r3, #2
 8003746:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003748:	4a1f      	ldr	r2, [pc, #124]	; (80037c8 <SetSysClockTo72+0xf8>)
 800374a:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <SetSysClockTo72+0xf8>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003750:	4a1d      	ldr	r2, [pc, #116]	; (80037c8 <SetSysClockTo72+0xf8>)
 8003752:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <SetSysClockTo72+0xf8>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003758:	4a1b      	ldr	r2, [pc, #108]	; (80037c8 <SetSysClockTo72+0xf8>)
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <SetSysClockTo72+0xf8>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003762:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8003764:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <SetSysClockTo72+0xf8>)
 8003766:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <SetSysClockTo72+0xf8>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800376e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8003770:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <SetSysClockTo72+0xf8>)
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <SetSysClockTo72+0xf8>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800377a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800377c:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <SetSysClockTo72+0xf8>)
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <SetSysClockTo72+0xf8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003786:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003788:	bf00      	nop
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <SetSysClockTo72+0xf8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f9      	beq.n	800378a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003796:	4a0c      	ldr	r2, [pc, #48]	; (80037c8 <SetSysClockTo72+0xf8>)
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <SetSysClockTo72+0xf8>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f023 0303 	bic.w	r3, r3, #3
 80037a0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80037a2:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <SetSysClockTo72+0xf8>)
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <SetSysClockTo72+0xf8>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f043 0302 	orr.w	r3, r3, #2
 80037ac:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80037ae:	bf00      	nop
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <SetSysClockTo72+0xf8>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d1f9      	bne.n	80037b0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40022000 	.word	0x40022000

080037d0 <client_rec>:

#include "mqtt_client.h"
#include "systemDefines.h"


int client_rec(byte* buf){
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08c      	sub	sp, #48	; 0x30
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	if(nrf24_dataReady())
 80037d8:	f7ff fbe9 	bl	8002fae <nrf24_dataReady>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01d      	beq.n	800381e <client_rec+0x4e>
	{
		if(nrf24_dataReady())
 80037e2:	f7ff fbe4 	bl	8002fae <nrf24_dataReady>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d018      	beq.n	800381e <client_rec+0x4e>
		{	uint8_t rxBytesNb;
			uint8_t data_array[32];
			nrf24_getData(data_array);
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fc07 	bl	8003004 <nrf24_getData>
			rxBytesNb = l3_receive_packet(data_array, buf);
 80037f6:	f107 030c 	add.w	r3, r7, #12
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff faa1 	bl	8002d44 <l3_receive_packet>
 8003802:	4603      	mov	r3, r0
 8003804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (rxBytesNb){
 8003808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800380c:	2b00      	cmp	r3, #0
 800380e:	d006      	beq.n	800381e <client_rec+0x4e>

				GPIOC->BRR = GPIO_Pin_13;
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <client_rec+0x58>)
 8003812:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003816:	615a      	str	r2, [r3, #20]
				return rxBytesNb;
 8003818:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800381c:	e000      	b.n	8003820 <client_rec+0x50>
			}
		}
//		_delay_ms(10);
	}
	return 0;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3730      	adds	r7, #48	; 0x30
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40011000 	.word	0x40011000

0800382c <mqtt_message_cb>:


QueueHandle_t externalMsgQueue;

int mqtt_message_cb(struct _MqttClient *client, MqttMessage *message, byte msg_new, byte msg_done){
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	4611      	mov	r1, r2
 8003838:	461a      	mov	r2, r3
 800383a:	460b      	mov	r3, r1
 800383c:	71fb      	strb	r3, [r7, #7]
 800383e:	4613      	mov	r3, r2
 8003840:	71bb      	strb	r3, [r7, #6]
	return 1;
 8003842:	2301      	movs	r3, #1
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <mqt_net_connect_cb>:

int mqt_net_connect_cb (void *context, const char* host, word16 port, int timeout_ms){
 800384e:	b480      	push	{r7}
 8003850:	b085      	sub	sp, #20
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	4613      	mov	r3, r2
 800385c:	80fb      	strh	r3, [r7, #6]
	return 1;
 800385e:	2301      	movs	r3, #1
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <mqtt_net_read_cb>:

int mqtt_net_read_cb(void *context, byte* buf, int buf_len, int timeout_ms){
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	603b      	str	r3, [r7, #0]
	client_rec(buf);
 8003878:	68b8      	ldr	r0, [r7, #8]
 800387a:	f7ff ffa9 	bl	80037d0 <client_rec>
}
 800387e:	bf00      	nop
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <mqtt_net_write_cb>:

int mqtt_net_write_cb(void *context, const byte* buf, int buf_len, int timeout_ms){
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
	l3_send_packet(0, (uint8_t*) buf, buf_len);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	68b9      	ldr	r1, [r7, #8]
 800389e:	2000      	movs	r0, #0
 80038a0:	f7ff f9f0 	bl	8002c84 <l3_send_packet>
}
 80038a4:	bf00      	nop
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <mqtt_net_disconnect_cb>:

int mqtt_net_disconnect_cb(void *context){
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
	return 0;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr
	...

080038c4 <ThreadCommunication>:



void ThreadCommunication ( void * pvParameters )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80038ca:	af04      	add	r7, sp, #16
 80038cc:	1d3b      	adds	r3, r7, #4
 80038ce:	6018      	str	r0, [r3, #0]
	vPortEnterCritical();
 80038d0:	f7fc fd98 	bl	8000404 <vPortEnterCritical>
	nrf24_init();
 80038d4:	f7ff fabf 	bl	8002e56 <nrf24_init>
	nRF24_restore_defaults();
 80038d8:	f7ff fa60 	bl	8002d9c <nRF24_restore_defaults>
	vPortExitCritical();
 80038dc:	f7fc fdaa 	bl	8000434 <vPortExitCritical>
	gpio_init();
 80038e0:	f7ff fd72 	bl	80033c8 <gpio_init>

	/* Channel #2 , payload length: 4 */
	const uint8_t channel = 2;
 80038e4:	2302      	movs	r3, #2
 80038e6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	const uint8_t payload_len = 32;
 80038ea:	2320      	movs	r3, #32
 80038ec:	f887 3226 	strb.w	r3, [r7, #550]	; 0x226
	nrf24_config(channel, payload_len);
 80038f0:	f897 2226 	ldrb.w	r2, [r7, #550]	; 0x226
 80038f4:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80038f8:	4611      	mov	r1, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fae8 	bl	8002ed0 <nrf24_config>
	uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};
 8003900:	4a59      	ldr	r2, [pc, #356]	; (8003a68 <ThreadCommunication+0x1a4>)
 8003902:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8003906:	e892 0003 	ldmia.w	r2, {r0, r1}
 800390a:	6018      	str	r0, [r3, #0]
 800390c:	3304      	adds	r3, #4
 800390e:	7019      	strb	r1, [r3, #0]
	uint8_t tx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
 8003910:	4a56      	ldr	r2, [pc, #344]	; (8003a6c <ThreadCommunication+0x1a8>)
 8003912:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8003916:	e892 0003 	ldmia.w	r2, {r0, r1}
 800391a:	6018      	str	r0, [r3, #0]
 800391c:	3304      	adds	r3, #4
 800391e:	7019      	strb	r1, [r3, #0]
	/* Set the device addresses */
	nrf24_tx_address(tx_address);
 8003920:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fb30 	bl	8002f8a <nrf24_tx_address>
	nrf24_rx_address(rx_address);
 800392a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fb18 	bl	8002f64 <nrf24_rx_address>



	MqttNet net;
	MqttClient client;
	net.connect = mqt_net_connect_cb;
 8003934:	4b4e      	ldr	r3, [pc, #312]	; (8003a70 <ThreadCommunication+0x1ac>)
 8003936:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	net.read = mqtt_net_read_cb;
 800393a:	4b4e      	ldr	r3, [pc, #312]	; (8003a74 <ThreadCommunication+0x1b0>)
 800393c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	net.write = mqtt_net_write_cb;
 8003940:	4b4d      	ldr	r3, [pc, #308]	; (8003a78 <ThreadCommunication+0x1b4>)
 8003942:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	net.disconnect = mqtt_net_disconnect_cb;
 8003946:	4b4d      	ldr	r3, [pc, #308]	; (8003a7c <ThreadCommunication+0x1b8>)
 8003948:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

	uint8_t tx_buf[BUF_SIZE_TX];
	uint8_t rx_buf[BUF_SIZE_RX];
	MqttClient_Init(&client, &net, mqtt_message_cb, tx_buf, BUF_SIZE_TX, rx_buf, BUF_SIZE_RX, CMD_TIMEOUT_MS);
 800394c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8003950:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8003954:	f507 70c6 	add.w	r0, r7, #396	; 0x18c
 8003958:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800395c:	9303      	str	r3, [sp, #12]
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	9302      	str	r3, [sp, #8]
 8003962:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	2380      	movs	r3, #128	; 0x80
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	4a44      	ldr	r2, [pc, #272]	; (8003a80 <ThreadCommunication+0x1bc>)
 8003970:	f7fe f93a 	bl	8001be8 <MqttClient_Init>

	MqttConnect mqtt_con;
	mqtt_con.clean_session =0;
 8003974:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003978:	2200      	movs	r2, #0
 800397a:	711a      	strb	r2, [r3, #4]
	mqtt_con.client_id = "rt1";
 800397c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003980:	4a40      	ldr	r2, [pc, #256]	; (8003a84 <ThreadCommunication+0x1c0>)
 8003982:	609a      	str	r2, [r3, #8]
	mqtt_con.enable_lwt = 0;
 8003984:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003988:	2200      	movs	r2, #0
 800398a:	731a      	strb	r2, [r3, #12]
	mqtt_con.keep_alive_sec =30;
 800398c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003990:	221e      	movs	r2, #30
 8003992:	805a      	strh	r2, [r3, #2]
	mqtt_con.stat = MQTT_MSG_BEGIN;
 8003994:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
	mqtt_con.username ="bedroomTMP1";
 800399c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039a0:	4a39      	ldr	r2, [pc, #228]	; (8003a88 <ThreadCommunication+0x1c4>)
 80039a2:	615a      	str	r2, [r3, #20]
	mqtt_con.password = "passw0rd";
 80039a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039a8:	4a38      	ldr	r2, [pc, #224]	; (8003a8c <ThreadCommunication+0x1c8>)
 80039aa:	619a      	str	r2, [r3, #24]
	MqttClient_Connect(&client, &mqtt_con);
 80039ac:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80039b0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80039b4:	4611      	mov	r1, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe f952 	bl	8001c60 <MqttClient_Connect>


	const char* test_topic1 = "flat/livingroom/temp/1";
 80039bc:	4b34      	ldr	r3, [pc, #208]	; (8003a90 <ThreadCommunication+0x1cc>)
 80039be:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	const char* test_topic2 = "flat/bedroom/humidity/2";
 80039c2:	4b34      	ldr	r3, [pc, #208]	; (8003a94 <ThreadCommunication+0x1d0>)
 80039c4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	MqttTopic topics[2];
	topics[0].qos =1;
 80039c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039cc:	2201      	movs	r2, #1
 80039ce:	711a      	strb	r2, [r3, #4]
	topics[0].topic_filter = test_topic1;
 80039d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039d4:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80039d8:	601a      	str	r2, [r3, #0]
    topics[1].qos =1;
 80039da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039de:	2201      	movs	r2, #1
 80039e0:	731a      	strb	r2, [r3, #12]
	topics[1].topic_filter = test_topic2;
 80039e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039e6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80039ea:	609a      	str	r2, [r3, #8]


	MqttSubscribe subscribe;
	subscribe.packet_id = 1;
 80039ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039f0:	2201      	movs	r2, #1
 80039f2:	805a      	strh	r2, [r3, #2]
	uint8_t topic_count = 2;
 80039f4:	2302      	movs	r3, #2
 80039f6:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
	subscribe.topic_count = topic_count;
 80039fa:	f897 221b 	ldrb.w	r2, [r7, #539]	; 0x21b
 80039fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a02:	605a      	str	r2, [r3, #4]
	subscribe.topics = topics;
 8003a04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a08:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003a0c:	609a      	str	r2, [r3, #8]
//		if (!(IsGpioHigh(GPIOB, 11))){
//			MqttClient_Connect(&client, &mqtt_con);
//			GPIOC->ODR ^= GPIO_Pin_13;
//		}

		MqttClient_WaitMessage(&client,100);
 8003a0e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8003a12:	2164      	movs	r1, #100	; 0x64
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe fa1f 	bl	8001e58 <MqttClient_WaitMessage>




		msgDataExt_t messageExt;
		if (xQueueReceive(externalMsgQueue, &messageExt, 0)){
 8003a1a:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <ThreadCommunication+0x1d4>)
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	f107 0108 	add.w	r1, r7, #8
 8003a22:	2300      	movs	r3, #0
 8003a24:	2200      	movs	r2, #0
 8003a26:	f7fc fe23 	bl	8000670 <xQueueGenericReceive>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <ThreadCommunication+0x198>
			MqttPublish publishPckt;
			switch (messageExt.type){
 8003a30:	f107 0308 	add.w	r3, r7, #8
 8003a34:	7e5b      	ldrb	r3, [r3, #25]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d108      	bne.n	8003a4c <ThreadCommunication+0x188>
			case lightLevel:
				publishPckt.topic_name = test_topic1;
 8003a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a3e:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8003a42:	609a      	str	r2, [r3, #8]
				publishPckt.topic_name_len = sizeof(test_topic1);
 8003a44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a48:	2204      	movs	r2, #4
 8003a4a:	819a      	strh	r2, [r3, #12]
			}


			 MqttClient_Publish(&client, &publishPckt);
 8003a4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a50:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe f94a 	bl	8001cf0 <MqttClient_Publish>
		}

		//poll sevrer b ping and inform supervisor about broken connection
		vTaskDelay(1000);
 8003a5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a60:	f7fd f892 	bl	8000b88 <vTaskDelay>
	for (;;) {
 8003a64:	e7d3      	b.n	8003a0e <ThreadCommunication+0x14a>
 8003a66:	bf00      	nop
 8003a68:	08003d48 	.word	0x08003d48
 8003a6c:	08003d50 	.word	0x08003d50
 8003a70:	0800384f 	.word	0x0800384f
 8003a74:	0800386b 	.word	0x0800386b
 8003a78:	08003889 	.word	0x08003889
 8003a7c:	080038af 	.word	0x080038af
 8003a80:	0800382d 	.word	0x0800382d
 8003a84:	08003cfc 	.word	0x08003cfc
 8003a88:	08003d00 	.word	0x08003d00
 8003a8c:	08003d0c 	.word	0x08003d0c
 8003a90:	08003d18 	.word	0x08003d18
 8003a94:	08003d30 	.word	0x08003d30
 8003a98:	2000019c 	.word	0x2000019c

08003a9c <__libc_init_array>:
 8003a9c:	b570      	push	{r4, r5, r6, lr}
 8003a9e:	2500      	movs	r5, #0
 8003aa0:	4e0c      	ldr	r6, [pc, #48]	; (8003ad4 <__libc_init_array+0x38>)
 8003aa2:	4c0d      	ldr	r4, [pc, #52]	; (8003ad8 <__libc_init_array+0x3c>)
 8003aa4:	1ba4      	subs	r4, r4, r6
 8003aa6:	10a4      	asrs	r4, r4, #2
 8003aa8:	42a5      	cmp	r5, r4
 8003aaa:	d109      	bne.n	8003ac0 <__libc_init_array+0x24>
 8003aac:	f000 f908 	bl	8003cc0 <_init>
 8003ab0:	2500      	movs	r5, #0
 8003ab2:	4e0a      	ldr	r6, [pc, #40]	; (8003adc <__libc_init_array+0x40>)
 8003ab4:	4c0a      	ldr	r4, [pc, #40]	; (8003ae0 <__libc_init_array+0x44>)
 8003ab6:	1ba4      	subs	r4, r4, r6
 8003ab8:	10a4      	asrs	r4, r4, #2
 8003aba:	42a5      	cmp	r5, r4
 8003abc:	d105      	bne.n	8003aca <__libc_init_array+0x2e>
 8003abe:	bd70      	pop	{r4, r5, r6, pc}
 8003ac0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ac4:	4798      	blx	r3
 8003ac6:	3501      	adds	r5, #1
 8003ac8:	e7ee      	b.n	8003aa8 <__libc_init_array+0xc>
 8003aca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ace:	4798      	blx	r3
 8003ad0:	3501      	adds	r5, #1
 8003ad2:	e7f2      	b.n	8003aba <__libc_init_array+0x1e>
 8003ad4:	08003d58 	.word	0x08003d58
 8003ad8:	08003d58 	.word	0x08003d58
 8003adc:	08003d58 	.word	0x08003d58
 8003ae0:	08003d5c 	.word	0x08003d5c

08003ae4 <malloc>:
 8003ae4:	4b02      	ldr	r3, [pc, #8]	; (8003af0 <malloc+0xc>)
 8003ae6:	4601      	mov	r1, r0
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	f000 b86b 	b.w	8003bc4 <_malloc_r>
 8003aee:	bf00      	nop
 8003af0:	20000004 	.word	0x20000004

08003af4 <free>:
 8003af4:	4b02      	ldr	r3, [pc, #8]	; (8003b00 <free+0xc>)
 8003af6:	4601      	mov	r1, r0
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	f000 b817 	b.w	8003b2c <_free_r>
 8003afe:	bf00      	nop
 8003b00:	20000004 	.word	0x20000004

08003b04 <memcpy>:
 8003b04:	b510      	push	{r4, lr}
 8003b06:	1e43      	subs	r3, r0, #1
 8003b08:	440a      	add	r2, r1
 8003b0a:	4291      	cmp	r1, r2
 8003b0c:	d100      	bne.n	8003b10 <memcpy+0xc>
 8003b0e:	bd10      	pop	{r4, pc}
 8003b10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b18:	e7f7      	b.n	8003b0a <memcpy+0x6>

08003b1a <memset>:
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	4402      	add	r2, r0
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d100      	bne.n	8003b24 <memset+0xa>
 8003b22:	4770      	bx	lr
 8003b24:	f803 1b01 	strb.w	r1, [r3], #1
 8003b28:	e7f9      	b.n	8003b1e <memset+0x4>
	...

08003b2c <_free_r>:
 8003b2c:	b538      	push	{r3, r4, r5, lr}
 8003b2e:	4605      	mov	r5, r0
 8003b30:	2900      	cmp	r1, #0
 8003b32:	d043      	beq.n	8003bbc <_free_r+0x90>
 8003b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b38:	1f0c      	subs	r4, r1, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	bfb8      	it	lt
 8003b3e:	18e4      	addlt	r4, r4, r3
 8003b40:	f000 f8ae 	bl	8003ca0 <__malloc_lock>
 8003b44:	4a1e      	ldr	r2, [pc, #120]	; (8003bc0 <_free_r+0x94>)
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	4610      	mov	r0, r2
 8003b4a:	b933      	cbnz	r3, 8003b5a <_free_r+0x2e>
 8003b4c:	6063      	str	r3, [r4, #4]
 8003b4e:	6014      	str	r4, [r2, #0]
 8003b50:	4628      	mov	r0, r5
 8003b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b56:	f000 b8a4 	b.w	8003ca2 <__malloc_unlock>
 8003b5a:	42a3      	cmp	r3, r4
 8003b5c:	d90b      	bls.n	8003b76 <_free_r+0x4a>
 8003b5e:	6821      	ldr	r1, [r4, #0]
 8003b60:	1862      	adds	r2, r4, r1
 8003b62:	4293      	cmp	r3, r2
 8003b64:	bf01      	itttt	eq
 8003b66:	681a      	ldreq	r2, [r3, #0]
 8003b68:	685b      	ldreq	r3, [r3, #4]
 8003b6a:	1852      	addeq	r2, r2, r1
 8003b6c:	6022      	streq	r2, [r4, #0]
 8003b6e:	6063      	str	r3, [r4, #4]
 8003b70:	6004      	str	r4, [r0, #0]
 8003b72:	e7ed      	b.n	8003b50 <_free_r+0x24>
 8003b74:	4613      	mov	r3, r2
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	b10a      	cbz	r2, 8003b7e <_free_r+0x52>
 8003b7a:	42a2      	cmp	r2, r4
 8003b7c:	d9fa      	bls.n	8003b74 <_free_r+0x48>
 8003b7e:	6819      	ldr	r1, [r3, #0]
 8003b80:	1858      	adds	r0, r3, r1
 8003b82:	42a0      	cmp	r0, r4
 8003b84:	d10b      	bne.n	8003b9e <_free_r+0x72>
 8003b86:	6820      	ldr	r0, [r4, #0]
 8003b88:	4401      	add	r1, r0
 8003b8a:	1858      	adds	r0, r3, r1
 8003b8c:	4282      	cmp	r2, r0
 8003b8e:	6019      	str	r1, [r3, #0]
 8003b90:	d1de      	bne.n	8003b50 <_free_r+0x24>
 8003b92:	6810      	ldr	r0, [r2, #0]
 8003b94:	6852      	ldr	r2, [r2, #4]
 8003b96:	4401      	add	r1, r0
 8003b98:	6019      	str	r1, [r3, #0]
 8003b9a:	605a      	str	r2, [r3, #4]
 8003b9c:	e7d8      	b.n	8003b50 <_free_r+0x24>
 8003b9e:	d902      	bls.n	8003ba6 <_free_r+0x7a>
 8003ba0:	230c      	movs	r3, #12
 8003ba2:	602b      	str	r3, [r5, #0]
 8003ba4:	e7d4      	b.n	8003b50 <_free_r+0x24>
 8003ba6:	6820      	ldr	r0, [r4, #0]
 8003ba8:	1821      	adds	r1, r4, r0
 8003baa:	428a      	cmp	r2, r1
 8003bac:	bf01      	itttt	eq
 8003bae:	6811      	ldreq	r1, [r2, #0]
 8003bb0:	6852      	ldreq	r2, [r2, #4]
 8003bb2:	1809      	addeq	r1, r1, r0
 8003bb4:	6021      	streq	r1, [r4, #0]
 8003bb6:	6062      	str	r2, [r4, #4]
 8003bb8:	605c      	str	r4, [r3, #4]
 8003bba:	e7c9      	b.n	8003b50 <_free_r+0x24>
 8003bbc:	bd38      	pop	{r3, r4, r5, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000188 	.word	0x20000188

08003bc4 <_malloc_r>:
 8003bc4:	b570      	push	{r4, r5, r6, lr}
 8003bc6:	1ccd      	adds	r5, r1, #3
 8003bc8:	f025 0503 	bic.w	r5, r5, #3
 8003bcc:	3508      	adds	r5, #8
 8003bce:	2d0c      	cmp	r5, #12
 8003bd0:	bf38      	it	cc
 8003bd2:	250c      	movcc	r5, #12
 8003bd4:	2d00      	cmp	r5, #0
 8003bd6:	4606      	mov	r6, r0
 8003bd8:	db01      	blt.n	8003bde <_malloc_r+0x1a>
 8003bda:	42a9      	cmp	r1, r5
 8003bdc:	d903      	bls.n	8003be6 <_malloc_r+0x22>
 8003bde:	230c      	movs	r3, #12
 8003be0:	6033      	str	r3, [r6, #0]
 8003be2:	2000      	movs	r0, #0
 8003be4:	bd70      	pop	{r4, r5, r6, pc}
 8003be6:	f000 f85b 	bl	8003ca0 <__malloc_lock>
 8003bea:	4a23      	ldr	r2, [pc, #140]	; (8003c78 <_malloc_r+0xb4>)
 8003bec:	6814      	ldr	r4, [r2, #0]
 8003bee:	4621      	mov	r1, r4
 8003bf0:	b991      	cbnz	r1, 8003c18 <_malloc_r+0x54>
 8003bf2:	4c22      	ldr	r4, [pc, #136]	; (8003c7c <_malloc_r+0xb8>)
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	b91b      	cbnz	r3, 8003c00 <_malloc_r+0x3c>
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	f000 f841 	bl	8003c80 <_sbrk_r>
 8003bfe:	6020      	str	r0, [r4, #0]
 8003c00:	4629      	mov	r1, r5
 8003c02:	4630      	mov	r0, r6
 8003c04:	f000 f83c 	bl	8003c80 <_sbrk_r>
 8003c08:	1c43      	adds	r3, r0, #1
 8003c0a:	d126      	bne.n	8003c5a <_malloc_r+0x96>
 8003c0c:	230c      	movs	r3, #12
 8003c0e:	4630      	mov	r0, r6
 8003c10:	6033      	str	r3, [r6, #0]
 8003c12:	f000 f846 	bl	8003ca2 <__malloc_unlock>
 8003c16:	e7e4      	b.n	8003be2 <_malloc_r+0x1e>
 8003c18:	680b      	ldr	r3, [r1, #0]
 8003c1a:	1b5b      	subs	r3, r3, r5
 8003c1c:	d41a      	bmi.n	8003c54 <_malloc_r+0x90>
 8003c1e:	2b0b      	cmp	r3, #11
 8003c20:	d90f      	bls.n	8003c42 <_malloc_r+0x7e>
 8003c22:	600b      	str	r3, [r1, #0]
 8003c24:	18cc      	adds	r4, r1, r3
 8003c26:	50cd      	str	r5, [r1, r3]
 8003c28:	4630      	mov	r0, r6
 8003c2a:	f000 f83a 	bl	8003ca2 <__malloc_unlock>
 8003c2e:	f104 000b 	add.w	r0, r4, #11
 8003c32:	1d23      	adds	r3, r4, #4
 8003c34:	f020 0007 	bic.w	r0, r0, #7
 8003c38:	1ac3      	subs	r3, r0, r3
 8003c3a:	d01b      	beq.n	8003c74 <_malloc_r+0xb0>
 8003c3c:	425a      	negs	r2, r3
 8003c3e:	50e2      	str	r2, [r4, r3]
 8003c40:	bd70      	pop	{r4, r5, r6, pc}
 8003c42:	428c      	cmp	r4, r1
 8003c44:	bf0b      	itete	eq
 8003c46:	6863      	ldreq	r3, [r4, #4]
 8003c48:	684b      	ldrne	r3, [r1, #4]
 8003c4a:	6013      	streq	r3, [r2, #0]
 8003c4c:	6063      	strne	r3, [r4, #4]
 8003c4e:	bf18      	it	ne
 8003c50:	460c      	movne	r4, r1
 8003c52:	e7e9      	b.n	8003c28 <_malloc_r+0x64>
 8003c54:	460c      	mov	r4, r1
 8003c56:	6849      	ldr	r1, [r1, #4]
 8003c58:	e7ca      	b.n	8003bf0 <_malloc_r+0x2c>
 8003c5a:	1cc4      	adds	r4, r0, #3
 8003c5c:	f024 0403 	bic.w	r4, r4, #3
 8003c60:	42a0      	cmp	r0, r4
 8003c62:	d005      	beq.n	8003c70 <_malloc_r+0xac>
 8003c64:	1a21      	subs	r1, r4, r0
 8003c66:	4630      	mov	r0, r6
 8003c68:	f000 f80a 	bl	8003c80 <_sbrk_r>
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	d0cd      	beq.n	8003c0c <_malloc_r+0x48>
 8003c70:	6025      	str	r5, [r4, #0]
 8003c72:	e7d9      	b.n	8003c28 <_malloc_r+0x64>
 8003c74:	bd70      	pop	{r4, r5, r6, pc}
 8003c76:	bf00      	nop
 8003c78:	20000188 	.word	0x20000188
 8003c7c:	2000018c 	.word	0x2000018c

08003c80 <_sbrk_r>:
 8003c80:	b538      	push	{r3, r4, r5, lr}
 8003c82:	2300      	movs	r3, #0
 8003c84:	4c05      	ldr	r4, [pc, #20]	; (8003c9c <_sbrk_r+0x1c>)
 8003c86:	4605      	mov	r5, r0
 8003c88:	4608      	mov	r0, r1
 8003c8a:	6023      	str	r3, [r4, #0]
 8003c8c:	f000 f80a 	bl	8003ca4 <_sbrk>
 8003c90:	1c43      	adds	r3, r0, #1
 8003c92:	d102      	bne.n	8003c9a <_sbrk_r+0x1a>
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	b103      	cbz	r3, 8003c9a <_sbrk_r+0x1a>
 8003c98:	602b      	str	r3, [r5, #0]
 8003c9a:	bd38      	pop	{r3, r4, r5, pc}
 8003c9c:	200001a0 	.word	0x200001a0

08003ca0 <__malloc_lock>:
 8003ca0:	4770      	bx	lr

08003ca2 <__malloc_unlock>:
 8003ca2:	4770      	bx	lr

08003ca4 <_sbrk>:
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <_sbrk+0x14>)
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	6819      	ldr	r1, [r3, #0]
 8003caa:	b909      	cbnz	r1, 8003cb0 <_sbrk+0xc>
 8003cac:	4903      	ldr	r1, [pc, #12]	; (8003cbc <_sbrk+0x18>)
 8003cae:	6019      	str	r1, [r3, #0]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	4402      	add	r2, r0
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	4770      	bx	lr
 8003cb8:	20000190 	.word	0x20000190
 8003cbc:	200001a4 	.word	0x200001a4

08003cc0 <_init>:
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	bf00      	nop
 8003cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc6:	bc08      	pop	{r3}
 8003cc8:	469e      	mov	lr, r3
 8003cca:	4770      	bx	lr

08003ccc <_fini>:
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cce:	bf00      	nop
 8003cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd2:	bc08      	pop	{r3}
 8003cd4:	469e      	mov	lr, r3
 8003cd6:	4770      	bx	lr
