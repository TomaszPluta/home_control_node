
home_control_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012dc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080013ec  080013ec  000113ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001408  08001408  00011408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800140c  0800140c  0001140c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08001410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000134  20000068  08001478  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000019c  08001478  0002019c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005cd6  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f59  00000000  00000000  00025d67  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000488  00000000  00000000  00026cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  00027148  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002016  00000000  00000000  00027538  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001aed  00000000  00000000  0002954e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002b03b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000011ec  00000000  00000000  0002b0b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080013d4 	.word	0x080013d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080013d4 	.word	0x080013d4

08000150 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8000158:	f000 fc02 	bl	8000960 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800015c:	6878      	ldr	r0, [r7, #4]
 800015e:	f001 f857 	bl	8001210 <malloc>
 8000162:	4603      	mov	r3, r0
 8000164:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000166:	f000 fc09 	bl	800097c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800016a:	68fb      	ldr	r3, [r7, #12]
}
 800016c:	4618      	mov	r0, r3
 800016e:	3710      	adds	r7, #16
 8000170:	46bd      	mov	sp, r7
 8000172:	bd80      	pop	{r7, pc}

08000174 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
	if( pv )
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d006      	beq.n	8000190 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8000182:	f000 fbed 	bl	8000960 <vTaskSuspendAll>
		{
			free( pv );
 8000186:	6878      	ldr	r0, [r7, #4]
 8000188:	f001 f84a 	bl	8001220 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800018c:	f000 fbf6 	bl	800097c <xTaskResumeAll>
	}
}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000198:	b480      	push	{r7}
 800019a:	b083      	sub	sp, #12
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f103 0208 	add.w	r2, r3, #8
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80001b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f103 0208 	add.w	r2, r3, #8
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	f103 0208 	add.w	r2, r3, #8
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr

080001d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001d6:	b480      	push	{r7}
 80001d8:	b083      	sub	sp, #12
 80001da:	af00      	add	r7, sp, #0
 80001dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2200      	movs	r2, #0
 80001e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr

080001ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001ee:	b480      	push	{r7}
 80001f0:	b085      	sub	sp, #20
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
 80001f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	68fa      	ldr	r2, [r7, #12]
 8000202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	689a      	ldr	r2, [r3, #8]
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	683a      	ldr	r2, [r7, #0]
 8000212:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	683a      	ldr	r2, [r7, #0]
 8000218:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	1c5a      	adds	r2, r3, #1
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
}
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800024a:	d103      	bne.n	8000254 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	691b      	ldr	r3, [r3, #16]
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	e00c      	b.n	800026e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3308      	adds	r3, #8
 8000258:	60fb      	str	r3, [r7, #12]
 800025a:	e002      	b.n	8000262 <vListInsert+0x2e>
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	429a      	cmp	r2, r3
 800026c:	d9f6      	bls.n	800025c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	685a      	ldr	r2, [r3, #4]
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	683a      	ldr	r2, [r7, #0]
 800027c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	68fa      	ldr	r2, [r7, #12]
 8000282:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	683a      	ldr	r2, [r7, #0]
 8000288:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	1c5a      	adds	r2, r3, #1
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	601a      	str	r2, [r3, #0]
}
 800029a:	bf00      	nop
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	6892      	ldr	r2, [r2, #8]
 80002ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	6852      	ldr	r2, [r2, #4]
 80002c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	685a      	ldr	r2, [r3, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d103      	bne.n	80002d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	689a      	ldr	r2, [r3, #8]
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	1e5a      	subs	r2, r3, #1
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	681b      	ldr	r3, [r3, #0]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3714      	adds	r7, #20
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
	...

080002f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	3b04      	subs	r3, #4
 8000308:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	3b04      	subs	r3, #4
 8000316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	f023 0201 	bic.w	r2, r3, #1
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	3b04      	subs	r3, #4
 8000326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000328:	4a08      	ldr	r2, [pc, #32]	; (800034c <pxPortInitialiseStack+0x54>)
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3b14      	subs	r3, #20
 8000332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000334:	687a      	ldr	r2, [r7, #4]
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	3b20      	subs	r3, #32
 800033e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000340:	68fb      	ldr	r3, [r7, #12]
}
 8000342:	4618      	mov	r0, r3
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	08000351 	.word	0x08000351

08000350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000356:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800035a:	f383 8811 	msr	BASEPRI, r3
 800035e:	f3bf 8f6f 	isb	sy
 8000362:	f3bf 8f4f 	dsb	sy
 8000366:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 8000368:	e7fe      	b.n	8000368 <prvTaskExitError+0x18>
 800036a:	0000      	movs	r0, r0
 800036c:	0000      	movs	r0, r0
	...

08000370 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <pxCurrentTCBConst2>)
 8000372:	6819      	ldr	r1, [r3, #0]
 8000374:	6808      	ldr	r0, [r1, #0]
 8000376:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800037a:	f380 8809 	msr	PSP, r0
 800037e:	f3bf 8f6f 	isb	sy
 8000382:	f04f 0000 	mov.w	r0, #0
 8000386:	f380 8811 	msr	BASEPRI, r0
 800038a:	f04e 0e0d 	orr.w	lr, lr, #13
 800038e:	4770      	bx	lr

08000390 <pxCurrentTCBConst2>:
 8000390:	20000084 	.word	0x20000084
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000394:	bf00      	nop
 8000396:	bf00      	nop

08000398 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000398:	4806      	ldr	r0, [pc, #24]	; (80003b4 <prvPortStartFirstTask+0x1c>)
 800039a:	6800      	ldr	r0, [r0, #0]
 800039c:	6800      	ldr	r0, [r0, #0]
 800039e:	f380 8808 	msr	MSP, r0
 80003a2:	b662      	cpsie	i
 80003a4:	b661      	cpsie	f
 80003a6:	f3bf 8f4f 	dsb	sy
 80003aa:	f3bf 8f6f 	isb	sy
 80003ae:	df00      	svc	0
 80003b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80003b2:	bf00      	nop
 80003b4:	e000ed08 	.word	0xe000ed08

080003b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80003bc:	4a0b      	ldr	r2, [pc, #44]	; (80003ec <xPortStartScheduler+0x34>)
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <xPortStartScheduler+0x34>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80003c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80003c8:	4a08      	ldr	r2, [pc, #32]	; (80003ec <xPortStartScheduler+0x34>)
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <xPortStartScheduler+0x34>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80003d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80003d4:	f000 f888 	bl	80004e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <xPortStartScheduler+0x38>)
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80003de:	f7ff ffdb 	bl	8000398 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80003e2:	f7ff ffb5 	bl	8000350 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80003e6:	2300      	movs	r3, #0
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	e000ed20 	.word	0xe000ed20
 80003f0:	20000000 	.word	0x20000000

080003f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80003fe:	f383 8811 	msr	BASEPRI, r3
 8000402:	f3bf 8f6f 	isb	sy
 8000406:	f3bf 8f4f 	dsb	sy
 800040a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800040c:	4b04      	ldr	r3, [pc, #16]	; (8000420 <vPortEnterCritical+0x2c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	3301      	adds	r3, #1
 8000412:	4a03      	ldr	r2, [pc, #12]	; (8000420 <vPortEnterCritical+0x2c>)
 8000414:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	20000000 	.word	0x20000000

08000424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <vPortExitCritical+0x2c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	3b01      	subs	r3, #1
 8000430:	4a07      	ldr	r2, [pc, #28]	; (8000450 <vPortExitCritical+0x2c>)
 8000432:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <vPortExitCritical+0x2c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d104      	bne.n	8000446 <vPortExitCritical+0x22>
 800043c:	2300      	movs	r3, #0
 800043e:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	20000000 	.word	0x20000000
	...

08000460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000460:	f3ef 8009 	mrs	r0, PSP
 8000464:	f3bf 8f6f 	isb	sy
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <pxCurrentTCBConst>)
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000470:	6010      	str	r0, [r2, #0]
 8000472:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000476:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800047a:	f380 8811 	msr	BASEPRI, r0
 800047e:	f000 fbb7 	bl	8000bf0 <vTaskSwitchContext>
 8000482:	f04f 0000 	mov.w	r0, #0
 8000486:	f380 8811 	msr	BASEPRI, r0
 800048a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800048e:	6819      	ldr	r1, [r3, #0]
 8000490:	6808      	ldr	r0, [r1, #0]
 8000492:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000496:	f380 8809 	msr	PSP, r0
 800049a:	f3bf 8f6f 	isb	sy
 800049e:	4770      	bx	lr

080004a0 <pxCurrentTCBConst>:
 80004a0:	20000084 	.word	0x20000084
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80004a4:	bf00      	nop
 80004a6:	bf00      	nop

080004a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
	__asm volatile
 80004ae:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80004b2:	f383 8811 	msr	BASEPRI, r3
 80004b6:	f3bf 8f6f 	isb	sy
 80004ba:	f3bf 8f4f 	dsb	sy
 80004be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80004c0:	f000 faea 	bl	8000a98 <xTaskIncrementTick>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d003      	beq.n	80004d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <SysTick_Handler+0x3c>)
 80004cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	2300      	movs	r3, #0
 80004d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	e000ed04 	.word	0xe000ed04

080004e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <vPortSetupTimerInterrupt+0x18>)
 80004ee:	4a05      	ldr	r2, [pc, #20]	; (8000504 <vPortSetupTimerInterrupt+0x1c>)
 80004f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <vPortSetupTimerInterrupt+0x20>)
 80004f4:	2207      	movs	r2, #7
 80004f6:	601a      	str	r2, [r3, #0]
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	e000e014 	.word	0xe000e014
 8000504:	0001193f 	.word	0x0001193f
 8000508:	e000e010 	.word	0xe000e010

0800050c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 800051a:	f7ff ff6b 	bl	80003f4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000526:	68f9      	ldr	r1, [r7, #12]
 8000528:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800052a:	fb01 f303 	mul.w	r3, r1, r3
 800052e:	441a      	add	r2, r3
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	2200      	movs	r2, #0
 8000538:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800054a:	3b01      	subs	r3, #1
 800054c:	68f9      	ldr	r1, [r7, #12]
 800054e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000550:	fb01 f303 	mul.w	r3, r1, r3
 8000554:	441a      	add	r2, r3
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	22ff      	movs	r2, #255	; 0xff
 800055e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	22ff      	movs	r2, #255	; 0xff
 8000566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d114      	bne.n	800059a <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d01a      	beq.n	80005ae <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3310      	adds	r3, #16
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fb7d 	bl	8000c7c <xTaskRemoveFromEventList>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d012      	beq.n	80005ae <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <xQueueGenericReset+0xb0>)
 800058a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	f3bf 8f4f 	dsb	sy
 8000594:	f3bf 8f6f 	isb	sy
 8000598:	e009      	b.n	80005ae <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	3310      	adds	r3, #16
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff fdfa 	bl	8000198 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3324      	adds	r3, #36	; 0x24
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fdf5 	bl	8000198 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80005ae:	f7ff ff39 	bl	8000424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	e000ed04 	.word	0xe000ed04

080005c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	4613      	mov	r3, r2
 80005cc:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
 80005d8:	e004      	b.n	80005e4 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	68ba      	ldr	r2, [r7, #8]
 80005de:	fb02 f303 	mul.w	r3, r2, r3
 80005e2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	3350      	adds	r3, #80	; 0x50
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff fdb1 	bl	8000150 <pvPortMalloc>
 80005ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80005f0:	69bb      	ldr	r3, [r7, #24]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d00b      	beq.n	800060e <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80005f6:	69bb      	ldr	r3, [r7, #24]
 80005f8:	3350      	adds	r3, #80	; 0x50
 80005fa:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80005fc:	79fa      	ldrb	r2, [r7, #7]
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	4613      	mov	r3, r2
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	68b9      	ldr	r1, [r7, #8]
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f000 f805 	bl	8000618 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800060e:	69bb      	ldr	r3, [r7, #24]
	}
 8000610:	4618      	mov	r0, r3
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d103      	bne.n	8000634 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	69ba      	ldr	r2, [r7, #24]
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	e002      	b.n	800063a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000634:	69bb      	ldr	r3, [r7, #24]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000646:	2101      	movs	r1, #1
 8000648:	69b8      	ldr	r0, [r7, #24]
 800064a:	f7ff ff5f 	bl	800050c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	78fa      	ldrb	r2, [r7, #3]
 8000652:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800065e:	b580      	push	{r7, lr}
 8000660:	b08c      	sub	sp, #48	; 0x30
 8000662:	af04      	add	r7, sp, #16
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4613      	mov	r3, r2
 800066c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fd6c 	bl	8000150 <pvPortMalloc>
 8000678:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00e      	beq.n	800069e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8000680:	205c      	movs	r0, #92	; 0x5c
 8000682:	f7ff fd65 	bl	8000150 <pvPortMalloc>
 8000686:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d003      	beq.n	8000696 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	697a      	ldr	r2, [r7, #20]
 8000692:	631a      	str	r2, [r3, #48]	; 0x30
 8000694:	e005      	b.n	80006a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000696:	6978      	ldr	r0, [r7, #20]
 8000698:	f7ff fd6c 	bl	8000174 <vPortFree>
 800069c:	e001      	b.n	80006a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d013      	beq.n	80006d0 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80006a8:	88fa      	ldrh	r2, [r7, #6]
 80006aa:	2300      	movs	r3, #0
 80006ac:	9303      	str	r3, [sp, #12]
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	9302      	str	r3, [sp, #8]
 80006b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	68b9      	ldr	r1, [r7, #8]
 80006be:	68f8      	ldr	r0, [r7, #12]
 80006c0:	f000 f80e 	bl	80006e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80006c4:	69f8      	ldr	r0, [r7, #28]
 80006c6:	f000 f883 	bl	80007d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80006ca:	2301      	movs	r3, #1
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	e002      	b.n	80006d6 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80006d6:	69bb      	ldr	r3, [r7, #24]
	}
 80006d8:	4618      	mov	r0, r3
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80006ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	461a      	mov	r2, r3
 80006f8:	21a5      	movs	r1, #165	; 0xa5
 80006fa:	f000 fd99 	bl	8001230 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80006fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000708:	3b01      	subs	r3, #1
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	f023 0307 	bic.w	r3, r3, #7
 8000716:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	e012      	b.n	8000744 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	4413      	add	r3, r2
 8000724:	7819      	ldrb	r1, [r3, #0]
 8000726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	4413      	add	r3, r2
 800072c:	3334      	adds	r3, #52	; 0x34
 800072e:	460a      	mov	r2, r1
 8000730:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	4413      	add	r3, r2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d006      	beq.n	800074c <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	3301      	adds	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2b0f      	cmp	r3, #15
 8000748:	d9e9      	bls.n	800071e <prvInitialiseNewTask+0x3e>
 800074a:	e000      	b.n	800074e <prvInitialiseNewTask+0x6e>
		{
			break;
 800074c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000756:	6a3b      	ldr	r3, [r7, #32]
 8000758:	2b04      	cmp	r3, #4
 800075a:	d901      	bls.n	8000760 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800075c:	2304      	movs	r3, #4
 800075e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000762:	6a3a      	ldr	r2, [r7, #32]
 8000764:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000768:	6a3a      	ldr	r2, [r7, #32]
 800076a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800076c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800076e:	2200      	movs	r2, #0
 8000770:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000774:	3304      	adds	r3, #4
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fd2d 	bl	80001d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800077c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800077e:	3318      	adds	r3, #24
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fd28 	bl	80001d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800078a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	f1c3 0205 	rsb	r2, r3, #5
 8000792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000794:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800079c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079e:	2200      	movs	r2, #0
 80007a0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80007a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	68f9      	ldr	r1, [r7, #12]
 80007ae:	6938      	ldr	r0, [r7, #16]
 80007b0:	f7ff fda2 	bl	80002f8 <pxPortInitialiseStack>
 80007b4:	4602      	mov	r2, r0
 80007b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007b8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80007ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80007c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80007d8:	f7ff fe0c 	bl	80003f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80007dc:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <prvAddNewTaskToReadyList+0xc0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	4a2b      	ldr	r2, [pc, #172]	; (8000890 <prvAddNewTaskToReadyList+0xc0>)
 80007e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <prvAddNewTaskToReadyList+0xc4>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d109      	bne.n	8000802 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80007ee:	4a29      	ldr	r2, [pc, #164]	; (8000894 <prvAddNewTaskToReadyList+0xc4>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80007f4:	4b26      	ldr	r3, [pc, #152]	; (8000890 <prvAddNewTaskToReadyList+0xc0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d110      	bne.n	800081e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80007fc:	f000 faaa 	bl	8000d54 <prvInitialiseTaskLists>
 8000800:	e00d      	b.n	800081e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000802:	4b25      	ldr	r3, [pc, #148]	; (8000898 <prvAddNewTaskToReadyList+0xc8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d109      	bne.n	800081e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <prvAddNewTaskToReadyList+0xc4>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000814:	429a      	cmp	r2, r3
 8000816:	d802      	bhi.n	800081e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000818:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <prvAddNewTaskToReadyList+0xc4>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800081e:	4b1f      	ldr	r3, [pc, #124]	; (800089c <prvAddNewTaskToReadyList+0xcc>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	3301      	adds	r3, #1
 8000824:	4a1d      	ldr	r2, [pc, #116]	; (800089c <prvAddNewTaskToReadyList+0xcc>)
 8000826:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <prvAddNewTaskToReadyList+0xcc>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000834:	2201      	movs	r2, #1
 8000836:	409a      	lsls	r2, r3
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <prvAddNewTaskToReadyList+0xd0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4313      	orrs	r3, r2
 800083e:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <prvAddNewTaskToReadyList+0xd0>)
 8000840:	6013      	str	r3, [r2, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000846:	4613      	mov	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <prvAddNewTaskToReadyList+0xd4>)
 8000850:	441a      	add	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3304      	adds	r3, #4
 8000856:	4619      	mov	r1, r3
 8000858:	4610      	mov	r0, r2
 800085a:	f7ff fcc8 	bl	80001ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800085e:	f7ff fde1 	bl	8000424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <prvAddNewTaskToReadyList+0xc8>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00e      	beq.n	8000888 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <prvAddNewTaskToReadyList+0xc4>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000874:	429a      	cmp	r2, r3
 8000876:	d207      	bcs.n	8000888 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <prvAddNewTaskToReadyList+0xd8>)
 800087a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	f3bf 8f4f 	dsb	sy
 8000884:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000015c 	.word	0x2000015c
 8000894:	20000084 	.word	0x20000084
 8000898:	20000168 	.word	0x20000168
 800089c:	20000178 	.word	0x20000178
 80008a0:	20000164 	.word	0x20000164
 80008a4:	20000088 	.word	0x20000088
 80008a8:	e000ed04 	.word	0xe000ed04

080008ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d008      	beq.n	80008d0 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 80008be:	f000 f84f 	bl	8000960 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80008c2:	2100      	movs	r1, #0
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 faf5 	bl	8000eb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80008ca:	f000 f857 	bl	800097c <xTaskResumeAll>
 80008ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d107      	bne.n	80008e6 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <vTaskDelay+0x44>)
 80008d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	f3bf 8f4f 	dsb	sy
 80008e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	e000ed04 	.word	0xe000ed04

080008f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <vTaskStartScheduler+0x54>)
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	2300      	movs	r3, #0
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2300      	movs	r3, #0
 8000904:	2278      	movs	r2, #120	; 0x78
 8000906:	4911      	ldr	r1, [pc, #68]	; (800094c <vTaskStartScheduler+0x58>)
 8000908:	4811      	ldr	r0, [pc, #68]	; (8000950 <vTaskStartScheduler+0x5c>)
 800090a:	f7ff fea8 	bl	800065e <xTaskCreate>
 800090e:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d114      	bne.n	8000940 <vTaskStartScheduler+0x4c>
	__asm volatile
 8000916:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800091a:	f383 8811 	msr	BASEPRI, r3
 800091e:	f3bf 8f6f 	isb	sy
 8000922:	f3bf 8f4f 	dsb	sy
 8000926:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <vTaskStartScheduler+0x60>)
 800092a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800092e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <vTaskStartScheduler+0x64>)
 8000932:	2201      	movs	r2, #1
 8000934:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <vTaskStartScheduler+0x68>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800093c:	f7ff fd3c 	bl	80003b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000180 	.word	0x20000180
 800094c:	080013ec 	.word	0x080013ec
 8000950:	08000d25 	.word	0x08000d25
 8000954:	2000017c 	.word	0x2000017c
 8000958:	20000168 	.word	0x20000168
 800095c:	20000160 	.word	0x20000160

08000960 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <vTaskSuspendAll+0x18>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	4a03      	ldr	r2, [pc, #12]	; (8000978 <vTaskSuspendAll+0x18>)
 800096c:	6013      	str	r3, [r2, #0]
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000184 	.word	0x20000184

0800097c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800098a:	f7ff fd33 	bl	80003f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800098e:	4b39      	ldr	r3, [pc, #228]	; (8000a74 <xTaskResumeAll+0xf8>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3b01      	subs	r3, #1
 8000994:	4a37      	ldr	r2, [pc, #220]	; (8000a74 <xTaskResumeAll+0xf8>)
 8000996:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000998:	4b36      	ldr	r3, [pc, #216]	; (8000a74 <xTaskResumeAll+0xf8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d161      	bne.n	8000a64 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80009a0:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <xTaskResumeAll+0xfc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d05d      	beq.n	8000a64 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80009a8:	e02e      	b.n	8000a08 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80009aa:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <xTaskResumeAll+0x100>)
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3318      	adds	r3, #24
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fc74 	bl	80002a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	3304      	adds	r3, #4
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fc6f 	bl	80002a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ca:	2201      	movs	r2, #1
 80009cc:	409a      	lsls	r2, r3
 80009ce:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <xTaskResumeAll+0x104>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	4a2a      	ldr	r2, [pc, #168]	; (8000a80 <xTaskResumeAll+0x104>)
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009dc:	4613      	mov	r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	4413      	add	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4a27      	ldr	r2, [pc, #156]	; (8000a84 <xTaskResumeAll+0x108>)
 80009e6:	441a      	add	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	3304      	adds	r3, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4610      	mov	r0, r2
 80009f0:	f7ff fbfd 	bl	80001ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <xTaskResumeAll+0x10c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d302      	bcc.n	8000a08 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <xTaskResumeAll+0x110>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <xTaskResumeAll+0x100>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1cc      	bne.n	80009aa <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000a16:	f000 fa29 	bl	8000e6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <xTaskResumeAll+0x114>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d010      	beq.n	8000a48 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000a26:	f000 f837 	bl	8000a98 <xTaskIncrementTick>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <xTaskResumeAll+0x110>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1f1      	bne.n	8000a26 <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <xTaskResumeAll+0x114>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <xTaskResumeAll+0x110>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d009      	beq.n	8000a64 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000a50:	2301      	movs	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <xTaskResumeAll+0x118>)
 8000a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	f3bf 8f4f 	dsb	sy
 8000a60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000a64:	f7ff fcde 	bl	8000424 <vPortExitCritical>

	return xAlreadyYielded;
 8000a68:	68bb      	ldr	r3, [r7, #8]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000184 	.word	0x20000184
 8000a78:	2000015c 	.word	0x2000015c
 8000a7c:	2000011c 	.word	0x2000011c
 8000a80:	20000164 	.word	0x20000164
 8000a84:	20000088 	.word	0x20000088
 8000a88:	20000084 	.word	0x20000084
 8000a8c:	20000170 	.word	0x20000170
 8000a90:	2000016c 	.word	0x2000016c
 8000a94:	e000ed04 	.word	0xe000ed04

08000a98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000aa2:	4b48      	ldr	r3, [pc, #288]	; (8000bc4 <xTaskIncrementTick+0x12c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d17c      	bne.n	8000ba4 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8000aaa:	4b47      	ldr	r3, [pc, #284]	; (8000bc8 <xTaskIncrementTick+0x130>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000ab2:	4a45      	ldr	r2, [pc, #276]	; (8000bc8 <xTaskIncrementTick+0x130>)
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d110      	bne.n	8000ae0 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8000abe:	4b43      	ldr	r3, [pc, #268]	; (8000bcc <xTaskIncrementTick+0x134>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	4b42      	ldr	r3, [pc, #264]	; (8000bd0 <xTaskIncrementTick+0x138>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a40      	ldr	r2, [pc, #256]	; (8000bcc <xTaskIncrementTick+0x134>)
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	4a40      	ldr	r2, [pc, #256]	; (8000bd0 <xTaskIncrementTick+0x138>)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	4b40      	ldr	r3, [pc, #256]	; (8000bd4 <xTaskIncrementTick+0x13c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4a3e      	ldr	r2, [pc, #248]	; (8000bd4 <xTaskIncrementTick+0x13c>)
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	f000 f9c6 	bl	8000e6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	; (8000bd8 <xTaskIncrementTick+0x140>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d34d      	bcc.n	8000b86 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000aea:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <xTaskIncrementTick+0x134>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d101      	bne.n	8000af8 <xTaskIncrementTick+0x60>
 8000af4:	2301      	movs	r3, #1
 8000af6:	e000      	b.n	8000afa <xTaskIncrementTick+0x62>
 8000af8:	2300      	movs	r3, #0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d004      	beq.n	8000b08 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000afe:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <xTaskIncrementTick+0x140>)
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b04:	601a      	str	r2, [r3, #0]
					break;
 8000b06:	e03e      	b.n	8000b86 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <xTaskIncrementTick+0x134>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d203      	bcs.n	8000b28 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000b20:	4a2d      	ldr	r2, [pc, #180]	; (8000bd8 <xTaskIncrementTick+0x140>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
						break;
 8000b26:	e02e      	b.n	8000b86 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fbb9 	bl	80002a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d004      	beq.n	8000b44 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	3318      	adds	r3, #24
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fbb0 	bl	80002a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b48:	2201      	movs	r2, #1
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <xTaskIncrementTick+0x144>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <xTaskIncrementTick+0x144>)
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <xTaskIncrementTick+0x148>)
 8000b64:	441a      	add	r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	f7ff fb3e 	bl	80001ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b76:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <xTaskIncrementTick+0x14c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d3b4      	bcc.n	8000aea <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8000b80:	2301      	movs	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b84:	e7b1      	b.n	8000aea <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <xTaskIncrementTick+0x14c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b8c:	4914      	ldr	r1, [pc, #80]	; (8000be0 <xTaskIncrementTick+0x148>)
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d907      	bls.n	8000bae <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	e004      	b.n	8000bae <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <xTaskIncrementTick+0x150>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <xTaskIncrementTick+0x150>)
 8000bac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <xTaskIncrementTick+0x154>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8000bba:	697b      	ldr	r3, [r7, #20]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000184 	.word	0x20000184
 8000bc8:	20000160 	.word	0x20000160
 8000bcc:	20000114 	.word	0x20000114
 8000bd0:	20000118 	.word	0x20000118
 8000bd4:	20000174 	.word	0x20000174
 8000bd8:	2000017c 	.word	0x2000017c
 8000bdc:	20000164 	.word	0x20000164
 8000be0:	20000088 	.word	0x20000088
 8000be4:	20000084 	.word	0x20000084
 8000be8:	2000016c 	.word	0x2000016c
 8000bec:	20000170 	.word	0x20000170

08000bf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <vTaskSwitchContext+0x78>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <vTaskSwitchContext+0x7c>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000c04:	e02a      	b.n	8000c5c <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <vTaskSwitchContext+0x7c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <vTaskSwitchContext+0x80>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	fab3 f383 	clz	r3, r3
 8000c18:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8000c1a:	78fb      	ldrb	r3, [r7, #3]
 8000c1c:	f1c3 031f 	rsb	r3, r3, #31
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	4613      	mov	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4413      	add	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <vTaskSwitchContext+0x84>)
 8000c2e:	4413      	add	r3, r2
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	3308      	adds	r3, #8
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d104      	bne.n	8000c52 <vTaskSwitchContext+0x62>
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <vTaskSwitchContext+0x88>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000184 	.word	0x20000184
 8000c6c:	20000170 	.word	0x20000170
 8000c70:	20000164 	.word	0x20000164
 8000c74:	20000088 	.word	0x20000088
 8000c78:	20000084 	.word	0x20000084

08000c7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	3318      	adds	r3, #24
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fb07 	bl	80002a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <xTaskRemoveFromEventList+0x90>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d11c      	bne.n	8000cd8 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fafe 	bl	80002a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cac:	2201      	movs	r2, #1
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <xTaskRemoveFromEventList+0x94>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <xTaskRemoveFromEventList+0x94>)
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <xTaskRemoveFromEventList+0x98>)
 8000cc8:	441a      	add	r2, r3
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	f7ff fa8c 	bl	80001ee <vListInsertEnd>
 8000cd6:	e005      	b.n	8000ce4 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	3318      	adds	r3, #24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480e      	ldr	r0, [pc, #56]	; (8000d18 <xTaskRemoveFromEventList+0x9c>)
 8000ce0:	f7ff fa85 	bl	80001ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <xTaskRemoveFromEventList+0xa0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d905      	bls.n	8000cfe <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <xTaskRemoveFromEventList+0xa4>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	e001      	b.n	8000d02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000184 	.word	0x20000184
 8000d10:	20000164 	.word	0x20000164
 8000d14:	20000088 	.word	0x20000088
 8000d18:	2000011c 	.word	0x2000011c
 8000d1c:	20000084 	.word	0x20000084
 8000d20:	20000170 	.word	0x20000170

08000d24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8000d2c:	f000 f852 	bl	8000dd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <prvIdleTask+0x28>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d9f9      	bls.n	8000d2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <prvIdleTask+0x2c>)
 8000d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	f3bf 8f4f 	dsb	sy
 8000d44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8000d48:	e7f0      	b.n	8000d2c <prvIdleTask+0x8>
 8000d4a:	bf00      	nop
 8000d4c:	20000088 	.word	0x20000088
 8000d50:	e000ed04 	.word	0xe000ed04

08000d54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	e00c      	b.n	8000d7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <prvInitialiseTaskLists+0x60>)
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fa12 	bl	8000198 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3301      	adds	r3, #1
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d9ef      	bls.n	8000d60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <prvInitialiseTaskLists+0x64>)
 8000d82:	f7ff fa09 	bl	8000198 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <prvInitialiseTaskLists+0x68>)
 8000d88:	f7ff fa06 	bl	8000198 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <prvInitialiseTaskLists+0x6c>)
 8000d8e:	f7ff fa03 	bl	8000198 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8000d92:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <prvInitialiseTaskLists+0x70>)
 8000d94:	f7ff fa00 	bl	8000198 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8000d98:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <prvInitialiseTaskLists+0x74>)
 8000d9a:	f7ff f9fd 	bl	8000198 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <prvInitialiseTaskLists+0x78>)
 8000da0:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <prvInitialiseTaskLists+0x64>)
 8000da2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <prvInitialiseTaskLists+0x7c>)
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <prvInitialiseTaskLists+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000088 	.word	0x20000088
 8000db8:	200000ec 	.word	0x200000ec
 8000dbc:	20000100 	.word	0x20000100
 8000dc0:	2000011c 	.word	0x2000011c
 8000dc4:	20000130 	.word	0x20000130
 8000dc8:	20000148 	.word	0x20000148
 8000dcc:	20000114 	.word	0x20000114
 8000dd0:	20000118 	.word	0x20000118

08000dd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000dda:	e028      	b.n	8000e2e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8000ddc:	f7ff fdc0 	bl	8000960 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <prvCheckTasksWaitingTermination+0x6c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	bf0c      	ite	eq
 8000de8:	2301      	moveq	r3, #1
 8000dea:	2300      	movne	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8000df0:	f7ff fdc4 	bl	800097c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d119      	bne.n	8000e2e <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8000dfa:	f7ff fafb 	bl	80003f4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <prvCheckTasksWaitingTermination+0x6c>)
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fa4a 	bl	80002a4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <prvCheckTasksWaitingTermination+0x70>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <prvCheckTasksWaitingTermination+0x70>)
 8000e18:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <prvCheckTasksWaitingTermination+0x74>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	4a09      	ldr	r2, [pc, #36]	; (8000e48 <prvCheckTasksWaitingTermination+0x74>)
 8000e22:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8000e24:	f7ff fafe 	bl	8000424 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8000e28:	6838      	ldr	r0, [r7, #0]
 8000e2a:	f000 f80f 	bl	8000e4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <prvCheckTasksWaitingTermination+0x74>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1d2      	bne.n	8000ddc <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000130 	.word	0x20000130
 8000e44:	2000015c 	.word	0x2000015c
 8000e48:	20000144 	.word	0x20000144

08000e4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff f98b 	bl	8000174 <vPortFree>
			vPortFree( pxTCB );
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff f988 	bl	8000174 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <prvResetNextTaskUnblockTime+0x40>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <prvResetNextTaskUnblockTime+0x14>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e000      	b.n	8000e82 <prvResetNextTaskUnblockTime+0x16>
 8000e80:	2300      	movs	r3, #0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d004      	beq.n	8000e90 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <prvResetNextTaskUnblockTime+0x44>)
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e8c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8000e8e:	e008      	b.n	8000ea2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <prvResetNextTaskUnblockTime+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <prvResetNextTaskUnblockTime+0x44>)
 8000ea0:	6013      	str	r3, [r2, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	20000114 	.word	0x20000114
 8000eb0:	2000017c 	.word	0x2000017c

08000eb4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8000ebe:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <prvAddCurrentTaskToDelayedList+0xb0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000ec4:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff f9ea 	bl	80002a4 <uxListRemove>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10b      	bne.n	8000eee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000edc:	2201      	movs	r2, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	4a20      	ldr	r2, [pc, #128]	; (8000f6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8000eec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ef4:	d10a      	bne.n	8000f0c <prvAddCurrentTaskToDelayedList+0x58>
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d007      	beq.n	8000f0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3304      	adds	r3, #4
 8000f02:	4619      	mov	r1, r3
 8000f04:	481a      	ldr	r0, [pc, #104]	; (8000f70 <prvAddCurrentTaskToDelayedList+0xbc>)
 8000f06:	f7ff f972 	bl	80001ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8000f0a:	e026      	b.n	8000f5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d209      	bcs.n	8000f38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <prvAddCurrentTaskToDelayedList+0xc0>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4610      	mov	r0, r2
 8000f32:	f7ff f97f 	bl	8000234 <vListInsert>
}
 8000f36:	e010      	b.n	8000f5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <prvAddCurrentTaskToDelayedList+0xc4>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3304      	adds	r3, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4610      	mov	r0, r2
 8000f46:	f7ff f975 	bl	8000234 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d202      	bcs.n	8000f5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8000f54:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	6013      	str	r3, [r2, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000160 	.word	0x20000160
 8000f68:	20000084 	.word	0x20000084
 8000f6c:	20000164 	.word	0x20000164
 8000f70:	20000148 	.word	0x20000148
 8000f74:	20000118 	.word	0x20000118
 8000f78:	20000114 	.word	0x20000114
 8000f7c:	2000017c 	.word	0x2000017c

08000f80 <main>:

QueueHandle_t OutputQueue;



 int main(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af02      	add	r7, sp, #8

	 OutputQueue = xQueueCreate(OUTPUT_QUEUE_SIZE, sizeof(message_t));
 8000f86:	2200      	movs	r2, #0
 8000f88:	2120      	movs	r1, #32
 8000f8a:	2010      	movs	r0, #16
 8000f8c:	f7ff fb18 	bl	80005c0 <xQueueGenericCreate>
 8000f90:	4602      	mov	r2, r0
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <main+0x30>)
 8000f94:	601a      	str	r2, [r3, #0]

	// 	xTaskCreate( bmp280_read_temp_full,  "bmp280_read_temp_full", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
	// 	xTaskCreate( bmp280_read_press_full, "bmp280_read_press_full", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
	 	xTaskCreate( ThreadLightSensor, "ThreadLigtSensor", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8000f96:	2300      	movs	r3, #0
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	2278      	movs	r2, #120	; 0x78
 8000fa2:	4904      	ldr	r1, [pc, #16]	; (8000fb4 <main+0x34>)
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <main+0x38>)
 8000fa6:	f7ff fb5a 	bl	800065e <xTaskCreate>
	// 	xTaskCreate( nr24l01_receiver, "rex", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
	 	vTaskStartScheduler();
 8000faa:	f7ff fca3 	bl	80008f4 <vTaskStartScheduler>


   while (1) {
 8000fae:	e7fe      	b.n	8000fae <main+0x2e>
 8000fb0:	20000194 	.word	0x20000194
 8000fb4:	080013f4 	.word	0x080013f4
 8000fb8:	080011b5 	.word	0x080011b5

08000fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fc2:	e003      	b.n	8000fcc <LoopCopyDataInit>

08000fc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000fc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fca:	3104      	adds	r1, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fcc:	480b      	ldr	r0, [pc, #44]	; (8000ffc <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000fd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fd4:	d3f6      	bcc.n	8000fc4 <CopyDataInit>
	ldr	r2, =_sbss
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000fd8:	e002      	b.n	8000fe0 <LoopFillZerobss>

08000fda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fdc:	f842 3b04 	str.w	r3, [r2], #4

08000fe0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000fe2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fe4:	d3f9      	bcc.n	8000fda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fe6:	f000 f82b 	bl	8001040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fea:	f000 f8ed 	bl	80011c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fee:	f7ff ffc7 	bl	8000f80 <main>
	bx	lr
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ff4:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000ff8:	08001410 	.word	0x08001410
	ldr	r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001000:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8001004:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001008:	2000019c 	.word	0x2000019c

0800100c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_2_IRQHandler>

0800100e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001024:	e7fe      	b.n	8001024 <MemManage_Handler+0x4>

08001026 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800102a:	e7fe      	b.n	800102a <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler+0x4>

08001032 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
	...

08001040 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001044:	4a15      	ldr	r2, [pc, #84]	; (800109c <SystemInit+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <SystemInit+0x5c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001050:	4912      	ldr	r1, [pc, #72]	; (800109c <SystemInit+0x5c>)
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <SystemInit+0x5c>)
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <SystemInit+0x60>)
 8001058:	4013      	ands	r3, r2
 800105a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800105c:	4a0f      	ldr	r2, [pc, #60]	; (800109c <SystemInit+0x5c>)
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <SystemInit+0x5c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <SystemInit+0x5c>)
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <SystemInit+0x5c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001076:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001078:	4a08      	ldr	r2, [pc, #32]	; (800109c <SystemInit+0x5c>)
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <SystemInit+0x5c>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001082:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SystemInit+0x5c>)
 8001086:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800108a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800108c:	f000 f80c 	bl	80010a8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SystemInit+0x64>)
 8001092:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001096:	609a      	str	r2, [r3, #8]
#endif 
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000
 80010a0:	f8ff0000 	.word	0xf8ff0000
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80010ac:	f000 f802 	bl	80010b4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	2300      	movs	r3, #0
 80010c0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80010c2:	4a3a      	ldr	r2, [pc, #232]	; (80011ac <SetSysClockTo72+0xf8>)
 80010c4:	4b39      	ldr	r3, [pc, #228]	; (80011ac <SetSysClockTo72+0xf8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80010ce:	4b37      	ldr	r3, [pc, #220]	; (80011ac <SetSysClockTo72+0xf8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3301      	adds	r3, #1
 80010dc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <SetSysClockTo72+0x38>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80010ea:	d1f0      	bne.n	80010ce <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <SetSysClockTo72+0xf8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80010f8:	2301      	movs	r3, #1
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	e001      	b.n	8001102 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d14b      	bne.n	80011a0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001108:	4a29      	ldr	r2, [pc, #164]	; (80011b0 <SetSysClockTo72+0xfc>)
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <SetSysClockTo72+0xfc>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f043 0310 	orr.w	r3, r3, #16
 8001112:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001114:	4a26      	ldr	r2, [pc, #152]	; (80011b0 <SetSysClockTo72+0xfc>)
 8001116:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <SetSysClockTo72+0xfc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f023 0303 	bic.w	r3, r3, #3
 800111e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001120:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <SetSysClockTo72+0xfc>)
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <SetSysClockTo72+0xfc>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800112c:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <SetSysClockTo72+0xf8>)
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <SetSysClockTo72+0xf8>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001134:	4a1d      	ldr	r2, [pc, #116]	; (80011ac <SetSysClockTo72+0xf8>)
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <SetSysClockTo72+0xf8>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800113c:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <SetSysClockTo72+0xf8>)
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <SetSysClockTo72+0xf8>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001146:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001148:	4a18      	ldr	r2, [pc, #96]	; (80011ac <SetSysClockTo72+0xf8>)
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <SetSysClockTo72+0xf8>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001152:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001154:	4a15      	ldr	r2, [pc, #84]	; (80011ac <SetSysClockTo72+0xf8>)
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <SetSysClockTo72+0xf8>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800115e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <SetSysClockTo72+0xf8>)
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <SetSysClockTo72+0xf8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800116a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800116c:	bf00      	nop
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <SetSysClockTo72+0xf8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f9      	beq.n	800116e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800117a:	4a0c      	ldr	r2, [pc, #48]	; (80011ac <SetSysClockTo72+0xf8>)
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <SetSysClockTo72+0xf8>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f023 0303 	bic.w	r3, r3, #3
 8001184:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001186:	4a09      	ldr	r2, [pc, #36]	; (80011ac <SetSysClockTo72+0xf8>)
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <SetSysClockTo72+0xf8>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001192:	bf00      	nop
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SetSysClockTo72+0xf8>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b08      	cmp	r3, #8
 800119e:	d1f9      	bne.n	8001194 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40022000 	.word	0x40022000

080011b4 <ThreadLightSensor>:

}


void ThreadLightSensor ( void * pvParameters )
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]



	for (;;) {

		vTaskDelay(1000);
 80011bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c0:	f7ff fb74 	bl	80008ac <vTaskDelay>
	for (;;) {
 80011c4:	e7fa      	b.n	80011bc <ThreadLightSensor+0x8>
	...

080011c8 <__libc_init_array>:
 80011c8:	b570      	push	{r4, r5, r6, lr}
 80011ca:	2500      	movs	r5, #0
 80011cc:	4e0c      	ldr	r6, [pc, #48]	; (8001200 <__libc_init_array+0x38>)
 80011ce:	4c0d      	ldr	r4, [pc, #52]	; (8001204 <__libc_init_array+0x3c>)
 80011d0:	1ba4      	subs	r4, r4, r6
 80011d2:	10a4      	asrs	r4, r4, #2
 80011d4:	42a5      	cmp	r5, r4
 80011d6:	d109      	bne.n	80011ec <__libc_init_array+0x24>
 80011d8:	f000 f8fc 	bl	80013d4 <_init>
 80011dc:	2500      	movs	r5, #0
 80011de:	4e0a      	ldr	r6, [pc, #40]	; (8001208 <__libc_init_array+0x40>)
 80011e0:	4c0a      	ldr	r4, [pc, #40]	; (800120c <__libc_init_array+0x44>)
 80011e2:	1ba4      	subs	r4, r4, r6
 80011e4:	10a4      	asrs	r4, r4, #2
 80011e6:	42a5      	cmp	r5, r4
 80011e8:	d105      	bne.n	80011f6 <__libc_init_array+0x2e>
 80011ea:	bd70      	pop	{r4, r5, r6, pc}
 80011ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011f0:	4798      	blx	r3
 80011f2:	3501      	adds	r5, #1
 80011f4:	e7ee      	b.n	80011d4 <__libc_init_array+0xc>
 80011f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011fa:	4798      	blx	r3
 80011fc:	3501      	adds	r5, #1
 80011fe:	e7f2      	b.n	80011e6 <__libc_init_array+0x1e>
 8001200:	08001408 	.word	0x08001408
 8001204:	08001408 	.word	0x08001408
 8001208:	08001408 	.word	0x08001408
 800120c:	0800140c 	.word	0x0800140c

08001210 <malloc>:
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <malloc+0xc>)
 8001212:	4601      	mov	r1, r0
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	f000 b85f 	b.w	80012d8 <_malloc_r>
 800121a:	bf00      	nop
 800121c:	20000004 	.word	0x20000004

08001220 <free>:
 8001220:	4b02      	ldr	r3, [pc, #8]	; (800122c <free+0xc>)
 8001222:	4601      	mov	r1, r0
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	f000 b80b 	b.w	8001240 <_free_r>
 800122a:	bf00      	nop
 800122c:	20000004 	.word	0x20000004

08001230 <memset>:
 8001230:	4603      	mov	r3, r0
 8001232:	4402      	add	r2, r0
 8001234:	4293      	cmp	r3, r2
 8001236:	d100      	bne.n	800123a <memset+0xa>
 8001238:	4770      	bx	lr
 800123a:	f803 1b01 	strb.w	r1, [r3], #1
 800123e:	e7f9      	b.n	8001234 <memset+0x4>

08001240 <_free_r>:
 8001240:	b538      	push	{r3, r4, r5, lr}
 8001242:	4605      	mov	r5, r0
 8001244:	2900      	cmp	r1, #0
 8001246:	d043      	beq.n	80012d0 <_free_r+0x90>
 8001248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800124c:	1f0c      	subs	r4, r1, #4
 800124e:	2b00      	cmp	r3, #0
 8001250:	bfb8      	it	lt
 8001252:	18e4      	addlt	r4, r4, r3
 8001254:	f000 f8ae 	bl	80013b4 <__malloc_lock>
 8001258:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <_free_r+0x94>)
 800125a:	6813      	ldr	r3, [r2, #0]
 800125c:	4610      	mov	r0, r2
 800125e:	b933      	cbnz	r3, 800126e <_free_r+0x2e>
 8001260:	6063      	str	r3, [r4, #4]
 8001262:	6014      	str	r4, [r2, #0]
 8001264:	4628      	mov	r0, r5
 8001266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800126a:	f000 b8a4 	b.w	80013b6 <__malloc_unlock>
 800126e:	42a3      	cmp	r3, r4
 8001270:	d90b      	bls.n	800128a <_free_r+0x4a>
 8001272:	6821      	ldr	r1, [r4, #0]
 8001274:	1862      	adds	r2, r4, r1
 8001276:	4293      	cmp	r3, r2
 8001278:	bf01      	itttt	eq
 800127a:	681a      	ldreq	r2, [r3, #0]
 800127c:	685b      	ldreq	r3, [r3, #4]
 800127e:	1852      	addeq	r2, r2, r1
 8001280:	6022      	streq	r2, [r4, #0]
 8001282:	6063      	str	r3, [r4, #4]
 8001284:	6004      	str	r4, [r0, #0]
 8001286:	e7ed      	b.n	8001264 <_free_r+0x24>
 8001288:	4613      	mov	r3, r2
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	b10a      	cbz	r2, 8001292 <_free_r+0x52>
 800128e:	42a2      	cmp	r2, r4
 8001290:	d9fa      	bls.n	8001288 <_free_r+0x48>
 8001292:	6819      	ldr	r1, [r3, #0]
 8001294:	1858      	adds	r0, r3, r1
 8001296:	42a0      	cmp	r0, r4
 8001298:	d10b      	bne.n	80012b2 <_free_r+0x72>
 800129a:	6820      	ldr	r0, [r4, #0]
 800129c:	4401      	add	r1, r0
 800129e:	1858      	adds	r0, r3, r1
 80012a0:	4282      	cmp	r2, r0
 80012a2:	6019      	str	r1, [r3, #0]
 80012a4:	d1de      	bne.n	8001264 <_free_r+0x24>
 80012a6:	6810      	ldr	r0, [r2, #0]
 80012a8:	6852      	ldr	r2, [r2, #4]
 80012aa:	4401      	add	r1, r0
 80012ac:	6019      	str	r1, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	e7d8      	b.n	8001264 <_free_r+0x24>
 80012b2:	d902      	bls.n	80012ba <_free_r+0x7a>
 80012b4:	230c      	movs	r3, #12
 80012b6:	602b      	str	r3, [r5, #0]
 80012b8:	e7d4      	b.n	8001264 <_free_r+0x24>
 80012ba:	6820      	ldr	r0, [r4, #0]
 80012bc:	1821      	adds	r1, r4, r0
 80012be:	428a      	cmp	r2, r1
 80012c0:	bf01      	itttt	eq
 80012c2:	6811      	ldreq	r1, [r2, #0]
 80012c4:	6852      	ldreq	r2, [r2, #4]
 80012c6:	1809      	addeq	r1, r1, r0
 80012c8:	6021      	streq	r1, [r4, #0]
 80012ca:	6062      	str	r2, [r4, #4]
 80012cc:	605c      	str	r4, [r3, #4]
 80012ce:	e7c9      	b.n	8001264 <_free_r+0x24>
 80012d0:	bd38      	pop	{r3, r4, r5, pc}
 80012d2:	bf00      	nop
 80012d4:	20000188 	.word	0x20000188

080012d8 <_malloc_r>:
 80012d8:	b570      	push	{r4, r5, r6, lr}
 80012da:	1ccd      	adds	r5, r1, #3
 80012dc:	f025 0503 	bic.w	r5, r5, #3
 80012e0:	3508      	adds	r5, #8
 80012e2:	2d0c      	cmp	r5, #12
 80012e4:	bf38      	it	cc
 80012e6:	250c      	movcc	r5, #12
 80012e8:	2d00      	cmp	r5, #0
 80012ea:	4606      	mov	r6, r0
 80012ec:	db01      	blt.n	80012f2 <_malloc_r+0x1a>
 80012ee:	42a9      	cmp	r1, r5
 80012f0:	d903      	bls.n	80012fa <_malloc_r+0x22>
 80012f2:	230c      	movs	r3, #12
 80012f4:	6033      	str	r3, [r6, #0]
 80012f6:	2000      	movs	r0, #0
 80012f8:	bd70      	pop	{r4, r5, r6, pc}
 80012fa:	f000 f85b 	bl	80013b4 <__malloc_lock>
 80012fe:	4a23      	ldr	r2, [pc, #140]	; (800138c <_malloc_r+0xb4>)
 8001300:	6814      	ldr	r4, [r2, #0]
 8001302:	4621      	mov	r1, r4
 8001304:	b991      	cbnz	r1, 800132c <_malloc_r+0x54>
 8001306:	4c22      	ldr	r4, [pc, #136]	; (8001390 <_malloc_r+0xb8>)
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	b91b      	cbnz	r3, 8001314 <_malloc_r+0x3c>
 800130c:	4630      	mov	r0, r6
 800130e:	f000 f841 	bl	8001394 <_sbrk_r>
 8001312:	6020      	str	r0, [r4, #0]
 8001314:	4629      	mov	r1, r5
 8001316:	4630      	mov	r0, r6
 8001318:	f000 f83c 	bl	8001394 <_sbrk_r>
 800131c:	1c43      	adds	r3, r0, #1
 800131e:	d126      	bne.n	800136e <_malloc_r+0x96>
 8001320:	230c      	movs	r3, #12
 8001322:	4630      	mov	r0, r6
 8001324:	6033      	str	r3, [r6, #0]
 8001326:	f000 f846 	bl	80013b6 <__malloc_unlock>
 800132a:	e7e4      	b.n	80012f6 <_malloc_r+0x1e>
 800132c:	680b      	ldr	r3, [r1, #0]
 800132e:	1b5b      	subs	r3, r3, r5
 8001330:	d41a      	bmi.n	8001368 <_malloc_r+0x90>
 8001332:	2b0b      	cmp	r3, #11
 8001334:	d90f      	bls.n	8001356 <_malloc_r+0x7e>
 8001336:	600b      	str	r3, [r1, #0]
 8001338:	18cc      	adds	r4, r1, r3
 800133a:	50cd      	str	r5, [r1, r3]
 800133c:	4630      	mov	r0, r6
 800133e:	f000 f83a 	bl	80013b6 <__malloc_unlock>
 8001342:	f104 000b 	add.w	r0, r4, #11
 8001346:	1d23      	adds	r3, r4, #4
 8001348:	f020 0007 	bic.w	r0, r0, #7
 800134c:	1ac3      	subs	r3, r0, r3
 800134e:	d01b      	beq.n	8001388 <_malloc_r+0xb0>
 8001350:	425a      	negs	r2, r3
 8001352:	50e2      	str	r2, [r4, r3]
 8001354:	bd70      	pop	{r4, r5, r6, pc}
 8001356:	428c      	cmp	r4, r1
 8001358:	bf0b      	itete	eq
 800135a:	6863      	ldreq	r3, [r4, #4]
 800135c:	684b      	ldrne	r3, [r1, #4]
 800135e:	6013      	streq	r3, [r2, #0]
 8001360:	6063      	strne	r3, [r4, #4]
 8001362:	bf18      	it	ne
 8001364:	460c      	movne	r4, r1
 8001366:	e7e9      	b.n	800133c <_malloc_r+0x64>
 8001368:	460c      	mov	r4, r1
 800136a:	6849      	ldr	r1, [r1, #4]
 800136c:	e7ca      	b.n	8001304 <_malloc_r+0x2c>
 800136e:	1cc4      	adds	r4, r0, #3
 8001370:	f024 0403 	bic.w	r4, r4, #3
 8001374:	42a0      	cmp	r0, r4
 8001376:	d005      	beq.n	8001384 <_malloc_r+0xac>
 8001378:	1a21      	subs	r1, r4, r0
 800137a:	4630      	mov	r0, r6
 800137c:	f000 f80a 	bl	8001394 <_sbrk_r>
 8001380:	3001      	adds	r0, #1
 8001382:	d0cd      	beq.n	8001320 <_malloc_r+0x48>
 8001384:	6025      	str	r5, [r4, #0]
 8001386:	e7d9      	b.n	800133c <_malloc_r+0x64>
 8001388:	bd70      	pop	{r4, r5, r6, pc}
 800138a:	bf00      	nop
 800138c:	20000188 	.word	0x20000188
 8001390:	2000018c 	.word	0x2000018c

08001394 <_sbrk_r>:
 8001394:	b538      	push	{r3, r4, r5, lr}
 8001396:	2300      	movs	r3, #0
 8001398:	4c05      	ldr	r4, [pc, #20]	; (80013b0 <_sbrk_r+0x1c>)
 800139a:	4605      	mov	r5, r0
 800139c:	4608      	mov	r0, r1
 800139e:	6023      	str	r3, [r4, #0]
 80013a0:	f000 f80a 	bl	80013b8 <_sbrk>
 80013a4:	1c43      	adds	r3, r0, #1
 80013a6:	d102      	bne.n	80013ae <_sbrk_r+0x1a>
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	b103      	cbz	r3, 80013ae <_sbrk_r+0x1a>
 80013ac:	602b      	str	r3, [r5, #0]
 80013ae:	bd38      	pop	{r3, r4, r5, pc}
 80013b0:	20000198 	.word	0x20000198

080013b4 <__malloc_lock>:
 80013b4:	4770      	bx	lr

080013b6 <__malloc_unlock>:
 80013b6:	4770      	bx	lr

080013b8 <_sbrk>:
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <_sbrk+0x14>)
 80013ba:	4602      	mov	r2, r0
 80013bc:	6819      	ldr	r1, [r3, #0]
 80013be:	b909      	cbnz	r1, 80013c4 <_sbrk+0xc>
 80013c0:	4903      	ldr	r1, [pc, #12]	; (80013d0 <_sbrk+0x18>)
 80013c2:	6019      	str	r1, [r3, #0]
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	4402      	add	r2, r0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	4770      	bx	lr
 80013cc:	20000190 	.word	0x20000190
 80013d0:	2000019c 	.word	0x2000019c

080013d4 <_init>:
 80013d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d6:	bf00      	nop
 80013d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013da:	bc08      	pop	{r3}
 80013dc:	469e      	mov	lr, r3
 80013de:	4770      	bx	lr

080013e0 <_fini>:
 80013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e2:	bf00      	nop
 80013e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013e6:	bc08      	pop	{r3}
 80013e8:	469e      	mov	lr, r3
 80013ea:	4770      	bx	lr
