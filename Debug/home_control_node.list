
home_control_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001264  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001374  08001374  00011374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001398  08001398  00011398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800139c  0800139c  0001139c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000113a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004b8  20000000  080013a0  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00002000  200004b8  080013a0  000204b8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000113a0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008488  00000000  00000000  000113c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b16  00000000  00000000  00019851  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008a8  00000000  00000000  0001b368  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b0  00000000  00000000  0001bc10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000036d7  00000000  00000000  0001c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002c60  00000000  00000000  0001fa97  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000226f7  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000021ac  00000000  00000000  00022774  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000000 	.word	0x20000000
 800012c:	00000000 	.word	0x00000000
 8000130:	0800135c 	.word	0x0800135c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000004 	.word	0x20000004
 800014c:	0800135c 	.word	0x0800135c

08000150 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	685b      	ldr	r3, [r3, #4]
 800015e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000160:	683b      	ldr	r3, [r7, #0]
 8000162:	68fa      	ldr	r2, [r7, #12]
 8000164:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	689a      	ldr	r2, [r3, #8]
 800016a:	683b      	ldr	r3, [r7, #0]
 800016c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	689b      	ldr	r3, [r3, #8]
 8000172:	683a      	ldr	r2, [r7, #0]
 8000174:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	683a      	ldr	r2, [r7, #0]
 800017a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800017c:	683b      	ldr	r3, [r7, #0]
 800017e:	687a      	ldr	r2, [r7, #4]
 8000180:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	1c5a      	adds	r2, r3, #1
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	601a      	str	r2, [r3, #0]
}
 800018c:	bf00      	nop
 800018e:	3714      	adds	r7, #20
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr

08000196 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000196:	b480      	push	{r7}
 8000198:	b085      	sub	sp, #20
 800019a:	af00      	add	r7, sp, #0
 800019c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	691b      	ldr	r3, [r3, #16]
 80001a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	687a      	ldr	r2, [r7, #4]
 80001aa:	6892      	ldr	r2, [r2, #8]
 80001ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	689b      	ldr	r3, [r3, #8]
 80001b2:	687a      	ldr	r2, [r7, #4]
 80001b4:	6852      	ldr	r2, [r2, #4]
 80001b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	685a      	ldr	r2, [r3, #4]
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d103      	bne.n	80001ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	689a      	ldr	r2, [r3, #8]
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2200      	movs	r2, #0
 80001ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	1e5a      	subs	r2, r3, #1
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	681b      	ldr	r3, [r3, #0]
}
 80001de:	4618      	mov	r0, r3
 80001e0:	3714      	adds	r7, #20
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
	...

080001f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <pxCurrentTCBConst2>)
 80001f2:	6819      	ldr	r1, [r3, #0]
 80001f4:	6808      	ldr	r0, [r1, #0]
 80001f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80001fa:	f380 8809 	msr	PSP, r0
 80001fe:	f3bf 8f6f 	isb	sy
 8000202:	f04f 0000 	mov.w	r0, #0
 8000206:	f380 8811 	msr	BASEPRI, r0
 800020a:	f04e 0e0d 	orr.w	lr, lr, #13
 800020e:	4770      	bx	lr

08000210 <pxCurrentTCBConst2>:
 8000210:	2000001c 	.word	0x2000001c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000214:	bf00      	nop
 8000216:	bf00      	nop
	...

08000220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000220:	f3ef 8009 	mrs	r0, PSP
 8000224:	f3bf 8f6f 	isb	sy
 8000228:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <pxCurrentTCBConst>)
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000230:	6010      	str	r0, [r2, #0]
 8000232:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000236:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800023a:	f380 8811 	msr	BASEPRI, r0
 800023e:	f000 f8df 	bl	8000400 <vTaskSwitchContext>
 8000242:	f04f 0000 	mov.w	r0, #0
 8000246:	f380 8811 	msr	BASEPRI, r0
 800024a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800024e:	6819      	ldr	r1, [r3, #0]
 8000250:	6808      	ldr	r0, [r1, #0]
 8000252:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000256:	f380 8809 	msr	PSP, r0
 800025a:	f3bf 8f6f 	isb	sy
 800025e:	4770      	bx	lr

08000260 <pxCurrentTCBConst>:
 8000260:	2000001c 	.word	0x2000001c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000264:	bf00      	nop
 8000266:	bf00      	nop

08000268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800026e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000272:	f383 8811 	msr	BASEPRI, r3
 8000276:	f3bf 8f6f 	isb	sy
 800027a:	f3bf 8f4f 	dsb	sy
 800027e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000280:	f000 f812 	bl	80002a8 <xTaskIncrementTick>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d003      	beq.n	8000292 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <SysTick_Handler+0x3c>)
 800028c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	e000ed04 	.word	0xe000ed04

080002a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80002b2:	4b48      	ldr	r3, [pc, #288]	; (80003d4 <xTaskIncrementTick+0x12c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d17c      	bne.n	80003b4 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80002ba:	4b47      	ldr	r3, [pc, #284]	; (80003d8 <xTaskIncrementTick+0x130>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	3301      	adds	r3, #1
 80002c0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80002c2:	4a45      	ldr	r2, [pc, #276]	; (80003d8 <xTaskIncrementTick+0x130>)
 80002c4:	693b      	ldr	r3, [r7, #16]
 80002c6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d110      	bne.n	80002f0 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80002ce:	4b43      	ldr	r3, [pc, #268]	; (80003dc <xTaskIncrementTick+0x134>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	4b42      	ldr	r3, [pc, #264]	; (80003e0 <xTaskIncrementTick+0x138>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a40      	ldr	r2, [pc, #256]	; (80003dc <xTaskIncrementTick+0x134>)
 80002da:	6013      	str	r3, [r2, #0]
 80002dc:	4a40      	ldr	r2, [pc, #256]	; (80003e0 <xTaskIncrementTick+0x138>)
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	6013      	str	r3, [r2, #0]
 80002e2:	4b40      	ldr	r3, [pc, #256]	; (80003e4 <xTaskIncrementTick+0x13c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	3301      	adds	r3, #1
 80002e8:	4a3e      	ldr	r2, [pc, #248]	; (80003e4 <xTaskIncrementTick+0x13c>)
 80002ea:	6013      	str	r3, [r2, #0]
 80002ec:	f000 f8ce 	bl	800048c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80002f0:	4b3d      	ldr	r3, [pc, #244]	; (80003e8 <xTaskIncrementTick+0x140>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	693a      	ldr	r2, [r7, #16]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d34d      	bcc.n	8000396 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80002fa:	4b38      	ldr	r3, [pc, #224]	; (80003dc <xTaskIncrementTick+0x134>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <xTaskIncrementTick+0x60>
 8000304:	2301      	movs	r3, #1
 8000306:	e000      	b.n	800030a <xTaskIncrementTick+0x62>
 8000308:	2300      	movs	r3, #0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d004      	beq.n	8000318 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800030e:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <xTaskIncrementTick+0x140>)
 8000310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000314:	601a      	str	r2, [r3, #0]
					break;
 8000316:	e03e      	b.n	8000396 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000318:	4b30      	ldr	r3, [pc, #192]	; (80003dc <xTaskIncrementTick+0x134>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000328:	693a      	ldr	r2, [r7, #16]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	429a      	cmp	r2, r3
 800032e:	d203      	bcs.n	8000338 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000330:	4a2d      	ldr	r2, [pc, #180]	; (80003e8 <xTaskIncrementTick+0x140>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	6013      	str	r3, [r2, #0]
						break;
 8000336:	e02e      	b.n	8000396 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	3304      	adds	r3, #4
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff2a 	bl	8000196 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000346:	2b00      	cmp	r3, #0
 8000348:	d004      	beq.n	8000354 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	3318      	adds	r3, #24
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ff21 	bl	8000196 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000358:	2201      	movs	r2, #1
 800035a:	409a      	lsls	r2, r3
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <xTaskIncrementTick+0x144>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4313      	orrs	r3, r2
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <xTaskIncrementTick+0x144>)
 8000364:	6013      	str	r3, [r2, #0]
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800036a:	4613      	mov	r3, r2
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	4413      	add	r3, r2
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <xTaskIncrementTick+0x148>)
 8000374:	441a      	add	r2, r3
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	3304      	adds	r3, #4
 800037a:	4619      	mov	r1, r3
 800037c:	4610      	mov	r0, r2
 800037e:	f7ff fee7 	bl	8000150 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000386:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <xTaskIncrementTick+0x14c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800038c:	429a      	cmp	r2, r3
 800038e:	d3b4      	bcc.n	80002fa <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8000390:	2301      	movs	r3, #1
 8000392:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000394:	e7b1      	b.n	80002fa <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <xTaskIncrementTick+0x14c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800039c:	4914      	ldr	r1, [pc, #80]	; (80003f0 <xTaskIncrementTick+0x148>)
 800039e:	4613      	mov	r3, r2
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	4413      	add	r3, r2
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	440b      	add	r3, r1
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d907      	bls.n	80003be <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80003ae:	2301      	movs	r3, #1
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	e004      	b.n	80003be <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80003b4:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <xTaskIncrementTick+0x150>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	3301      	adds	r3, #1
 80003ba:	4a0f      	ldr	r2, [pc, #60]	; (80003f8 <xTaskIncrementTick+0x150>)
 80003bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <xTaskIncrementTick+0x154>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 80003c6:	2301      	movs	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80003ca:	697b      	ldr	r3, [r7, #20]
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3718      	adds	r7, #24
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200000a4 	.word	0x200000a4
 80003d8:	2000008c 	.word	0x2000008c
 80003dc:	20000084 	.word	0x20000084
 80003e0:	20000088 	.word	0x20000088
 80003e4:	2000009c 	.word	0x2000009c
 80003e8:	200000a0 	.word	0x200000a0
 80003ec:	20000090 	.word	0x20000090
 80003f0:	20000020 	.word	0x20000020
 80003f4:	2000001c 	.word	0x2000001c
 80003f8:	20000094 	.word	0x20000094
 80003fc:	20000098 	.word	0x20000098

08000400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000406:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <vTaskSwitchContext+0x78>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d003      	beq.n	8000416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800040e:	4b1b      	ldr	r3, [pc, #108]	; (800047c <vTaskSwitchContext+0x7c>)
 8000410:	2201      	movs	r2, #1
 8000412:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000414:	e02a      	b.n	800046c <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000416:	4b19      	ldr	r3, [pc, #100]	; (800047c <vTaskSwitchContext+0x7c>)
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <vTaskSwitchContext+0x80>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	fab3 f383 	clz	r3, r3
 8000428:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800042a:	78fb      	ldrb	r3, [r7, #3]
 800042c:	f1c3 031f 	rsb	r3, r3, #31
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	4613      	mov	r3, r2
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	4413      	add	r3, r2
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <vTaskSwitchContext+0x84>)
 800043e:	4413      	add	r3, r2
 8000440:	60bb      	str	r3, [r7, #8]
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	685a      	ldr	r2, [r3, #4]
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	3308      	adds	r3, #8
 8000454:	429a      	cmp	r2, r3
 8000456:	d104      	bne.n	8000462 <vTaskSwitchContext+0x62>
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	685a      	ldr	r2, [r3, #4]
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a07      	ldr	r2, [pc, #28]	; (8000488 <vTaskSwitchContext+0x88>)
 800046a:	6013      	str	r3, [r2, #0]
}
 800046c:	bf00      	nop
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	200000a4 	.word	0x200000a4
 800047c:	20000098 	.word	0x20000098
 8000480:	20000090 	.word	0x20000090
 8000484:	20000020 	.word	0x20000020
 8000488:	2000001c 	.word	0x2000001c

0800048c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <prvResetNextTaskUnblockTime+0x40>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d101      	bne.n	80004a0 <prvResetNextTaskUnblockTime+0x14>
 800049c:	2301      	movs	r3, #1
 800049e:	e000      	b.n	80004a2 <prvResetNextTaskUnblockTime+0x16>
 80004a0:	2300      	movs	r3, #0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d004      	beq.n	80004b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80004a6:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <prvResetNextTaskUnblockTime+0x44>)
 80004a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80004ae:	e008      	b.n	80004c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <prvResetNextTaskUnblockTime+0x40>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	68db      	ldr	r3, [r3, #12]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <prvResetNextTaskUnblockTime+0x44>)
 80004c0:	6013      	str	r3, [r2, #0]
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	20000084 	.word	0x20000084
 80004d0:	200000a0 	.word	0x200000a0

080004d4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80004dc:	4a03      	ldr	r2, [pc, #12]	; (80004ec <EXTI_ClearITPendingBit+0x18>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6153      	str	r3, [r2, #20]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	40010400 	.word	0x40010400

080004f0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b089      	sub	sp, #36	; 0x24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61fb      	str	r3, [r7, #28]
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	78db      	ldrb	r3, [r3, #3]
 8000516:	f003 030f 	and.w	r3, r3, #15
 800051a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	78db      	ldrb	r3, [r3, #3]
 8000520:	f003 0310 	and.w	r3, r3, #16
 8000524:	2b00      	cmp	r3, #0
 8000526:	d005      	beq.n	8000534 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	789b      	ldrb	r3, [r3, #2]
 800052c:	461a      	mov	r2, r3
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	4313      	orrs	r3, r2
 8000532:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d044      	beq.n	80005c8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
 8000548:	e038      	b.n	80005bc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800054a:	2201      	movs	r2, #1
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	fa02 f303 	lsl.w	r3, r2, r3
 8000552:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	461a      	mov	r2, r3
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4013      	ands	r3, r2
 800055e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000560:	693a      	ldr	r2, [r7, #16]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	429a      	cmp	r2, r3
 8000566:	d126      	bne.n	80005b6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000568:	69bb      	ldr	r3, [r7, #24]
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800056e:	220f      	movs	r2, #15
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	fa02 f303 	lsl.w	r3, r2, r3
 8000576:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	43db      	mvns	r3, r3
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	4013      	ands	r3, r2
 8000580:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000582:	69fa      	ldr	r2, [r7, #28]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	4313      	orrs	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	78db      	ldrb	r3, [r3, #3]
 8000594:	2b28      	cmp	r3, #40	; 0x28
 8000596:	d105      	bne.n	80005a4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000598:	2201      	movs	r2, #1
 800059a:	69bb      	ldr	r3, [r7, #24]
 800059c:	409a      	lsls	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	615a      	str	r2, [r3, #20]
 80005a2:	e008      	b.n	80005b6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	78db      	ldrb	r3, [r3, #3]
 80005a8:	2b48      	cmp	r3, #72	; 0x48
 80005aa:	d104      	bne.n	80005b6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80005ac:	2201      	movs	r2, #1
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	409a      	lsls	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005b6:	69bb      	ldr	r3, [r7, #24]
 80005b8:	3301      	adds	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	2b07      	cmp	r3, #7
 80005c0:	d9c3      	bls.n	800054a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	2bff      	cmp	r3, #255	; 0xff
 80005ce:	d946      	bls.n	800065e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
 80005da:	e03a      	b.n	8000652 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80005dc:	69bb      	ldr	r3, [r7, #24]
 80005de:	3308      	adds	r3, #8
 80005e0:	2201      	movs	r2, #1
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	4013      	ands	r3, r2
 80005f2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80005f4:	693a      	ldr	r2, [r7, #16]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d127      	bne.n	800064c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000602:	220f      	movs	r2, #15
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	fa02 f303 	lsl.w	r3, r2, r3
 800060a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	43db      	mvns	r3, r3
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	4013      	ands	r3, r2
 8000614:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000616:	69fa      	ldr	r2, [r7, #28]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	4313      	orrs	r3, r2
 8000622:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	78db      	ldrb	r3, [r3, #3]
 8000628:	2b28      	cmp	r3, #40	; 0x28
 800062a:	d105      	bne.n	8000638 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	3308      	adds	r3, #8
 8000630:	2201      	movs	r2, #1
 8000632:	409a      	lsls	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	78db      	ldrb	r3, [r3, #3]
 800063c:	2b48      	cmp	r3, #72	; 0x48
 800063e:	d105      	bne.n	800064c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	3308      	adds	r3, #8
 8000644:	2201      	movs	r2, #1
 8000646:	409a      	lsls	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	3301      	adds	r3, #1
 8000650:	61bb      	str	r3, [r7, #24]
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	2b07      	cmp	r3, #7
 8000656:	d9c1      	bls.n	80005dc <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	605a      	str	r2, [r3, #4]
  }
}
 800065e:	bf00      	nop
 8000660:	3724      	adds	r7, #36	; 0x24
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000674:	887a      	ldrh	r2, [r7, #2]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	611a      	str	r2, [r3, #16]
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000690:	887a      	ldrh	r2, [r7, #2]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	615a      	str	r2, [r3, #20]
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006b2:	4909      	ldr	r1, [pc, #36]	; (80006d8 <RCC_APB2PeriphClockCmd+0x38>)
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <RCC_APB2PeriphClockCmd+0x38>)
 80006b6:	699a      	ldr	r2, [r3, #24]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006be:	e006      	b.n	80006ce <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006c0:	4905      	ldr	r1, [pc, #20]	; (80006d8 <RCC_APB2PeriphClockCmd+0x38>)
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <RCC_APB2PeriphClockCmd+0x38>)
 80006c4:	699a      	ldr	r2, [r3, #24]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	43db      	mvns	r3, r3
 80006ca:	4013      	ands	r3, r2
 80006cc:	618b      	str	r3, [r1, #24]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	40021000 	.word	0x40021000

080006dc <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 80006f0:	89fb      	ldrh	r3, [r7, #14]
 80006f2:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80006f6:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	881a      	ldrh	r2, [r3, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	885b      	ldrh	r3, [r3, #2]
 8000700:	4313      	orrs	r3, r2
 8000702:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000708:	4313      	orrs	r3, r2
 800070a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000710:	4313      	orrs	r3, r2
 8000712:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000718:	4313      	orrs	r3, r2
 800071a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000720:	4313      	orrs	r3, r2
 8000722:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000728:	4313      	orrs	r3, r2
 800072a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000730:	4313      	orrs	r3, r2
 8000732:	b29a      	uxth	r2, r3
 8000734:	89fb      	ldrh	r3, [r7, #14]
 8000736:	4313      	orrs	r3, r2
 8000738:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	89fa      	ldrh	r2, [r7, #14]
 800073e:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	8b9b      	ldrh	r3, [r3, #28]
 8000744:	b29b      	uxth	r3, r3
 8000746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800074a:	b29a      	uxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	8a1a      	ldrh	r2, [r3, #16]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	821a      	strh	r2, [r3, #16]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	460b      	mov	r3, r1
 800076c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800076e:	78fb      	ldrb	r3, [r7, #3]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d008      	beq.n	8000786 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	b29b      	uxth	r3, r3
 800077a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800077e:	b29a      	uxth	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8000784:	e007      	b.n	8000796 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	b29b      	uxth	r3, r3
 800078c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000790:	b29a      	uxth	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	801a      	strh	r2, [r3, #0]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	887a      	ldrh	r2, [r7, #2]
 80007b0:	819a      	strh	r2, [r3, #12]
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	899b      	ldrh	r3, [r3, #12]
 80007c8:	b29b      	uxth	r3, r3
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	889b      	ldrh	r3, [r3, #4]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 80007f6:	e007      	b.n	8000808 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	889b      	ldrh	r3, [r3, #4]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	f023 0304 	bic.w	r3, r3, #4
 8000802:	b29a      	uxth	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	809a      	strh	r2, [r3, #4]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr

08000812 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000812:	b480      	push	{r7}
 8000814:	b085      	sub	sp, #20
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	891b      	ldrh	r3, [r3, #8]
 8000826:	b29a      	uxth	r2, r3
 8000828:	887b      	ldrh	r3, [r7, #2]
 800082a:	4013      	ands	r3, r2
 800082c:	b29b      	uxth	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000832:	2301      	movs	r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
 8000836:	e001      	b.n	800083c <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800083c:	7bfb      	ldrb	r3, [r7, #15]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8000852:	4908      	ldr	r1, [pc, #32]	; (8000874 <NVIC_EnableIRQ+0x2c>)
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	095b      	lsrs	r3, r3, #5
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	f002 021f 	and.w	r2, r2, #31
 8000860:	2001      	movs	r0, #1
 8000862:	fa00 f202 	lsl.w	r2, r0, r2
 8000866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	e000e100 	.word	0xe000e100

08000878 <EnableGpioClk>:
#define PIN_CNF_PUSH_PULL		(0x2)
#define PIN_MODE_OUT			(0x1)



void EnableGpioClk (GPIO_TypeDef * gpioPort){
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	if (gpioPort == GPIOA){
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <EnableGpioClk+0x68>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d106      	bne.n	8000896 <EnableGpioClk+0x1e>
		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000888:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <EnableGpioClk+0x6c>)
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <EnableGpioClk+0x6c>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6193      	str	r3, [r2, #24]
	} else if (gpioPort == GPIOC){
		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
	} else if (gpioPort == GPIOD){
		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
	}
}
 8000894:	e01f      	b.n	80008d6 <EnableGpioClk+0x5e>
	} else if (gpioPort == GPIOB){
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <EnableGpioClk+0x70>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d106      	bne.n	80008ac <EnableGpioClk+0x34>
		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800089e:	4a11      	ldr	r2, [pc, #68]	; (80008e4 <EnableGpioClk+0x6c>)
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <EnableGpioClk+0x6c>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6193      	str	r3, [r2, #24]
}
 80008aa:	e014      	b.n	80008d6 <EnableGpioClk+0x5e>
	} else if (gpioPort == GPIOC){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <EnableGpioClk+0x74>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d106      	bne.n	80008c2 <EnableGpioClk+0x4a>
		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 80008b4:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <EnableGpioClk+0x6c>)
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <EnableGpioClk+0x6c>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f043 0310 	orr.w	r3, r3, #16
 80008be:	6193      	str	r3, [r2, #24]
}
 80008c0:	e009      	b.n	80008d6 <EnableGpioClk+0x5e>
	} else if (gpioPort == GPIOD){
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <EnableGpioClk+0x78>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d105      	bne.n	80008d6 <EnableGpioClk+0x5e>
		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 80008ca:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <EnableGpioClk+0x6c>)
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <EnableGpioClk+0x6c>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f043 0320 	orr.w	r3, r3, #32
 80008d4:	6193      	str	r3, [r2, #24]
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	40010800 	.word	0x40010800
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010c00 	.word	0x40010c00
 80008ec:	40011000 	.word	0x40011000
 80008f0:	40011400 	.word	0x40011400

080008f4 <SetGpioAsInFloating>:
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	}
}


void SetGpioAsInFloating (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]
	if (pinNb < 8){
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	2b07      	cmp	r3, #7
 8000904:	d81d      	bhi.n	8000942 <SetGpioAsInFloating+0x4e>
		gpioPort->CRL &= ~(PIN_MODE_MSK<<pinNb);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	78fa      	ldrb	r2, [r7, #3]
 800090c:	2103      	movs	r1, #3
 800090e:	fa01 f202 	lsl.w	r2, r1, r2
 8000912:	43d2      	mvns	r2, r2
 8000914:	401a      	ands	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	601a      	str	r2, [r3, #0]
		gpioPort->CRL &= ~(PIN_CNF_MSK<<pinNb);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	78fa      	ldrb	r2, [r7, #3]
 8000920:	2103      	movs	r1, #3
 8000922:	fa01 f202 	lsl.w	r2, r1, r2
 8000926:	43d2      	mvns	r2, r2
 8000928:	401a      	ands	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
		gpioPort->CRL |= (PIN_CNF_FLOAT<<pinNb);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	78fa      	ldrb	r2, [r7, #3]
 8000934:	2101      	movs	r1, #1
 8000936:	fa01 f202 	lsl.w	r2, r1, r2
 800093a:	431a      	orrs	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	601a      	str	r2, [r3, #0]
	} else {
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
	}
}
 8000940:	e023      	b.n	800098a <SetGpioAsInFloating+0x96>
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	78fa      	ldrb	r2, [r7, #3]
 8000948:	3a08      	subs	r2, #8
 800094a:	0092      	lsls	r2, r2, #2
 800094c:	2103      	movs	r1, #3
 800094e:	fa01 f202 	lsl.w	r2, r1, r2
 8000952:	43d2      	mvns	r2, r2
 8000954:	401a      	ands	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	605a      	str	r2, [r3, #4]
		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	78fa      	ldrb	r2, [r7, #3]
 8000960:	3a08      	subs	r2, #8
 8000962:	0092      	lsls	r2, r2, #2
 8000964:	2103      	movs	r1, #3
 8000966:	fa01 f202 	lsl.w	r2, r1, r2
 800096a:	43d2      	mvns	r2, r2
 800096c:	401a      	ands	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	605a      	str	r2, [r3, #4]
		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	78fa      	ldrb	r2, [r7, #3]
 8000978:	3a08      	subs	r2, #8
 800097a:	0092      	lsls	r2, r2, #2
 800097c:	3202      	adds	r2, #2
 800097e:	2101      	movs	r1, #1
 8000980:	fa01 f202 	lsl.w	r2, r1, r2
 8000984:	431a      	orrs	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	605a      	str	r2, [r3, #4]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <SetGpioAsInPullUp>:




void SetGpioAsInPullUp (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	70fb      	strb	r3, [r7, #3]
	if (pinNb < 8){
 80009a0:	78fb      	ldrb	r3, [r7, #3]
 80009a2:	2b07      	cmp	r3, #7
 80009a4:	d82a      	bhi.n	80009fc <SetGpioAsInPullUp+0x68>
		gpioPort->CRL &= ~(PIN_MODE_MSK<<(pinNb*4));
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	78fa      	ldrb	r2, [r7, #3]
 80009ac:	0092      	lsls	r2, r2, #2
 80009ae:	2103      	movs	r1, #3
 80009b0:	fa01 f202 	lsl.w	r2, r1, r2
 80009b4:	43d2      	mvns	r2, r2
 80009b6:	401a      	ands	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	601a      	str	r2, [r3, #0]
		gpioPort->CRL &= ~(PIN_CNF_MSK<<((pinNb*4)+2));
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	78fa      	ldrb	r2, [r7, #3]
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	3202      	adds	r2, #2
 80009c6:	2103      	movs	r1, #3
 80009c8:	fa01 f202 	lsl.w	r2, r1, r2
 80009cc:	43d2      	mvns	r2, r2
 80009ce:	401a      	ands	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	601a      	str	r2, [r3, #0]
		gpioPort->CRL |= (PIN_CNF_PUSH_PULL<<((pinNb*4)+2));
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	78fa      	ldrb	r2, [r7, #3]
 80009da:	0092      	lsls	r2, r2, #2
 80009dc:	3202      	adds	r2, #2
 80009de:	2102      	movs	r1, #2
 80009e0:	fa01 f202 	lsl.w	r2, r1, r2
 80009e4:	431a      	orrs	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
		gpioPort->ODR |= (1<<pinNb);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	78fa      	ldrb	r2, [r7, #3]
 80009f0:	2101      	movs	r1, #1
 80009f2:	fa01 f202 	lsl.w	r2, r1, r2
 80009f6:	431a      	orrs	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	60da      	str	r2, [r3, #12]
//		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
//		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
//		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
//		gpioPort->ODR |=  (1<<pinNb);
	}
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <SetGpioAsOutAltPushPUll>:




void SetGpioAsOutAltPushPUll (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	70fb      	strb	r3, [r7, #3]
	if (pinNb < 8){
 8000a12:	78fb      	ldrb	r3, [r7, #3]
 8000a14:	2b07      	cmp	r3, #7
 8000a16:	d92f      	bls.n	8000a78 <SetGpioAsOutAltPushPUll+0x72>
//
//		gpioPort->CRL |= (PIN_MODE_OUT<<pinNb);
//		gpioPort->CRL &= ~(PIN_CNF_PUSH_PULL<<pinNb);

	} else {
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	78fa      	ldrb	r2, [r7, #3]
 8000a1e:	3a08      	subs	r2, #8
 8000a20:	0092      	lsls	r2, r2, #2
 8000a22:	2103      	movs	r1, #3
 8000a24:	fa01 f202 	lsl.w	r2, r1, r2
 8000a28:	43d2      	mvns	r2, r2
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	605a      	str	r2, [r3, #4]
		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	78fa      	ldrb	r2, [r7, #3]
 8000a36:	3a08      	subs	r2, #8
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	3202      	adds	r2, #2
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a42:	43d2      	mvns	r2, r2
 8000a44:	401a      	ands	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	605a      	str	r2, [r3, #4]

		gpioPort->CRH |= (PIN_MODE_OUT<<(pinNb-8)*4);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	78fa      	ldrb	r2, [r7, #3]
 8000a50:	3a08      	subs	r2, #8
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	2101      	movs	r1, #1
 8000a56:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	605a      	str	r2, [r3, #4]
		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	78fa      	ldrb	r2, [r7, #3]
 8000a66:	3a08      	subs	r2, #8
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	3202      	adds	r2, #2
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a72:	431a      	orrs	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	605a      	str	r2, [r3, #4]
	}
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
	...

08000a84 <EnableExti>:
	return (gpioPort->IDR & (1<<pinNb));
}



void EnableExti(GPIO_TypeDef * gpioPort, uint8_t pinNb, bool rise, bool fall){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	4611      	mov	r1, r2
 8000a90:	461a      	mov	r2, r3
 8000a92:	4603      	mov	r3, r0
 8000a94:	70fb      	strb	r3, [r7, #3]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70bb      	strb	r3, [r7, #2]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	707b      	strb	r3, [r7, #1]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000a9e:	4a1a      	ldr	r2, [pc, #104]	; (8000b08 <EnableExti+0x84>)
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <EnableExti+0x84>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6193      	str	r3, [r2, #24]
	AFIO->EXTICR[1] |= AFIO_EXTICR2_EXTI5_PB;
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <EnableExti+0x88>)
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <EnableExti+0x88>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	f043 0310 	orr.w	r3, r3, #16
 8000ab4:	60d3      	str	r3, [r2, #12]
	EXTI->IMR  |= (1<<pinNb);
 8000ab6:	4916      	ldr	r1, [pc, #88]	; (8000b10 <EnableExti+0x8c>)
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <EnableExti+0x8c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	78fa      	ldrb	r2, [r7, #3]
 8000abe:	2001      	movs	r0, #1
 8000ac0:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	600b      	str	r3, [r1, #0]
	if (rise){
 8000ac8:	78bb      	ldrb	r3, [r7, #2]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d008      	beq.n	8000ae0 <EnableExti+0x5c>
		EXTI->RTSR |= (1<<pinNb);
 8000ace:	4910      	ldr	r1, [pc, #64]	; (8000b10 <EnableExti+0x8c>)
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <EnableExti+0x8c>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	78fa      	ldrb	r2, [r7, #3]
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	fa00 f202 	lsl.w	r2, r0, r2
 8000adc:	4313      	orrs	r3, r2
 8000ade:	608b      	str	r3, [r1, #8]
	}
	if (fall){
 8000ae0:	787b      	ldrb	r3, [r7, #1]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d008      	beq.n	8000af8 <EnableExti+0x74>
		EXTI->FTSR |= (1<<pinNb);
 8000ae6:	490a      	ldr	r1, [pc, #40]	; (8000b10 <EnableExti+0x8c>)
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <EnableExti+0x8c>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	78fa      	ldrb	r2, [r7, #3]
 8000aee:	2001      	movs	r0, #1
 8000af0:	fa00 f202 	lsl.w	r2, r0, r2
 8000af4:	4313      	orrs	r3, r2
 8000af6:	60cb      	str	r3, [r1, #12]
		//SetGpioAsInPullUp(GPIOB, 5);
	}
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000af8:	2017      	movs	r0, #23
 8000afa:	f7ff fea5 	bl	8000848 <NVIC_EnableIRQ>


}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010000 	.word	0x40010000
 8000b10:	40010400 	.word	0x40010400

08000b14 <_delay_ms>:


}


void _delay_ms(int n) {
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

	int i, j;
	j= n*1000;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	60bb      	str	r3, [r7, #8]
	while(j--) {
 8000b28:	e007      	b.n	8000b3a <_delay_ms+0x26>
		i=2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	60fb      	str	r3, [r7, #12]
		while(i--);
 8000b2e:	bf00      	nop
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	1e5a      	subs	r2, r3, #1
 8000b34:	60fa      	str	r2, [r7, #12]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1fa      	bne.n	8000b30 <_delay_ms+0x1c>
	while(j--) {
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1e5a      	subs	r2, r3, #1
 8000b3e:	60ba      	str	r2, [r7, #8]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1f2      	bne.n	8000b2a <_delay_ms+0x16>
	}
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr

08000b4e <Rfm12bInit>:
//  Rfm12bWriteCmd(0xC800); //NOT USE
//  Rfm12bWriteCmd(0xC040); //1.66MHz,2.2V
//}


void Rfm12bInit() {
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  Rfm12bSpiInit();
 8000b52:	f000 f8d7 	bl	8000d04 <Rfm12bSpiInit>
  Rfm12bWriteCmd(0x0000);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 f940 	bl	8000ddc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x80E7); //EL,EF,868band,12.0pF
 8000b5c:	f248 00e7 	movw	r0, #32999	; 0x80e7
 8000b60:	f000 f93c 	bl	8000ddc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x8208); //no tx/rx
 8000b64:	f248 2008 	movw	r0, #33288	; 0x8208
 8000b68:	f000 f938 	bl	8000ddc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xA640); //frequency select
 8000b6c:	f24a 6040 	movw	r0, #42560	; 0xa640
 8000b70:	f000 f934 	bl	8000ddc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC648); //4,8kbps
 8000b74:	f24c 6048 	movw	r0, #50760	; 0xc648
 8000b78:	f000 f930 	bl	8000ddc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x94A0); //VDI,FAST,134kHz,0dBm,-103dBm
 8000b7c:	f249 40a0 	movw	r0, #38048	; 0x94a0
 8000b80:	f000 f92c 	bl	8000ddc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC2AC); //AL,!ml,DIG,DQD4
 8000b84:	f24c 20ac 	movw	r0, #49836	; 0xc2ac
 8000b88:	f000 f928 	bl	8000ddc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCA81); //FIFO8,SYNC,!ff,DR
 8000b8c:	f64c 2081 	movw	r0, #51841	; 0xca81
 8000b90:	f000 f924 	bl	8000ddc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCED4); //SYNC=2DD4G
 8000b94:	f64c 60d4 	movw	r0, #52948	; 0xced4
 8000b98:	f000 f920 	bl	8000ddc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC483); //@PWR,NO RSTRIC,!st,!fi,OE,EN
 8000b9c:	f24c 4083 	movw	r0, #50307	; 0xc483
 8000ba0:	f000 f91c 	bl	8000ddc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x9850); //!mp,90kHz,MAX OUT
 8000ba4:	f649 0050 	movw	r0, #38992	; 0x9850
 8000ba8:	f000 f918 	bl	8000ddc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCC17); //OB1COB0, LPX,IddyCDDITCBW0
 8000bac:	f64c 4017 	movw	r0, #52247	; 0xcc17
 8000bb0:	f000 f914 	bl	8000ddc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xE000); //NOT USE
 8000bb4:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8000bb8:	f000 f910 	bl	8000ddc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC800); //NOT USE
 8000bbc:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 8000bc0:	f000 f90c 	bl	8000ddc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC040); //1.66MHz,2.2V
 8000bc4:	f24c 0040 	movw	r0, #49216	; 0xc040
 8000bc8:	f000 f908 	bl	8000ddc <Rfm12bWriteCmd>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <Rfm12bSendByte>:


void Rfm12bSendByte(uint8_t byte)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	uint16_t status;
	uint16_t cmdAndData = 0xB800;
 8000bda:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8000bde:	81bb      	strh	r3, [r7, #12]
	cmdAndData |= byte;
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	89bb      	ldrh	r3, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	81bb      	strh	r3, [r7, #12]

	while(!status)
 8000bea:	e00a      	b.n	8000c02 <Rfm12bSendByte+0x32>
	{
		status = Rfm12bWriteCmd(0x0000);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 f8f5 	bl	8000ddc <Rfm12bWriteCmd>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	81fb      	strh	r3, [r7, #14]
		status = status & 0x8000;
 8000bf6:	89fb      	ldrh	r3, [r7, #14]
 8000bf8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000bfc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000c00:	81fb      	strh	r3, [r7, #14]
	while(!status)
 8000c02:	89fb      	ldrh	r3, [r7, #14]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0f1      	beq.n	8000bec <Rfm12bSendByte+0x1c>
	}

	Rfm12bWriteCmd(cmdAndData);
 8000c08:	89bb      	ldrh	r3, [r7, #12]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f8e6 	bl	8000ddc <Rfm12bWriteCmd>
}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <RF12_SCAN>:
	Rfm12bWriteCmd(temp);
}


void RF12_SCAN(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x0000);
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f000 f8dd 	bl	8000ddc <Rfm12bWriteCmd>
	Rfm12bWriteCmd(0x82C9);
 8000c22:	f248 20c9 	movw	r0, #33481	; 0x82c9
 8000c26:	f000 f8d9 	bl	8000ddc <Rfm12bWriteCmd>
	Rfm12bWriteCmd(0xCA81);
 8000c2a:	f64c 2081 	movw	r0, #51841	; 0xca81
 8000c2e:	f000 f8d5 	bl	8000ddc <Rfm12bWriteCmd>
	Rfm12bWriteCmd(0xCA83);
 8000c32:	f64c 2083 	movw	r0, #51843	; 0xca83
 8000c36:	f000 f8d1 	bl	8000ddc <Rfm12bWriteCmd>
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <RF12_TXPACKET>:


void RF12_TXPACKET(uint8_t *buff, uint8_t bytesNb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b084      	sub	sp, #16
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	70fb      	strb	r3, [r7, #3]
	char i;

	Rfm12bSendByte(0x0000);//read status register
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff ffc0 	bl	8000bd0 <Rfm12bSendByte>
	Rfm12bSendByte(0x8239);//!er,!ebb,ET,ES,EX,!eb,!ew,DC
 8000c50:	2039      	movs	r0, #57	; 0x39
 8000c52:	f7ff ffbd 	bl	8000bd0 <Rfm12bSendByte>
	Rfm12bSendByte(0xAA);//PREAMBLE
 8000c56:	20aa      	movs	r0, #170	; 0xaa
 8000c58:	f7ff ffba 	bl	8000bd0 <Rfm12bSendByte>
	Rfm12bSendByte(0xAA);//PREAMBLE
 8000c5c:	20aa      	movs	r0, #170	; 0xaa
 8000c5e:	f7ff ffb7 	bl	8000bd0 <Rfm12bSendByte>
	Rfm12bSendByte(0xAA);//PREAMBLE
 8000c62:	20aa      	movs	r0, #170	; 0xaa
 8000c64:	f7ff ffb4 	bl	8000bd0 <Rfm12bSendByte>
	Rfm12bSendByte(0x2D);//SYNC HI BYTE
 8000c68:	202d      	movs	r0, #45	; 0x2d
 8000c6a:	f7ff ffb1 	bl	8000bd0 <Rfm12bSendByte>
	Rfm12bSendByte(0xD4);//SYNC LOW BYTE
 8000c6e:	20d4      	movs	r0, #212	; 0xd4
 8000c70:	f7ff ffae 	bl	8000bd0 <Rfm12bSendByte>
	for(i = 0; i < bytesNb; i++)
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]
 8000c78:	e009      	b.n	8000c8e <RF12_TXPACKET+0x50>
	{
		Rfm12bSendByte(buff[i]);
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	4413      	add	r3, r2
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ffa4 	bl	8000bd0 <Rfm12bSendByte>
	for(i = 0; i < bytesNb; i++)
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	73fb      	strb	r3, [r7, #15]
 8000c8e:	7bfa      	ldrb	r2, [r7, #15]
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d3f1      	bcc.n	8000c7a <RF12_TXPACKET+0x3c>
	}
	Rfm12bSendByte(0xAA);
 8000c96:	20aa      	movs	r0, #170	; 0xaa
 8000c98:	f7ff ff9a 	bl	8000bd0 <Rfm12bSendByte>
	Rfm12bSendByte(0xAA);
 8000c9c:	20aa      	movs	r0, #170	; 0xaa
 8000c9e:	f7ff ff97 	bl	8000bd0 <Rfm12bSendByte>
	RF12_SCAN();
 8000ca2:	f7ff ffb9 	bl	8000c18 <RF12_SCAN>
}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <rfm12bFifoReset>:
}




void rfm12bFifoReset() {
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0xCA81);
 8000cb2:	f64c 2081 	movw	r0, #51841	; 0xca81
 8000cb6:	f000 f891 	bl	8000ddc <Rfm12bWriteCmd>
	Rfm12bWriteCmd(0xCA83);
 8000cba:	f64c 2083 	movw	r0, #51843	; 0xca83
 8000cbe:	f000 f88d 	bl	8000ddc <Rfm12bWriteCmd>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <rfm12bReadFifo>:
		}
	}
}


uint8_t rfm12bReadFifo(void){
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
	uint8_t rxByte = Rfm12bWriteCmd(0xB000);
 8000ccc:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8000cd0:	f000 f884 	bl	8000ddc <Rfm12bWriteCmd>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]
	return rxByte & 0xFF;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <rfm12bSwitchRx>:


void rfm12bSwitchRx(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8299);
 8000ce6:	f248 2099 	movw	r0, #33433	; 0x8299
 8000cea:	f000 f877 	bl	8000ddc <Rfm12bWriteCmd>
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <rfm12bSwitchTx>:

void rfm12bSwitchTx(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8239);
 8000cf6:	f248 2039 	movw	r0, #33337	; 0x8239
 8000cfa:	f000 f86f 	bl	8000ddc <Rfm12bWriteCmd>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <Rfm12bSpiInit>:





void Rfm12bSpiInit(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d10:	f7ff fcc6 	bl	80006a0 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000d14:	2101      	movs	r1, #1
 8000d16:	2004      	movs	r0, #4
 8000d18:	f7ff fcc2 	bl	80006a0 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	2008      	movs	r0, #8
 8000d20:	f7ff fcbe 	bl	80006a0 <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8000d24:	23e0      	movs	r3, #224	; 0xe0
 8000d26:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000d28:	2318      	movs	r3, #24
 8000d2a:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000d30:	f107 0308 	add.w	r3, r7, #8
 8000d34:	4619      	mov	r1, r3
 8000d36:	4825      	ldr	r0, [pc, #148]	; (8000dcc <Rfm12bSpiInit+0xc8>)
 8000d38:	f7ff fbda 	bl	80004f0 <GPIO_Init>


	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8000d3c:	2340      	movs	r3, #64	; 0x40
 8000d3e:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000d40:	2310      	movs	r3, #16
 8000d42:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000d44:	2301      	movs	r3, #1
 8000d46:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d48:	f107 0308 	add.w	r3, r7, #8
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4820      	ldr	r0, [pc, #128]	; (8000dd0 <Rfm12bSpiInit+0xcc>)
 8000d50:	f7ff fbce 	bl	80004f0 <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000d54:	2300      	movs	r3, #0
 8000d56:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8000d58:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000d5c:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 8000d5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d62:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8000d64:	2300      	movs	r3, #0
 8000d66:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8000d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d70:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 8000d72:	2330      	movs	r3, #48	; 0x30
 8000d74:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8000d76:	2300      	movs	r3, #0
 8000d78:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	83bb      	strh	r3, [r7, #28]
	SPI_SSOutputCmd(SPI1, ENABLE);
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4814      	ldr	r0, [pc, #80]	; (8000dd4 <Rfm12bSpiInit+0xd0>)
 8000d82:	f7ff fd27 	bl	80007d4 <SPI_SSOutputCmd>
	SPI_Init(SPI1, &SPI_InitStructure);
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <Rfm12bSpiInit+0xd0>)
 8000d8e:	f7ff fca5 	bl	80006dc <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI1, ENABLE);
 8000d92:	2101      	movs	r1, #1
 8000d94:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <Rfm12bSpiInit+0xd0>)
 8000d96:	f7ff fce4 	bl	8000762 <SPI_Cmd>

	GPIO_InitTypeDef PORT;

	// Enable the nRF24L01 GPIO peripherals
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <Rfm12bSpiInit+0xd4>)
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <Rfm12bSpiInit+0xd4>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	6193      	str	r3, [r2, #24]

	// Configure CSN pin
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 8000da6:	2310      	movs	r3, #16
 8000da8:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8000daa:	2302      	movs	r3, #2
 8000dac:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_1;
 8000dae:	2302      	movs	r3, #2
 8000db0:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOB, &PORT);
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <Rfm12bSpiInit+0xcc>)
 8000db8:	f7ff fb9a 	bl	80004f0 <GPIO_Init>
	GPIO_SetBits(GPIOB, GPIO_Pin_1);
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <Rfm12bSpiInit+0xcc>)
 8000dc0:	f7ff fc52 	bl	8000668 <GPIO_SetBits>
}
 8000dc4:	bf00      	nop
 8000dc6:	3720      	adds	r7, #32
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	40013000 	.word	0x40013000
 8000dd8:	40021000 	.word	0x40021000

08000ddc <Rfm12bWriteCmd>:



uint16_t Rfm12bWriteCmd( uint16_t cmd )
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
	NSEL_RFM12_LOW;
 8000de6:	2102      	movs	r1, #2
 8000de8:	4812      	ldr	r0, [pc, #72]	; (8000e34 <Rfm12bWriteCmd+0x58>)
 8000dea:	f7ff fc4b 	bl	8000684 <GPIO_ResetBits>
	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 8000dee:	bf00      	nop
 8000df0:	2102      	movs	r1, #2
 8000df2:	4811      	ldr	r0, [pc, #68]	; (8000e38 <Rfm12bWriteCmd+0x5c>)
 8000df4:	f7ff fd0d 	bl	8000812 <SPI_I2S_GetFlagStatus>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f8      	beq.n	8000df0 <Rfm12bWriteCmd+0x14>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI1, cmd);
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	4619      	mov	r1, r3
 8000e02:	480d      	ldr	r0, [pc, #52]	; (8000e38 <Rfm12bWriteCmd+0x5c>)
 8000e04:	f7ff fccc 	bl	80007a0 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 8000e08:	bf00      	nop
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	480a      	ldr	r0, [pc, #40]	; (8000e38 <Rfm12bWriteCmd+0x5c>)
 8000e0e:	f7ff fd00 	bl	8000812 <SPI_I2S_GetFlagStatus>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f8      	beq.n	8000e0a <Rfm12bWriteCmd+0x2e>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI1);
 8000e18:	4807      	ldr	r0, [pc, #28]	; (8000e38 <Rfm12bWriteCmd+0x5c>)
 8000e1a:	f7ff fccf 	bl	80007bc <SPI_I2S_ReceiveData>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	81fb      	strh	r3, [r7, #14]

	NSEL_RFM12_HIGH;
 8000e22:	2102      	movs	r1, #2
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <Rfm12bWriteCmd+0x58>)
 8000e26:	f7ff fc1f 	bl	8000668 <GPIO_SetBits>

	return recData;
 8000e2a:	89fb      	ldrh	r3, [r7, #14]

}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40010c00 	.word	0x40010c00
 8000e38:	40013000 	.word	0x40013000

08000e3c <NVIC_EnableIRQ>:
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <NVIC_EnableIRQ+0x2c>)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	095b      	lsrs	r3, r3, #5
 8000e4e:	79fa      	ldrb	r2, [r7, #7]
 8000e50:	f002 021f 	and.w	r2, r2, #31
 8000e54:	2001      	movs	r0, #1
 8000e56:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8000e76:	4909      	ldr	r1, [pc, #36]	; (8000e9c <NVIC_DisableIRQ+0x30>)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	095b      	lsrs	r3, r3, #5
 8000e7e:	79fa      	ldrb	r2, [r7, #7]
 8000e80:	f002 021f 	and.w	r2, r2, #31
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8a:	3320      	adds	r3, #32
 8000e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <EXTI9_5_IRQHandler>:

volatile uint8_t rxBuff[1024];
volatile uint16_t pos;
volatile bool rx_flag;

void EXTI9_5_IRQHandler (void){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line5);
 8000ea6:	2020      	movs	r0, #32
 8000ea8:	f7ff fb14 	bl	80004d4 <EXTI_ClearITPendingBit>




		uint16_t status = Rfm12bWriteCmd(0x0000);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff ff95 	bl	8000ddc <Rfm12bWriteCmd>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80fb      	strh	r3, [r7, #6]

		if (status & RFM12_STATUS_FFIT ){
 8000eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	da2b      	bge.n	8000f16 <EXTI9_5_IRQHandler+0x76>
			uint8_t rx = rfm12bReadFifo();
 8000ebe:	f7ff ff02 	bl	8000cc6 <rfm12bReadFifo>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	717b      	strb	r3, [r7, #5]
				if (pos <1024){
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <EXTI9_5_IRQHandler+0x80>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed0:	d221      	bcs.n	8000f16 <EXTI9_5_IRQHandler+0x76>
					rxBuff[pos] = rx;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <EXTI9_5_IRQHandler+0x80>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <EXTI9_5_IRQHandler+0x84>)
 8000edc:	797b      	ldrb	r3, [r7, #5]
 8000ede:	5453      	strb	r3, [r2, r1]
					pos++;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <EXTI9_5_IRQHandler+0x80>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <EXTI9_5_IRQHandler+0x80>)
 8000eec:	801a      	strh	r2, [r3, #0]
					if (pos==30){
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <EXTI9_5_IRQHandler+0x80>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	2b1e      	cmp	r3, #30
 8000ef6:	d10e      	bne.n	8000f16 <EXTI9_5_IRQHandler+0x76>
						 GPIOC->ODR ^= GPIO_Pin_13;
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <EXTI9_5_IRQHandler+0x88>)
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <EXTI9_5_IRQHandler+0x88>)
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000f02:	60d3      	str	r3, [r2, #12]
						asm volatile ("nop");
 8000f04:	bf00      	nop
						rfm12bFifoReset();
 8000f06:	f7ff fed2 	bl	8000cae <rfm12bFifoReset>
					 	pos =0;
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <EXTI9_5_IRQHandler+0x80>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	801a      	strh	r2, [r3, #0]
					 	rx_flag = true;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <EXTI9_5_IRQHandler+0x8c>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
					}
			}
		}
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200000a8 	.word	0x200000a8
 8000f24:	200000b4 	.word	0x200000b4
 8000f28:	40011000 	.word	0x40011000
 8000f2c:	200004b4 	.word	0x200004b4

08000f30 <main>:




 int main(){
 8000f30:	b5b0      	push	{r4, r5, r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
//		RCC->APB2RSTR |= RCC_APB2RSTR_AFIORST;
//		RCC->APB2RSTR |= RCC_APB2RSTR_SPI1RST;

	//    RCC->APB2RSTR |= RCC_APB2RSTR_SPI1RST;

	 	EnableGpioClk(LOG_UART_PORT);
 8000f36:	484b      	ldr	r0, [pc, #300]	; (8001064 <main+0x134>)
 8000f38:	f7ff fc9e 	bl	8000878 <EnableGpioClk>
	 	SetGpioAsOutAltPushPUll(LOG_UART_PORT, LOG_UART_PIN_TX);
 8000f3c:	2109      	movs	r1, #9
 8000f3e:	4849      	ldr	r0, [pc, #292]	; (8001064 <main+0x134>)
 8000f40:	f7ff fd61 	bl	8000a06 <SetGpioAsOutAltPushPUll>
	 	SetGpioAsInFloating(LOG_UART_PORT, LOG_UART_PIN_RX);
 8000f44:	210a      	movs	r1, #10
 8000f46:	4847      	ldr	r0, [pc, #284]	; (8001064 <main+0x134>)
 8000f48:	f7ff fcd4 	bl	80008f4 <SetGpioAsInFloating>
	 	EnableUart(USART1);
 8000f4c:	4846      	ldr	r0, [pc, #280]	; (8001068 <main+0x138>)
 8000f4e:	f000 f8ad 	bl	80010ac <EnableUart>




	 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000f52:	2101      	movs	r1, #1
 8000f54:	2010      	movs	r0, #16
 8000f56:	f7ff fba3 	bl	80006a0 <RCC_APB2PeriphClockCmd>
	 	GPIO_InitTypeDef PORT;
	 	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	 	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8000f60:	2302      	movs	r3, #2
 8000f62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	 	PORT.GPIO_Pin = GPIO_Pin_13;
 8000f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6a:	84bb      	strh	r3, [r7, #36]	; 0x24
	 	GPIO_Init(GPIOC, &PORT);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	483e      	ldr	r0, [pc, #248]	; (800106c <main+0x13c>)
 8000f74:	f7ff fabc 	bl	80004f0 <GPIO_Init>
	 	GPIOC->ODR |= GPIO_Pin_13;
 8000f78:	4a3c      	ldr	r2, [pc, #240]	; (800106c <main+0x13c>)
 8000f7a:	4b3c      	ldr	r3, [pc, #240]	; (800106c <main+0x13c>)
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f82:	60d3      	str	r3, [r2, #12]




	 	Rfm12bInit();
 8000f84:	f7ff fde3 	bl	8000b4e <Rfm12bInit>
	 	_delay_ms(1000);	//wymagane opoznienie
 8000f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8c:	f7ff fdc2 	bl	8000b14 <_delay_ms>
	 	  Rfm12bWriteCmd(0x0000);
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ff23 	bl	8000ddc <Rfm12bWriteCmd>
	 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000f96:	2101      	movs	r1, #1
 8000f98:	2008      	movs	r0, #8
 8000f9a:	f7ff fb81 	bl	80006a0 <RCC_APB2PeriphClockCmd>
	 	EnableExti(GPIOB, 5, false, true);
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2105      	movs	r1, #5
 8000fa4:	4832      	ldr	r0, [pc, #200]	; (8001070 <main+0x140>)
 8000fa6:	f7ff fd6d 	bl	8000a84 <EnableExti>
	 	SetGpioAsInPullUp(GPIOB, 5);
 8000faa:	2105      	movs	r1, #5
 8000fac:	4830      	ldr	r0, [pc, #192]	; (8001070 <main+0x140>)
 8000fae:	f7ff fcf1 	bl	8000994 <SetGpioAsInPullUp>
		SetGpioAsInPullUp(GPIOB, 11);
 8000fb2:	210b      	movs	r1, #11
 8000fb4:	482e      	ldr	r0, [pc, #184]	; (8001070 <main+0x140>)
 8000fb6:	f7ff fced 	bl	8000994 <SetGpioAsInPullUp>

	 	rfm12bFifoReset();
 8000fba:	f7ff fe78 	bl	8000cae <rfm12bFifoReset>
	 	rfm12bSwitchRx();
 8000fbe:	f7ff fe90 	bl	8000ce2 <rfm12bSwitchRx>


	 	  while(1) {
	 		  if (rx_flag){
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <main+0x144>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d023      	beq.n	8001014 <main+0xe4>

	 			  NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000fcc:	2017      	movs	r0, #23
 8000fce:	f7ff ff4d 	bl	8000e6c <NVIC_DisableIRQ>
	 			  rfm12bSwitchTx();
 8000fd2:	f7ff fe8e 	bl	8000cf2 <rfm12bSwitchTx>

	 			  _delay_ms(50);
 8000fd6:	2032      	movs	r0, #50	; 0x32
 8000fd8:	f7ff fd9c 	bl	8000b14 <_delay_ms>

	 			  uint8_t buff[] = "helloWorld1helloWorld2helloWorld3";
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <main+0x148>)
 8000fde:	463c      	mov	r4, r7
 8000fe0:	461d      	mov	r5, r3
 8000fe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fea:	682b      	ldr	r3, [r5, #0]
 8000fec:	8023      	strh	r3, [r4, #0]
	 			  //  Rfm12bSendBuff(buff, 30);
	 			  RF12_TXPACKET(buff, 30);
 8000fee:	463b      	mov	r3, r7
 8000ff0:	211e      	movs	r1, #30
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fe23 	bl	8000c3e <RF12_TXPACKET>
	 			  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ff8:	2017      	movs	r0, #23
 8000ffa:	f7ff ff1f 	bl	8000e3c <NVIC_EnableIRQ>
	 			  _delay_ms(250);
 8000ffe:	20fa      	movs	r0, #250	; 0xfa
 8001000:	f7ff fd88 	bl	8000b14 <_delay_ms>
	 			  rfm12bSwitchRx();
 8001004:	f7ff fe6d 	bl	8000ce2 <rfm12bSwitchRx>
	 			  _delay_ms(20);
 8001008:	2014      	movs	r0, #20
 800100a:	f7ff fd83 	bl	8000b14 <_delay_ms>
//	 			// rfm12bFifoReset();
//	 			  rfm12bSwitchRx();
//	 			  _delay_ms(20);


	 			  rx_flag = false;
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <main+0x144>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]

	 		  }



	 		 if (!(GPIOB->IDR & (1<<11))){
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <main+0x140>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1d0      	bne.n	8000fc2 <main+0x92>

	 			 NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001020:	2017      	movs	r0, #23
 8001022:	f7ff ff23 	bl	8000e6c <NVIC_DisableIRQ>
	 			 rfm12bSwitchTx();
 8001026:	f7ff fe64 	bl	8000cf2 <rfm12bSwitchTx>

	 			 _delay_ms(50);
 800102a:	2032      	movs	r0, #50	; 0x32
 800102c:	f7ff fd72 	bl	8000b14 <_delay_ms>

	 			 uint8_t buff[] = "helloWorld1helloWorld2helloWorld3";
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <main+0x148>)
 8001032:	463c      	mov	r4, r7
 8001034:	461d      	mov	r5, r3
 8001036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103e:	682b      	ldr	r3, [r5, #0]
 8001040:	8023      	strh	r3, [r4, #0]
	 			 //  Rfm12bSendBuff(buff, 30);
	 			 RF12_TXPACKET(buff, 30);
 8001042:	463b      	mov	r3, r7
 8001044:	211e      	movs	r1, #30
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fdf9 	bl	8000c3e <RF12_TXPACKET>
	 			 _delay_ms(250);
 800104c:	20fa      	movs	r0, #250	; 0xfa
 800104e:	f7ff fd61 	bl	8000b14 <_delay_ms>
	 			 NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001052:	2017      	movs	r0, #23
 8001054:	f7ff fef2 	bl	8000e3c <NVIC_EnableIRQ>
	 			 rfm12bSwitchRx();
 8001058:	f7ff fe43 	bl	8000ce2 <rfm12bSwitchRx>
	 			 _delay_ms(20);
 800105c:	2014      	movs	r0, #20
 800105e:	f7ff fd59 	bl	8000b14 <_delay_ms>
	 		  if (rx_flag){
 8001062:	e7ae      	b.n	8000fc2 <main+0x92>
 8001064:	40010800 	.word	0x40010800
 8001068:	40013800 	.word	0x40013800
 800106c:	40011000 	.word	0x40011000
 8001070:	40010c00 	.word	0x40010c00
 8001074:	200004b4 	.word	0x200004b4
 8001078:	08001374 	.word	0x08001374

0800107c <NVIC_EnableIRQ>:
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <NVIC_EnableIRQ+0x2c>)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	095b      	lsrs	r3, r3, #5
 800108e:	79fa      	ldrb	r2, [r7, #7]
 8001090:	f002 021f 	and.w	r2, r2, #31
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100

080010ac <EnableUart>:
#include "stm32f10x.h"
#include "platform.h"



void EnableUart (USART_TypeDef * usart){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80010b4:	4a18      	ldr	r2, [pc, #96]	; (8001118 <EnableUart+0x6c>)
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <EnableUart+0x6c>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010be:	6193      	str	r3, [r2, #24]
	usart->BRR = 72000000/115200;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f240 2271 	movw	r2, #625	; 0x271
 80010c6:	811a      	strh	r2, [r3, #8]
	usart->CR1 |= USART_CR1_UE;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	899b      	ldrh	r3, [r3, #12]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_TE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	899b      	ldrh	r3, [r3, #12]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_RE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	899b      	ldrh	r3, [r3, #12]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	819a      	strh	r2, [r3, #12]
	usart->CR3 |= USART_CR3_DMAT;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	8a9b      	ldrh	r3, [r3, #20]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001102:	b29a      	uxth	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	829a      	strh	r2, [r3, #20]

	NVIC_EnableIRQ(USART1_IRQn);
 8001108:	2025      	movs	r0, #37	; 0x25
 800110a:	f7ff ffb7 	bl	800107c <NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800111c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001154 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001120:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001122:	e003      	b.n	800112c <LoopCopyDataInit>

08001124 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001126:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001128:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800112a:	3104      	adds	r1, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001130:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001132:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001134:	d3f6      	bcc.n	8001124 <CopyDataInit>
	ldr	r2, =_sbss
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001138:	e002      	b.n	8001140 <LoopFillZerobss>

0800113a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800113a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800113c:	f842 3b04 	str.w	r3, [r2], #4

08001140 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001142:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001144:	d3f9      	bcc.n	800113a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001146:	f000 f82b 	bl	80011a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114a:	f000 f8e3 	bl	8001314 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114e:	f7ff feef 	bl	8000f30 <main>
	bx	lr
 8001152:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001154:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001158:	080013a0 	.word	0x080013a0
	ldr	r0, =_sdata
 800115c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001160:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8001164:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8001168:	200004b8 	.word	0x200004b8

0800116c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_2_IRQHandler>

0800116e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr

0800117a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800117e:	e7fe      	b.n	800117e <HardFault_Handler+0x4>

08001180 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001184:	e7fe      	b.n	8001184 <MemManage_Handler+0x4>

08001186 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800118a:	e7fe      	b.n	800118a <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001190:	e7fe      	b.n	8001190 <UsageFault_Handler+0x4>

08001192 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
	...

080011a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011a4:	4a15      	ldr	r2, [pc, #84]	; (80011fc <SystemInit+0x5c>)
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <SystemInit+0x5c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80011b0:	4912      	ldr	r1, [pc, #72]	; (80011fc <SystemInit+0x5c>)
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <SystemInit+0x5c>)
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <SystemInit+0x60>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011bc:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <SystemInit+0x5c>)
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <SystemInit+0x5c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011cc:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <SystemInit+0x5c>)
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <SystemInit+0x5c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80011d8:	4a08      	ldr	r2, [pc, #32]	; (80011fc <SystemInit+0x5c>)
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <SystemInit+0x5c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80011e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <SystemInit+0x5c>)
 80011e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011ea:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80011ec:	f000 f80c 	bl	8001208 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SystemInit+0x64>)
 80011f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011f6:	609a      	str	r2, [r3, #8]
#endif 
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40021000 	.word	0x40021000
 8001200:	f8ff0000 	.word	0xf8ff0000
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800120c:	f000 f802 	bl	8001214 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001222:	4a3a      	ldr	r2, [pc, #232]	; (800130c <SetSysClockTo72+0xf8>)
 8001224:	4b39      	ldr	r3, [pc, #228]	; (800130c <SetSysClockTo72+0xf8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <SetSysClockTo72+0xf8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3301      	adds	r3, #1
 800123c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d103      	bne.n	800124c <SetSysClockTo72+0x38>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800124a:	d1f0      	bne.n	800122e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800124c:	4b2f      	ldr	r3, [pc, #188]	; (800130c <SetSysClockTo72+0xf8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001258:	2301      	movs	r3, #1
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	e001      	b.n	8001262 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d14b      	bne.n	8001300 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001268:	4a29      	ldr	r2, [pc, #164]	; (8001310 <SetSysClockTo72+0xfc>)
 800126a:	4b29      	ldr	r3, [pc, #164]	; (8001310 <SetSysClockTo72+0xfc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001274:	4a26      	ldr	r2, [pc, #152]	; (8001310 <SetSysClockTo72+0xfc>)
 8001276:	4b26      	ldr	r3, [pc, #152]	; (8001310 <SetSysClockTo72+0xfc>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 0303 	bic.w	r3, r3, #3
 800127e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001280:	4a23      	ldr	r2, [pc, #140]	; (8001310 <SetSysClockTo72+0xfc>)
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <SetSysClockTo72+0xfc>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800128c:	4a1f      	ldr	r2, [pc, #124]	; (800130c <SetSysClockTo72+0xf8>)
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <SetSysClockTo72+0xf8>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001294:	4a1d      	ldr	r2, [pc, #116]	; (800130c <SetSysClockTo72+0xf8>)
 8001296:	4b1d      	ldr	r3, [pc, #116]	; (800130c <SetSysClockTo72+0xf8>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800129c:	4a1b      	ldr	r2, [pc, #108]	; (800130c <SetSysClockTo72+0xf8>)
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <SetSysClockTo72+0xf8>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80012a8:	4a18      	ldr	r2, [pc, #96]	; (800130c <SetSysClockTo72+0xf8>)
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <SetSysClockTo72+0xf8>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80012b2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80012b4:	4a15      	ldr	r2, [pc, #84]	; (800130c <SetSysClockTo72+0xf8>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <SetSysClockTo72+0xf8>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80012be:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80012c0:	4a12      	ldr	r2, [pc, #72]	; (800130c <SetSysClockTo72+0xf8>)
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <SetSysClockTo72+0xf8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012ca:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80012cc:	bf00      	nop
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <SetSysClockTo72+0xf8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f9      	beq.n	80012ce <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80012da:	4a0c      	ldr	r2, [pc, #48]	; (800130c <SetSysClockTo72+0xf8>)
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <SetSysClockTo72+0xf8>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f023 0303 	bic.w	r3, r3, #3
 80012e4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80012e6:	4a09      	ldr	r2, [pc, #36]	; (800130c <SetSysClockTo72+0xf8>)
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <SetSysClockTo72+0xf8>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80012f2:	bf00      	nop
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <SetSysClockTo72+0xf8>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d1f9      	bne.n	80012f4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	40022000 	.word	0x40022000

08001314 <__libc_init_array>:
 8001314:	b570      	push	{r4, r5, r6, lr}
 8001316:	2500      	movs	r5, #0
 8001318:	4e0c      	ldr	r6, [pc, #48]	; (800134c <__libc_init_array+0x38>)
 800131a:	4c0d      	ldr	r4, [pc, #52]	; (8001350 <__libc_init_array+0x3c>)
 800131c:	1ba4      	subs	r4, r4, r6
 800131e:	10a4      	asrs	r4, r4, #2
 8001320:	42a5      	cmp	r5, r4
 8001322:	d109      	bne.n	8001338 <__libc_init_array+0x24>
 8001324:	f000 f81a 	bl	800135c <_init>
 8001328:	2500      	movs	r5, #0
 800132a:	4e0a      	ldr	r6, [pc, #40]	; (8001354 <__libc_init_array+0x40>)
 800132c:	4c0a      	ldr	r4, [pc, #40]	; (8001358 <__libc_init_array+0x44>)
 800132e:	1ba4      	subs	r4, r4, r6
 8001330:	10a4      	asrs	r4, r4, #2
 8001332:	42a5      	cmp	r5, r4
 8001334:	d105      	bne.n	8001342 <__libc_init_array+0x2e>
 8001336:	bd70      	pop	{r4, r5, r6, pc}
 8001338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800133c:	4798      	blx	r3
 800133e:	3501      	adds	r5, #1
 8001340:	e7ee      	b.n	8001320 <__libc_init_array+0xc>
 8001342:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001346:	4798      	blx	r3
 8001348:	3501      	adds	r5, #1
 800134a:	e7f2      	b.n	8001332 <__libc_init_array+0x1e>
 800134c:	08001398 	.word	0x08001398
 8001350:	08001398 	.word	0x08001398
 8001354:	08001398 	.word	0x08001398
 8001358:	0800139c 	.word	0x0800139c

0800135c <_init>:
 800135c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800135e:	bf00      	nop
 8001360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001362:	bc08      	pop	{r3}
 8001364:	469e      	mov	lr, r3
 8001366:	4770      	bx	lr

08001368 <_fini>:
 8001368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800136a:	bf00      	nop
 800136c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800136e:	bc08      	pop	{r3}
 8001370:	469e      	mov	lr, r3
 8001372:	4770      	bx	lr
