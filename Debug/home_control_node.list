
home_control_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001620  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001730  08001730  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001730  08001730  00011730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001734  08001734  00011734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08001738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003c0  20000008  08001740  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00002000  200003c8  08001740  000203c8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b16b  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023ad  00000000  00000000  0002b19c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b20  00000000  00000000  0002d550  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009d8  00000000  00000000  0002e070  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004879  00000000  00000000  0002ea48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003815  00000000  00000000  000332c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00036ad6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002b98  00000000  00000000  00036b54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000008 	.word	0x20000008
 800012c:	00000000 	.word	0x00000000
 8000130:	08001718 	.word	0x08001718

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000000c 	.word	0x2000000c
 800014c:	08001718 	.word	0x08001718

08000150 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	685b      	ldr	r3, [r3, #4]
 800015e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000160:	683b      	ldr	r3, [r7, #0]
 8000162:	68fa      	ldr	r2, [r7, #12]
 8000164:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	689a      	ldr	r2, [r3, #8]
 800016a:	683b      	ldr	r3, [r7, #0]
 800016c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	689b      	ldr	r3, [r3, #8]
 8000172:	683a      	ldr	r2, [r7, #0]
 8000174:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	683a      	ldr	r2, [r7, #0]
 800017a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800017c:	683b      	ldr	r3, [r7, #0]
 800017e:	687a      	ldr	r2, [r7, #4]
 8000180:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	1c5a      	adds	r2, r3, #1
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	601a      	str	r2, [r3, #0]
}
 800018c:	bf00      	nop
 800018e:	3714      	adds	r7, #20
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr

08000196 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000196:	b480      	push	{r7}
 8000198:	b085      	sub	sp, #20
 800019a:	af00      	add	r7, sp, #0
 800019c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	691b      	ldr	r3, [r3, #16]
 80001a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	687a      	ldr	r2, [r7, #4]
 80001aa:	6892      	ldr	r2, [r2, #8]
 80001ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	689b      	ldr	r3, [r3, #8]
 80001b2:	687a      	ldr	r2, [r7, #4]
 80001b4:	6852      	ldr	r2, [r2, #4]
 80001b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	685a      	ldr	r2, [r3, #4]
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d103      	bne.n	80001ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	689a      	ldr	r2, [r3, #8]
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2200      	movs	r2, #0
 80001ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	1e5a      	subs	r2, r3, #1
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	681b      	ldr	r3, [r3, #0]
}
 80001de:	4618      	mov	r0, r3
 80001e0:	3714      	adds	r7, #20
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
	...

080001f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <pxCurrentTCBConst2>)
 80001f2:	6819      	ldr	r1, [r3, #0]
 80001f4:	6808      	ldr	r0, [r1, #0]
 80001f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80001fa:	f380 8809 	msr	PSP, r0
 80001fe:	f3bf 8f6f 	isb	sy
 8000202:	f04f 0000 	mov.w	r0, #0
 8000206:	f380 8811 	msr	BASEPRI, r0
 800020a:	f04e 0e0d 	orr.w	lr, lr, #13
 800020e:	4770      	bx	lr

08000210 <pxCurrentTCBConst2>:
 8000210:	20000024 	.word	0x20000024
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000214:	bf00      	nop
 8000216:	bf00      	nop
	...

08000220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000220:	f3ef 8009 	mrs	r0, PSP
 8000224:	f3bf 8f6f 	isb	sy
 8000228:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <pxCurrentTCBConst>)
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000230:	6010      	str	r0, [r2, #0]
 8000232:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000236:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800023a:	f380 8811 	msr	BASEPRI, r0
 800023e:	f000 f8df 	bl	8000400 <vTaskSwitchContext>
 8000242:	f04f 0000 	mov.w	r0, #0
 8000246:	f380 8811 	msr	BASEPRI, r0
 800024a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800024e:	6819      	ldr	r1, [r3, #0]
 8000250:	6808      	ldr	r0, [r1, #0]
 8000252:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000256:	f380 8809 	msr	PSP, r0
 800025a:	f3bf 8f6f 	isb	sy
 800025e:	4770      	bx	lr

08000260 <pxCurrentTCBConst>:
 8000260:	20000024 	.word	0x20000024
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000264:	bf00      	nop
 8000266:	bf00      	nop

08000268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800026e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000272:	f383 8811 	msr	BASEPRI, r3
 8000276:	f3bf 8f6f 	isb	sy
 800027a:	f3bf 8f4f 	dsb	sy
 800027e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000280:	f000 f812 	bl	80002a8 <xTaskIncrementTick>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d003      	beq.n	8000292 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <SysTick_Handler+0x3c>)
 800028c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	e000ed04 	.word	0xe000ed04

080002a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80002b2:	4b48      	ldr	r3, [pc, #288]	; (80003d4 <xTaskIncrementTick+0x12c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d17c      	bne.n	80003b4 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80002ba:	4b47      	ldr	r3, [pc, #284]	; (80003d8 <xTaskIncrementTick+0x130>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	3301      	adds	r3, #1
 80002c0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80002c2:	4a45      	ldr	r2, [pc, #276]	; (80003d8 <xTaskIncrementTick+0x130>)
 80002c4:	693b      	ldr	r3, [r7, #16]
 80002c6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d110      	bne.n	80002f0 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80002ce:	4b43      	ldr	r3, [pc, #268]	; (80003dc <xTaskIncrementTick+0x134>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	4b42      	ldr	r3, [pc, #264]	; (80003e0 <xTaskIncrementTick+0x138>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a40      	ldr	r2, [pc, #256]	; (80003dc <xTaskIncrementTick+0x134>)
 80002da:	6013      	str	r3, [r2, #0]
 80002dc:	4a40      	ldr	r2, [pc, #256]	; (80003e0 <xTaskIncrementTick+0x138>)
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	6013      	str	r3, [r2, #0]
 80002e2:	4b40      	ldr	r3, [pc, #256]	; (80003e4 <xTaskIncrementTick+0x13c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	3301      	adds	r3, #1
 80002e8:	4a3e      	ldr	r2, [pc, #248]	; (80003e4 <xTaskIncrementTick+0x13c>)
 80002ea:	6013      	str	r3, [r2, #0]
 80002ec:	f000 f8ce 	bl	800048c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80002f0:	4b3d      	ldr	r3, [pc, #244]	; (80003e8 <xTaskIncrementTick+0x140>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	693a      	ldr	r2, [r7, #16]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d34d      	bcc.n	8000396 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80002fa:	4b38      	ldr	r3, [pc, #224]	; (80003dc <xTaskIncrementTick+0x134>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <xTaskIncrementTick+0x60>
 8000304:	2301      	movs	r3, #1
 8000306:	e000      	b.n	800030a <xTaskIncrementTick+0x62>
 8000308:	2300      	movs	r3, #0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d004      	beq.n	8000318 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800030e:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <xTaskIncrementTick+0x140>)
 8000310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000314:	601a      	str	r2, [r3, #0]
					break;
 8000316:	e03e      	b.n	8000396 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000318:	4b30      	ldr	r3, [pc, #192]	; (80003dc <xTaskIncrementTick+0x134>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000328:	693a      	ldr	r2, [r7, #16]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	429a      	cmp	r2, r3
 800032e:	d203      	bcs.n	8000338 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000330:	4a2d      	ldr	r2, [pc, #180]	; (80003e8 <xTaskIncrementTick+0x140>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	6013      	str	r3, [r2, #0]
						break;
 8000336:	e02e      	b.n	8000396 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	3304      	adds	r3, #4
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff2a 	bl	8000196 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000346:	2b00      	cmp	r3, #0
 8000348:	d004      	beq.n	8000354 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	3318      	adds	r3, #24
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ff21 	bl	8000196 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000358:	2201      	movs	r2, #1
 800035a:	409a      	lsls	r2, r3
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <xTaskIncrementTick+0x144>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4313      	orrs	r3, r2
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <xTaskIncrementTick+0x144>)
 8000364:	6013      	str	r3, [r2, #0]
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800036a:	4613      	mov	r3, r2
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	4413      	add	r3, r2
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <xTaskIncrementTick+0x148>)
 8000374:	441a      	add	r2, r3
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	3304      	adds	r3, #4
 800037a:	4619      	mov	r1, r3
 800037c:	4610      	mov	r0, r2
 800037e:	f7ff fee7 	bl	8000150 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000386:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <xTaskIncrementTick+0x14c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800038c:	429a      	cmp	r2, r3
 800038e:	d3b4      	bcc.n	80002fa <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8000390:	2301      	movs	r3, #1
 8000392:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000394:	e7b1      	b.n	80002fa <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <xTaskIncrementTick+0x14c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800039c:	4914      	ldr	r1, [pc, #80]	; (80003f0 <xTaskIncrementTick+0x148>)
 800039e:	4613      	mov	r3, r2
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	4413      	add	r3, r2
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	440b      	add	r3, r1
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d907      	bls.n	80003be <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80003ae:	2301      	movs	r3, #1
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	e004      	b.n	80003be <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80003b4:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <xTaskIncrementTick+0x150>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	3301      	adds	r3, #1
 80003ba:	4a0f      	ldr	r2, [pc, #60]	; (80003f8 <xTaskIncrementTick+0x150>)
 80003bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <xTaskIncrementTick+0x154>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 80003c6:	2301      	movs	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80003ca:	697b      	ldr	r3, [r7, #20]
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3718      	adds	r7, #24
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200000ac 	.word	0x200000ac
 80003d8:	20000094 	.word	0x20000094
 80003dc:	2000008c 	.word	0x2000008c
 80003e0:	20000090 	.word	0x20000090
 80003e4:	200000a4 	.word	0x200000a4
 80003e8:	200000a8 	.word	0x200000a8
 80003ec:	20000098 	.word	0x20000098
 80003f0:	20000028 	.word	0x20000028
 80003f4:	20000024 	.word	0x20000024
 80003f8:	2000009c 	.word	0x2000009c
 80003fc:	200000a0 	.word	0x200000a0

08000400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000406:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <vTaskSwitchContext+0x78>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d003      	beq.n	8000416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800040e:	4b1b      	ldr	r3, [pc, #108]	; (800047c <vTaskSwitchContext+0x7c>)
 8000410:	2201      	movs	r2, #1
 8000412:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000414:	e02a      	b.n	800046c <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000416:	4b19      	ldr	r3, [pc, #100]	; (800047c <vTaskSwitchContext+0x7c>)
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <vTaskSwitchContext+0x80>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	fab3 f383 	clz	r3, r3
 8000428:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800042a:	78fb      	ldrb	r3, [r7, #3]
 800042c:	f1c3 031f 	rsb	r3, r3, #31
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	4613      	mov	r3, r2
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	4413      	add	r3, r2
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <vTaskSwitchContext+0x84>)
 800043e:	4413      	add	r3, r2
 8000440:	60bb      	str	r3, [r7, #8]
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	685a      	ldr	r2, [r3, #4]
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	3308      	adds	r3, #8
 8000454:	429a      	cmp	r2, r3
 8000456:	d104      	bne.n	8000462 <vTaskSwitchContext+0x62>
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	685a      	ldr	r2, [r3, #4]
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a07      	ldr	r2, [pc, #28]	; (8000488 <vTaskSwitchContext+0x88>)
 800046a:	6013      	str	r3, [r2, #0]
}
 800046c:	bf00      	nop
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	200000ac 	.word	0x200000ac
 800047c:	200000a0 	.word	0x200000a0
 8000480:	20000098 	.word	0x20000098
 8000484:	20000028 	.word	0x20000028
 8000488:	20000024 	.word	0x20000024

0800048c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <prvResetNextTaskUnblockTime+0x40>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d101      	bne.n	80004a0 <prvResetNextTaskUnblockTime+0x14>
 800049c:	2301      	movs	r3, #1
 800049e:	e000      	b.n	80004a2 <prvResetNextTaskUnblockTime+0x16>
 80004a0:	2300      	movs	r3, #0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d004      	beq.n	80004b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80004a6:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <prvResetNextTaskUnblockTime+0x44>)
 80004a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80004ae:	e008      	b.n	80004c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <prvResetNextTaskUnblockTime+0x40>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	68db      	ldr	r3, [r3, #12]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <prvResetNextTaskUnblockTime+0x44>)
 80004c0:	6013      	str	r3, [r2, #0]
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	2000008c 	.word	0x2000008c
 80004d0:	200000a8 	.word	0x200000a8

080004d4 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004e0:	78fb      	ldrb	r3, [r7, #3]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d006      	beq.n	80004f4 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	689b      	ldr	r3, [r3, #8]
 80004ea:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 80004f2:	e005      	b.n	8000500 <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	609a      	str	r2, [r3, #8]
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
	...

0800050c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <EXTI_ClearITPendingBit+0x18>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6153      	str	r3, [r2, #20]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	40010400 	.word	0x40010400

08000528 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000528:	b480      	push	{r7}
 800052a:	b089      	sub	sp, #36	; 0x24
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	78db      	ldrb	r3, [r3, #3]
 800054e:	f003 030f 	and.w	r3, r3, #15
 8000552:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	78db      	ldrb	r3, [r3, #3]
 8000558:	f003 0310 	and.w	r3, r3, #16
 800055c:	2b00      	cmp	r3, #0
 800055e:	d005      	beq.n	800056c <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	789b      	ldrb	r3, [r3, #2]
 8000564:	461a      	mov	r2, r3
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	4313      	orrs	r3, r2
 800056a:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d044      	beq.n	8000600 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
 8000580:	e038      	b.n	80005f4 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000582:	2201      	movs	r2, #1
 8000584:	69bb      	ldr	r3, [r7, #24]
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4013      	ands	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000598:	693a      	ldr	r2, [r7, #16]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	429a      	cmp	r2, r3
 800059e:	d126      	bne.n	80005ee <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80005a0:	69bb      	ldr	r3, [r7, #24]
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80005a6:	220f      	movs	r2, #15
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	43db      	mvns	r3, r3
 80005b4:	697a      	ldr	r2, [r7, #20]
 80005b6:	4013      	ands	r3, r2
 80005b8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80005ba:	69fa      	ldr	r2, [r7, #28]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	697a      	ldr	r2, [r7, #20]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	78db      	ldrb	r3, [r3, #3]
 80005cc:	2b28      	cmp	r3, #40	; 0x28
 80005ce:	d105      	bne.n	80005dc <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80005d0:	2201      	movs	r2, #1
 80005d2:	69bb      	ldr	r3, [r7, #24]
 80005d4:	409a      	lsls	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	615a      	str	r2, [r3, #20]
 80005da:	e008      	b.n	80005ee <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	78db      	ldrb	r3, [r3, #3]
 80005e0:	2b48      	cmp	r3, #72	; 0x48
 80005e2:	d104      	bne.n	80005ee <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80005e4:	2201      	movs	r2, #1
 80005e6:	69bb      	ldr	r3, [r7, #24]
 80005e8:	409a      	lsls	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005ee:	69bb      	ldr	r3, [r7, #24]
 80005f0:	3301      	adds	r3, #1
 80005f2:	61bb      	str	r3, [r7, #24]
 80005f4:	69bb      	ldr	r3, [r7, #24]
 80005f6:	2b07      	cmp	r3, #7
 80005f8:	d9c3      	bls.n	8000582 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	2bff      	cmp	r3, #255	; 0xff
 8000606:	d946      	bls.n	8000696 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
 8000612:	e03a      	b.n	800068a <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	3308      	adds	r3, #8
 8000618:	2201      	movs	r2, #1
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
 800061e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	4013      	ands	r3, r2
 800062a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800062c:	693a      	ldr	r2, [r7, #16]
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	429a      	cmp	r2, r3
 8000632:	d127      	bne.n	8000684 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000634:	69bb      	ldr	r3, [r7, #24]
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800063a:	220f      	movs	r2, #15
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	43db      	mvns	r3, r3
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	4013      	ands	r3, r2
 800064c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800064e:	69fa      	ldr	r2, [r7, #28]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	fa02 f303 	lsl.w	r3, r2, r3
 8000656:	697a      	ldr	r2, [r7, #20]
 8000658:	4313      	orrs	r3, r2
 800065a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	78db      	ldrb	r3, [r3, #3]
 8000660:	2b28      	cmp	r3, #40	; 0x28
 8000662:	d105      	bne.n	8000670 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	3308      	adds	r3, #8
 8000668:	2201      	movs	r2, #1
 800066a:	409a      	lsls	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	78db      	ldrb	r3, [r3, #3]
 8000674:	2b48      	cmp	r3, #72	; 0x48
 8000676:	d105      	bne.n	8000684 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	3308      	adds	r3, #8
 800067c:	2201      	movs	r2, #1
 800067e:	409a      	lsls	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	3301      	adds	r3, #1
 8000688:	61bb      	str	r3, [r7, #24]
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	2b07      	cmp	r3, #7
 800068e:	d9c1      	bls.n	8000614 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	605a      	str	r2, [r3, #4]
  }
}
 8000696:	bf00      	nop
 8000698:	3724      	adds	r7, #36	; 0x24
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80006ac:	887a      	ldrh	r2, [r7, #2]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	611a      	str	r2, [r3, #16]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80006c8:	887a      	ldrh	r2, [r7, #2]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	615a      	str	r2, [r3, #20]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	807b      	strh	r3, [r7, #2]
 80006e4:	4613      	mov	r3, r2
 80006e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80006e8:	787b      	ldrb	r3, [r7, #1]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d003      	beq.n	80006f6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006ee:	887a      	ldrh	r2, [r7, #2]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 80006f4:	e002      	b.n	80006fc <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 80006f6:	887a      	ldrh	r2, [r7, #2]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	615a      	str	r2, [r3, #20]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
	...

08000708 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d006      	beq.n	8000728 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800071a:	4909      	ldr	r1, [pc, #36]	; (8000740 <RCC_APB2PeriphClockCmd+0x38>)
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <RCC_APB2PeriphClockCmd+0x38>)
 800071e:	699a      	ldr	r2, [r3, #24]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4313      	orrs	r3, r2
 8000724:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000726:	e006      	b.n	8000736 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000728:	4905      	ldr	r1, [pc, #20]	; (8000740 <RCC_APB2PeriphClockCmd+0x38>)
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <RCC_APB2PeriphClockCmd+0x38>)
 800072c:	699a      	ldr	r2, [r3, #24]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	43db      	mvns	r3, r3
 8000732:	4013      	ands	r3, r2
 8000734:	618b      	str	r3, [r1, #24]
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	40021000 	.word	0x40021000

08000744 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000758:	89fb      	ldrh	r3, [r7, #14]
 800075a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800075e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	881a      	ldrh	r2, [r3, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	885b      	ldrh	r3, [r3, #2]
 8000768:	4313      	orrs	r3, r2
 800076a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000770:	4313      	orrs	r3, r2
 8000772:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000778:	4313      	orrs	r3, r2
 800077a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000780:	4313      	orrs	r3, r2
 8000782:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000788:	4313      	orrs	r3, r2
 800078a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000790:	4313      	orrs	r3, r2
 8000792:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000798:	4313      	orrs	r3, r2
 800079a:	b29a      	uxth	r2, r3
 800079c:	89fb      	ldrh	r3, [r7, #14]
 800079e:	4313      	orrs	r3, r2
 80007a0:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	89fa      	ldrh	r2, [r7, #14]
 80007a6:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	8b9b      	ldrh	r3, [r3, #28]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	8a1a      	ldrh	r2, [r3, #16]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	821a      	strh	r2, [r3, #16]
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	460b      	mov	r3, r1
 80007d4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d008      	beq.n	80007ee <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80007ec:	e007      	b.n	80007fe <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	801a      	strh	r2, [r3, #0]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	887a      	ldrh	r2, [r7, #2]
 8000818:	819a      	strh	r2, [r3, #12]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	899b      	ldrh	r3, [r3, #12]
 8000830:	b29b      	uxth	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d008      	beq.n	8000860 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	889b      	ldrh	r3, [r3, #4]
 8000852:	b29b      	uxth	r3, r3
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	b29a      	uxth	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 800085e:	e007      	b.n	8000870 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	889b      	ldrh	r3, [r3, #4]
 8000864:	b29b      	uxth	r3, r3
 8000866:	f023 0304 	bic.w	r3, r3, #4
 800086a:	b29a      	uxth	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	809a      	strh	r2, [r3, #4]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800087a:	b480      	push	{r7}
 800087c:	b085      	sub	sp, #20
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	460b      	mov	r3, r1
 8000884:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	891b      	ldrh	r3, [r3, #8]
 800088e:	b29a      	uxth	r2, r3
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	4013      	ands	r3, r2
 8000894:	b29b      	uxth	r3, r3
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800089a:	2301      	movs	r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	e001      	b.n	80008a4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <client_rec>:


uint8_t buf[256];
int buf_len =32;

int client_rec(byte* buf, uint16_t bufLen){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	; 0x30
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	807b      	strh	r3, [r7, #2]

	if(nrf24_dataReady()){
 80008bc:	f000 f9ea 	bl	8000c94 <nrf24_dataReady>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d019      	beq.n	80008fa <client_rec+0x4a>
		uint8_t rxBytesNb;
		uint8_t data_array[32];
		nrf24_getData(data_array);
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fa02 	bl	8000cd4 <nrf24_getData>
		rxBytesNb = l3_receive_packet(data_array, buf, bufLen);
 80008d0:	887a      	ldrh	r2, [r7, #2]
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f942 	bl	8000b62 <l3_receive_packet>
 80008de:	4603      	mov	r3, r0
 80008e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (rxBytesNb){
 80008e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d006      	beq.n	80008fa <client_rec+0x4a>
			GPIOC->BRR = GPIO_Pin_13;
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <client_rec+0x54>)
 80008ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f2:	615a      	str	r2, [r3, #20]
			return rxBytesNb;
 80008f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008f8:	e000      	b.n	80008fc <client_rec+0x4c>
		}
	}
	//		_delay_ms(10);

	return 0;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3730      	adds	r7, #48	; 0x30
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40011000 	.word	0x40011000

08000908 <RadioReceiveCallback>:
int mqtt_net_disconnect_cb(void *context){
	return 0;
}


void RadioReceiveCallback (void){
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

	uint8_t rxNb = client_rec(buf, buf_len);
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <RadioReceiveCallback+0x28>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	b29b      	uxth	r3, r3
 8000914:	4619      	mov	r1, r3
 8000916:	4807      	ldr	r0, [pc, #28]	; (8000934 <RadioReceiveCallback+0x2c>)
 8000918:	f7ff ffca 	bl	80008b0 <client_rec>
 800091c:	4603      	mov	r3, r0
 800091e:	71fb      	strb	r3, [r7, #7]
	if (rxNb >0){
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d000      	beq.n	8000928 <RadioReceiveCallback+0x20>
		asm volatile ("nop");
 8000926:	bf00      	nop
	}
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000000 	.word	0x20000000
 8000934:	200002bc 	.word	0x200002bc

08000938 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler (void){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
//	xSemaphoreTakeFromISR(nrfMutex, NULL);
	RadioReceiveCallback();
 800093c:	f7ff ffe4 	bl	8000908 <RadioReceiveCallback>
//	xSemaphoreGiveFromISR(nrfMutex, NULL);
	EXTI->PR |= (1<<5);
 8000940:	4a03      	ldr	r2, [pc, #12]	; (8000950 <EXTI9_5_IRQHandler+0x18>)
 8000942:	4b03      	ldr	r3, [pc, #12]	; (8000950 <EXTI9_5_IRQHandler+0x18>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f043 0320 	orr.w	r3, r3, #32
 800094a:	6153      	str	r3, [r2, #20]
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40010400 	.word	0x40010400

08000954 <EnableGpioClk>:
#define PIN_CNF_PUSH_PULL		(0x2)
#define PIN_MODE_OUT			(0x1)



void EnableGpioClk (GPIO_TypeDef * gpioPort){
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	if (gpioPort == GPIOA){
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <EnableGpioClk+0x68>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d106      	bne.n	8000972 <EnableGpioClk+0x1e>
		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000964:	4a16      	ldr	r2, [pc, #88]	; (80009c0 <EnableGpioClk+0x6c>)
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <EnableGpioClk+0x6c>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	6193      	str	r3, [r2, #24]
	} else if (gpioPort == GPIOC){
		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
	} else if (gpioPort == GPIOD){
		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
	}
}
 8000970:	e01f      	b.n	80009b2 <EnableGpioClk+0x5e>
	} else if (gpioPort == GPIOB){
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <EnableGpioClk+0x70>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d106      	bne.n	8000988 <EnableGpioClk+0x34>
		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800097a:	4a11      	ldr	r2, [pc, #68]	; (80009c0 <EnableGpioClk+0x6c>)
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <EnableGpioClk+0x6c>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6193      	str	r3, [r2, #24]
}
 8000986:	e014      	b.n	80009b2 <EnableGpioClk+0x5e>
	} else if (gpioPort == GPIOC){
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <EnableGpioClk+0x74>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d106      	bne.n	800099e <EnableGpioClk+0x4a>
		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000990:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <EnableGpioClk+0x6c>)
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <EnableGpioClk+0x6c>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	6193      	str	r3, [r2, #24]
}
 800099c:	e009      	b.n	80009b2 <EnableGpioClk+0x5e>
	} else if (gpioPort == GPIOD){
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <EnableGpioClk+0x78>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d105      	bne.n	80009b2 <EnableGpioClk+0x5e>
		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 80009a6:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <EnableGpioClk+0x6c>)
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <EnableGpioClk+0x6c>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f043 0320 	orr.w	r3, r3, #32
 80009b0:	6193      	str	r3, [r2, #24]
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	40010800 	.word	0x40010800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010c00 	.word	0x40010c00
 80009c8:	40011000 	.word	0x40011000
 80009cc:	40011400 	.word	0x40011400

080009d0 <SetGpioAsInFloating>:
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	}
}


void SetGpioAsInFloating (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
	if (pinNb < 8){
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	2b07      	cmp	r3, #7
 80009e0:	d81d      	bhi.n	8000a1e <SetGpioAsInFloating+0x4e>
		gpioPort->CRL &= ~(PIN_MODE_MSK<<pinNb);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	78fa      	ldrb	r2, [r7, #3]
 80009e8:	2103      	movs	r1, #3
 80009ea:	fa01 f202 	lsl.w	r2, r1, r2
 80009ee:	43d2      	mvns	r2, r2
 80009f0:	401a      	ands	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
		gpioPort->CRL &= ~(PIN_CNF_MSK<<pinNb);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	78fa      	ldrb	r2, [r7, #3]
 80009fc:	2103      	movs	r1, #3
 80009fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000a02:	43d2      	mvns	r2, r2
 8000a04:	401a      	ands	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	601a      	str	r2, [r3, #0]
		gpioPort->CRL |= (PIN_CNF_FLOAT<<pinNb);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	78fa      	ldrb	r2, [r7, #3]
 8000a10:	2101      	movs	r1, #1
 8000a12:	fa01 f202 	lsl.w	r2, r1, r2
 8000a16:	431a      	orrs	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	601a      	str	r2, [r3, #0]
	} else {
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
	}
}
 8000a1c:	e023      	b.n	8000a66 <SetGpioAsInFloating+0x96>
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	78fa      	ldrb	r2, [r7, #3]
 8000a24:	3a08      	subs	r2, #8
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	2103      	movs	r1, #3
 8000a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a2e:	43d2      	mvns	r2, r2
 8000a30:	401a      	ands	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	605a      	str	r2, [r3, #4]
		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	78fa      	ldrb	r2, [r7, #3]
 8000a3c:	3a08      	subs	r2, #8
 8000a3e:	0092      	lsls	r2, r2, #2
 8000a40:	2103      	movs	r1, #3
 8000a42:	fa01 f202 	lsl.w	r2, r1, r2
 8000a46:	43d2      	mvns	r2, r2
 8000a48:	401a      	ands	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	605a      	str	r2, [r3, #4]
		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	78fa      	ldrb	r2, [r7, #3]
 8000a54:	3a08      	subs	r2, #8
 8000a56:	0092      	lsls	r2, r2, #2
 8000a58:	3202      	adds	r2, #2
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a60:	431a      	orrs	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	605a      	str	r2, [r3, #4]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <SetGpioAsOutAltPushPUll>:
}




void SetGpioAsOutAltPushPUll (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
	if (pinNb < 8){
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	2b07      	cmp	r3, #7
 8000a80:	d92f      	bls.n	8000ae2 <SetGpioAsOutAltPushPUll+0x72>
//
//		gpioPort->CRL |= (PIN_MODE_OUT<<pinNb);
//		gpioPort->CRL &= ~(PIN_CNF_PUSH_PULL<<pinNb);

	} else {
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	78fa      	ldrb	r2, [r7, #3]
 8000a88:	3a08      	subs	r2, #8
 8000a8a:	0092      	lsls	r2, r2, #2
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a92:	43d2      	mvns	r2, r2
 8000a94:	401a      	ands	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	605a      	str	r2, [r3, #4]
		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	78fa      	ldrb	r2, [r7, #3]
 8000aa0:	3a08      	subs	r2, #8
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	3202      	adds	r2, #2
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000aac:	43d2      	mvns	r2, r2
 8000aae:	401a      	ands	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	605a      	str	r2, [r3, #4]

		gpioPort->CRH |= (PIN_MODE_OUT<<(pinNb-8)*4);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	78fa      	ldrb	r2, [r7, #3]
 8000aba:	3a08      	subs	r2, #8
 8000abc:	0092      	lsls	r2, r2, #2
 8000abe:	2101      	movs	r1, #1
 8000ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	605a      	str	r2, [r3, #4]
		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	78fa      	ldrb	r2, [r7, #3]
 8000ad0:	3a08      	subs	r2, #8
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	3202      	adds	r2, #2
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8000adc:	431a      	orrs	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	605a      	str	r2, [r3, #4]
	}
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <calculateCRC16>:





uint16_t calculateCRC16(const uint8_t * data_p, uint16_t length){
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	807b      	strh	r3, [r7, #2]
    uint8_t x;
    uint16_t crc = 0xFFFF;
 8000af8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000afc:	81fb      	strh	r3, [r7, #14]

    while (length--){
 8000afe:	e025      	b.n	8000b4c <calculateCRC16+0x60>
        x = crc >> 8 ^ *data_p++;
 8000b00:	89fb      	ldrh	r3, [r7, #14]
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	1c59      	adds	r1, r3, #1
 8000b0c:	6079      	str	r1, [r7, #4]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4053      	eors	r3, r2
 8000b12:	737b      	strb	r3, [r7, #13]
        x ^= x>>4;
 8000b14:	7b7b      	ldrb	r3, [r7, #13]
 8000b16:	091b      	lsrs	r3, r3, #4
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	7b7b      	ldrb	r3, [r7, #13]
 8000b1c:	4053      	eors	r3, r2
 8000b1e:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 8000b20:	89fb      	ldrh	r3, [r7, #14]
 8000b22:	021b      	lsls	r3, r3, #8
 8000b24:	b21a      	sxth	r2, r3
 8000b26:	7b7b      	ldrb	r3, [r7, #13]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	031b      	lsls	r3, r3, #12
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	4053      	eors	r3, r2
 8000b32:	b21a      	sxth	r2, r3
 8000b34:	7b7b      	ldrb	r3, [r7, #13]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	015b      	lsls	r3, r3, #5
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	b21b      	sxth	r3, r3
 8000b3e:	4053      	eors	r3, r2
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	7b7b      	ldrb	r3, [r7, #13]
 8000b44:	b21b      	sxth	r3, r3
 8000b46:	4053      	eors	r3, r2
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	81fb      	strh	r3, [r7, #14]
    while (length--){
 8000b4c:	887b      	ldrh	r3, [r7, #2]
 8000b4e:	1e5a      	subs	r2, r3, #1
 8000b50:	807a      	strh	r2, [r7, #2]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1d4      	bne.n	8000b00 <calculateCRC16+0x14>
    }
    return crc;
 8000b56:	89fb      	ldrh	r3, [r7, #14]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <l3_receive_packet>:
}




uint16_t l3_receive_packet(uint8_t *data, uint8_t * packet_buff, uint16_t buff_len){
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	80fb      	strh	r3, [r7, #6]

	if (data[H_FRM] == 0){
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d105      	bne.n	8000b84 <l3_receive_packet+0x22>
		memset (packet_buff, 0, buff_len);
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	68b8      	ldr	r0, [r7, #8]
 8000b80:	f000 fdc1 	bl	8001706 <memset>
	}

	if (data[H_FRM] < data[H_TOTAL]){
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	781a      	ldrb	r2, [r3, #0]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d245      	bcs.n	8000c1e <l3_receive_packet+0xbc>
		uint8_t frm_nb = data[H_FRM];
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	75fb      	strb	r3, [r7, #23]
		memcpy(&packet_buff[L2_DATA_SIZE * frm_nb], &data[0+ L2_HEAD_SIZE], L2_DATA_SIZE);
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	221a      	movs	r2, #26
 8000b9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1898      	adds	r0, r3, r2
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	3306      	adds	r3, #6
 8000baa:	221a      	movs	r2, #26
 8000bac:	4619      	mov	r1, r3
 8000bae:	f000 fd9f 	bl	80016f0 <memcpy>
		if ((data[H_FRM]+1) == data[H_TOTAL]){
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	68fa      	ldr	r2, [r7, #12]
 8000bba:	3201      	adds	r2, #1
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d12d      	bne.n	8000c1e <l3_receive_packet+0xbc>
			uint16_t pcktLen = (data[H_LENH] << 8) + data[H_LENL];
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	021b      	lsls	r3, r3, #8
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3303      	adds	r3, #3
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	4413      	add	r3, r2
 8000bd8:	82bb      	strh	r3, [r7, #20]
			uint16_t rxPcktCRC =  (data[H_CRCH]<<8)  + data[H_CRCL];
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3305      	adds	r3, #5
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	4413      	add	r3, r2
 8000bf0:	827b      	strh	r3, [r7, #18]
			uint16_t calcCRC = calculateCRC16(packet_buff, pcktLen);
 8000bf2:	8abb      	ldrh	r3, [r7, #20]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	68b8      	ldr	r0, [r7, #8]
 8000bf8:	f7ff ff78 	bl	8000aec <calculateCRC16>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	823b      	strh	r3, [r7, #16]
			if (rxPcktCRC == calcCRC){
 8000c00:	8a7a      	ldrh	r2, [r7, #18]
 8000c02:	8a3b      	ldrh	r3, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d10a      	bne.n	8000c1e <l3_receive_packet+0xbc>
				return (L2_DATA_SIZE * (frm_nb+1));
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	0052      	lsls	r2, r2, #1
 8000c12:	441a      	add	r2, r3
 8000c14:	0092      	lsls	r2, r2, #2
 8000c16:	4413      	add	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	e000      	b.n	8000c20 <l3_receive_packet+0xbe>
			}
		}
	}
	return 0;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <_delay_ms>:


}


void _delay_ms(int n) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

	int i, j;
	j= n*1000;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c36:	fb02 f303 	mul.w	r3, r2, r3
 8000c3a:	60bb      	str	r3, [r7, #8]
	while(j--) {
 8000c3c:	e007      	b.n	8000c4e <_delay_ms+0x26>
		i=2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	60fb      	str	r3, [r7, #12]
		while(i--);
 8000c42:	bf00      	nop
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	1e5a      	subs	r2, r3, #1
 8000c48:	60fa      	str	r2, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1fa      	bne.n	8000c44 <_delay_ms+0x1c>
	while(j--) {
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1e5a      	subs	r2, r3, #1
 8000c52:	60ba      	str	r2, [r7, #8]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f2      	bne.n	8000c3e <_delay_ms+0x16>
	}
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
	...

08000c64 <nrf24_csn_digitalWrite>:
    }
}


void nrf24_csn_digitalWrite(uint8_t state)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
    if(state)
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d004      	beq.n	8000c7e <nrf24_csn_digitalWrite+0x1a>
    {
    	nRF24_CSN_H();
 8000c74:	2102      	movs	r1, #2
 8000c76:	4806      	ldr	r0, [pc, #24]	; (8000c90 <nrf24_csn_digitalWrite+0x2c>)
 8000c78:	f7ff fd12 	bl	80006a0 <GPIO_SetBits>
    }
    else
    {
    	nRF24_CSN_L();
    }
}
 8000c7c:	e003      	b.n	8000c86 <nrf24_csn_digitalWrite+0x22>
    	nRF24_CSN_L();
 8000c7e:	2102      	movs	r1, #2
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <nrf24_csn_digitalWrite+0x2c>)
 8000c82:	f7ff fd1b 	bl	80006bc <GPIO_ResetBits>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40010c00 	.word	0x40010c00

08000c94 <nrf24_dataReady>:
}

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
	// See note in getData() function - just checking RX_DR isn't good enough
	uint8_t status = nrf24_getStatus();
 8000c9a:	f000 f835 	bl	8000d08 <nrf24_getStatus>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]

	// We can short circuit on RX_DR, but if it's not set, we still need
	// to check the FIFO for any pending packets
	if ( status & (1 << RX_DR) )
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <nrf24_dataReady+0x1c>
	{
		return 1;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e00d      	b.n	8000ccc <nrf24_dataReady+0x38>
	}

	uint8_t fifoStatus;

	nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
 8000cb0:	1dbb      	adds	r3, r7, #6
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	2017      	movs	r0, #23
 8000cb8:	f000 f86c 	bl	8000d94 <nrf24_readRegister>

	if (fifoStatus & (1 << RX_EMPTY)){
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <nrf24_dataReady+0x36>
		return false;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <nrf24_dataReady+0x38>
	} else {
		return true;
 8000cca:	2301      	movs	r3, #1
	}

	//   return !nrf24_rxFifoEmpty();;
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <nrf24_getData>:
    return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);                               
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff ffc1 	bl	8000c64 <nrf24_csn_digitalWrite>

    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
 8000ce2:	2061      	movs	r0, #97	; 0x61
 8000ce4:	f000 f823 	bl	8000d2e <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <nrf24_getData+0x30>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f82e 	bl	8000d52 <nrf24_transferSync>
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f7ff ffb4 	bl	8000c64 <nrf24_csn_digitalWrite>

    /* Reset status register */
 //   nrf24_configRegister(STATUS,(1<<RX_DR));
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200003c4 	.word	0x200003c4

08000d08 <nrf24_getStatus>:
    return 1; /* true */

}

uint8_t nrf24_getStatus()
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff ffa8 	bl	8000c64 <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
 8000d14:	20ff      	movs	r0, #255	; 0xff
 8000d16:	f000 f80a 	bl	8000d2e <spi_transfer>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
    nrf24_csn_digitalWrite(HIGH);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f7ff ffa0 	bl	8000c64 <nrf24_csn_digitalWrite>
    return rv;
 8000d24:	79fb      	ldrb	r3, [r7, #7]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <spi_transfer>:
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
}

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	71fb      	strb	r3, [r7, #7]
    uint8_t rx = 0;    
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]

	rx  = nRF24_LL_RW(tx);
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f848 	bl	8000dd4 <nRF24_LL_RW>
 8000d44:	4603      	mov	r3, r0
 8000d46:	73fb      	strb	r3, [r7, #15]

    return rx;
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
 8000d52:	b590      	push	{r4, r7, lr}
 8000d54:	b087      	sub	sp, #28
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    for(i=0;i<len;i++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	75fb      	strb	r3, [r7, #23]
 8000d64:	e00e      	b.n	8000d84 <nrf24_transferSync+0x32>
    {
        datain[i] = spi_transfer(dataout[i]);
 8000d66:	7dfb      	ldrb	r3, [r7, #23]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	18d4      	adds	r4, r2, r3
 8000d6c:	7dfb      	ldrb	r3, [r7, #23]
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	4413      	add	r3, r2
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ffda 	bl	8000d2e <spi_transfer>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	7023      	strb	r3, [r4, #0]
    for(i=0;i<len;i++)
 8000d7e:	7dfb      	ldrb	r3, [r7, #23]
 8000d80:	3301      	adds	r3, #1
 8000d82:	75fb      	strb	r3, [r7, #23]
 8000d84:	7dfa      	ldrb	r2, [r7, #23]
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d3ec      	bcc.n	8000d66 <nrf24_transferSync+0x14>
    }

}
 8000d8c:	bf00      	nop
 8000d8e:	371c      	adds	r7, #28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}

08000d94 <nrf24_readRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
    nrf24_csn_digitalWrite(LOW);
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff ff5d 	bl	8000c64 <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 031f 	and.w	r3, r3, #31
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ffbb 	bl	8000d2e <spi_transfer>
    nrf24_transferSync(value,value,len);
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	6839      	ldr	r1, [r7, #0]
 8000dbe:	6838      	ldr	r0, [r7, #0]
 8000dc0:	f7ff ffc7 	bl	8000d52 <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff ff4d 	bl	8000c64 <nrf24_csn_digitalWrite>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <nRF24_LL_RW>:

// Low level SPI transmit/receive function (hardware depended)
// input:
//   data - value to transmit via SPI
// return: value received from SPI
uint8_t nRF24_LL_RW(uint8_t data) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 8000dde:	bf00      	nop
 8000de0:	2102      	movs	r1, #2
 8000de2:	480e      	ldr	r0, [pc, #56]	; (8000e1c <nRF24_LL_RW+0x48>)
 8000de4:	f7ff fd49 	bl	800087a <SPI_I2S_GetFlagStatus>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f8      	beq.n	8000de0 <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	4619      	mov	r1, r3
 8000df4:	4809      	ldr	r0, [pc, #36]	; (8000e1c <nRF24_LL_RW+0x48>)
 8000df6:	f7ff fd07 	bl	8000808 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 8000dfa:	bf00      	nop
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4807      	ldr	r0, [pc, #28]	; (8000e1c <nRF24_LL_RW+0x48>)
 8000e00:	f7ff fd3b 	bl	800087a <SPI_I2S_GetFlagStatus>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0f8      	beq.n	8000dfc <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 8000e0a:	4804      	ldr	r0, [pc, #16]	; (8000e1c <nRF24_LL_RW+0x48>)
 8000e0c:	f7ff fd0a 	bl	8000824 <SPI_I2S_ReceiveData>
 8000e10:	4603      	mov	r3, r0
 8000e12:	b2db      	uxtb	r3, r3
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40013000 	.word	0x40013000

08000e20 <RFM12B_GPIO_Init>:
#include <stdint.h>
#include <stdbool.h>



void RFM12B_GPIO_Init(void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000e26:	2101      	movs	r1, #1
 8000e28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e2c:	f7ff fc6c 	bl	8000708 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000e30:	2101      	movs	r1, #1
 8000e32:	2004      	movs	r0, #4
 8000e34:	f7ff fc68 	bl	8000708 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000e38:	2101      	movs	r1, #1
 8000e3a:	2008      	movs	r0, #8
 8000e3c:	f7ff fc64 	bl	8000708 <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8000e40:	23e0      	movs	r3, #224	; 0xe0
 8000e42:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000e44:	2318      	movs	r3, #24
 8000e46:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	4619      	mov	r1, r3
 8000e52:	4825      	ldr	r0, [pc, #148]	; (8000ee8 <RFM12B_GPIO_Init+0xc8>)
 8000e54:	f7ff fb68 	bl	8000528 <GPIO_Init>


	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8000e58:	2340      	movs	r3, #64	; 0x40
 8000e5a:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000e60:	2301      	movs	r3, #1
 8000e62:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4820      	ldr	r0, [pc, #128]	; (8000eec <RFM12B_GPIO_Init+0xcc>)
 8000e6c:	f7ff fb5c 	bl	8000528 <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000e70:	2300      	movs	r3, #0
 8000e72:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8000e74:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000e78:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 8000e7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e7e:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8000e80:	2300      	movs	r3, #0
 8000e82:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8000e84:	2300      	movs	r3, #0
 8000e86:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8000e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8c:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 8000e8e:	2330      	movs	r3, #48	; 0x30
 8000e90:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8000e92:	2300      	movs	r3, #0
 8000e94:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8000e96:	2307      	movs	r3, #7
 8000e98:	83bb      	strh	r3, [r7, #28]
	SPI_SSOutputCmd(SPI1, ENABLE);
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4814      	ldr	r0, [pc, #80]	; (8000ef0 <RFM12B_GPIO_Init+0xd0>)
 8000e9e:	f7ff fccd 	bl	800083c <SPI_SSOutputCmd>
	SPI_Init(SPI1, &SPI_InitStructure);
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <RFM12B_GPIO_Init+0xd0>)
 8000eaa:	f7ff fc4b 	bl	8000744 <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI1, ENABLE);
 8000eae:	2101      	movs	r1, #1
 8000eb0:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <RFM12B_GPIO_Init+0xd0>)
 8000eb2:	f7ff fc8a 	bl	80007ca <SPI_Cmd>


	GPIO_InitTypeDef PORT;

	// Enable the nRF24L01 GPIO peripherals
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <RFM12B_GPIO_Init+0xd4>)
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <RFM12B_GPIO_Init+0xd4>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f043 0308 	orr.w	r3, r3, #8
 8000ec0:	6193      	str	r3, [r2, #24]

	// Configure CSN pin
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_1;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOB, &PORT);
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <RFM12B_GPIO_Init+0xcc>)
 8000ed4:	f7ff fb28 	bl	8000528 <GPIO_Init>
	GPIO_SetBits(GPIOB, GPIO_Pin_1);
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4804      	ldr	r0, [pc, #16]	; (8000eec <RFM12B_GPIO_Init+0xcc>)
 8000edc:	f7ff fbe0 	bl	80006a0 <GPIO_SetBits>
}
 8000ee0:	bf00      	nop
 8000ee2:	3720      	adds	r7, #32
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40010800 	.word	0x40010800
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	40013000 	.word	0x40013000
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <main>:





 int main(){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0



	 	EnableGpioClk(LOG_UART_PORT);
 8000efe:	483b      	ldr	r0, [pc, #236]	; (8000fec <main+0xf4>)
 8000f00:	f7ff fd28 	bl	8000954 <EnableGpioClk>
	 	SetGpioAsOutAltPushPUll(LOG_UART_PORT, LOG_UART_PIN_TX);
 8000f04:	2109      	movs	r1, #9
 8000f06:	4839      	ldr	r0, [pc, #228]	; (8000fec <main+0xf4>)
 8000f08:	f7ff fdb2 	bl	8000a70 <SetGpioAsOutAltPushPUll>
	 	SetGpioAsInFloating(LOG_UART_PORT, LOG_UART_PIN_RX);
 8000f0c:	210a      	movs	r1, #10
 8000f0e:	4837      	ldr	r0, [pc, #220]	; (8000fec <main+0xf4>)
 8000f10:	f7ff fd5e 	bl	80009d0 <SetGpioAsInFloating>
	 	EnableUart(USART1);
 8000f14:	4836      	ldr	r0, [pc, #216]	; (8000ff0 <main+0xf8>)
 8000f16:	f000 f885 	bl	8001024 <EnableUart>


	 	RFM12B_GPIO_Init();
 8000f1a:	f7ff ff81 	bl	8000e20 <RFM12B_GPIO_Init>
	 	RFM12B_RXInit();
 8000f1e:	f000 fa0d 	bl	800133c <RFM12B_RXInit>


	 	while (1){
	 		uint16_t status = RFM12B_RDSTATUS();
 8000f22:	f000 fa75 	bl	8001410 <RFM12B_RDSTATUS>
 8000f26:	4603      	mov	r3, r0
 8000f28:	80fb      	strh	r3, [r7, #6]


	 		if (status & RFM12_STATUS_RGIT ){
 8000f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	da0a      	bge.n	8000f48 <main+0x50>
	 			asm volatile ("nop");
 8000f32:	bf00      	nop
		 		uint8_t rx = RFM12B_RDFIFO();
 8000f34:	f000 fa3e 	bl	80013b4 <RFM12B_RDFIFO>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	717b      	strb	r3, [r7, #5]
		 		if (rx !=0){
 8000f3c:	797b      	ldrb	r3, [r7, #5]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <main+0x50>
		 			_delay_ms(10);
 8000f42:	200a      	movs	r0, #10
 8000f44:	f7ff fe70 	bl	8000c28 <_delay_ms>
		 		}

	 		}
	 		if (status & RFM12_STATUS_FFIT ){
 8000f48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	da00      	bge.n	8000f52 <main+0x5a>
	 			asm volatile ("nop");
 8000f50:	bf00      	nop
	 		}
	 		if (status & RFM12_STATUS_POR ){
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d000      	beq.n	8000f5e <main+0x66>
	 			asm volatile ("nop");
 8000f5c:	bf00      	nop
	 		}
	 		if (status & RFM12_STATUS_RGUR ){
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d000      	beq.n	8000f6a <main+0x72>
	 			asm volatile ("nop");
 8000f68:	bf00      	nop
	 		}
	 		if (status & RFM12_STATUS_FFOV ){
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d000      	beq.n	8000f76 <main+0x7e>
	 			asm volatile ("nop");
 8000f74:	bf00      	nop
	 		}
	 		if (status & RFM12_STATUS_WKUP ){
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d000      	beq.n	8000f82 <main+0x8a>
	 			asm volatile ("nop");
 8000f80:	bf00      	nop
	 		}
	 		if (status & RFM12_STATUS_EXT ){
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d000      	beq.n	8000f8e <main+0x96>
	 			asm volatile ("nop");
 8000f8c:	bf00      	nop
	 		}
	 		if (status & RFM12_STATUS_LBD ){
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d000      	beq.n	8000f9a <main+0xa2>
	 			asm volatile ("nop");
 8000f98:	bf00      	nop
	 		}
	 		if (status & RFM12_STATUS_FFEM ){
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d000      	beq.n	8000fa6 <main+0xae>
	 			asm volatile ("nop");
 8000fa4:	bf00      	nop
	 		}
	 		if (status & RFM12_STATUS_ATS ){
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d000      	beq.n	8000fb2 <main+0xba>
	 			asm volatile ("nop");
 8000fb0:	bf00      	nop
	 		}
	 		if (status & RFM12_STATUS_RSSI ){
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d000      	beq.n	8000fbe <main+0xc6>
	 			asm volatile ("nop");
 8000fbc:	bf00      	nop
	 		}
	 		if (status & RFM12_STATUS_DQD ){
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d000      	beq.n	8000fca <main+0xd2>
	 			asm volatile ("nop");
 8000fc8:	bf00      	nop
	 		}
	 		if (status & RFM12_STATUS_CRL ){
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d000      	beq.n	8000fd6 <main+0xde>
	 			asm volatile ("nop");
 8000fd4:	bf00      	nop
	 		}
	 		if (status & RFM12_STATUS_ATGL ){
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	f003 0320 	and.w	r3, r3, #32
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d000      	beq.n	8000fe2 <main+0xea>
	 			asm volatile ("nop");
 8000fe0:	bf00      	nop





			_delay_ms(100);
 8000fe2:	2064      	movs	r0, #100	; 0x64
 8000fe4:	f7ff fe20 	bl	8000c28 <_delay_ms>
	 	while (1){
 8000fe8:	e79b      	b.n	8000f22 <main+0x2a>
 8000fea:	bf00      	nop
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40013800 	.word	0x40013800

08000ff4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <NVIC_EnableIRQ+0x2c>)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	095b      	lsrs	r3, r3, #5
 8001006:	79fa      	ldrb	r2, [r7, #7]
 8001008:	f002 021f 	and.w	r2, r2, #31
 800100c:	2001      	movs	r0, #1
 800100e:	fa00 f202 	lsl.w	r2, r0, r2
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100

08001024 <EnableUart>:
#include "stm32f10x.h"
#include "platform.h"



void EnableUart (USART_TypeDef * usart){
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800102c:	4a18      	ldr	r2, [pc, #96]	; (8001090 <EnableUart+0x6c>)
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <EnableUart+0x6c>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001036:	6193      	str	r3, [r2, #24]
	usart->BRR = 72000000/115200;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f240 2271 	movw	r2, #625	; 0x271
 800103e:	811a      	strh	r2, [r3, #8]
	usart->CR1 |= USART_CR1_UE;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	899b      	ldrh	r3, [r3, #12]
 8001044:	b29b      	uxth	r3, r3
 8001046:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800104a:	b29a      	uxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_TE;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	899b      	ldrh	r3, [r3, #12]
 8001054:	b29b      	uxth	r3, r3
 8001056:	f043 0308 	orr.w	r3, r3, #8
 800105a:	b29a      	uxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_RE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	899b      	ldrh	r3, [r3, #12]
 8001064:	b29b      	uxth	r3, r3
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	819a      	strh	r2, [r3, #12]
	usart->CR3 |= USART_CR3_DMAT;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	8a9b      	ldrh	r3, [r3, #20]
 8001074:	b29b      	uxth	r3, r3
 8001076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107a:	b29a      	uxth	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	829a      	strh	r2, [r3, #20]

	NVIC_EnableIRQ(USART1_IRQn);
 8001080:	2025      	movs	r0, #37	; 0x25
 8001082:	f7ff ffb7 	bl	8000ff4 <NVIC_EnableIRQ>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000

08001094 <RFM_xfer>:
static uint8_t RFM_Buffer[512];
static uint16_t RFM_Idx;
static uint8_t RFM_Len;

uint16_t RFM_xfer(uint16_t d)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
	uint16_t ret;
	RFM_CS(Bit_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2102      	movs	r1, #2
 80010a2:	4809      	ldr	r0, [pc, #36]	; (80010c8 <RFM_xfer+0x34>)
 80010a4:	f7ff fb18 	bl	80006d8 <GPIO_WriteBit>

	ret = SPI_Xfer(d);
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f9de 	bl	800146c <SPI_Xfer>
 80010b0:	4603      	mov	r3, r0
 80010b2:	81fb      	strh	r3, [r7, #14]

	RFM_CS(Bit_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2102      	movs	r1, #2
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <RFM_xfer+0x34>)
 80010ba:	f7ff fb0d 	bl	80006d8 <GPIO_WriteBit>
	return ret;
 80010be:	89fb      	ldrh	r3, [r7, #14]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40010c00 	.word	0x40010c00

080010cc <RFM_SetFIFO>:
}

// g = 0 - receive all packets starting 2D.
//   > 0 - receive all packets starting 2D gg.
void RFM_SetFIFO(uint8_t g)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	if (g == 0) {
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d108      	bne.n	80010ee <RFM_SetFIFO+0x22>
		RFM_xfer(0xca8b); // fifo level 8, 1byte sync, !ff, dr
 80010dc:	f64c 208b 	movw	r0, #51851	; 0xca8b
 80010e0:	f7ff ffd8 	bl	8001094 <RFM_xfer>
		RFM_xfer(0xce2d); 
 80010e4:	f64c 602d 	movw	r0, #52781	; 0xce2d
 80010e8:	f7ff ffd4 	bl	8001094 <RFM_xfer>
	} else {
		RFM_xfer(0xca83); // fifo level 8, 2byte sync, !ff, dr
		RFM_xfer(0xce00 | g); 
	}
}
 80010ec:	e00b      	b.n	8001106 <RFM_SetFIFO+0x3a>
		RFM_xfer(0xca83); // fifo level 8, 2byte sync, !ff, dr
 80010ee:	f64c 2083 	movw	r0, #51843	; 0xca83
 80010f2:	f7ff ffcf 	bl	8001094 <RFM_xfer>
		RFM_xfer(0xce00 | g); 
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <RFM_SetFIFO+0x44>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ffc7 	bl	8001094 <RFM_xfer>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	ffffce00 	.word	0xffffce00

08001114 <RFM_IdleMode>:
		RFM_xfer(0xca83);
	}
}

void RFM_IdleMode()
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	RFM_SetFIFO(RFM_GroupID); // special ID
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <RFM_IdleMode+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ffd5 	bl	80010cc <RFM_SetFIFO>

	// enter idle mode
	RFM_xfer(RFM_IDLE_MODE);
 8001122:	f248 2009 	movw	r0, #33289	; 0x8209
 8001126:	f7ff ffb5 	bl	8001094 <RFM_xfer>

	state = RFM_STATE_IDLE;
 800112a:	4b03      	ldr	r3, [pc, #12]	; (8001138 <RFM_IdleMode+0x24>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000004 	.word	0x20000004
 8001138:	200000b0 	.word	0x200000b0

0800113c <EXTI1_IRQHandler>:
	return 0;
}


void EXTI1_IRQHandler(void)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
	static uint8_t chksum;
	static uint16_t status;
	static uint8_t data;

	EXTI_ClearITPendingBit(EXTI_Line1);
 8001142:	2002      	movs	r0, #2
 8001144:	f7ff f9e2 	bl	800050c <EXTI_ClearITPendingBit>

	status = RFM_xfer(0x0000);
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff ffa3 	bl	8001094 <RFM_xfer>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	4b5a      	ldr	r3, [pc, #360]	; (80012bc <EXTI1_IRQHandler+0x180>)
 8001154:	801a      	strh	r2, [r3, #0]

	// ignore LBD, EXT, WKUP, POR, FFOV 
	if (status & 0x8000) {
 8001156:	4b59      	ldr	r3, [pc, #356]	; (80012bc <EXTI1_IRQHandler+0x180>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	b21b      	sxth	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	f280 80aa 	bge.w	80012b6 <EXTI1_IRQHandler+0x17a>
		if ((state == RFM_STATE_SCAN) || (state == RFM_STATE_IDLE)) {
 8001162:	4b57      	ldr	r3, [pc, #348]	; (80012c0 <EXTI1_IRQHandler+0x184>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d003      	beq.n	8001172 <EXTI1_IRQHandler+0x36>
 800116a:	4b55      	ldr	r3, [pc, #340]	; (80012c0 <EXTI1_IRQHandler+0x184>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d108      	bne.n	8001184 <EXTI1_IRQHandler+0x48>
			data = RFM_xfer(RFM_RX_REG);
 8001172:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8001176:	f7ff ff8d 	bl	8001094 <RFM_xfer>
 800117a:	4603      	mov	r3, r0
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b51      	ldr	r3, [pc, #324]	; (80012c4 <EXTI1_IRQHandler+0x188>)
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e098      	b.n	80012b6 <EXTI1_IRQHandler+0x17a>
		} else if (state == RFM_STATE_SNIFF) {
 8001184:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <EXTI1_IRQHandler+0x184>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b03      	cmp	r3, #3
 800118a:	d127      	bne.n	80011dc <EXTI1_IRQHandler+0xa0>
			RFM_Buffer[RFM_Idx] = RFM_xfer(RFM_RX_REG);
 800118c:	4b4e      	ldr	r3, [pc, #312]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	461c      	mov	r4, r3
 8001192:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8001196:	f7ff ff7d 	bl	8001094 <RFM_xfer>
 800119a:	4603      	mov	r3, r0
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <EXTI1_IRQHandler+0x190>)
 80011a0:	551a      	strb	r2, [r3, r4]
			//Buf_PushByte(RFM_Buffer[RFM_Idx]);
			//Buf_Send();

			RFM_Idx ++;
 80011a2:	4b49      	ldr	r3, [pc, #292]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b47      	ldr	r3, [pc, #284]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 80011ac:	801a      	strh	r2, [r3, #0]
			if ((RFM_Idx > 2) && (3 + RFM_Buffer[2] + 1 == RFM_Idx)) {
 80011ae:	4b46      	ldr	r3, [pc, #280]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d97f      	bls.n	80012b6 <EXTI1_IRQHandler+0x17a>
 80011b6:	4b45      	ldr	r3, [pc, #276]	; (80012cc <EXTI1_IRQHandler+0x190>)
 80011b8:	789b      	ldrb	r3, [r3, #2]
 80011ba:	3304      	adds	r3, #4
 80011bc:	4a42      	ldr	r2, [pc, #264]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 80011be:	8812      	ldrh	r2, [r2, #0]
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d178      	bne.n	80012b6 <EXTI1_IRQHandler+0x17a>
				// restart receive
				RFM_xfer(RFM_IDLE_MODE);
 80011c4:	f248 2009 	movw	r0, #33289	; 0x8209
 80011c8:	f7ff ff64 	bl	8001094 <RFM_xfer>
				RFM_xfer(RFM_RECV_MODE);
 80011cc:	f248 20d9 	movw	r0, #33497	; 0x82d9
 80011d0:	f7ff ff60 	bl	8001094 <RFM_xfer>
				RFM_Idx = 0;
 80011d4:	4b3c      	ldr	r3, [pc, #240]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	801a      	strh	r2, [r3, #0]
 80011da:	e06c      	b.n	80012b6 <EXTI1_IRQHandler+0x17a>
			}
		} else if (state == RFM_STATE_RX) {
 80011dc:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <EXTI1_IRQHandler+0x184>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d13d      	bne.n	8001260 <EXTI1_IRQHandler+0x124>
			RFM_Buffer[RFM_Idx] = RFM_xfer(RFM_RX_REG);
 80011e4:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	461c      	mov	r4, r3
 80011ea:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80011ee:	f7ff ff51 	bl	8001094 <RFM_xfer>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b35      	ldr	r3, [pc, #212]	; (80012cc <EXTI1_IRQHandler+0x190>)
 80011f8:	551a      	strb	r2, [r3, r4]
			chksum += RFM_Buffer[RFM_Idx];
 80011fa:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	4b32      	ldr	r3, [pc, #200]	; (80012cc <EXTI1_IRQHandler+0x190>)
 8001202:	5c9a      	ldrb	r2, [r3, r2]
 8001204:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <EXTI1_IRQHandler+0x194>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4413      	add	r3, r2
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <EXTI1_IRQHandler+0x194>)
 800120e:	701a      	strb	r2, [r3, #0]
			RFM_Idx ++;
 8001210:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 800121a:	801a      	strh	r2, [r3, #0]

			if (RFM_Idx == 2) {
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d103      	bne.n	800122c <EXTI1_IRQHandler+0xf0>
				// get rssi
				ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 8001224:	2101      	movs	r1, #1
 8001226:	482b      	ldr	r0, [pc, #172]	; (80012d4 <EXTI1_IRQHandler+0x198>)
 8001228:	f7ff f954 	bl	80004d4 <ADC_SoftwareStartConvCmd>
			}
			if ((RFM_Idx > 2) && (3 + RFM_Buffer[2] + 1 == RFM_Idx)) {
 800122c:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d940      	bls.n	80012b6 <EXTI1_IRQHandler+0x17a>
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <EXTI1_IRQHandler+0x190>)
 8001236:	789b      	ldrb	r3, [r3, #2]
 8001238:	3304      	adds	r3, #4
 800123a:	4a23      	ldr	r2, [pc, #140]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 800123c:	8812      	ldrh	r2, [r2, #0]
 800123e:	4293      	cmp	r3, r2
 8001240:	d139      	bne.n	80012b6 <EXTI1_IRQHandler+0x17a>
				uint8_t c = ~chksum;
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <EXTI1_IRQHandler+0x194>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	43db      	mvns	r3, r3
 8001248:	71fb      	strb	r3, [r7, #7]
				if (c == RFM_Buffer[RFM_Idx]) {
 800124a:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <EXTI1_IRQHandler+0x190>)
 8001252:	5c9b      	ldrb	r3, [r3, r2]
 8001254:	79fa      	ldrb	r2, [r7, #7]
 8001256:	429a      	cmp	r2, r3
 8001258:	d12d      	bne.n	80012b6 <EXTI1_IRQHandler+0x17a>
					// RX done 
					RFM_IdleMode();
 800125a:	f7ff ff5b 	bl	8001114 <RFM_IdleMode>
 800125e:	e02a      	b.n	80012b6 <EXTI1_IRQHandler+0x17a>
					//Buf_Send();

					//Mdm_RfmRxDoneCb();
				}	
			}
		} else if (state == RFM_STATE_TX) {
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <EXTI1_IRQHandler+0x184>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b05      	cmp	r3, #5
 8001266:	d126      	bne.n	80012b6 <EXTI1_IRQHandler+0x17a>
			if (RFM_Idx == RFM_Len) {
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <EXTI1_IRQHandler+0x19c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b29a      	uxth	r2, r3
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d10d      	bne.n	8001292 <EXTI1_IRQHandler+0x156>
				RFM_xfer(RFM_RECV_MODE);
 8001276:	f248 20d9 	movw	r0, #33497	; 0x82d9
 800127a:	f7ff ff0b 	bl	8001094 <RFM_xfer>
				state = RFM_STATE_RX;
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <EXTI1_IRQHandler+0x184>)
 8001280:	2204      	movs	r2, #4
 8001282:	701a      	strb	r2, [r3, #0]
				RFM_Idx = 0;
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 8001286:	2200      	movs	r2, #0
 8001288:	801a      	strh	r2, [r3, #0]
				chksum = 0;
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <EXTI1_IRQHandler+0x194>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]

				//Mdm_RfmTxDoneCb();
				return;
 8001290:	e011      	b.n	80012b6 <EXTI1_IRQHandler+0x17a>
			}

			RFM_xfer(RFM_TX_REG | RFM_Buffer[RFM_Idx]);
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <EXTI1_IRQHandler+0x190>)
 800129a:	5c9b      	ldrb	r3, [r3, r2]
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <EXTI1_IRQHandler+0x1a0>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fef5 	bl	8001094 <RFM_xfer>
			RFM_Idx++;
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <EXTI1_IRQHandler+0x18c>)
 80012b4:	801a      	strh	r2, [r3, #0]
		} 
	}
}
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd90      	pop	{r4, r7, pc}
 80012bc:	200002b8 	.word	0x200002b8
 80012c0:	200000b0 	.word	0x200000b0
 80012c4:	200002ba 	.word	0x200002ba
 80012c8:	200002b4 	.word	0x200002b4
 80012cc:	200000b4 	.word	0x200000b4
 80012d0:	200002bb 	.word	0x200002bb
 80012d4:	40012400 	.word	0x40012400
 80012d8:	200002b6 	.word	0x200002b6
 80012dc:	ffffb800 	.word	0xffffb800

080012e0 <RFM12B_WriteCMD>:

uint16_t RFM12B_RDSTATUS(void);


void RFM12B_WriteCMD( uint16_t CMD )
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]


	NSEL_RFM12_DOWN;
 80012ea:	2102      	movs	r1, #2
 80012ec:	4811      	ldr	r0, [pc, #68]	; (8001334 <RFM12B_WriteCMD+0x54>)
 80012ee:	f7ff f9e5 	bl	80006bc <GPIO_ResetBits>
	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 80012f2:	bf00      	nop
 80012f4:	2102      	movs	r1, #2
 80012f6:	4810      	ldr	r0, [pc, #64]	; (8001338 <RFM12B_WriteCMD+0x58>)
 80012f8:	f7ff fabf 	bl	800087a <SPI_I2S_GetFlagStatus>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f8      	beq.n	80012f4 <RFM12B_WriteCMD+0x14>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI1, CMD);
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	4619      	mov	r1, r3
 8001306:	480c      	ldr	r0, [pc, #48]	; (8001338 <RFM12B_WriteCMD+0x58>)
 8001308:	f7ff fa7e 	bl	8000808 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 800130c:	bf00      	nop
 800130e:	2101      	movs	r1, #1
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <RFM12B_WriteCMD+0x58>)
 8001312:	f7ff fab2 	bl	800087a <SPI_I2S_GetFlagStatus>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f8      	beq.n	800130e <RFM12B_WriteCMD+0x2e>

	/* Return the byte read from the SPI bus */
	SPI_I2S_ReceiveData(SPI1);
 800131c:	4806      	ldr	r0, [pc, #24]	; (8001338 <RFM12B_WriteCMD+0x58>)
 800131e:	f7ff fa81 	bl	8000824 <SPI_I2S_ReceiveData>

	NSEL_RFM12_UP;
 8001322:	2102      	movs	r1, #2
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <RFM12B_WriteCMD+0x54>)
 8001326:	f7ff f9bb 	bl	80006a0 <GPIO_SetBits>

	return;
 800132a:	bf00      	nop

}
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40010c00 	.word	0x40010c00
 8001338:	40013000 	.word	0x40013000

0800133c <RFM12B_RXInit>:


}

void RFM12B_RXInit( void )
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	RFM12B_WriteCMD(0x80D8);//enable register,433MHz,12.5pF
 8001340:	f248 00d8 	movw	r0, #32984	; 0x80d8
 8001344:	f7ff ffcc 	bl	80012e0 <RFM12B_WriteCMD>
	RFM12B_WriteCMD(0x82D8);//enable receive,!PA
 8001348:	f248 20d8 	movw	r0, #33496	; 0x82d8
 800134c:	f7ff ffc8 	bl	80012e0 <RFM12B_WriteCMD>
	RFM12B_WriteCMD(0xA640);//
 8001350:	f24a 6040 	movw	r0, #42560	; 0xa640
 8001354:	f7ff ffc4 	bl	80012e0 <RFM12B_WriteCMD>
	RFM12B_WriteCMD(0xC647);//
 8001358:	f24c 6047 	movw	r0, #50759	; 0xc647
 800135c:	f7ff ffc0 	bl	80012e0 <RFM12B_WriteCMD>
	RFM12B_WriteCMD(0x94A0);//VDI,FAST,134kHz,0dBm,-103dBm
 8001360:	f249 40a0 	movw	r0, #38048	; 0x94a0
 8001364:	f7ff ffbc 	bl	80012e0 <RFM12B_WriteCMD>
	RFM12B_WriteCMD(0xC2AC);
 8001368:	f24c 20ac 	movw	r0, #49836	; 0xc2ac
 800136c:	f7ff ffb8 	bl	80012e0 <RFM12B_WriteCMD>
	RFM12B_WriteCMD(0XCC77);//
 8001370:	f64c 4077 	movw	r0, #52343	; 0xcc77
 8001374:	f7ff ffb4 	bl	80012e0 <RFM12B_WriteCMD>
	RFM12B_WriteCMD(0xCA80);
 8001378:	f64c 2080 	movw	r0, #51840	; 0xca80
 800137c:	f7ff ffb0 	bl	80012e0 <RFM12B_WriteCMD>
	RFM12B_WriteCMD(0xCA83);//FIFO8,SYNC,
 8001380:	f64c 2083 	movw	r0, #51843	; 0xca83
 8001384:	f7ff ffac 	bl	80012e0 <RFM12B_WriteCMD>
	RFM12B_WriteCMD(0xC49B);
 8001388:	f24c 409b 	movw	r0, #50331	; 0xc49b
 800138c:	f7ff ffa8 	bl	80012e0 <RFM12B_WriteCMD>
	RFM12B_WriteCMD(0x9850);//!mp,9810=30kHz,MAX OUT
 8001390:	f649 0050 	movw	r0, #38992	; 0x9850
 8001394:	f7ff ffa4 	bl	80012e0 <RFM12B_WriteCMD>
	RFM12B_WriteCMD(0xE000);//NOT USE
 8001398:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 800139c:	f7ff ffa0 	bl	80012e0 <RFM12B_WriteCMD>
	RFM12B_WriteCMD(0xC800);//NOT USE
 80013a0:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 80013a4:	f7ff ff9c 	bl	80012e0 <RFM12B_WriteCMD>
	RFM12B_WriteCMD(0xC000);//1.0MHz,2.2V
 80013a8:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80013ac:	f7ff ff98 	bl	80012e0 <RFM12B_WriteCMD>

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <RFM12B_RDFIFO>:

uint8_t RFM12B_RDFIFO(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
	uint8_t i, Result;

	NSEL_RFM12_DOWN;
 80013ba:	2102      	movs	r1, #2
 80013bc:	4812      	ldr	r0, [pc, #72]	; (8001408 <RFM12B_RDFIFO+0x54>)
 80013be:	f7ff f97d 	bl	80006bc <GPIO_ResetBits>

	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 80013c2:	bf00      	nop
 80013c4:	2102      	movs	r1, #2
 80013c6:	4811      	ldr	r0, [pc, #68]	; (800140c <RFM12B_RDFIFO+0x58>)
 80013c8:	f7ff fa57 	bl	800087a <SPI_I2S_GetFlagStatus>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f8      	beq.n	80013c4 <RFM12B_RDFIFO+0x10>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI1, 0xB000);
 80013d2:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <RFM12B_RDFIFO+0x58>)
 80013d8:	f7ff fa16 	bl	8000808 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 80013dc:	bf00      	nop
 80013de:	2101      	movs	r1, #1
 80013e0:	480a      	ldr	r0, [pc, #40]	; (800140c <RFM12B_RDFIFO+0x58>)
 80013e2:	f7ff fa4a 	bl	800087a <SPI_I2S_GetFlagStatus>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f8      	beq.n	80013de <RFM12B_RDFIFO+0x2a>

	/* Return the byte read from the SPI bus */
	Result = SPI_I2S_ReceiveData(SPI1);
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <RFM12B_RDFIFO+0x58>)
 80013ee:	f7ff fa19 	bl	8000824 <SPI_I2S_ReceiveData>
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]


	NSEL_RFM12_UP;
 80013f6:	2102      	movs	r1, #2
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <RFM12B_RDFIFO+0x54>)
 80013fa:	f7ff f951 	bl	80006a0 <GPIO_SetBits>

	return(Result);
 80013fe:	79fb      	ldrb	r3, [r7, #7]

}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40010c00 	.word	0x40010c00
 800140c:	40013000 	.word	0x40013000

08001410 <RFM12B_RDSTATUS>:




uint16_t RFM12B_RDSTATUS(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

	uint16_t Result;

	NSEL_RFM12_DOWN;
 8001416:	2102      	movs	r1, #2
 8001418:	4812      	ldr	r0, [pc, #72]	; (8001464 <RFM12B_RDSTATUS+0x54>)
 800141a:	f7ff f94f 	bl	80006bc <GPIO_ResetBits>

	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 800141e:	bf00      	nop
 8001420:	2102      	movs	r1, #2
 8001422:	4811      	ldr	r0, [pc, #68]	; (8001468 <RFM12B_RDSTATUS+0x58>)
 8001424:	f7ff fa29 	bl	800087a <SPI_I2S_GetFlagStatus>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f8      	beq.n	8001420 <RFM12B_RDSTATUS+0x10>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI1, 0x0000);
 800142e:	2100      	movs	r1, #0
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <RFM12B_RDSTATUS+0x58>)
 8001432:	f7ff f9e9 	bl	8000808 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 8001436:	bf00      	nop
 8001438:	2101      	movs	r1, #1
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <RFM12B_RDSTATUS+0x58>)
 800143c:	f7ff fa1d 	bl	800087a <SPI_I2S_GetFlagStatus>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f8      	beq.n	8001438 <RFM12B_RDSTATUS+0x28>

	/* Return the byte read from the SPI bus */
	Result = SPI_I2S_ReceiveData(SPI1);
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <RFM12B_RDSTATUS+0x58>)
 8001448:	f7ff f9ec 	bl	8000824 <SPI_I2S_ReceiveData>
 800144c:	4603      	mov	r3, r0
 800144e:	80fb      	strh	r3, [r7, #6]

	NSEL_RFM12_UP;
 8001450:	2102      	movs	r1, #2
 8001452:	4804      	ldr	r0, [pc, #16]	; (8001464 <RFM12B_RDSTATUS+0x54>)
 8001454:	f7ff f924 	bl	80006a0 <GPIO_SetBits>

	return(Result);
 8001458:	88fb      	ldrh	r3, [r7, #6]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40010c00 	.word	0x40010c00
 8001468:	40013000 	.word	0x40013000

0800146c <SPI_Xfer>:
	SPI_Cmd(SPI1, ENABLE);
}

/* Simple Byte transmit */
uint16_t SPI_Xfer(uint16_t data)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	80fb      	strh	r3, [r7, #6]
	while ((SPI1->SR & SPI_I2S_FLAG_TXE) == RESET);
 8001476:	bf00      	nop
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <SPI_Xfer+0x40>)
 800147a:	891b      	ldrh	r3, [r3, #8]
 800147c:	b29b      	uxth	r3, r3
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f8      	beq.n	8001478 <SPI_Xfer+0xc>

	// Send byte through the SPI1 peripheral
	SPI1->DR = data;
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <SPI_Xfer+0x40>)
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	8193      	strh	r3, [r2, #12]

	// Wait to receive a byte
	while ((SPI1->SR & SPI_I2S_FLAG_RXNE) == RESET);
 800148c:	bf00      	nop
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <SPI_Xfer+0x40>)
 8001490:	891b      	ldrh	r3, [r3, #8]
 8001492:	b29b      	uxth	r3, r3
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f8      	beq.n	800148e <SPI_Xfer+0x22>

	return SPI1->DR;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <SPI_Xfer+0x40>)
 800149e:	899b      	ldrh	r3, [r3, #12]
 80014a0:	b29b      	uxth	r3, r3
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40013000 	.word	0x40013000

080014b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014b6:	e003      	b.n	80014c0 <LoopCopyDataInit>

080014b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80014ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014be:	3104      	adds	r1, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014c0:	480b      	ldr	r0, [pc, #44]	; (80014f0 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80014c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014c8:	d3f6      	bcc.n	80014b8 <CopyDataInit>
	ldr	r2, =_sbss
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80014cc:	e002      	b.n	80014d4 <LoopFillZerobss>

080014ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014d0:	f842 3b04 	str.w	r3, [r2], #4

080014d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80014d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014d8:	d3f9      	bcc.n	80014ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014da:	f000 f82b 	bl	8001534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014de:	f000 f8e3 	bl	80016a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014e2:	f7ff fd09 	bl	8000ef8 <main>
	bx	lr
 80014e6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014e8:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80014ec:	08001738 	.word	0x08001738
	ldr	r0, =_sdata
 80014f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014f4:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 80014f8:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 80014fc:	200003c8 	.word	0x200003c8

08001500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC1_2_IRQHandler>

08001502 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001512:	e7fe      	b.n	8001512 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001518:	e7fe      	b.n	8001518 <MemManage_Handler+0x4>

0800151a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800151e:	e7fe      	b.n	800151e <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001524:	e7fe      	b.n	8001524 <UsageFault_Handler+0x4>

08001526 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
	...

08001534 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001538:	4a15      	ldr	r2, [pc, #84]	; (8001590 <SystemInit+0x5c>)
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <SystemInit+0x5c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001544:	4912      	ldr	r1, [pc, #72]	; (8001590 <SystemInit+0x5c>)
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <SystemInit+0x5c>)
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <SystemInit+0x60>)
 800154c:	4013      	ands	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001550:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <SystemInit+0x5c>)
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <SystemInit+0x5c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800155a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <SystemInit+0x5c>)
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <SystemInit+0x5c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800156c:	4a08      	ldr	r2, [pc, #32]	; (8001590 <SystemInit+0x5c>)
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <SystemInit+0x5c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001576:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <SystemInit+0x5c>)
 800157a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800157e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001580:	f000 f80c 	bl	800159c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SystemInit+0x64>)
 8001586:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800158a:	609a      	str	r2, [r3, #8]
#endif 
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000
 8001594:	f8ff0000 	.word	0xf8ff0000
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80015a0:	f000 f802 	bl	80015a8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80015b6:	4a3a      	ldr	r2, [pc, #232]	; (80016a0 <SetSysClockTo72+0xf8>)
 80015b8:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <SetSysClockTo72+0xf8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80015c2:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <SetSysClockTo72+0xf8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3301      	adds	r3, #1
 80015d0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d103      	bne.n	80015e0 <SetSysClockTo72+0x38>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80015de:	d1f0      	bne.n	80015c2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80015e0:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <SetSysClockTo72+0xf8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80015ec:	2301      	movs	r3, #1
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	e001      	b.n	80015f6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80015f2:	2300      	movs	r3, #0
 80015f4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d14b      	bne.n	8001694 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80015fc:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <SetSysClockTo72+0xfc>)
 80015fe:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <SetSysClockTo72+0xfc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001608:	4a26      	ldr	r2, [pc, #152]	; (80016a4 <SetSysClockTo72+0xfc>)
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <SetSysClockTo72+0xfc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 0303 	bic.w	r3, r3, #3
 8001612:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001614:	4a23      	ldr	r2, [pc, #140]	; (80016a4 <SetSysClockTo72+0xfc>)
 8001616:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <SetSysClockTo72+0xfc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f043 0302 	orr.w	r3, r3, #2
 800161e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001620:	4a1f      	ldr	r2, [pc, #124]	; (80016a0 <SetSysClockTo72+0xf8>)
 8001622:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <SetSysClockTo72+0xf8>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001628:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <SetSysClockTo72+0xf8>)
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <SetSysClockTo72+0xf8>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001630:	4a1b      	ldr	r2, [pc, #108]	; (80016a0 <SetSysClockTo72+0xf8>)
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <SetSysClockTo72+0xf8>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800163c:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <SetSysClockTo72+0xf8>)
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <SetSysClockTo72+0xf8>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001646:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001648:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <SetSysClockTo72+0xf8>)
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <SetSysClockTo72+0xf8>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001652:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001654:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <SetSysClockTo72+0xf8>)
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <SetSysClockTo72+0xf8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800165e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001660:	bf00      	nop
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <SetSysClockTo72+0xf8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f9      	beq.n	8001662 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800166e:	4a0c      	ldr	r2, [pc, #48]	; (80016a0 <SetSysClockTo72+0xf8>)
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <SetSysClockTo72+0xf8>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f023 0303 	bic.w	r3, r3, #3
 8001678:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <SetSysClockTo72+0xf8>)
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <SetSysClockTo72+0xf8>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001686:	bf00      	nop
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <SetSysClockTo72+0xf8>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d1f9      	bne.n	8001688 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40022000 	.word	0x40022000

080016a8 <__libc_init_array>:
 80016a8:	b570      	push	{r4, r5, r6, lr}
 80016aa:	2500      	movs	r5, #0
 80016ac:	4e0c      	ldr	r6, [pc, #48]	; (80016e0 <__libc_init_array+0x38>)
 80016ae:	4c0d      	ldr	r4, [pc, #52]	; (80016e4 <__libc_init_array+0x3c>)
 80016b0:	1ba4      	subs	r4, r4, r6
 80016b2:	10a4      	asrs	r4, r4, #2
 80016b4:	42a5      	cmp	r5, r4
 80016b6:	d109      	bne.n	80016cc <__libc_init_array+0x24>
 80016b8:	f000 f82e 	bl	8001718 <_init>
 80016bc:	2500      	movs	r5, #0
 80016be:	4e0a      	ldr	r6, [pc, #40]	; (80016e8 <__libc_init_array+0x40>)
 80016c0:	4c0a      	ldr	r4, [pc, #40]	; (80016ec <__libc_init_array+0x44>)
 80016c2:	1ba4      	subs	r4, r4, r6
 80016c4:	10a4      	asrs	r4, r4, #2
 80016c6:	42a5      	cmp	r5, r4
 80016c8:	d105      	bne.n	80016d6 <__libc_init_array+0x2e>
 80016ca:	bd70      	pop	{r4, r5, r6, pc}
 80016cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016d0:	4798      	blx	r3
 80016d2:	3501      	adds	r5, #1
 80016d4:	e7ee      	b.n	80016b4 <__libc_init_array+0xc>
 80016d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016da:	4798      	blx	r3
 80016dc:	3501      	adds	r5, #1
 80016de:	e7f2      	b.n	80016c6 <__libc_init_array+0x1e>
 80016e0:	08001730 	.word	0x08001730
 80016e4:	08001730 	.word	0x08001730
 80016e8:	08001730 	.word	0x08001730
 80016ec:	08001734 	.word	0x08001734

080016f0 <memcpy>:
 80016f0:	b510      	push	{r4, lr}
 80016f2:	1e43      	subs	r3, r0, #1
 80016f4:	440a      	add	r2, r1
 80016f6:	4291      	cmp	r1, r2
 80016f8:	d100      	bne.n	80016fc <memcpy+0xc>
 80016fa:	bd10      	pop	{r4, pc}
 80016fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001700:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001704:	e7f7      	b.n	80016f6 <memcpy+0x6>

08001706 <memset>:
 8001706:	4603      	mov	r3, r0
 8001708:	4402      	add	r2, r0
 800170a:	4293      	cmp	r3, r2
 800170c:	d100      	bne.n	8001710 <memset+0xa>
 800170e:	4770      	bx	lr
 8001710:	f803 1b01 	strb.w	r1, [r3], #1
 8001714:	e7f9      	b.n	800170a <memset+0x4>
	...

08001718 <_init>:
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171a:	bf00      	nop
 800171c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171e:	bc08      	pop	{r3}
 8001720:	469e      	mov	lr, r3
 8001722:	4770      	bx	lr

08001724 <_fini>:
 8001724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001726:	bf00      	nop
 8001728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800172a:	bc08      	pop	{r3}
 800172c:	469e      	mov	lr, r3
 800172e:	4770      	bx	lr
