
home_control_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080046e8  080046e8  000146e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  080047fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000140  20000068  08004864  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00001000  200001a8  08004864  000201a8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fc62  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000287c  00000000  00000000  0002fcf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b18  00000000  00000000  00032570  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e0  00000000  00000000  00033088  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000050aa  00000000  00000000  00033a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a38  00000000  00000000  00038b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003c54a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002c38  00000000  00000000  0003c5c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080046d0 	.word	0x080046d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080046d0 	.word	0x080046d0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8000168:	f000 fe96 	bl	8000e98 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800016c:	6878      	ldr	r0, [r7, #4]
 800016e:	f004 f9c1 	bl	80044f4 <malloc>
 8000172:	4603      	mov	r3, r0
 8000174:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000176:	f000 fe9d 	bl	8000eb4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800017a:	68fb      	ldr	r3, [r7, #12]
}
 800017c:	4618      	mov	r0, r3
 800017e:	3710      	adds	r7, #16
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	if( pv )
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d006      	beq.n	80001a0 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8000192:	f000 fe81 	bl	8000e98 <vTaskSuspendAll>
		{
			free( pv );
 8000196:	6878      	ldr	r0, [r7, #4]
 8000198:	f004 f9b4 	bl	8004504 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800019c:	f000 fe8a 	bl	8000eb4 <xTaskResumeAll>
	}
}
 80001a0:	bf00      	nop
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}

080001a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	f103 0208 	add.w	r2, r3, #8
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80001c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f103 0208 	add.w	r2, r3, #8
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	f103 0208 	add.w	r2, r3, #8
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr

080001e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001e6:	b480      	push	{r7}
 80001e8:	b083      	sub	sp, #12
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2200      	movs	r2, #0
 80001f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr

080001fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001fe:	b480      	push	{r7}
 8000200:	b085      	sub	sp, #20
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
 8000206:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	68fa      	ldr	r2, [r7, #12]
 8000212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	689a      	ldr	r2, [r3, #8]
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	683a      	ldr	r2, [r7, #0]
 8000222:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	683a      	ldr	r2, [r7, #0]
 8000228:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]
}
 800023a:	bf00      	nop
 800023c:	3714      	adds	r7, #20
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800025a:	d103      	bne.n	8000264 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	691b      	ldr	r3, [r3, #16]
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	e00c      	b.n	800027e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3308      	adds	r3, #8
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	e002      	b.n	8000272 <vListInsert+0x2e>
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	429a      	cmp	r2, r3
 800027c:	d9f6      	bls.n	800026c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	685a      	ldr	r2, [r3, #4]
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	683a      	ldr	r2, [r7, #0]
 800028c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	1c5a      	adds	r2, r3, #1
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	601a      	str	r2, [r3, #0]
}
 80002aa:	bf00      	nop
 80002ac:	3714      	adds	r7, #20
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr

080002b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	691b      	ldr	r3, [r3, #16]
 80002c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	687a      	ldr	r2, [r7, #4]
 80002c8:	6892      	ldr	r2, [r2, #8]
 80002ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	6852      	ldr	r2, [r2, #4]
 80002d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	685a      	ldr	r2, [r3, #4]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d103      	bne.n	80002e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	1e5a      	subs	r2, r3, #1
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	681b      	ldr	r3, [r3, #0]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
	...

08000308 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	3b04      	subs	r3, #4
 8000318:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	3b04      	subs	r3, #4
 8000326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	f023 0201 	bic.w	r2, r3, #1
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	3b04      	subs	r3, #4
 8000336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000338:	4a08      	ldr	r2, [pc, #32]	; (800035c <pxPortInitialiseStack+0x54>)
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	3b14      	subs	r3, #20
 8000342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	3b20      	subs	r3, #32
 800034e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000350:	68fb      	ldr	r3, [r7, #12]
}
 8000352:	4618      	mov	r0, r3
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	08000361 	.word	0x08000361

08000360 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000366:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800036a:	f383 8811 	msr	BASEPRI, r3
 800036e:	f3bf 8f6f 	isb	sy
 8000372:	f3bf 8f4f 	dsb	sy
 8000376:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 8000378:	e7fe      	b.n	8000378 <prvTaskExitError+0x18>
 800037a:	0000      	movs	r0, r0
 800037c:	0000      	movs	r0, r0
	...

08000380 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <pxCurrentTCBConst2>)
 8000382:	6819      	ldr	r1, [r3, #0]
 8000384:	6808      	ldr	r0, [r1, #0]
 8000386:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800038a:	f380 8809 	msr	PSP, r0
 800038e:	f3bf 8f6f 	isb	sy
 8000392:	f04f 0000 	mov.w	r0, #0
 8000396:	f380 8811 	msr	BASEPRI, r0
 800039a:	f04e 0e0d 	orr.w	lr, lr, #13
 800039e:	4770      	bx	lr

080003a0 <pxCurrentTCBConst2>:
 80003a0:	20000084 	.word	0x20000084
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80003a4:	bf00      	nop
 80003a6:	bf00      	nop

080003a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80003a8:	4806      	ldr	r0, [pc, #24]	; (80003c4 <prvPortStartFirstTask+0x1c>)
 80003aa:	6800      	ldr	r0, [r0, #0]
 80003ac:	6800      	ldr	r0, [r0, #0]
 80003ae:	f380 8808 	msr	MSP, r0
 80003b2:	b662      	cpsie	i
 80003b4:	b661      	cpsie	f
 80003b6:	f3bf 8f4f 	dsb	sy
 80003ba:	f3bf 8f6f 	isb	sy
 80003be:	df00      	svc	0
 80003c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80003c2:	bf00      	nop
 80003c4:	e000ed08 	.word	0xe000ed08

080003c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80003cc:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <xPortStartScheduler+0x34>)
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <xPortStartScheduler+0x34>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80003d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80003d8:	4a08      	ldr	r2, [pc, #32]	; (80003fc <xPortStartScheduler+0x34>)
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <xPortStartScheduler+0x34>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80003e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80003e4:	f000 f888 	bl	80004f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <xPortStartScheduler+0x38>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80003ee:	f7ff ffdb 	bl	80003a8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80003f2:	f7ff ffb5 	bl	8000360 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80003f6:	2300      	movs	r3, #0
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	e000ed20 	.word	0xe000ed20
 8000400:	20000000 	.word	0x20000000

08000404 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800040e:	f383 8811 	msr	BASEPRI, r3
 8000412:	f3bf 8f6f 	isb	sy
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <vPortEnterCritical+0x2c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	3301      	adds	r3, #1
 8000422:	4a03      	ldr	r2, [pc, #12]	; (8000430 <vPortEnterCritical+0x2c>)
 8000424:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	20000000 	.word	0x20000000

08000434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <vPortExitCritical+0x2c>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	3b01      	subs	r3, #1
 8000440:	4a07      	ldr	r2, [pc, #28]	; (8000460 <vPortExitCritical+0x2c>)
 8000442:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <vPortExitCritical+0x2c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d104      	bne.n	8000456 <vPortExitCritical+0x22>
 800044c:	2300      	movs	r3, #0
 800044e:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	20000000 	.word	0x20000000
	...

08000470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000470:	f3ef 8009 	mrs	r0, PSP
 8000474:	f3bf 8f6f 	isb	sy
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <pxCurrentTCBConst>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000480:	6010      	str	r0, [r2, #0]
 8000482:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000486:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800048a:	f380 8811 	msr	BASEPRI, r0
 800048e:	f000 fe59 	bl	8001144 <vTaskSwitchContext>
 8000492:	f04f 0000 	mov.w	r0, #0
 8000496:	f380 8811 	msr	BASEPRI, r0
 800049a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800049e:	6819      	ldr	r1, [r3, #0]
 80004a0:	6808      	ldr	r0, [r1, #0]
 80004a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80004a6:	f380 8809 	msr	PSP, r0
 80004aa:	f3bf 8f6f 	isb	sy
 80004ae:	4770      	bx	lr

080004b0 <pxCurrentTCBConst>:
 80004b0:	20000084 	.word	0x20000084
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80004b4:	bf00      	nop
 80004b6:	bf00      	nop

080004b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
	__asm volatile
 80004be:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80004c2:	f383 8811 	msr	BASEPRI, r3
 80004c6:	f3bf 8f6f 	isb	sy
 80004ca:	f3bf 8f4f 	dsb	sy
 80004ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80004d0:	f000 fd8c 	bl	8000fec <xTaskIncrementTick>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d003      	beq.n	80004e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <SysTick_Handler+0x3c>)
 80004dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	2300      	movs	r3, #0
 80004e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	e000ed04 	.word	0xe000ed04

080004f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <vPortSetupTimerInterrupt+0x18>)
 80004fe:	4a05      	ldr	r2, [pc, #20]	; (8000514 <vPortSetupTimerInterrupt+0x1c>)
 8000500:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <vPortSetupTimerInterrupt+0x20>)
 8000504:	2207      	movs	r2, #7
 8000506:	601a      	str	r2, [r3, #0]
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	e000e014 	.word	0xe000e014
 8000514:	0001193f 	.word	0x0001193f
 8000518:	e000e010 	.word	0xe000e010

0800051c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 800052a:	f7ff ff6b 	bl	8000404 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000536:	68f9      	ldr	r1, [r7, #12]
 8000538:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800053a:	fb01 f303 	mul.w	r3, r1, r3
 800053e:	441a      	add	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	2200      	movs	r2, #0
 8000548:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800055a:	3b01      	subs	r3, #1
 800055c:	68f9      	ldr	r1, [r7, #12]
 800055e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000560:	fb01 f303 	mul.w	r3, r1, r3
 8000564:	441a      	add	r2, r3
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	22ff      	movs	r2, #255	; 0xff
 800056e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	22ff      	movs	r2, #255	; 0xff
 8000576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d114      	bne.n	80005aa <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	691b      	ldr	r3, [r3, #16]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d01a      	beq.n	80005be <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3310      	adds	r3, #16
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fe35 	bl	80011fc <xTaskRemoveFromEventList>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d012      	beq.n	80005be <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <xQueueGenericReset+0xb0>)
 800059a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	f3bf 8f4f 	dsb	sy
 80005a4:	f3bf 8f6f 	isb	sy
 80005a8:	e009      	b.n	80005be <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	3310      	adds	r3, #16
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fdfa 	bl	80001a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3324      	adds	r3, #36	; 0x24
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fdf5 	bl	80001a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80005be:	f7ff ff39 	bl	8000434 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80005c2:	2301      	movs	r3, #1
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	e000ed04 	.word	0xe000ed04

080005d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	4613      	mov	r3, r2
 80005dc:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d102      	bne.n	80005ea <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
 80005e8:	e004      	b.n	80005f4 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	fb02 f303 	mul.w	r3, r2, r3
 80005f2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	3350      	adds	r3, #80	; 0x50
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fdb1 	bl	8000160 <pvPortMalloc>
 80005fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d00b      	beq.n	800061e <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	3350      	adds	r3, #80	; 0x50
 800060a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800060c:	79fa      	ldrb	r2, [r7, #7]
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	4613      	mov	r3, r2
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	68b9      	ldr	r1, [r7, #8]
 8000618:	68f8      	ldr	r0, [r7, #12]
 800061a:	f000 f805 	bl	8000628 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800061e:	69bb      	ldr	r3, [r7, #24]
	}
 8000620:	4618      	mov	r0, r3
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
 8000634:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d103      	bne.n	8000644 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	69ba      	ldr	r2, [r7, #24]
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	e002      	b.n	800064a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000656:	2101      	movs	r1, #1
 8000658:	69b8      	ldr	r0, [r7, #24]
 800065a:	f7ff ff5f 	bl	800051c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	78fa      	ldrb	r2, [r7, #3]
 8000662:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800067e:	2300      	movs	r3, #0
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000686:	f7ff febd 	bl	8000404 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800068a:	6a3b      	ldr	r3, [r7, #32]
 800068c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800068e:	6a3b      	ldr	r3, [r7, #32]
 8000690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000692:	429a      	cmp	r2, r3
 8000694:	d302      	bcc.n	800069c <xQueueGenericSend+0x2c>
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b02      	cmp	r3, #2
 800069a:	d129      	bne.n	80006f0 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	68b9      	ldr	r1, [r7, #8]
 80006a0:	6a38      	ldr	r0, [r7, #32]
 80006a2:	f000 f967 	bl	8000974 <prvCopyDataToQueue>
 80006a6:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80006a8:	6a3b      	ldr	r3, [r7, #32]
 80006aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d010      	beq.n	80006d2 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80006b0:	6a3b      	ldr	r3, [r7, #32]
 80006b2:	3324      	adds	r3, #36	; 0x24
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fda1 	bl	80011fc <xTaskRemoveFromEventList>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d013      	beq.n	80006e8 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80006c0:	4b3f      	ldr	r3, [pc, #252]	; (80007c0 <xQueueGenericSend+0x150>)
 80006c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	f3bf 8f4f 	dsb	sy
 80006cc:	f3bf 8f6f 	isb	sy
 80006d0:	e00a      	b.n	80006e8 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d007      	beq.n	80006e8 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80006d8:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <xQueueGenericSend+0x150>)
 80006da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	f3bf 8f4f 	dsb	sy
 80006e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80006e8:	f7ff fea4 	bl	8000434 <vPortExitCritical>
				return pdPASS;
 80006ec:	2301      	movs	r3, #1
 80006ee:	e063      	b.n	80007b8 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d103      	bne.n	80006fe <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80006f6:	f7ff fe9d 	bl	8000434 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e05c      	b.n	80007b8 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 80006fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000700:	2b00      	cmp	r3, #0
 8000702:	d106      	bne.n	8000712 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fdcb 	bl	80012a4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800070e:	2301      	movs	r3, #1
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000712:	f7ff fe8f 	bl	8000434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000716:	f000 fbbf 	bl	8000e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800071a:	f7ff fe73 	bl	8000404 <vPortEnterCritical>
 800071e:	6a3b      	ldr	r3, [r7, #32]
 8000720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000724:	b25b      	sxtb	r3, r3
 8000726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800072a:	d103      	bne.n	8000734 <xQueueGenericSend+0xc4>
 800072c:	6a3b      	ldr	r3, [r7, #32]
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000734:	6a3b      	ldr	r3, [r7, #32]
 8000736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800073a:	b25b      	sxtb	r3, r3
 800073c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000740:	d103      	bne.n	800074a <xQueueGenericSend+0xda>
 8000742:	6a3b      	ldr	r3, [r7, #32]
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800074a:	f7ff fe73 	bl	8000434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800074e:	1d3a      	adds	r2, r7, #4
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fdba 	bl	80012d0 <xTaskCheckForTimeOut>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d124      	bne.n	80007ac <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000762:	6a38      	ldr	r0, [r7, #32]
 8000764:	f000 f9fe 	bl	8000b64 <prvIsQueueFull>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d018      	beq.n	80007a0 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	3310      	adds	r3, #16
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	4611      	mov	r1, r2
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fd2a 	bl	80011d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800077c:	6a38      	ldr	r0, [r7, #32]
 800077e:	f000 f989 	bl	8000a94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000782:	f000 fb97 	bl	8000eb4 <xTaskResumeAll>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	f47f af7c 	bne.w	8000686 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <xQueueGenericSend+0x150>)
 8000790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	f3bf 8f4f 	dsb	sy
 800079a:	f3bf 8f6f 	isb	sy
 800079e:	e772      	b.n	8000686 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80007a0:	6a38      	ldr	r0, [r7, #32]
 80007a2:	f000 f977 	bl	8000a94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80007a6:	f000 fb85 	bl	8000eb4 <xTaskResumeAll>
 80007aa:	e76c      	b.n	8000686 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80007ac:	6a38      	ldr	r0, [r7, #32]
 80007ae:	f000 f971 	bl	8000a94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80007b2:	f000 fb7f 	bl	8000eb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80007b6:	2300      	movs	r3, #0
		}
	}
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3728      	adds	r7, #40	; 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	e000ed04 	.word	0xe000ed04

080007c4 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80007da:	f7ff fe13 	bl	8000404 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80007de:	6a3b      	ldr	r3, [r7, #32]
 80007e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007e2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d046      	beq.n	8000878 <xQueueGenericReceive+0xb4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80007ea:	6a3b      	ldr	r3, [r7, #32]
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80007f0:	68b9      	ldr	r1, [r7, #8]
 80007f2:	6a38      	ldr	r0, [r7, #32]
 80007f4:	f000 f928 	bl	8000a48 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d121      	bne.n	8000842 <xQueueGenericReceive+0x7e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	1e5a      	subs	r2, r3, #1
 8000802:	6a3b      	ldr	r3, [r7, #32]
 8000804:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d104      	bne.n	8000818 <xQueueGenericReceive+0x54>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800080e:	f000 ff51 	bl	80016b4 <pvTaskIncrementMutexHeldCount>
 8000812:	4602      	mov	r2, r0
 8000814:	6a3b      	ldr	r3, [r7, #32]
 8000816:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	691b      	ldr	r3, [r3, #16]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d027      	beq.n	8000870 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000820:	6a3b      	ldr	r3, [r7, #32]
 8000822:	3310      	adds	r3, #16
 8000824:	4618      	mov	r0, r3
 8000826:	f000 fce9 	bl	80011fc <xTaskRemoveFromEventList>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d01f      	beq.n	8000870 <xQueueGenericReceive+0xac>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8000830:	4b4f      	ldr	r3, [pc, #316]	; (8000970 <xQueueGenericReceive+0x1ac>)
 8000832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	f3bf 8f4f 	dsb	sy
 800083c:	f3bf 8f6f 	isb	sy
 8000840:	e016      	b.n	8000870 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8000842:	6a3b      	ldr	r3, [r7, #32]
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000848:	6a3b      	ldr	r3, [r7, #32]
 800084a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00f      	beq.n	8000870 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000850:	6a3b      	ldr	r3, [r7, #32]
 8000852:	3324      	adds	r3, #36	; 0x24
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fcd1 	bl	80011fc <xTaskRemoveFromEventList>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d007      	beq.n	8000870 <xQueueGenericReceive+0xac>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8000860:	4b43      	ldr	r3, [pc, #268]	; (8000970 <xQueueGenericReceive+0x1ac>)
 8000862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	f3bf 8f4f 	dsb	sy
 800086c:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8000870:	f7ff fde0 	bl	8000434 <vPortExitCritical>
				return pdPASS;
 8000874:	2301      	movs	r3, #1
 8000876:	e077      	b.n	8000968 <xQueueGenericReceive+0x1a4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d103      	bne.n	8000886 <xQueueGenericReceive+0xc2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800087e:	f7ff fdd9 	bl	8000434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000882:	2300      	movs	r3, #0
 8000884:	e070      	b.n	8000968 <xQueueGenericReceive+0x1a4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000888:	2b00      	cmp	r3, #0
 800088a:	d106      	bne.n	800089a <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fd07 	bl	80012a4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000896:	2301      	movs	r3, #1
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800089a:	f7ff fdcb 	bl	8000434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800089e:	f000 fafb 	bl	8000e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80008a2:	f7ff fdaf 	bl	8000404 <vPortEnterCritical>
 80008a6:	6a3b      	ldr	r3, [r7, #32]
 80008a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008b2:	d103      	bne.n	80008bc <xQueueGenericReceive+0xf8>
 80008b4:	6a3b      	ldr	r3, [r7, #32]
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80008bc:	6a3b      	ldr	r3, [r7, #32]
 80008be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008c8:	d103      	bne.n	80008d2 <xQueueGenericReceive+0x10e>
 80008ca:	6a3b      	ldr	r3, [r7, #32]
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80008d2:	f7ff fdaf 	bl	8000434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80008d6:	1d3a      	adds	r2, r7, #4
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fcf6 	bl	80012d0 <xTaskCheckForTimeOut>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d131      	bne.n	800094e <xQueueGenericReceive+0x18a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80008ea:	6a38      	ldr	r0, [r7, #32]
 80008ec:	f000 f924 	bl	8000b38 <prvIsQueueEmpty>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d025      	beq.n	8000942 <xQueueGenericReceive+0x17e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d108      	bne.n	8000910 <xQueueGenericReceive+0x14c>
					{
						taskENTER_CRITICAL();
 80008fe:	f7ff fd81 	bl	8000404 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fdfa 	bl	8001500 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800090c:	f7ff fd92 	bl	8000434 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000910:	6a3b      	ldr	r3, [r7, #32]
 8000912:	3324      	adds	r3, #36	; 0x24
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f000 fc59 	bl	80011d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800091e:	6a38      	ldr	r0, [r7, #32]
 8000920:	f000 f8b8 	bl	8000a94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000924:	f000 fac6 	bl	8000eb4 <xTaskResumeAll>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	f47f af55 	bne.w	80007da <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <xQueueGenericReceive+0x1ac>)
 8000932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	f3bf 8f4f 	dsb	sy
 800093c:	f3bf 8f6f 	isb	sy
 8000940:	e74b      	b.n	80007da <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000942:	6a38      	ldr	r0, [r7, #32]
 8000944:	f000 f8a6 	bl	8000a94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000948:	f000 fab4 	bl	8000eb4 <xTaskResumeAll>
 800094c:	e745      	b.n	80007da <xQueueGenericReceive+0x16>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800094e:	6a38      	ldr	r0, [r7, #32]
 8000950:	f000 f8a0 	bl	8000a94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000954:	f000 faae 	bl	8000eb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000958:	6a38      	ldr	r0, [r7, #32]
 800095a:	f000 f8ed 	bl	8000b38 <prvIsQueueEmpty>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	f43f af3a 	beq.w	80007da <xQueueGenericReceive+0x16>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000966:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8000968:	4618      	mov	r0, r3
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	e000ed04 	.word	0xe000ed04

08000974 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000988:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	2b00      	cmp	r3, #0
 8000990:	d10d      	bne.n	80009ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d14d      	bne.n	8000a36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fe24 	bl	80015ec <xTaskPriorityDisinherit>
 80009a4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	e043      	b.n	8000a36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d119      	bne.n	80009e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	6898      	ldr	r0, [r3, #8]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	461a      	mov	r2, r3
 80009be:	68b9      	ldr	r1, [r7, #8]
 80009c0:	f003 fda8 	bl	8004514 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	689a      	ldr	r2, [r3, #8]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	441a      	add	r2, r3
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d32b      	bcc.n	8000a36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	e026      	b.n	8000a36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	68d8      	ldr	r0, [r3, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	461a      	mov	r2, r3
 80009f2:	68b9      	ldr	r1, [r7, #8]
 80009f4:	f003 fd8e 	bl	8004514 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	68da      	ldr	r2, [r3, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	425b      	negs	r3, r3
 8000a02:	441a      	add	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	68da      	ldr	r2, [r3, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d207      	bcs.n	8000a24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	685a      	ldr	r2, [r3, #4]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	425b      	negs	r3, r3
 8000a1e:	441a      	add	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d105      	bne.n	8000a36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	1c5a      	adds	r2, r3, #1
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000a3e:	697b      	ldr	r3, [r7, #20]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d018      	beq.n	8000a8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	68da      	ldr	r2, [r3, #12]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	441a      	add	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	68da      	ldr	r2, [r3, #12]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d303      	bcc.n	8000a7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68d9      	ldr	r1, [r3, #12]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	461a      	mov	r2, r3
 8000a86:	6838      	ldr	r0, [r7, #0]
 8000a88:	f003 fd44 	bl	8004514 <memcpy>
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000a9c:	f7ff fcb2 	bl	8000404 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000aa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000aa8:	e011      	b.n	8000ace <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d012      	beq.n	8000ad8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3324      	adds	r3, #36	; 0x24
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fba0 	bl	80011fc <xTaskRemoveFromEventList>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8000ac2:	f000 fc49 	bl	8001358 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	dce9      	bgt.n	8000aaa <prvUnlockQueue+0x16>
 8000ad6:	e000      	b.n	8000ada <prvUnlockQueue+0x46>
					break;
 8000ad8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	22ff      	movs	r2, #255	; 0xff
 8000ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8000ae2:	f7ff fca7 	bl	8000434 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000ae6:	f7ff fc8d 	bl	8000404 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000af0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000af2:	e011      	b.n	8000b18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d012      	beq.n	8000b22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3310      	adds	r3, #16
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 fb7b 	bl	80011fc <xTaskRemoveFromEventList>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8000b0c:	f000 fc24 	bl	8001358 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	dce9      	bgt.n	8000af4 <prvUnlockQueue+0x60>
 8000b20:	e000      	b.n	8000b24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8000b22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	22ff      	movs	r2, #255	; 0xff
 8000b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8000b2c:	f7ff fc82 	bl	8000434 <vPortExitCritical>
}
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000b40:	f7ff fc60 	bl	8000404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	e001      	b.n	8000b56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000b56:	f7ff fc6d 	bl	8000434 <vPortExitCritical>

	return xReturn;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000b6c:	f7ff fc4a 	bl	8000404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d102      	bne.n	8000b82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	e001      	b.n	8000b86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000b86:	f7ff fc55 	bl	8000434 <vPortExitCritical>

	return xReturn;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af04      	add	r7, sp, #16
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fad9 	bl	8000160 <pvPortMalloc>
 8000bae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00e      	beq.n	8000bd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8000bb6:	205c      	movs	r0, #92	; 0x5c
 8000bb8:	f7ff fad2 	bl	8000160 <pvPortMalloc>
 8000bbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8000bca:	e005      	b.n	8000bd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000bcc:	6978      	ldr	r0, [r7, #20]
 8000bce:	f7ff fad9 	bl	8000184 <vPortFree>
 8000bd2:	e001      	b.n	8000bd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d013      	beq.n	8000c06 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000bde:	88fa      	ldrh	r2, [r7, #6]
 8000be0:	2300      	movs	r3, #0
 8000be2:	9303      	str	r3, [sp, #12]
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	9302      	str	r3, [sp, #8]
 8000be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bea:	9301      	str	r3, [sp, #4]
 8000bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68b9      	ldr	r1, [r7, #8]
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f000 f80e 	bl	8000c16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000bfa:	69f8      	ldr	r0, [r7, #28]
 8000bfc:	f000 f882 	bl	8000d04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	e002      	b.n	8000c0c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000c0c:	69bb      	ldr	r3, [r7, #24]
	}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	21a5      	movs	r1, #165	; 0xa5
 8000c30:	f003 fc7b 	bl	800452a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8000c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	f023 0307 	bic.w	r3, r3, #7
 8000c4c:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e012      	b.n	8000c7a <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000c54:	68ba      	ldr	r2, [r7, #8]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	4413      	add	r3, r2
 8000c5a:	7819      	ldrb	r1, [r3, #0]
 8000c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	4413      	add	r3, r2
 8000c62:	3334      	adds	r3, #52	; 0x34
 8000c64:	460a      	mov	r2, r1
 8000c66:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d006      	beq.n	8000c82 <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	3301      	adds	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d9e9      	bls.n	8000c54 <prvInitialiseNewTask+0x3e>
 8000c80:	e000      	b.n	8000c84 <prvInitialiseNewTask+0x6e>
		{
			break;
 8000c82:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d901      	bls.n	8000c96 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000c92:	2304      	movs	r3, #4
 8000c94:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c98:	6a3a      	ldr	r2, [r7, #32]
 8000c9a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c9e:	6a3a      	ldr	r2, [r7, #32]
 8000ca0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8000ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000caa:	3304      	adds	r3, #4
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fa9a 	bl	80001e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb4:	3318      	adds	r3, #24
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fa95 	bl	80001e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cc0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	f1c3 0205 	rsb	r2, r3, #5
 8000cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	68f9      	ldr	r1, [r7, #12]
 8000ce4:	6938      	ldr	r0, [r7, #16]
 8000ce6:	f7ff fb0f 	bl	8000308 <pxPortInitialiseStack>
 8000cea:	4602      	mov	r2, r0
 8000cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cfa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000d0c:	f7ff fb7a 	bl	8000404 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000d10:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <prvAddNewTaskToReadyList+0xc0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	4a2b      	ldr	r2, [pc, #172]	; (8000dc4 <prvAddNewTaskToReadyList+0xc0>)
 8000d18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000d1a:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <prvAddNewTaskToReadyList+0xc4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d109      	bne.n	8000d36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000d22:	4a29      	ldr	r2, [pc, #164]	; (8000dc8 <prvAddNewTaskToReadyList+0xc4>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000d28:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <prvAddNewTaskToReadyList+0xc0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d110      	bne.n	8000d52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000d30:	f000 fb36 	bl	80013a0 <prvInitialiseTaskLists>
 8000d34:	e00d      	b.n	8000d52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000d36:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <prvAddNewTaskToReadyList+0xc8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d109      	bne.n	8000d52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <prvAddNewTaskToReadyList+0xc4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d802      	bhi.n	8000d52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000d4c:	4a1e      	ldr	r2, [pc, #120]	; (8000dc8 <prvAddNewTaskToReadyList+0xc4>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <prvAddNewTaskToReadyList+0xcc>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <prvAddNewTaskToReadyList+0xcc>)
 8000d5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <prvAddNewTaskToReadyList+0xcc>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d68:	2201      	movs	r2, #1
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <prvAddNewTaskToReadyList+0xd0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	4a18      	ldr	r2, [pc, #96]	; (8000dd4 <prvAddNewTaskToReadyList+0xd0>)
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <prvAddNewTaskToReadyList+0xd4>)
 8000d84:	441a      	add	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	f7ff fa36 	bl	80001fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000d92:	f7ff fb4f 	bl	8000434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <prvAddNewTaskToReadyList+0xc8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d00e      	beq.n	8000dbc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <prvAddNewTaskToReadyList+0xc4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <prvAddNewTaskToReadyList+0xd8>)
 8000dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	f3bf 8f4f 	dsb	sy
 8000db8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2000015c 	.word	0x2000015c
 8000dc8:	20000084 	.word	0x20000084
 8000dcc:	20000168 	.word	0x20000168
 8000dd0:	20000178 	.word	0x20000178
 8000dd4:	20000164 	.word	0x20000164
 8000dd8:	20000088 	.word	0x20000088
 8000ddc:	e000ed04 	.word	0xe000ed04

08000de0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d008      	beq.n	8000e04 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8000df2:	f000 f851 	bl	8000e98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000df6:	2100      	movs	r1, #0
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 fc6f 	bl	80016dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000dfe:	f000 f859 	bl	8000eb4 <xTaskResumeAll>
 8000e02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d107      	bne.n	8000e1a <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <vTaskDelay+0x44>)
 8000e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	f3bf 8f4f 	dsb	sy
 8000e16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000ed04 	.word	0xe000ed04

08000e28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <vTaskStartScheduler+0x58>)
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	2300      	movs	r3, #0
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2300      	movs	r3, #0
 8000e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e3c:	4911      	ldr	r1, [pc, #68]	; (8000e84 <vTaskStartScheduler+0x5c>)
 8000e3e:	4812      	ldr	r0, [pc, #72]	; (8000e88 <vTaskStartScheduler+0x60>)
 8000e40:	f7ff fea8 	bl	8000b94 <xTaskCreate>
 8000e44:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d114      	bne.n	8000e76 <vTaskStartScheduler+0x4e>
	__asm volatile
 8000e4c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000e50:	f383 8811 	msr	BASEPRI, r3
 8000e54:	f3bf 8f6f 	isb	sy
 8000e58:	f3bf 8f4f 	dsb	sy
 8000e5c:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <vTaskStartScheduler+0x64>)
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <vTaskStartScheduler+0x68>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <vTaskStartScheduler+0x6c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000e72:	f7ff faa9 	bl	80003c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000180 	.word	0x20000180
 8000e84:	080046e8 	.word	0x080046e8
 8000e88:	08001371 	.word	0x08001371
 8000e8c:	2000017c 	.word	0x2000017c
 8000e90:	20000168 	.word	0x20000168
 8000e94:	20000160 	.word	0x20000160

08000e98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <vTaskSuspendAll+0x18>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4a03      	ldr	r2, [pc, #12]	; (8000eb0 <vTaskSuspendAll+0x18>)
 8000ea4:	6013      	str	r3, [r2, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000184 	.word	0x20000184

08000eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000ec2:	f7ff fa9f 	bl	8000404 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <xTaskResumeAll+0xf8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	4a37      	ldr	r2, [pc, #220]	; (8000fac <xTaskResumeAll+0xf8>)
 8000ece:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ed0:	4b36      	ldr	r3, [pc, #216]	; (8000fac <xTaskResumeAll+0xf8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d161      	bne.n	8000f9c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000ed8:	4b35      	ldr	r3, [pc, #212]	; (8000fb0 <xTaskResumeAll+0xfc>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d05d      	beq.n	8000f9c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ee0:	e02e      	b.n	8000f40 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000ee2:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <xTaskResumeAll+0x100>)
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3318      	adds	r3, #24
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff f9e0 	bl	80002b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff f9db 	bl	80002b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f02:	2201      	movs	r2, #1
 8000f04:	409a      	lsls	r2, r3
 8000f06:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <xTaskResumeAll+0x104>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	4a2a      	ldr	r2, [pc, #168]	; (8000fb8 <xTaskResumeAll+0x104>)
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4a27      	ldr	r2, [pc, #156]	; (8000fbc <xTaskResumeAll+0x108>)
 8000f1e:	441a      	add	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3304      	adds	r3, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4610      	mov	r0, r2
 8000f28:	f7ff f969 	bl	80001fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <xTaskResumeAll+0x10c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d302      	bcc.n	8000f40 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 8000f3a:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <xTaskResumeAll+0x110>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f40:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <xTaskResumeAll+0x100>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1cc      	bne.n	8000ee2 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000f4e:	f000 fab3 	bl	80014b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <xTaskResumeAll+0x114>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d010      	beq.n	8000f80 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000f5e:	f000 f845 	bl	8000fec <xTaskIncrementTick>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <xTaskResumeAll+0x110>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f1      	bne.n	8000f5e <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <xTaskResumeAll+0x114>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <xTaskResumeAll+0x110>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d009      	beq.n	8000f9c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <xTaskResumeAll+0x118>)
 8000f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	f3bf 8f4f 	dsb	sy
 8000f98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000f9c:	f7ff fa4a 	bl	8000434 <vPortExitCritical>

	return xAlreadyYielded;
 8000fa0:	68bb      	ldr	r3, [r7, #8]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000184 	.word	0x20000184
 8000fb0:	2000015c 	.word	0x2000015c
 8000fb4:	2000011c 	.word	0x2000011c
 8000fb8:	20000164 	.word	0x20000164
 8000fbc:	20000088 	.word	0x20000088
 8000fc0:	20000084 	.word	0x20000084
 8000fc4:	20000170 	.word	0x20000170
 8000fc8:	2000016c 	.word	0x2000016c
 8000fcc:	e000ed04 	.word	0xe000ed04

08000fd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <xTaskGetTickCount+0x18>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	20000160 	.word	0x20000160

08000fec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ff6:	4b48      	ldr	r3, [pc, #288]	; (8001118 <xTaskIncrementTick+0x12c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d17c      	bne.n	80010f8 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8000ffe:	4b47      	ldr	r3, [pc, #284]	; (800111c <xTaskIncrementTick+0x130>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001006:	4a45      	ldr	r2, [pc, #276]	; (800111c <xTaskIncrementTick+0x130>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d110      	bne.n	8001034 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8001012:	4b43      	ldr	r3, [pc, #268]	; (8001120 <xTaskIncrementTick+0x134>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	4b42      	ldr	r3, [pc, #264]	; (8001124 <xTaskIncrementTick+0x138>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a40      	ldr	r2, [pc, #256]	; (8001120 <xTaskIncrementTick+0x134>)
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4a40      	ldr	r2, [pc, #256]	; (8001124 <xTaskIncrementTick+0x138>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4b40      	ldr	r3, [pc, #256]	; (8001128 <xTaskIncrementTick+0x13c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	3301      	adds	r3, #1
 800102c:	4a3e      	ldr	r2, [pc, #248]	; (8001128 <xTaskIncrementTick+0x13c>)
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	f000 fa42 	bl	80014b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001034:	4b3d      	ldr	r3, [pc, #244]	; (800112c <xTaskIncrementTick+0x140>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	429a      	cmp	r2, r3
 800103c:	d34d      	bcc.n	80010da <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800103e:	4b38      	ldr	r3, [pc, #224]	; (8001120 <xTaskIncrementTick+0x134>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <xTaskIncrementTick+0x60>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <xTaskIncrementTick+0x62>
 800104c:	2300      	movs	r3, #0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d004      	beq.n	800105c <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001052:	4b36      	ldr	r3, [pc, #216]	; (800112c <xTaskIncrementTick+0x140>)
 8001054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001058:	601a      	str	r2, [r3, #0]
					break;
 800105a:	e03e      	b.n	80010da <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <xTaskIncrementTick+0x134>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	d203      	bcs.n	800107c <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001074:	4a2d      	ldr	r2, [pc, #180]	; (800112c <xTaskIncrementTick+0x140>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
						break;
 800107a:	e02e      	b.n	80010da <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	3304      	adds	r3, #4
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f917 	bl	80002b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	2b00      	cmp	r3, #0
 800108c:	d004      	beq.n	8001098 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3318      	adds	r3, #24
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f90e 	bl	80002b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	2201      	movs	r2, #1
 800109e:	409a      	lsls	r2, r3
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <xTaskIncrementTick+0x144>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	4a22      	ldr	r2, [pc, #136]	; (8001130 <xTaskIncrementTick+0x144>)
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4a1f      	ldr	r2, [pc, #124]	; (8001134 <xTaskIncrementTick+0x148>)
 80010b8:	441a      	add	r2, r3
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	3304      	adds	r3, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4610      	mov	r0, r2
 80010c2:	f7ff f89c 	bl	80001fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <xTaskIncrementTick+0x14c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d3b4      	bcc.n	800103e <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010d8:	e7b1      	b.n	800103e <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <xTaskIncrementTick+0x14c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e0:	4914      	ldr	r1, [pc, #80]	; (8001134 <xTaskIncrementTick+0x148>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d907      	bls.n	8001102 <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80010f2:	2301      	movs	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	e004      	b.n	8001102 <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <xTaskIncrementTick+0x150>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	4a0f      	ldr	r2, [pc, #60]	; (800113c <xTaskIncrementTick+0x150>)
 8001100:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <xTaskIncrementTick+0x154>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 800110a:	2301      	movs	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800110e:	697b      	ldr	r3, [r7, #20]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000184 	.word	0x20000184
 800111c:	20000160 	.word	0x20000160
 8001120:	20000114 	.word	0x20000114
 8001124:	20000118 	.word	0x20000118
 8001128:	20000174 	.word	0x20000174
 800112c:	2000017c 	.word	0x2000017c
 8001130:	20000164 	.word	0x20000164
 8001134:	20000088 	.word	0x20000088
 8001138:	20000084 	.word	0x20000084
 800113c:	2000016c 	.word	0x2000016c
 8001140:	20000170 	.word	0x20000170

08001144 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <vTaskSwitchContext+0x78>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <vTaskSwitchContext+0x7c>)
 8001154:	2201      	movs	r2, #1
 8001156:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001158:	e02a      	b.n	80011b0 <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <vTaskSwitchContext+0x7c>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <vTaskSwitchContext+0x80>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	fab3 f383 	clz	r3, r3
 800116c:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	f1c3 031f 	rsb	r3, r3, #31
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <vTaskSwitchContext+0x84>)
 8001182:	4413      	add	r3, r2
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	3308      	adds	r3, #8
 8001198:	429a      	cmp	r2, r3
 800119a:	d104      	bne.n	80011a6 <vTaskSwitchContext+0x62>
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <vTaskSwitchContext+0x88>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000184 	.word	0x20000184
 80011c0:	20000170 	.word	0x20000170
 80011c4:	20000164 	.word	0x20000164
 80011c8:	20000088 	.word	0x20000088
 80011cc:	20000084 	.word	0x20000084

080011d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <vTaskPlaceOnEventList+0x28>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	3318      	adds	r3, #24
 80011e0:	4619      	mov	r1, r3
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff f82e 	bl	8000244 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80011e8:	2101      	movs	r1, #1
 80011ea:	6838      	ldr	r0, [r7, #0]
 80011ec:	f000 fa76 	bl	80016dc <prvAddCurrentTaskToDelayedList>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000084 	.word	0x20000084

080011fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	3318      	adds	r3, #24
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f84f 	bl	80002b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <xTaskRemoveFromEventList+0x90>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d11c      	bne.n	8001258 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	3304      	adds	r3, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f846 	bl	80002b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	2201      	movs	r2, #1
 800122e:	409a      	lsls	r2, r3
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <xTaskRemoveFromEventList+0x94>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4313      	orrs	r3, r2
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <xTaskRemoveFromEventList+0x94>)
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4a13      	ldr	r2, [pc, #76]	; (8001294 <xTaskRemoveFromEventList+0x98>)
 8001248:	441a      	add	r2, r3
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	3304      	adds	r3, #4
 800124e:	4619      	mov	r1, r3
 8001250:	4610      	mov	r0, r2
 8001252:	f7fe ffd4 	bl	80001fe <vListInsertEnd>
 8001256:	e005      	b.n	8001264 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	3318      	adds	r3, #24
 800125c:	4619      	mov	r1, r3
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <xTaskRemoveFromEventList+0x9c>)
 8001260:	f7fe ffcd 	bl	80001fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <xTaskRemoveFromEventList+0xa0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126e:	429a      	cmp	r2, r3
 8001270:	d905      	bls.n	800127e <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001272:	2301      	movs	r3, #1
 8001274:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <xTaskRemoveFromEventList+0xa4>)
 8001278:	2201      	movs	r2, #1
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	e001      	b.n	8001282 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8001282:	68fb      	ldr	r3, [r7, #12]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000184 	.word	0x20000184
 8001290:	20000164 	.word	0x20000164
 8001294:	20000088 	.word	0x20000088
 8001298:	2000011c 	.word	0x2000011c
 800129c:	20000084 	.word	0x20000084
 80012a0:	20000170 	.word	0x20000170

080012a4 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <vTaskSetTimeOutState+0x24>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <vTaskSetTimeOutState+0x28>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	605a      	str	r2, [r3, #4]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000174 	.word	0x20000174
 80012cc:	20000160 	.word	0x20000160

080012d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 80012da:	f7ff f893 	bl	8000404 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <xTaskCheckForTimeOut+0x80>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012ec:	d102      	bne.n	80012f4 <xTaskCheckForTimeOut+0x24>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	e026      	b.n	8001342 <xTaskCheckForTimeOut+0x72>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <xTaskCheckForTimeOut+0x84>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d007      	beq.n	8001310 <xTaskCheckForTimeOut+0x40>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	429a      	cmp	r2, r3
 8001308:	d802      	bhi.n	8001310 <xTaskCheckForTimeOut+0x40>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800130a:	2301      	movs	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	e018      	b.n	8001342 <xTaskCheckForTimeOut+0x72>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	1ad2      	subs	r2, r2, r3
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d20e      	bcs.n	800133e <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6859      	ldr	r1, [r3, #4]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	1acb      	subs	r3, r1, r3
 800132c:	441a      	add	r2, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffb6 	bl	80012a4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	e001      	b.n	8001342 <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
 800133e:	2301      	movs	r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001342:	f7ff f877 	bl	8000434 <vPortExitCritical>

	return xReturn;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000160 	.word	0x20000160
 8001354:	20000174 	.word	0x20000174

08001358 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <vTaskMissedYield+0x14>)
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000170 	.word	0x20000170

08001370 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001378:	f000 f852 	bl	8001420 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <prvIdleTask+0x28>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d9f9      	bls.n	8001378 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <prvIdleTask+0x2c>)
 8001386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	f3bf 8f4f 	dsb	sy
 8001390:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001394:	e7f0      	b.n	8001378 <prvIdleTask+0x8>
 8001396:	bf00      	nop
 8001398:	20000088 	.word	0x20000088
 800139c:	e000ed04 	.word	0xe000ed04

080013a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	e00c      	b.n	80013c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <prvInitialiseTaskLists+0x60>)
 80013b8:	4413      	add	r3, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7fe fef4 	bl	80001a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3301      	adds	r3, #1
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d9ef      	bls.n	80013ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <prvInitialiseTaskLists+0x64>)
 80013ce:	f7fe feeb 	bl	80001a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80013d2:	480d      	ldr	r0, [pc, #52]	; (8001408 <prvInitialiseTaskLists+0x68>)
 80013d4:	f7fe fee8 	bl	80001a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <prvInitialiseTaskLists+0x6c>)
 80013da:	f7fe fee5 	bl	80001a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80013de:	480c      	ldr	r0, [pc, #48]	; (8001410 <prvInitialiseTaskLists+0x70>)
 80013e0:	f7fe fee2 	bl	80001a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80013e4:	480b      	ldr	r0, [pc, #44]	; (8001414 <prvInitialiseTaskLists+0x74>)
 80013e6:	f7fe fedf 	bl	80001a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <prvInitialiseTaskLists+0x78>)
 80013ec:	4a05      	ldr	r2, [pc, #20]	; (8001404 <prvInitialiseTaskLists+0x64>)
 80013ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <prvInitialiseTaskLists+0x7c>)
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <prvInitialiseTaskLists+0x68>)
 80013f4:	601a      	str	r2, [r3, #0]
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000088 	.word	0x20000088
 8001404:	200000ec 	.word	0x200000ec
 8001408:	20000100 	.word	0x20000100
 800140c:	2000011c 	.word	0x2000011c
 8001410:	20000130 	.word	0x20000130
 8001414:	20000148 	.word	0x20000148
 8001418:	20000114 	.word	0x20000114
 800141c:	20000118 	.word	0x20000118

08001420 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001426:	e028      	b.n	800147a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8001428:	f7ff fd36 	bl	8000e98 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <prvCheckTasksWaitingTermination+0x6c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf0c      	ite	eq
 8001434:	2301      	moveq	r3, #1
 8001436:	2300      	movne	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800143c:	f7ff fd3a 	bl	8000eb4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d119      	bne.n	800147a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8001446:	f7fe ffdd 	bl	8000404 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <prvCheckTasksWaitingTermination+0x6c>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	3304      	adds	r3, #4
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe ff2c 	bl	80002b4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <prvCheckTasksWaitingTermination+0x70>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3b01      	subs	r3, #1
 8001462:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <prvCheckTasksWaitingTermination+0x70>)
 8001464:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <prvCheckTasksWaitingTermination+0x74>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3b01      	subs	r3, #1
 800146c:	4a09      	ldr	r2, [pc, #36]	; (8001494 <prvCheckTasksWaitingTermination+0x74>)
 800146e:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8001470:	f7fe ffe0 	bl	8000434 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001474:	6838      	ldr	r0, [r7, #0]
 8001476:	f000 f80f 	bl	8001498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <prvCheckTasksWaitingTermination+0x74>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1d2      	bne.n	8001428 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000130 	.word	0x20000130
 8001490:	2000015c 	.word	0x2000015c
 8001494:	20000144 	.word	0x20000144

08001498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe fe6d 	bl	8000184 <vPortFree>
			vPortFree( pxTCB );
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7fe fe6a 	bl	8000184 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <prvResetNextTaskUnblockTime+0x40>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <prvResetNextTaskUnblockTime+0x14>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <prvResetNextTaskUnblockTime+0x16>
 80014cc:	2300      	movs	r3, #0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d004      	beq.n	80014dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <prvResetNextTaskUnblockTime+0x44>)
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80014da:	e008      	b.n	80014ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <prvResetNextTaskUnblockTime+0x40>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4a04      	ldr	r2, [pc, #16]	; (80014fc <prvResetNextTaskUnblockTime+0x44>)
 80014ec:	6013      	str	r3, [r2, #0]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	20000114 	.word	0x20000114
 80014fc:	2000017c 	.word	0x2000017c

08001500 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d062      	beq.n	80015d8 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001516:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <vTaskPriorityInherit+0xe0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	429a      	cmp	r2, r3
 800151e:	d25b      	bcs.n	80015d8 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db06      	blt.n	8001536 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001528:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <vTaskPriorityInherit+0xe0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	f1c3 0205 	rsb	r2, r3, #5
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6959      	ldr	r1, [r3, #20]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4a27      	ldr	r2, [pc, #156]	; (80015e4 <vTaskPriorityInherit+0xe4>)
 8001548:	4413      	add	r3, r2
 800154a:	4299      	cmp	r1, r3
 800154c:	d101      	bne.n	8001552 <vTaskPriorityInherit+0x52>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <vTaskPriorityInherit+0x54>
 8001552:	2300      	movs	r3, #0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d03a      	beq.n	80015ce <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3304      	adds	r3, #4
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe fea9 	bl	80002b4 <uxListRemove>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d115      	bne.n	8001594 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800156c:	491d      	ldr	r1, [pc, #116]	; (80015e4 <vTaskPriorityInherit+0xe4>)
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10a      	bne.n	8001594 <vTaskPriorityInherit+0x94>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001582:	2201      	movs	r2, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43da      	mvns	r2, r3
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <vTaskPriorityInherit+0xe8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4013      	ands	r3, r2
 8001590:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <vTaskPriorityInherit+0xe8>)
 8001592:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <vTaskPriorityInherit+0xe0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	2201      	movs	r2, #1
 80015a4:	409a      	lsls	r2, r3
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <vTaskPriorityInherit+0xe8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <vTaskPriorityInherit+0xe8>)
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <vTaskPriorityInherit+0xe4>)
 80015be:	441a      	add	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3304      	adds	r3, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4610      	mov	r0, r2
 80015c8:	f7fe fe19 	bl	80001fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80015cc:	e004      	b.n	80015d8 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <vTaskPriorityInherit+0xe0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000084 	.word	0x20000084
 80015e4:	20000088 	.word	0x20000088
 80015e8:	20000164 	.word	0x20000164

080015ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d04f      	beq.n	80016a2 <xTaskPriorityDisinherit+0xb6>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001606:	1e5a      	subs	r2, r3, #1
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001614:	429a      	cmp	r2, r3
 8001616:	d044      	beq.n	80016a2 <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800161c:	2b00      	cmp	r3, #0
 800161e:	d140      	bne.n	80016a2 <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	3304      	adds	r3, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe fe45 	bl	80002b4 <uxListRemove>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d115      	bne.n	800165c <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001634:	491d      	ldr	r1, [pc, #116]	; (80016ac <xTaskPriorityDisinherit+0xc0>)
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10a      	bne.n	800165c <xTaskPriorityDisinherit+0x70>
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	2201      	movs	r2, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43da      	mvns	r2, r3
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <xTaskPriorityDisinherit+0xc4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4013      	ands	r3, r2
 8001658:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <xTaskPriorityDisinherit+0xc4>)
 800165a:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	f1c3 0205 	rsb	r2, r3, #5
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	2201      	movs	r2, #1
 8001676:	409a      	lsls	r2, r3
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <xTaskPriorityDisinherit+0xc4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4313      	orrs	r3, r2
 800167e:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <xTaskPriorityDisinherit+0xc4>)
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <xTaskPriorityDisinherit+0xc0>)
 8001690:	441a      	add	r2, r3
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3304      	adds	r3, #4
 8001696:	4619      	mov	r1, r3
 8001698:	4610      	mov	r0, r2
 800169a:	f7fe fdb0 	bl	80001fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800169e:	2301      	movs	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80016a2:	68fb      	ldr	r3, [r7, #12]
	}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000088 	.word	0x20000088
 80016b0:	20000164 	.word	0x20000164

080016b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d004      	beq.n	80016ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016c6:	3201      	adds	r2, #1
 80016c8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80016ca:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
	}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000084 	.word	0x20000084

080016dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80016e6:	4b29      	ldr	r3, [pc, #164]	; (800178c <prvAddCurrentTaskToDelayedList+0xb0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <prvAddCurrentTaskToDelayedList+0xb4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	3304      	adds	r3, #4
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fdde 	bl	80002b4 <uxListRemove>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10b      	bne.n	8001716 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80016fe:	4b24      	ldr	r3, [pc, #144]	; (8001790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	2201      	movs	r2, #1
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <prvAddCurrentTaskToDelayedList+0xb8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4013      	ands	r3, r2
 8001712:	4a20      	ldr	r2, [pc, #128]	; (8001794 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001714:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800171c:	d10a      	bne.n	8001734 <prvAddCurrentTaskToDelayedList+0x58>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d007      	beq.n	8001734 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3304      	adds	r3, #4
 800172a:	4619      	mov	r1, r3
 800172c:	481a      	ldr	r0, [pc, #104]	; (8001798 <prvAddCurrentTaskToDelayedList+0xbc>)
 800172e:	f7fe fd66 	bl	80001fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001732:	e026      	b.n	8001782 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <prvAddCurrentTaskToDelayedList+0xb4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d209      	bcs.n	8001760 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <prvAddCurrentTaskToDelayedList+0xc0>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3304      	adds	r3, #4
 8001756:	4619      	mov	r1, r3
 8001758:	4610      	mov	r0, r2
 800175a:	f7fe fd73 	bl	8000244 <vListInsert>
}
 800175e:	e010      	b.n	8001782 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3304      	adds	r3, #4
 800176a:	4619      	mov	r1, r3
 800176c:	4610      	mov	r0, r2
 800176e:	f7fe fd69 	bl	8000244 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	429a      	cmp	r2, r3
 800177a:	d202      	bcs.n	8001782 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800177c:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	6013      	str	r3, [r2, #0]
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000160 	.word	0x20000160
 8001790:	20000084 	.word	0x20000084
 8001794:	20000164 	.word	0x20000164
 8001798:	20000148 	.word	0x20000148
 800179c:	20000118 	.word	0x20000118
 80017a0:	20000114 	.word	0x20000114
 80017a4:	2000017c 	.word	0x2000017c

080017a8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	78db      	ldrb	r3, [r3, #3]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	78db      	ldrb	r3, [r3, #3]
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	789b      	ldrb	r3, [r3, #2]
 80017e4:	461a      	mov	r2, r3
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d044      	beq.n	8001880 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	e038      	b.n	8001874 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8001802:	2201      	movs	r2, #1
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	429a      	cmp	r2, r3
 800181e:	d126      	bne.n	800186e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001826:	220f      	movs	r2, #15
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	43db      	mvns	r3, r3
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	4013      	ands	r3, r2
 8001838:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4313      	orrs	r3, r2
 8001846:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	78db      	ldrb	r3, [r3, #3]
 800184c:	2b28      	cmp	r3, #40	; 0x28
 800184e:	d105      	bne.n	800185c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001850:	2201      	movs	r2, #1
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	409a      	lsls	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	615a      	str	r2, [r3, #20]
 800185a:	e008      	b.n	800186e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	78db      	ldrb	r3, [r3, #3]
 8001860:	2b48      	cmp	r3, #72	; 0x48
 8001862:	d104      	bne.n	800186e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001864:	2201      	movs	r2, #1
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	409a      	lsls	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	3301      	adds	r3, #1
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2b07      	cmp	r3, #7
 8001878:	d9c3      	bls.n	8001802 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	2bff      	cmp	r3, #255	; 0xff
 8001886:	d946      	bls.n	8001916 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
 8001892:	e03a      	b.n	800190a <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	3308      	adds	r3, #8
 8001898:	2201      	movs	r2, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d127      	bne.n	8001904 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80018ba:	220f      	movs	r2, #15
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	4013      	ands	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4313      	orrs	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	78db      	ldrb	r3, [r3, #3]
 80018e0:	2b28      	cmp	r3, #40	; 0x28
 80018e2:	d105      	bne.n	80018f0 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	3308      	adds	r3, #8
 80018e8:	2201      	movs	r2, #1
 80018ea:	409a      	lsls	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	78db      	ldrb	r3, [r3, #3]
 80018f4:	2b48      	cmp	r3, #72	; 0x48
 80018f6:	d105      	bne.n	8001904 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	3308      	adds	r3, #8
 80018fc:	2201      	movs	r2, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	3301      	adds	r3, #1
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	2b07      	cmp	r3, #7
 800190e:	d9c1      	bls.n	8001894 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	605a      	str	r2, [r3, #4]
  }
}
 8001916:	bf00      	nop
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800192c:	887a      	ldrh	r2, [r7, #2]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	611a      	str	r2, [r3, #16]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001948:	887a      	ldrh	r2, [r7, #2]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	615a      	str	r2, [r3, #20]
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d006      	beq.n	8001978 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800196a:	4909      	ldr	r1, [pc, #36]	; (8001990 <RCC_APB2PeriphClockCmd+0x38>)
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <RCC_APB2PeriphClockCmd+0x38>)
 800196e:	699a      	ldr	r2, [r3, #24]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4313      	orrs	r3, r2
 8001974:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001976:	e006      	b.n	8001986 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001978:	4905      	ldr	r1, [pc, #20]	; (8001990 <RCC_APB2PeriphClockCmd+0x38>)
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <RCC_APB2PeriphClockCmd+0x38>)
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	43db      	mvns	r3, r3
 8001982:	4013      	ands	r3, r2
 8001984:	618b      	str	r3, [r1, #24]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	40021000 	.word	0x40021000

08001994 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 80019a8:	89fb      	ldrh	r3, [r7, #14]
 80019aa:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80019ae:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	881a      	ldrh	r2, [r3, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	885b      	ldrh	r3, [r3, #2]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80019d0:	4313      	orrs	r3, r2
 80019d2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80019d8:	4313      	orrs	r3, r2
 80019da:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80019e8:	4313      	orrs	r3, r2
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	89fb      	ldrh	r3, [r7, #14]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	89fa      	ldrh	r2, [r7, #14]
 80019f6:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	8b9b      	ldrh	r3, [r3, #28]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	8a1a      	ldrh	r2, [r3, #16]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	821a      	strh	r2, [r3, #16]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8001a3c:	e007      	b.n	8001a4e <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	801a      	strh	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	819a      	strh	r2, [r3, #12]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	899b      	ldrh	r3, [r3, #12]
 8001a80:	b29b      	uxth	r3, r3
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d008      	beq.n	8001ab0 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	889b      	ldrh	r3, [r3, #4]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 8001aae:	e007      	b.n	8001ac0 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	889b      	ldrh	r3, [r3, #4]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	f023 0304 	bic.w	r3, r3, #4
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	809a      	strh	r2, [r3, #4]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	891b      	ldrh	r3, [r3, #8]
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001aea:	2301      	movs	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
 8001aee:	e001      	b.n	8001af4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <MqttClient_HandlePayload>:
#endif

/* Private functions */
static int MqttClient_HandlePayload(MqttClient* client, MqttMessage* msg,
    int timeout_ms, void* p_decode, word16* packet_id)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b091      	sub	sp, #68	; 0x44
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch (msg->type)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	791b      	ldrb	r3, [r3, #4]
 8001b16:	3b02      	subs	r3, #2
 8001b18:	2b0b      	cmp	r3, #11
 8001b1a:	f200 817e 	bhi.w	8001e1a <MqttClient_HandlePayload+0x31a>
 8001b1e:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <MqttClient_HandlePayload+0x24>)
 8001b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b24:	08001b55 	.word	0x08001b55
 8001b28:	08001b7b 	.word	0x08001b7b
 8001b2c:	08001d0b 	.word	0x08001d0b
 8001b30:	08001d0b 	.word	0x08001d0b
 8001b34:	08001d0b 	.word	0x08001d0b
 8001b38:	08001d0b 	.word	0x08001d0b
 8001b3c:	08001e1b 	.word	0x08001e1b
 8001b40:	08001d9b 	.word	0x08001d9b
 8001b44:	08001e1b 	.word	0x08001e1b
 8001b48:	08001dd1 	.word	0x08001dd1
 8001b4c:	08001e1b 	.word	0x08001e1b
 8001b50:	08001e07 	.word	0x08001e07
    {
        case MQTT_PACKET_TYPE_CONNECT_ACK:
        {
            /* Decode connect ack */
            MqttConnectAck connect_ack, *p_connect_ack = &connect_ack;
 8001b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b58:	63bb      	str	r3, [r7, #56]	; 0x38
            if (p_decode) {
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MqttClient_HandlePayload+0x64>
                p_connect_ack = (MqttConnectAck*)p_decode;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            rc = MqttDecode_ConnectAck(client->rx_buf, client->packet.buf_len,
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6918      	ldr	r0, [r3, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f000 fe76 	bl	8002860 <MqttDecode_ConnectAck>
 8001b74:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                                p_connect_ack);
            break;
 8001b76:	bf00      	nop
 8001b78:	e154      	b.n	8001e24 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_PUBLISH:
        {
            byte msg_done;

            if (msg->buffer_new) {
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	7e1b      	ldrb	r3, [r3, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00d      	beq.n	8001b9e <MqttClient_HandlePayload+0x9e>
                /* Decode publish message */
                rc = MqttDecode_Publish(client->rx_buf, client->packet.buf_len, msg);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6918      	ldr	r0, [r3, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f000 ff2e 	bl	80029ee <MqttDecode_Publish>
 8001b92:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 8001b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	dc01      	bgt.n	8001b9e <MqttClient_HandlePayload+0x9e>
                    return rc;
 8001b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b9c:	e143      	b.n	8001e26 <MqttClient_HandlePayload+0x326>
            }

            /* Handle packet callback and read remaining payload */
            do {
                /* Determine if message is done */
                msg_done = ((msg->buffer_pos + msg->buffer_len) >= msg->total_len) ? 1 : 0;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	6a1a      	ldr	r2, [r3, #32]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	441a      	add	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	bf2c      	ite	cs
 8001bb0:	2301      	movcs	r3, #1
 8001bb2:	2300      	movcc	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if (msg->stat != MQTT_MSG_READ_PAYLOAD) {
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d029      	beq.n	8001c16 <MqttClient_HandlePayload+0x116>
                    /* Issue callback for new message */
                    if (client->msg_cb) {
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d022      	beq.n	8001c10 <MqttClient_HandlePayload+0x110>
                        if (!msg->buffer_new) {
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	7e1b      	ldrb	r3, [r3, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d105      	bne.n	8001bde <MqttClient_HandlePayload+0xde>
                            /* Reset topic name since valid on new message only */
                            msg->topic_name = NULL;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
                            msg->topic_name_len = 0;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	819a      	strh	r2, [r3, #12]
                        }
                        /* if using the temp publish message buffer,
                           then populate message context with client context */
                        if (&client->msg == msg)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d103      	bne.n	8001bf2 <MqttClient_HandlePayload+0xf2>
                            msg->ctx = client->ctx;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24
                        rc = client->msg_cb(client, msg, msg->buffer_new, msg_done);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	7e1a      	ldrb	r2, [r3, #24]
 8001bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	47a0      	blx	r4
 8001c04:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc != MQTT_CODE_SUCCESS) {
 8001c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MqttClient_HandlePayload+0x110>
                            return rc;
 8001c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c0e:	e10a      	b.n	8001e26 <MqttClient_HandlePayload+0x326>
                        };
                    }
                    msg->buffer_new = 0;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2200      	movs	r2, #0
 8001c14:	761a      	strb	r2, [r3, #24]
                }

                /* Read payload */
                if (!msg_done) {
 8001c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d13b      	bne.n	8001c96 <MqttClient_HandlePayload+0x196>
                    int msg_len;

                    /* add last length to position and reset len */
                    msg->buffer_pos += msg->buffer_len;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	6a1a      	ldr	r2, [r3, #32]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	441a      	add	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	621a      	str	r2, [r3, #32]
                    msg->buffer_len = 0;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]

                    /* set state to reading payload */
                    msg->stat = MQTT_MSG_READ_PAYLOAD;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2204      	movs	r2, #4
 8001c36:	701a      	strb	r2, [r3, #0]

                    msg_len = (msg->total_len - msg->buffer_pos);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
                    if (msg_len > client->rx_buf_len) {
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	695a      	ldr	r2, [r3, #20]
 8001c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	da02      	bge.n	8001c54 <MqttClient_HandlePayload+0x154>
                        msg_len = client->rx_buf_len;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
                    }

                    /* make sure there is something to read */
                    rc = MQTT_CODE_SUCCESS;
 8001c54:	2300      	movs	r3, #0
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
                    if (msg_len > 0) {
 8001c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	dd16      	ble.n	8001c8c <MqttClient_HandlePayload+0x18c>
                        rc = MqttSocket_Read(client, client->rx_buf, msg_len, timeout_ms);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6919      	ldr	r1, [r3, #16]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f001 fa3a 	bl	80030e0 <MqttSocket_Read>
 8001c6c:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc > 0) {
 8001c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	dd0b      	ble.n	8001c8c <MqttClient_HandlePayload+0x18c>
                            /* make sure state is back to read */
                            msg->stat = MQTT_MSG_READ;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2203      	movs	r2, #3
 8001c78:	701a      	strb	r2, [r3, #0]

                            /* Update message */
                            msg->buffer = client->rx_buf;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	615a      	str	r2, [r3, #20]
                            msg->buffer_len = rc;
 8001c82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	61da      	str	r2, [r3, #28]
                            rc = MQTT_CODE_SUCCESS;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }
                    if (rc < 0) {
 8001c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	da01      	bge.n	8001c96 <MqttClient_HandlePayload+0x196>
                        return rc;
 8001c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c94:	e0c7      	b.n	8001e26 <MqttClient_HandlePayload+0x326>
                    }
                }
            } while (!msg_done);
 8001c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f43f af7f 	beq.w	8001b9e <MqttClient_HandlePayload+0x9e>

            /* Handle Qos */
            if (msg->qos > MQTT_QOS_0) {
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	795b      	ldrb	r3, [r3, #5]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80ba 	beq.w	8001e1e <MqttClient_HandlePayload+0x31e>
                MqttPublishResp publish_resp;
                MqttPacketType type;

                *packet_id = msg->packet_id;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	885a      	ldrh	r2, [r3, #2]
 8001cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cb0:	801a      	strh	r2, [r3, #0]

                /* Determine packet type to write */
                type = (msg->qos == MQTT_QOS_1) ?
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	795b      	ldrb	r3, [r3, #5]
                    MQTT_PACKET_TYPE_PUBLISH_ACK :
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <MqttClient_HandlePayload+0x1be>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	e000      	b.n	8001cc0 <MqttClient_HandlePayload+0x1c0>
 8001cbe:	2305      	movs	r3, #5
                type = (msg->qos == MQTT_QOS_1) ?
 8001cc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    MQTT_PACKET_TYPE_PUBLISH_REC;
                publish_resp.packet_id = msg->packet_id;
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	885b      	ldrh	r3, [r3, #2]
 8001cc8:	843b      	strh	r3, [r7, #32]

                /* Encode publish response */
                rc = MqttEncode_PublishResp(client->tx_buf,
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6898      	ldr	r0, [r3, #8]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	68d9      	ldr	r1, [r3, #12]
 8001cd2:	f107 0320 	add.w	r3, r7, #32
 8001cd6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cda:	f000 feff 	bl	8002adc <MqttEncode_PublishResp>
 8001cde:	63f8      	str	r0, [r7, #60]	; 0x3c
                                    client->tx_buf_len, type, &publish_resp);
                if (rc <= 0) {
 8001ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	dc01      	bgt.n	8001cea <MqttClient_HandlePayload+0x1ea>
                    return rc;
 8001ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ce8:	e09d      	b.n	8001e26 <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf,
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6899      	ldr	r1, [r3, #8]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f001 f890 	bl	8002e26 <MqttPacket_Write>
 8001d06:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                    client->packet.buf_len);
            }
            break;
 8001d08:	e089      	b.n	8001e1e <MqttClient_HandlePayload+0x31e>
        case MQTT_PACKET_TYPE_PUBLISH_ACK:
        case MQTT_PACKET_TYPE_PUBLISH_REC:
        case MQTT_PACKET_TYPE_PUBLISH_REL:
        case MQTT_PACKET_TYPE_PUBLISH_COMP:
        {
            MqttPublishResp publish_resp, *p_publish_resp = &publish_resp;
 8001d0a:	f107 031c 	add.w	r3, r7, #28
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
            if (p_decode) {
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MqttClient_HandlePayload+0x21a>
                p_publish_resp = (MqttPublishResp*)p_decode;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* Decode publish response message */
            rc = MqttDecode_PublishResp(client->rx_buf, client->packet.buf_len,
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6918      	ldr	r0, [r3, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	791a      	ldrb	r2, [r3, #4]
 8001d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d28:	f000 ff1e 	bl	8002b68 <MqttDecode_PublishResp>
 8001d2c:	63f8      	str	r0, [r7, #60]	; 0x3c
                msg->type, p_publish_resp);
            if (rc <= 0) {
 8001d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	dc01      	bgt.n	8001d38 <MqttClient_HandlePayload+0x238>
                return rc;
 8001d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d36:	e076      	b.n	8001e26 <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_publish_resp->packet_id;
 8001d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3a:	881a      	ldrh	r2, [r3, #0]
 8001d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d3e:	801a      	strh	r2, [r3, #0]

            /* If Qos then send response */
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	791b      	ldrb	r3, [r3, #4]
 8001d44:	2b05      	cmp	r3, #5
 8001d46:	d003      	beq.n	8001d50 <MqttClient_HandlePayload+0x250>
                msg->type == MQTT_PACKET_TYPE_PUBLISH_REL) {
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	791b      	ldrb	r3, [r3, #4]
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 8001d4c:	2b06      	cmp	r3, #6
 8001d4e:	d168      	bne.n	8001e22 <MqttClient_HandlePayload+0x322>

                /* Encode publish response */
                publish_resp.packet_id = p_publish_resp->packet_id;
 8001d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	83bb      	strh	r3, [r7, #28]
                rc = MqttEncode_PublishResp(client->tx_buf,
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6898      	ldr	r0, [r3, #8]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	68d9      	ldr	r1, [r3, #12]
                    client->tx_buf_len, msg->type+1, &publish_resp);
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	791b      	ldrb	r3, [r3, #4]
                rc = MqttEncode_PublishResp(client->tx_buf,
 8001d62:	3301      	adds	r3, #1
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	f107 031c 	add.w	r3, r7, #28
 8001d6a:	f000 feb7 	bl	8002adc <MqttEncode_PublishResp>
 8001d6e:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 8001d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	dc01      	bgt.n	8001d7a <MqttClient_HandlePayload+0x27a>
                    return rc;
 8001d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d78:	e055      	b.n	8001e26 <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf, client->packet.buf_len);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6899      	ldr	r1, [r3, #8]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f001 f848 	bl	8002e26 <MqttPacket_Write>
 8001d96:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001d98:	e044      	b.n	8001e24 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_SUBSCRIBE_ACK:
        {
            /* Decode subscribe ack */
            MqttSubscribeAck subscribe_ack;
            MqttSubscribeAck *p_subscribe_ack = &subscribe_ack;
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (p_decode) {
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MqttClient_HandlePayload+0x2aa>
                p_subscribe_ack = (MqttSubscribeAck*)p_decode;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            rc = MqttDecode_SubscribeAck(client->rx_buf, client->packet.buf_len,
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6918      	ldr	r0, [r3, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db4:	4619      	mov	r1, r3
 8001db6:	f000 ff91 	bl	8002cdc <MqttDecode_SubscribeAck>
 8001dba:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_subscribe_ack);
            if (rc <= 0) {
 8001dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	dc01      	bgt.n	8001dc6 <MqttClient_HandlePayload+0x2c6>
                return rc;
 8001dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc4:	e02f      	b.n	8001e26 <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_subscribe_ack->packet_id;
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	881a      	ldrh	r2, [r3, #0]
 8001dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dcc:	801a      	strh	r2, [r3, #0]
 8001dce:	e029      	b.n	8001e24 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK:
        {
            /* Decode unsubscribe ack */
            MqttUnsubscribeAck unsubscribe_ack;
            MqttUnsubscribeAck *p_unsubscribe_ack = &unsubscribe_ack;
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28

            if (p_decode) {
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MqttClient_HandlePayload+0x2e0>
                p_unsubscribe_ack = (MqttUnsubscribeAck*)p_decode;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            rc = MqttDecode_UnsubscribeAck(client->rx_buf, client->packet.buf_len,
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6918      	ldr	r0, [r3, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dea:	4619      	mov	r1, r3
 8001dec:	f000 ffb6 	bl	8002d5c <MqttDecode_UnsubscribeAck>
 8001df0:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_unsubscribe_ack);
            if (rc <= 0) {
 8001df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	dc01      	bgt.n	8001dfc <MqttClient_HandlePayload+0x2fc>
                return rc;
 8001df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dfa:	e014      	b.n	8001e26 <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_unsubscribe_ack->packet_id;
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfe:	881a      	ldrh	r2, [r3, #0]
 8001e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e02:	801a      	strh	r2, [r3, #0]
 8001e04:	e00e      	b.n	8001e24 <MqttClient_HandlePayload+0x324>
            break;
        }
        case MQTT_PACKET_TYPE_PING_RESP:
        {
            /* Decode ping */
            rc = MqttDecode_Ping(client->rx_buf, client->packet.buf_len);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4610      	mov	r0, r2
 8001e12:	f000 ffe0 	bl	8002dd6 <MqttDecode_Ping>
 8001e16:	63f8      	str	r0, [r7, #60]	; 0x3c
            break;
 8001e18:	e004      	b.n	8001e24 <MqttClient_HandlePayload+0x324>
            /* Other types are server side only, ignore */
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitMessage: Invalid client packet type %u!",
                msg->type);
        #endif
            break;
 8001e1a:	bf00      	nop
 8001e1c:	e002      	b.n	8001e24 <MqttClient_HandlePayload+0x324>
            break;
 8001e1e:	bf00      	nop
 8001e20:	e000      	b.n	8001e24 <MqttClient_HandlePayload+0x324>
            break;
 8001e22:	bf00      	nop
        }
    } /* switch (msg->type) */

    return rc;
 8001e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3744      	adds	r7, #68	; 0x44
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd90      	pop	{r4, r7, pc}
 8001e2e:	bf00      	nop

08001e30 <MqttClient_WaitType>:

static int MqttClient_WaitType(MqttClient *client, MqttMessage* msg,
    int timeout_ms, byte wait_type, word16 wait_packet_id, void* p_decode)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	70fb      	strb	r3, [r7, #3]
    int rc;
    word16 packet_id = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	82fb      	strh	r3, [r7, #22]

wait_again:

    switch (msg->stat)
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d85e      	bhi.n	8001f08 <MqttClient_WaitType+0xd8>
 8001e4a:	a201      	add	r2, pc, #4	; (adr r2, 8001e50 <MqttClient_WaitType+0x20>)
 8001e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e50:	08001e65 	.word	0x08001e65
 8001e54:	08001e6b 	.word	0x08001e6b
 8001e58:	08001f09 	.word	0x08001f09
 8001e5c:	08001ec1 	.word	0x08001ec1
 8001e60:	08001ec1 	.word	0x08001ec1
    {
        case MQTT_MSG_BEGIN:
        {
            /* reset the packet state */
            client->packet.stat = MQTT_PK_BEGIN;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	771a      	strb	r2, [r3, #28]
        case MQTT_MSG_WAIT:
        {
            MqttPacket* header;

            /* Wait for packet */
            rc = MqttPacket_Read(client, client->rx_buf, client->rx_buf_len, timeout_ms);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6919      	ldr	r1, [r3, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 ffe9 	bl	8002e4c <MqttPacket_Read>
 8001e7a:	61f8      	str	r0, [r7, #28]
            if (rc <= 0) {
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	dc01      	bgt.n	8001e86 <MqttClient_WaitType+0x56>
                return rc;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	e049      	b.n	8001f1a <MqttClient_WaitType+0xea>
            }

            msg->stat = MQTT_MSG_WAIT;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
            client->packet.buf_len = rc;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28

            /* Determine packet type */
            header = (MqttPacket*)client->rx_buf;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	61bb      	str	r3, [r7, #24]
            msg->type = MQTT_PACKET_TYPE_GET(header->type_flags);
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	711a      	strb	r2, [r3, #4]
            msg->qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	105b      	asrs	r3, r3, #1
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	715a      	strb	r2, [r3, #5]
            msg->buffer_new = 1;
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	761a      	strb	r2, [r3, #24]
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("Read Packet: Len %d, Type %d, Qos %d",
                client->packet.buf_len, msg->type, msg->qos);
        #endif

            msg->stat = MQTT_MSG_READ;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	701a      	strb	r2, [r3, #0]
        }

        case MQTT_MSG_READ:
        case MQTT_MSG_READ_PAYLOAD:
        {
            rc = MqttClient_HandlePayload(client, msg, timeout_ms, p_decode,
 8001ec0:	f107 0316 	add.w	r3, r7, #22
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	68b9      	ldr	r1, [r7, #8]
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f7ff fe17 	bl	8001b00 <MqttClient_HandlePayload>
 8001ed2:	61f8      	str	r0, [r7, #28]
                                                                &packet_id);
            if (rc < 0) {
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	da01      	bge.n	8001ede <MqttClient_WaitType+0xae>
                return rc;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	e01d      	b.n	8001f1a <MqttClient_WaitType+0xea>
            }
            rc = MQTT_CODE_SUCCESS;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]

            /* Check for type and packet id */
            if (wait_type < MQTT_PACKET_TYPE_MAX) {
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	2b0e      	cmp	r3, #14
 8001ee6:	d813      	bhi.n	8001f10 <MqttClient_WaitType+0xe0>
                if (wait_type == msg->type) {
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	791b      	ldrb	r3, [r3, #4]
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d106      	bne.n	8001f00 <MqttClient_WaitType+0xd0>
                    if (wait_packet_id == 0 || wait_packet_id == packet_id) {
 8001ef2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00c      	beq.n	8001f12 <MqttClient_WaitType+0xe2>
 8001ef8:	8afb      	ldrh	r3, [r7, #22]
 8001efa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d008      	beq.n	8001f12 <MqttClient_WaitType+0xe2>
                        /* We found the packet type and id */
                        break;
                    }
                }

                msg->stat = MQTT_MSG_BEGIN;
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
                goto wait_again;
 8001f06:	e79c      	b.n	8001e42 <MqttClient_WaitType+0x12>
        {
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitType: Invalid state %d!",
                msg->stat);
        #endif
            rc = MQTT_CODE_ERROR_STAT;
 8001f08:	f06f 0309 	mvn.w	r3, #9
 8001f0c:	61fb      	str	r3, [r7, #28]
            break;
 8001f0e:	e000      	b.n	8001f12 <MqttClient_WaitType+0xe2>
            break;
 8001f10:	bf00      	nop
        }
    } /* switch (msg->stat) */

    /* reset state */
    msg->stat = MQTT_MSG_BEGIN;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]

    return rc;
 8001f18:	69fb      	ldr	r3, [r7, #28]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3720      	adds	r7, #32
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop

08001f24 <MqttClient_Init>:
int MqttClient_Init(MqttClient *client, MqttNet* net,
    MqttMsgCb msg_cb,
    byte* tx_buf, int tx_buf_len,
    byte* rx_buf, int rx_buf_len,
    int cmd_timeout_ms)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]

    /* Check arguments */
    if (client == NULL ||
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00b      	beq.n	8001f54 <MqttClient_Init+0x30>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <MqttClient_Init+0x30>
        tx_buf == NULL || tx_buf_len <= 0 ||
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	dd05      	ble.n	8001f54 <MqttClient_Init+0x30>
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <MqttClient_Init+0x30>
        rx_buf == NULL || rx_buf_len <= 0) {
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	dc02      	bgt.n	8001f5a <MqttClient_Init+0x36>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f58:	e01c      	b.n	8001f94 <MqttClient_Init+0x70>
    }

    /* Initialize the client structure to zero */
    XMEMSET(client, 0, sizeof(MqttClient));
 8001f5a:	226c      	movs	r2, #108	; 0x6c
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f002 fae3 	bl	800452a <memset>

    /* Setup client structure */
    client->msg_cb = msg_cb;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	63da      	str	r2, [r3, #60]	; 0x3c
    client->tx_buf = tx_buf;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	609a      	str	r2, [r3, #8]
    client->tx_buf_len = tx_buf_len;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a3a      	ldr	r2, [r7, #32]
 8001f74:	60da      	str	r2, [r3, #12]
    client->rx_buf = rx_buf;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7a:	611a      	str	r2, [r3, #16]
    client->rx_buf_len = rx_buf_len;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f80:	615a      	str	r2, [r3, #20]
    client->cmd_timeout_ms = cmd_timeout_ms;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f86:	605a      	str	r2, [r3, #4]

    /* Init socket */
    rc = MqttSocket_Init(client, net);
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 fffb 	bl	8002f86 <MqttSocket_Init>
 8001f90:	6178      	str	r0, [r7, #20]

    return rc;
 8001f92:	697b      	ldr	r3, [r7, #20]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <MqttClient_Connect>:

int MqttClient_Connect(MqttClient *client, MqttConnect *connect)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
    int rc, len;

    /* Validate required arguments */
    if (client == NULL || connect == NULL) {
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <MqttClient_Connect+0x16>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <MqttClient_Connect+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fb6:	e034      	b.n	8002022 <MqttClient_Connect+0x86>
    }

    if (connect->stat == MQTT_MSG_BEGIN) {
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d120      	bne.n	8002002 <MqttClient_Connect+0x66>

        /* Encode the connect packet */
        rc = MqttEncode_Connect(client->tx_buf, client->tx_buf_len, connect);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6898      	ldr	r0, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f000 fb18 	bl	8002600 <MqttEncode_Connect>
 8001fd0:	60f8      	str	r0, [r7, #12]
        if (rc <= 0) {
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	dc01      	bgt.n	8001fdc <MqttClient_Connect+0x40>
            return rc;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	e022      	b.n	8002022 <MqttClient_Connect+0x86>
        }
        len = rc;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	60bb      	str	r3, [r7, #8]

        /* Send connect packet */
        rc = MqttPacket_Write(client, client->tx_buf, len);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 ff1c 	bl	8002e26 <MqttPacket_Write>
 8001fee:	60f8      	str	r0, [r7, #12]
        if (rc != len) {
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <MqttClient_Connect+0x60>
            return rc;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	e012      	b.n	8002022 <MqttClient_Connect+0x86>
        }
        connect->stat = MQTT_MSG_WAIT;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
	broker_decode_connect(&broker, local_host.data, &stat);
	broker_send_conn_ack(&broker, &stat);
*/

    /* Wait for connect ack packet */
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685a      	ldr	r2, [r3, #4]
        MQTT_PACKET_TYPE_CONNECT_ACK, 0, &connect->ack);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	331c      	adds	r3, #28
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	2300      	movs	r3, #0
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2302      	movs	r3, #2
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff09 	bl	8001e30 <MqttClient_WaitType>
 800201e:	60f8      	str	r0, [r7, #12]

    return rc;
 8002020:	68fb      	ldr	r3, [r7, #12]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <MqttClient_Publish>:

int MqttClient_Publish(MqttClient *client, MqttPublish *publish)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b087      	sub	sp, #28
 8002030:	af02      	add	r7, sp, #8
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]

    /* Validate required arguments */
    if (client == NULL || publish == NULL) {
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <MqttClient_Publish+0x1a>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <MqttClient_Publish+0x20>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800204a:	e09e      	b.n	800218a <MqttClient_Publish+0x15e>
    }

    switch (publish->stat)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b04      	cmp	r3, #4
 8002052:	f200 8099 	bhi.w	8002188 <MqttClient_Publish+0x15c>
 8002056:	a201      	add	r2, pc, #4	; (adr r2, 800205c <MqttClient_Publish+0x30>)
 8002058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205c:	08002071 	.word	0x08002071
 8002060:	0800213d 	.word	0x0800213d
 8002064:	08002093 	.word	0x08002093
 8002068:	0800217f 	.word	0x0800217f
 800206c:	0800217f 	.word	0x0800217f
    {
        case MQTT_MSG_BEGIN:
        {
            /* Encode the publish packet */
            rc = MqttEncode_Publish(client->tx_buf, client->tx_buf_len, publish);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6898      	ldr	r0, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	f000 fc28 	bl	80028d0 <MqttEncode_Publish>
 8002080:	60f8      	str	r0, [r7, #12]
            if (rc <= 0) {
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	dc01      	bgt.n	800208c <MqttClient_Publish+0x60>
                return rc;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	e07e      	b.n	800218a <MqttClient_Publish+0x15e>
            }

            client->write.len = rc;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	639a      	str	r2, [r3, #56]	; 0x38
            FALL_THROUGH;
        }

        case MQTT_MSG_WRITE:
        {
            publish->stat = MQTT_MSG_WRITE;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2202      	movs	r2, #2
 8002096:	701a      	strb	r2, [r3, #0]

            /* Send packet and payload */
            do {
                rc = MqttPacket_Write(client, client->tx_buf, client->write.len);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6899      	ldr	r1, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a0:	461a      	mov	r2, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 febf 	bl	8002e26 <MqttPacket_Write>
 80020a8:	60f8      	str	r0, [r7, #12]
                if (rc < 0) {
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	da01      	bge.n	80020b4 <MqttClient_Publish+0x88>
                    return rc;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	e06a      	b.n	800218a <MqttClient_Publish+0x15e>
                }

                publish->buffer_pos += publish->buffer_len;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6a1a      	ldr	r2, [r3, #32]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	441a      	add	r2, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	621a      	str	r2, [r3, #32]
                publish->buffer_len = 0;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2200      	movs	r2, #0
 80020c6:	61da      	str	r2, [r3, #28]

                /* Check if we are done sending publish message */
                if (publish->buffer_pos >= publish->total_len) {
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6a1a      	ldr	r2, [r3, #32]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d302      	bcc.n	80020da <MqttClient_Publish+0xae>
                    rc = MQTT_CODE_SUCCESS;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
                    break;
 80020d8:	e028      	b.n	800212c <MqttClient_Publish+0x100>
                }

                /* Build packet payload to send */
                client->write.len = (publish->total_len - publish->buffer_pos);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	639a      	str	r2, [r3, #56]	; 0x38
                if (client->write.len > client->tx_buf_len) {
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	dd03      	ble.n	80020fe <MqttClient_Publish+0xd2>
                    client->write.len = client->tx_buf_len;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	639a      	str	r2, [r3, #56]	; 0x38
                }
                publish->buffer_len = client->write.len;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	461a      	mov	r2, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	61da      	str	r2, [r3, #28]
                XMEMCPY(client->tx_buf, &publish->buffer[publish->buffer_pos],
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6898      	ldr	r0, [r3, #8]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	18d1      	adds	r1, r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	461a      	mov	r2, r3
 800211c:	f002 f9fa 	bl	8004514 <memcpy>

            #ifdef WOLFMQTT_NONBLOCK
                return MQTT_CODE_CONTINUE;
            #endif

            } while (publish->buffer_pos < publish->total_len);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6a1a      	ldr	r2, [r3, #32]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	429a      	cmp	r2, r3
 800212a:	d3b5      	bcc.n	8002098 <MqttClient_Publish+0x6c>

            /* if not expecting a reply, the reset state and exit */
            if (publish->qos == MQTT_QOS_0) {
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	795b      	ldrb	r3, [r3, #5]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d103      	bne.n	800213c <MqttClient_Publish+0x110>
                publish->stat = MQTT_MSG_BEGIN;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
                break;
 800213a:	e025      	b.n	8002188 <MqttClient_Publish+0x15c>
            FALL_THROUGH;
        }

        case MQTT_MSG_WAIT:
        {
            publish->stat = MQTT_MSG_WAIT;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]

            /* Handle QoS */
            if (publish->qos > MQTT_QOS_0) {
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	795b      	ldrb	r3, [r3, #5]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d01d      	beq.n	8002186 <MqttClient_Publish+0x15a>
                /* Determine packet type to wait for */
                MqttPacketType type = (publish->qos == MQTT_QOS_1) ?
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	795b      	ldrb	r3, [r3, #5]
                    MQTT_PACKET_TYPE_PUBLISH_ACK : MQTT_PACKET_TYPE_PUBLISH_COMP;
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <MqttClient_Publish+0x12a>
 8002152:	2304      	movs	r3, #4
 8002154:	e000      	b.n	8002158 <MqttClient_Publish+0x12c>
 8002156:	2307      	movs	r3, #7
                MqttPacketType type = (publish->qos == MQTT_QOS_1) ?
 8002158:	72fb      	strb	r3, [r7, #11]

                /* Wait for publish response packet */
                rc = MqttClient_WaitType(client, &client->msg,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6858      	ldr	r0, [r3, #4]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	885b      	ldrh	r3, [r3, #2]
 8002168:	7afc      	ldrb	r4, [r7, #11]
 800216a:	2200      	movs	r2, #0
 800216c:	9201      	str	r2, [sp, #4]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	4623      	mov	r3, r4
 8002172:	4602      	mov	r2, r0
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff fe5b 	bl	8001e30 <MqttClient_WaitType>
 800217a:	60f8      	str	r0, [r7, #12]
                    client->cmd_timeout_ms, type, publish->packet_id, NULL);
            }

            break;
 800217c:	e003      	b.n	8002186 <MqttClient_Publish+0x15a>
        case MQTT_MSG_READ_PAYLOAD:
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_Publish: Invalid state %d!",
                publish->stat);
        #endif
            rc = MQTT_CODE_ERROR_STAT;
 800217e:	f06f 0309 	mvn.w	r3, #9
 8002182:	60fb      	str	r3, [r7, #12]
            break;
 8002184:	e000      	b.n	8002188 <MqttClient_Publish+0x15c>
            break;
 8002186:	bf00      	nop
    } /* switch (publish->stat) */

    return rc;
 8002188:	68fb      	ldr	r3, [r7, #12]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bd90      	pop	{r4, r7, pc}
 8002192:	bf00      	nop

08002194 <MqttClient_Subscribe>:

int MqttClient_Subscribe(MqttClient *client, MqttSubscribe *subscribe)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af02      	add	r7, sp, #8
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
    int rc, len, i;
    MqttSubscribeAck subscribe_ack;
    MqttTopic* topic;

    /* Validate required arguments */
    if (client == NULL || subscribe == NULL) {
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <MqttClient_Subscribe+0x16>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <MqttClient_Subscribe+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ae:	e050      	b.n	8002252 <MqttClient_Subscribe+0xbe>
    }

    if (subscribe->stat == MQTT_MSG_BEGIN) {
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d120      	bne.n	80021fa <MqttClient_Subscribe+0x66>
        /* Encode the subscribe packet */
        rc = MqttEncode_Subscribe(client->tx_buf, client->tx_buf_len, subscribe);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6898      	ldr	r0, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	4619      	mov	r1, r3
 80021c4:	f000 fd0d 	bl	8002be2 <MqttEncode_Subscribe>
 80021c8:	61b8      	str	r0, [r7, #24]
        if (rc <= 0) { return rc; }
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	dc01      	bgt.n	80021d4 <MqttClient_Subscribe+0x40>
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	e03e      	b.n	8002252 <MqttClient_Subscribe+0xbe>
        len = rc;
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	617b      	str	r3, [r7, #20]

        /* Send subscribe packet */
        rc = MqttPacket_Write(client, client->tx_buf, len);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	4619      	mov	r1, r3
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 fe20 	bl	8002e26 <MqttPacket_Write>
 80021e6:	61b8      	str	r0, [r7, #24]
        if (rc != len) { return rc; }
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <MqttClient_Subscribe+0x60>
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	e02e      	b.n	8002252 <MqttClient_Subscribe+0xbe>

        subscribe->stat = MQTT_MSG_WAIT;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait for subscribe ack packet */
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6858      	ldr	r0, [r3, #4]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	885b      	ldrh	r3, [r3, #2]
 8002208:	f107 0208 	add.w	r2, r7, #8
 800220c:	9201      	str	r2, [sp, #4]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2309      	movs	r3, #9
 8002212:	4602      	mov	r2, r0
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff fe0b 	bl	8001e30 <MqttClient_WaitType>
 800221a:	61b8      	str	r0, [r7, #24]
        MQTT_PACKET_TYPE_SUBSCRIBE_ACK, subscribe->packet_id, &subscribe_ack);

    /* Populate return codes */
    if (rc == MQTT_CODE_SUCCESS) {
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d116      	bne.n	8002250 <MqttClient_Subscribe+0xbc>
        for (i = 0; i < subscribe->topic_count; i++) {
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	e00e      	b.n	8002246 <MqttClient_Subscribe+0xb2>
            topic = &subscribe->topics[i];
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
            topic->return_code = subscribe_ack.return_codes[i];
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	4413      	add	r3, r2
 800223a:	781a      	ldrb	r2, [r3, #0]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	715a      	strb	r2, [r3, #5]
        for (i = 0; i < subscribe->topic_count; i++) {
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	3301      	adds	r3, #1
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	429a      	cmp	r2, r3
 800224e:	dceb      	bgt.n	8002228 <MqttClient_Subscribe+0x94>
        }
    }

    return rc;
 8002250:	69bb      	ldr	r3, [r7, #24]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3720      	adds	r7, #32
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <MqttClient_WaitMessage>:
    return MQTT_CODE_SUCCESS;
}


int MqttClient_WaitMessage(MqttClient *client, int timeout_ms)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af02      	add	r7, sp, #8
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
    return MqttClient_WaitType(client, &client->msg, timeout_ms,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800226a:	2300      	movs	r3, #0
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	2300      	movs	r3, #0
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	230f      	movs	r3, #15
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fdda 	bl	8001e30 <MqttClient_WaitType>
 800227c:	4603      	mov	r3, r0
        MQTT_PACKET_TYPE_MAX, 0, NULL);
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <MqttEncode_FixedHeader>:
#include "mqtt_client.h"

/* Positive return value is header length, zero or negative indicates error */
static int MqttEncode_FixedHeader(byte *tx_buf, int tx_buf_len, int remain_len,
    byte type, byte retain, byte qos, byte duplicate)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)tx_buf;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	617b      	str	r3, [r7, #20]

    /* Encode fixed header */
    header->type_flags = MQTT_PACKET_TYPE_SET(type) | MQTT_PACKET_FLAGS_SET(0);
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	b2da      	uxtb	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	701a      	strb	r2, [r3, #0]
    if (retain) {
 80022a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <MqttEncode_FixedHeader+0x32>
        header->type_flags |= MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_RETAIN);
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	701a      	strb	r2, [r3, #0]
    }
    if (qos) {
 80022b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <MqttEncode_FixedHeader+0x58>
        header->type_flags |= MQTT_PACKET_FLAGS_SET_QOS(qos);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b25a      	sxtb	r2, r3
 80022c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	b25b      	sxtb	r3, r3
 80022ce:	f003 0306 	and.w	r3, r3, #6
 80022d2:	b25b      	sxtb	r3, r3
 80022d4:	4313      	orrs	r3, r2
 80022d6:	b25b      	sxtb	r3, r3
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	701a      	strb	r2, [r3, #0]
    }
    if (duplicate) {
 80022de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <MqttEncode_FixedHeader+0x6e>
        header->type_flags |=
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	f043 0308 	orr.w	r3, r3, #8
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	701a      	strb	r2, [r3, #0]
            MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_DUPLICATE);
    }

    /* Encode the length remaining into the header */
    header_len = MqttEncode_RemainLen(header, tx_buf_len, remain_len);
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	6978      	ldr	r0, [r7, #20]
 80022fa:	f000 f89f 	bl	800243c <MqttEncode_RemainLen>
 80022fe:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	da01      	bge.n	800230a <MqttEncode_FixedHeader+0x84>
        return header_len;
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	e000      	b.n	800230c <MqttEncode_FixedHeader+0x86>
    }

    return header_len;
 800230a:	693b      	ldr	r3, [r7, #16]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <MqttDecode_FixedHeader>:

static int MqttDecode_FixedHeader(byte *rx_buf, int rx_buf_len,
    int *remain_len, byte type, MqttQoS *p_qos, byte *p_retain,
    byte *p_duplicate)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)rx_buf;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	617b      	str	r3, [r7, #20]

    /* Decode the length remaining */
    header_len = MqttDecode_RemainLen(header, rx_buf_len, remain_len);
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f000 f840 	bl	80023b0 <MqttDecode_RemainLen>
 8002330:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	da01      	bge.n	800233c <MqttDecode_FixedHeader+0x28>
        return header_len;
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	e035      	b.n	80023a8 <MqttDecode_FixedHeader+0x94>
    }

    /* Validate packet type */
    if (MQTT_PACKET_TYPE_GET(header->type_flags) != type) {
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f003 020f 	and.w	r2, r3, #15
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	429a      	cmp	r2, r3
 800234c:	d002      	beq.n	8002354 <MqttDecode_FixedHeader+0x40>
        return MQTT_CODE_ERROR_PACKET_TYPE;
 800234e:	f06f 0303 	mvn.w	r3, #3
 8002352:	e029      	b.n	80023a8 <MqttDecode_FixedHeader+0x94>
    }

    /* Extract header flags */
    if (p_qos) {
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <MqttDecode_FixedHeader+0x56>
        *p_qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	105b      	asrs	r3, r3, #1
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	b2da      	uxtb	r2, r3
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	701a      	strb	r2, [r3, #0]
    }
    if (p_retain) {
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00b      	beq.n	8002388 <MqttDecode_FixedHeader+0x74>
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
            MQTT_PACKET_FLAG_RETAIN) ? 1 : 0;
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf14      	ite	ne
 800237c:	2301      	movne	r3, #1
 800237e:	2300      	moveq	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	701a      	strb	r2, [r3, #0]
    }
    if (p_duplicate) {
 8002388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00b      	beq.n	80023a6 <MqttDecode_FixedHeader+0x92>
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
            MQTT_PACKET_FLAG_DUPLICATE) ? 1 : 0;
 8002396:	2b00      	cmp	r3, #0
 8002398:	bf14      	ite	ne
 800239a:	2301      	movne	r3, #1
 800239c:	2300      	moveq	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	461a      	mov	r2, r3
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 80023a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a4:	701a      	strb	r2, [r3, #0]
    }

    return header_len;
 80023a6:	693b      	ldr	r3, [r7, #16]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <MqttDecode_RemainLen>:


/* Packet Element Encoders/Decoders */
/* Returns number of decoded bytes, errors are negative value */
int MqttDecode_RemainLen(MqttPacket *header, int buf_len, int *remain_len)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
    int decode_bytes = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
    int multiplier = 1;
 80023c0:	2301      	movs	r3, #1
 80023c2:	61bb      	str	r3, [r7, #24]
    byte tmp_len;

    if (header == NULL || remain_len == NULL || buf_len <= 0) {
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <MqttDecode_RemainLen+0x26>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <MqttDecode_RemainLen+0x26>
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	dc02      	bgt.n	80023dc <MqttDecode_RemainLen+0x2c>
        return MQTT_CODE_ERROR_BAD_ARG;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023da:	e02a      	b.n	8002432 <MqttDecode_RemainLen+0x82>
    }

    *remain_len = 0;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
    do {
        /* Check decoded length byte count */
        if ((decode_bytes + 1) >= buf_len) {
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	db01      	blt.n	80023f0 <MqttDecode_RemainLen+0x40>
            return 0; /* Zero incidates we need another byte */
 80023ec:	2300      	movs	r3, #0
 80023ee:	e020      	b.n	8002432 <MqttDecode_RemainLen+0x82>
        }
        if (decode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	dd02      	ble.n	80023fc <MqttDecode_RemainLen+0x4c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 80023f6:	f06f 0302 	mvn.w	r3, #2
 80023fa:	e01a      	b.n	8002432 <MqttDecode_RemainLen+0x82>
        }

        /* Decode Length */
        tmp_len = header->len[decode_bytes++];
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	61fa      	str	r2, [r7, #28]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4413      	add	r3, r2
 8002406:	785b      	ldrb	r3, [r3, #1]
 8002408:	75fb      	strb	r3, [r7, #23]
        *remain_len += (tmp_len & ~MQTT_PACKET_LEN_ENCODE_MASK) * multiplier;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002414:	69b9      	ldr	r1, [r7, #24]
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	441a      	add	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	601a      	str	r2, [r3, #0]
        multiplier *= MQTT_PACKET_LEN_ENCODE_MASK;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	01db      	lsls	r3, r3, #7
 8002424:	61bb      	str	r3, [r7, #24]
    } while (tmp_len & MQTT_PACKET_LEN_ENCODE_MASK);
 8002426:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800242a:	2b00      	cmp	r3, #0
 800242c:	dbd9      	blt.n	80023e2 <MqttDecode_RemainLen+0x32>

    return decode_bytes + 1; /* Add byte for header flags/type */
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3301      	adds	r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	3724      	adds	r7, #36	; 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <MqttEncode_RemainLen>:

/* Returns number of encoded bytes, errors are negative value */
int MqttEncode_RemainLen(MqttPacket *header, int buf_len, int remain_len)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
    int encode_bytes = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
    byte tmp_len;

    if (header == NULL || remain_len < 0) {
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <MqttEncode_RemainLen+0x1c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	da02      	bge.n	800245e <MqttEncode_RemainLen+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800245c:	e02e      	b.n	80024bc <MqttEncode_RemainLen+0x80>
    }

    do {
        /* Check decoded length byte count */
        if ((encode_bytes + 1) >= buf_len) {
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	429a      	cmp	r2, r3
 8002466:	db01      	blt.n	800246c <MqttEncode_RemainLen+0x30>
            return 0; /* Zero incidates we need another byte */
 8002468:	2300      	movs	r3, #0
 800246a:	e027      	b.n	80024bc <MqttEncode_RemainLen+0x80>
        }
        if (encode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b03      	cmp	r3, #3
 8002470:	dd02      	ble.n	8002478 <MqttEncode_RemainLen+0x3c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8002472:	f06f 0302 	mvn.w	r3, #2
 8002476:	e021      	b.n	80024bc <MqttEncode_RemainLen+0x80>
        }

        /* Encode length */
        tmp_len = (remain_len % MQTT_PACKET_LEN_ENCODE_MASK);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	425a      	negs	r2, r3
 800247c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002480:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002484:	bf58      	it	pl
 8002486:	4253      	negpl	r3, r2
 8002488:	74fb      	strb	r3, [r7, #19]
        remain_len /= MQTT_PACKET_LEN_ENCODE_MASK;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	da00      	bge.n	8002492 <MqttEncode_RemainLen+0x56>
 8002490:	337f      	adds	r3, #127	; 0x7f
 8002492:	11db      	asrs	r3, r3, #7
 8002494:	607b      	str	r3, [r7, #4]

        /* If more length, set the top bit of this byte */
        if (remain_len > 0) {
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	dd03      	ble.n	80024a4 <MqttEncode_RemainLen+0x68>
            tmp_len |= MQTT_PACKET_LEN_ENCODE_MASK;
 800249c:	7cfb      	ldrb	r3, [r7, #19]
 800249e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024a2:	74fb      	strb	r3, [r7, #19]
        }
        header->len[encode_bytes++] = tmp_len;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	617a      	str	r2, [r7, #20]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4413      	add	r3, r2
 80024ae:	7cfa      	ldrb	r2, [r7, #19]
 80024b0:	705a      	strb	r2, [r3, #1]
    } while (remain_len > 0);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	dcd2      	bgt.n	800245e <MqttEncode_RemainLen+0x22>

    return encode_bytes + 1; /* Add byte for header flags/type */
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3301      	adds	r3, #1
}
 80024bc:	4618      	mov	r0, r3
 80024be:	371c      	adds	r7, #28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <MqttDecode_Num>:

/* Returns number of buffer bytes decoded */
int MqttDecode_Num(byte* buf, word16 *len)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
    if (len) {
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d011      	beq.n	80024fa <MqttDecode_Num+0x34>
        *len = buf[0];
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b29a      	uxth	r2, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	801a      	strh	r2, [r3, #0]
        *len = (*len << 8) | buf[1];
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3301      	adds	r3, #1
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	b21b      	sxth	r3, r3
 80024f0:	4313      	orrs	r3, r2
 80024f2:	b21b      	sxth	r3, r3
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	801a      	strh	r2, [r3, #0]
    }
    return MQTT_DATA_LEN_SIZE;
 80024fa:	2302      	movs	r3, #2
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <MqttEncode_Num>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Num(byte *buf, word16 len)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	460b      	mov	r3, r1
 8002510:	807b      	strh	r3, [r7, #2]
    buf[0] = len >> 8;
 8002512:	887b      	ldrh	r3, [r7, #2]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	b29b      	uxth	r3, r3
 8002518:	b2da      	uxtb	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	701a      	strb	r2, [r3, #0]
    buf[1] = len & 0xFF;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3301      	adds	r3, #1
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]
    return MQTT_DATA_LEN_SIZE;
 8002528:	2302      	movs	r3, #2
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <MqttDecode_String>:

/* Returns number of buffer bytes decoded */
/* Returns pointer to string (which is not guarenteed to be null terminated) */
int MqttDecode_String(byte *buf, const char **pstr, word16 *pstr_len)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
    int len;
    word16 str_len;
    len = MqttDecode_Num(buf, &str_len);
 8002540:	f107 0312 	add.w	r3, r7, #18
 8002544:	4619      	mov	r1, r3
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f7ff ffbd 	bl	80024c6 <MqttDecode_Num>
 800254c:	6178      	str	r0, [r7, #20]
    buf += len;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
    if (pstr_len) {
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <MqttDecode_String+0x2e>
        *pstr_len = str_len;
 800255c:	8a7a      	ldrh	r2, [r7, #18]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	801a      	strh	r2, [r3, #0]
    }
    if (pstr) {
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <MqttDecode_String+0x3a>
        *pstr = (char*)buf;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	601a      	str	r2, [r3, #0]
    }
    return len + str_len;
 800256e:	8a7b      	ldrh	r3, [r7, #18]
 8002570:	461a      	mov	r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	4413      	add	r3, r2
}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <MqttEncode_String>:

/* Returns number of buffer bytes encoded */
int MqttEncode_String(byte *buf, const char *str)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
    int str_len = (int)XSTRLEN(str);
 8002588:	6838      	ldr	r0, [r7, #0]
 800258a:	f7fd fde1 	bl	8000150 <strlen>
 800258e:	4603      	mov	r3, r0
 8002590:	60fb      	str	r3, [r7, #12]
    int len = (int)MqttEncode_Num(buf, (word16)str_len);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	b29b      	uxth	r3, r3
 8002596:	4619      	mov	r1, r3
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ffb4 	bl	8002506 <MqttEncode_Num>
 800259e:	60b8      	str	r0, [r7, #8]
    buf += len;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	607b      	str	r3, [r7, #4]
    XMEMCPY(buf, str, str_len);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	461a      	mov	r2, r3
 80025ac:	6839      	ldr	r1, [r7, #0]
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f001 ffb0 	bl	8004514 <memcpy>
    return len + str_len;
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4413      	add	r3, r2
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <MqttEncode_Data>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Data(byte *buf, const byte *data, word16 data_len)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	4613      	mov	r3, r2
 80025ce:	80fb      	strh	r3, [r7, #6]
    int len = (int)MqttEncode_Num(buf, data_len);
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	4619      	mov	r1, r3
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7ff ff96 	bl	8002506 <MqttEncode_Num>
 80025da:	6178      	str	r0, [r7, #20]
    buf += len;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4413      	add	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
    XMEMCPY(buf, data, data_len);
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	461a      	mov	r2, r3
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f001 ff92 	bl	8004514 <memcpy>
    return len + data_len;
 80025f0:	88fa      	ldrh	r2, [r7, #6]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	4413      	add	r3, r2
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <MqttEncode_Connect>:


/* Packet Type Encoders/Decoders */
int MqttEncode_Connect(byte *tx_buf, int tx_buf_len, MqttConnect *connect)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08e      	sub	sp, #56	; 0x38
 8002604:	af04      	add	r7, sp, #16
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    MqttConnectPacket packet = MQTT_CONNECT_INIT;
 800260c:	4a93      	ldr	r2, [pc, #588]	; (800285c <MqttEncode_Connect+0x25c>)
 800260e:	f107 0310 	add.w	r3, r7, #16
 8002612:	ca07      	ldmia	r2, {r0, r1, r2}
 8002614:	c303      	stmia	r3!, {r0, r1}
 8002616:	801a      	strh	r2, [r3, #0]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || connect == NULL || connect->client_id == NULL) {
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d006      	beq.n	800262c <MqttEncode_Connect+0x2c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <MqttEncode_Connect+0x2c>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <MqttEncode_Connect+0x32>
        return MQTT_CODE_ERROR_BAD_ARG;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002630:	e110      	b.n	8002854 <MqttEncode_Connect+0x254>
    }

    /* Determine packet length */
    /* MQTT Version 4 header is 10 bytes */
    remain_len = sizeof(MqttConnectPacket);
 8002632:	230a      	movs	r3, #10
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
    remain_len += (int)XSTRLEN(connect->client_id) + MQTT_DATA_LEN_SIZE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd fd88 	bl	8000150 <strlen>
 8002640:	4603      	mov	r3, r0
 8002642:	3302      	adds	r3, #2
 8002644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002646:	4413      	add	r3, r2
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
    if (connect->enable_lwt) {
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	7b1b      	ldrb	r3, [r3, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d02c      	beq.n	80026ac <MqttEncode_Connect+0xac>
        /* Verify all required fields are present */
        if (connect->lwt_msg == NULL ||
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00e      	beq.n	8002678 <MqttEncode_Connect+0x78>
            connect->lwt_msg->topic_name == NULL ||
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	689b      	ldr	r3, [r3, #8]
        if (connect->lwt_msg == NULL ||
 8002660:	2b00      	cmp	r3, #0
 8002662:	d009      	beq.n	8002678 <MqttEncode_Connect+0x78>
            connect->lwt_msg->buffer == NULL ||
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	695b      	ldr	r3, [r3, #20]
            connect->lwt_msg->topic_name == NULL ||
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <MqttEncode_Connect+0x78>
            connect->lwt_msg->total_len <= 0)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	691b      	ldr	r3, [r3, #16]
            connect->lwt_msg->buffer == NULL ||
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <MqttEncode_Connect+0x7e>
        {
            return MQTT_CODE_ERROR_BAD_ARG;
 8002678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800267c:	e0ea      	b.n	8002854 <MqttEncode_Connect+0x254>
        }

        remain_len += (int)XSTRLEN(connect->lwt_msg->topic_name);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd fd63 	bl	8000150 <strlen>
 800268a:	4603      	mov	r3, r0
 800268c:	461a      	mov	r2, r3
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	4413      	add	r3, r2
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	3302      	adds	r3, #2
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += connect->lwt_msg->total_len;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	4413      	add	r3, r2
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	3302      	adds	r3, #2
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->username) {
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <MqttEncode_Connect+0xc8>
        remain_len += (int)XSTRLEN(connect->username) + MQTT_DATA_LEN_SIZE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd fd49 	bl	8000150 <strlen>
 80026be:	4603      	mov	r3, r0
 80026c0:	3302      	adds	r3, #2
 80026c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c4:	4413      	add	r3, r2
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->password) {
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d009      	beq.n	80026e4 <MqttEncode_Connect+0xe4>
        remain_len += (int)XSTRLEN(connect->password) + MQTT_DATA_LEN_SIZE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fd fd3b 	bl	8000150 <strlen>
 80026da:	4603      	mov	r3, r0
 80026dc:	3302      	adds	r3, #2
 80026de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e0:	4413      	add	r3, r2
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 80026e4:	2300      	movs	r3, #0
 80026e6:	9302      	str	r3, [sp, #8]
 80026e8:	2300      	movs	r3, #0
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	2300      	movs	r3, #0
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2301      	movs	r3, #1
 80026f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f7ff fdc5 	bl	8002286 <MqttEncode_FixedHeader>
 80026fc:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT, 0, 0, 0);
    if (header_len < 0) {
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	2b00      	cmp	r3, #0
 8002702:	da01      	bge.n	8002708 <MqttEncode_Connect+0x108>
        return header_len;
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	e0a5      	b.n	8002854 <MqttEncode_Connect+0x254>
    }
    tx_payload = &tx_buf[header_len];
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4413      	add	r3, r2
 800270e:	623b      	str	r3, [r7, #32]

    /* Encode variable header */
    /* Set connection flags */
    if (connect->clean_session) {
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	791b      	ldrb	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <MqttEncode_Connect+0x122>
        packet.flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8002718:	7dfb      	ldrb	r3, [r7, #23]
 800271a:	f043 0302 	orr.w	r3, r3, #2
 800271e:	b2db      	uxtb	r3, r3
 8002720:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->enable_lwt) {
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7b1b      	ldrb	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d021      	beq.n	800276e <MqttEncode_Connect+0x16e>
        packet.flags |= MQTT_CONNECT_FLAG_WILL_FLAG;
 800272a:	7dfb      	ldrb	r3, [r7, #23]
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	b2db      	uxtb	r3, r3
 8002732:	75fb      	strb	r3, [r7, #23]

        if (connect->lwt_msg->qos) {
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	795b      	ldrb	r3, [r3, #5]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00d      	beq.n	800275a <MqttEncode_Connect+0x15a>
            packet.flags |= MQTT_CONNECT_FLAG_SET_QOS(connect->lwt_msg->qos);
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	b25a      	sxtb	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	795b      	ldrb	r3, [r3, #5]
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	b25b      	sxtb	r3, r3
 800274c:	f003 0318 	and.w	r3, r3, #24
 8002750:	b25b      	sxtb	r3, r3
 8002752:	4313      	orrs	r3, r2
 8002754:	b25b      	sxtb	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	75fb      	strb	r3, [r7, #23]
        }
        if (connect->lwt_msg->retain) {
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	799b      	ldrb	r3, [r3, #6]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <MqttEncode_Connect+0x16e>
            packet.flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8002764:	7dfb      	ldrb	r3, [r7, #23]
 8002766:	f043 0320 	orr.w	r3, r3, #32
 800276a:	b2db      	uxtb	r3, r3
 800276c:	75fb      	strb	r3, [r7, #23]
        }
    }
    if (connect->username) {
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d004      	beq.n	8002780 <MqttEncode_Connect+0x180>
        packet.flags |= MQTT_CONNECT_FLAG_USERNAME;
 8002776:	7dfb      	ldrb	r3, [r7, #23]
 8002778:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800277c:	b2db      	uxtb	r3, r3
 800277e:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->password) {
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d004      	beq.n	8002792 <MqttEncode_Connect+0x192>
        packet.flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800278e:	b2db      	uxtb	r3, r3
 8002790:	75fb      	strb	r3, [r7, #23]
    }
    MqttEncode_Num((byte*)&packet.keep_alive, connect->keep_alive_sec);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	885a      	ldrh	r2, [r3, #2]
 8002796:	f107 0310 	add.w	r3, r7, #16
 800279a:	3308      	adds	r3, #8
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff feb1 	bl	8002506 <MqttEncode_Num>
    XMEMCPY(tx_payload, &packet, sizeof(MqttConnectPacket));
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	461a      	mov	r2, r3
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	cb03      	ldmia	r3!, {r0, r1}
 80027ae:	6010      	str	r0, [r2, #0]
 80027b0:	6051      	str	r1, [r2, #4]
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	8113      	strh	r3, [r2, #8]
    tx_payload += sizeof(MqttConnectPacket);
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	330a      	adds	r3, #10
 80027ba:	623b      	str	r3, [r7, #32]

    /* Encode payload */
    tx_payload += MqttEncode_String(tx_payload, connect->client_id);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4619      	mov	r1, r3
 80027c2:	6a38      	ldr	r0, [r7, #32]
 80027c4:	f7ff fedb 	bl	800257e <MqttEncode_String>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	4413      	add	r3, r2
 80027d0:	623b      	str	r3, [r7, #32]
    if (connect->enable_lwt) {
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7b1b      	ldrb	r3, [r3, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01b      	beq.n	8002812 <MqttEncode_Connect+0x212>
        tx_payload += MqttEncode_String(tx_payload,
            connect->lwt_msg->topic_name);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_String(tx_payload,
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4619      	mov	r1, r3
 80027e2:	6a38      	ldr	r0, [r7, #32]
 80027e4:	f7ff fecb 	bl	800257e <MqttEncode_String>
 80027e8:	4603      	mov	r3, r0
 80027ea:	461a      	mov	r2, r3
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	4413      	add	r3, r2
 80027f0:	623b      	str	r3, [r7, #32]
        tx_payload += MqttEncode_Data(tx_payload,
            connect->lwt_msg->buffer, (word16)connect->lwt_msg->total_len);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	6959      	ldr	r1, [r3, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_Data(tx_payload,
 80027fe:	b29b      	uxth	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	6a38      	ldr	r0, [r7, #32]
 8002804:	f7ff fedd 	bl	80025c2 <MqttEncode_Data>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	4413      	add	r3, r2
 8002810:	623b      	str	r3, [r7, #32]
    }
    if (connect->username) {
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <MqttEncode_Connect+0x230>
        tx_payload += MqttEncode_String(tx_payload, connect->username);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	4619      	mov	r1, r3
 8002820:	6a38      	ldr	r0, [r7, #32]
 8002822:	f7ff feac 	bl	800257e <MqttEncode_String>
 8002826:	4603      	mov	r3, r0
 8002828:	461a      	mov	r2, r3
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	4413      	add	r3, r2
 800282e:	623b      	str	r3, [r7, #32]
    }
    if (connect->password) {
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <MqttEncode_Connect+0x24e>
        tx_payload += MqttEncode_String(tx_payload, connect->password);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4619      	mov	r1, r3
 800283e:	6a38      	ldr	r0, [r7, #32]
 8002840:	f7ff fe9d 	bl	800257e <MqttEncode_String>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	4413      	add	r3, r2
 800284c:	623b      	str	r3, [r7, #32]
    }
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	4413      	add	r3, r2
}
 8002854:	4618      	mov	r0, r3
 8002856:	3728      	adds	r7, #40	; 0x28
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	080046f0 	.word	0x080046f0

08002860 <MqttDecode_ConnectAck>:

int MqttDecode_ConnectAck(byte *rx_buf, int rx_buf_len,
    MqttConnectAck *connect_ack)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08c      	sub	sp, #48	; 0x30
 8002864:	af04      	add	r7, sp, #16
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <MqttDecode_ConnectAck+0x18>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	dc02      	bgt.n	800287e <MqttDecode_ConnectAck+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800287c:	e024      	b.n	80028c8 <MqttDecode_ConnectAck+0x68>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 800287e:	f107 0214 	add.w	r2, r7, #20
 8002882:	2300      	movs	r3, #0
 8002884:	9302      	str	r3, [sp, #8]
 8002886:	2300      	movs	r3, #0
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	2300      	movs	r3, #0
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2302      	movs	r3, #2
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7ff fd3e 	bl	8002314 <MqttDecode_FixedHeader>
 8002898:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	2b00      	cmp	r3, #0
 800289e:	da01      	bge.n	80028a4 <MqttDecode_ConnectAck+0x44>
        return header_len;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	e011      	b.n	80028c8 <MqttDecode_ConnectAck+0x68>
    }
    rx_payload = &rx_buf[header_len];
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4413      	add	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (connect_ack) {
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <MqttDecode_ConnectAck+0x62>
        connect_ack->flags = rx_payload[0];
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	701a      	strb	r2, [r3, #0]
        connect_ack->return_code = rx_payload[1];
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	785a      	ldrb	r2, [r3, #1]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	705a      	strb	r2, [r3, #1]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3720      	adds	r7, #32
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <MqttEncode_Publish>:

int MqttEncode_Publish(byte *tx_buf, int tx_buf_len, MqttPublish *publish)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08c      	sub	sp, #48	; 0x30
 80028d4:	af04      	add	r7, sp, #16
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
    int header_len, variable_len, payload_len = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || publish == NULL) {
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <MqttEncode_Publish+0x1c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <MqttEncode_Publish+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028f0:	e079      	b.n	80029e6 <MqttEncode_Publish+0x116>
    }

    /* Determine packet length */
    variable_len = (int)XSTRLEN(publish->topic_name) + MQTT_DATA_LEN_SIZE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fd fc2a 	bl	8000150 <strlen>
 80028fc:	4603      	mov	r3, r0
 80028fe:	3302      	adds	r3, #2
 8002900:	61fb      	str	r3, [r7, #28]
    if (publish->qos > MQTT_QOS_0) {
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	795b      	ldrb	r3, [r3, #5]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <MqttEncode_Publish+0x4e>
        if (publish->packet_id == 0) {
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	885b      	ldrh	r3, [r3, #2]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <MqttEncode_Publish+0x48>
            return MQTT_CODE_ERROR_PACKET_ID;
 8002912:	f06f 0304 	mvn.w	r3, #4
 8002916:	e066      	b.n	80029e6 <MqttEncode_Publish+0x116>
        }
        variable_len += MQTT_DATA_LEN_SIZE; /* For packet_id */
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	3302      	adds	r3, #2
 800291c:	61fb      	str	r3, [r7, #28]
    }
    if (publish->buffer && publish->total_len > 0) {
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d006      	beq.n	8002934 <MqttEncode_Publish+0x64>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <MqttEncode_Publish+0x64>
        payload_len = publish->total_len;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	61bb      	str	r3, [r7, #24]
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	18d0      	adds	r0, r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	799b      	ldrb	r3, [r3, #6]
        variable_len + payload_len, MQTT_PACKET_TYPE_PUBLISH,
        publish->retain, publish->qos, publish->duplicate);
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	7952      	ldrb	r2, [r2, #5]
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	79c9      	ldrb	r1, [r1, #7]
 8002946:	9102      	str	r1, [sp, #8]
 8002948:	9201      	str	r2, [sp, #4]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2303      	movs	r3, #3
 800294e:	4602      	mov	r2, r0
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f7ff fc97 	bl	8002286 <MqttEncode_FixedHeader>
 8002958:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	da01      	bge.n	8002964 <MqttEncode_Publish+0x94>
        return header_len;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	e040      	b.n	80029e6 <MqttEncode_Publish+0x116>
    }
    tx_payload = &tx_buf[header_len];
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4413      	add	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

    /* Encode variable header */
    tx_payload += MqttEncode_String(tx_payload, publish->topic_name);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4619      	mov	r1, r3
 8002972:	6978      	ldr	r0, [r7, #20]
 8002974:	f7ff fe03 	bl	800257e <MqttEncode_String>
 8002978:	4603      	mov	r3, r0
 800297a:	461a      	mov	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	4413      	add	r3, r2
 8002980:	617b      	str	r3, [r7, #20]
    if (publish->qos > MQTT_QOS_0) {
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	795b      	ldrb	r3, [r3, #5]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <MqttEncode_Publish+0xd0>
        tx_payload += MqttEncode_Num(tx_payload, publish->packet_id);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	885b      	ldrh	r3, [r3, #2]
 800298e:	4619      	mov	r1, r3
 8002990:	6978      	ldr	r0, [r7, #20]
 8002992:	f7ff fdb8 	bl	8002506 <MqttEncode_Num>
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	4413      	add	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
    }

    /* Encode payload */
    if (payload_len > 0) {
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	dd14      	ble.n	80029d0 <MqttEncode_Publish+0x100>

        /* Determine max size to copy into tx_payload */
        if (payload_len > (tx_buf_len - (header_len + variable_len))) {
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	4413      	add	r3, r2
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	1ad2      	subs	r2, r2, r3
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	da05      	bge.n	80029c2 <MqttEncode_Publish+0xf2>
            payload_len = (tx_buf_len - (header_len + variable_len));
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	4413      	add	r3, r2
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	61bb      	str	r3, [r7, #24]
        }
        XMEMCPY(tx_payload, publish->buffer, payload_len);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4619      	mov	r1, r3
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f001 fda2 	bl	8004514 <memcpy>
    }
    publish->buffer_pos = 0;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	61da      	str	r2, [r3, #28]

    /* Return length of packet placed into tx_buf */
    return header_len + variable_len + payload_len;
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	441a      	add	r2, r3
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	4413      	add	r3, r2
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <MqttDecode_Publish>:

int MqttDecode_Publish(byte *rx_buf, int rx_buf_len, MqttPublish *publish)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b08e      	sub	sp, #56	; 0x38
 80029f2:	af04      	add	r7, sp, #16
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, variable_len, payload_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || publish == NULL) {
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <MqttDecode_Publish+0x1e>
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	dd02      	ble.n	8002a0c <MqttDecode_Publish+0x1e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d102      	bne.n	8002a12 <MqttDecode_Publish+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a10:	e060      	b.n	8002ad4 <MqttDecode_Publish+0xe6>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3305      	adds	r3, #5
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	3206      	adds	r2, #6
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	3107      	adds	r1, #7
 8002a1e:	f107 0014 	add.w	r0, r7, #20
 8002a22:	9102      	str	r1, [sp, #8]
 8002a24:	9201      	str	r2, [sp, #4]
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2303      	movs	r3, #3
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f7ff fc70 	bl	8002314 <MqttDecode_FixedHeader>
 8002a34:	61f8      	str	r0, [r7, #28]
        &remain_len, MQTT_PACKET_TYPE_PUBLISH, &publish->qos,
        &publish->retain, &publish->duplicate);
    if (header_len < 0) {
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	da01      	bge.n	8002a40 <MqttDecode_Publish+0x52>
        return header_len;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	e049      	b.n	8002ad4 <MqttDecode_Publish+0xe6>
    }
    rx_payload = &rx_buf[header_len];
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4413      	add	r3, r2
 8002a46:	623b      	str	r3, [r7, #32]

    /* Decode variable header */
    variable_len = MqttDecode_String(rx_payload, &publish->topic_name,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f103 0108 	add.w	r1, r3, #8
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	330c      	adds	r3, #12
 8002a52:	461a      	mov	r2, r3
 8002a54:	6a38      	ldr	r0, [r7, #32]
 8002a56:	f7ff fd6d 	bl	8002534 <MqttDecode_String>
 8002a5a:	6278      	str	r0, [r7, #36]	; 0x24
        &publish->topic_name_len);
    rx_payload += variable_len;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	6a3a      	ldr	r2, [r7, #32]
 8002a60:	4413      	add	r3, r2
 8002a62:	623b      	str	r3, [r7, #32]

    /* If QoS > 0 then get packet Id */
    if (publish->qos > MQTT_QOS_0) {
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	795b      	ldrb	r3, [r3, #5]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00c      	beq.n	8002a86 <MqttDecode_Publish+0x98>
        variable_len += MqttDecode_Num(rx_payload, &publish->packet_id);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3302      	adds	r3, #2
 8002a70:	4619      	mov	r1, r3
 8002a72:	6a38      	ldr	r0, [r7, #32]
 8002a74:	f7ff fd27 	bl	80024c6 <MqttDecode_Num>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	4413      	add	r3, r2
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
        rx_payload += MQTT_DATA_LEN_SIZE;
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	3302      	adds	r3, #2
 8002a84:	623b      	str	r3, [r7, #32]
    }

    /* Decode Payload */
    payload_len = remain_len - variable_len;
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	61bb      	str	r3, [r7, #24]
    publish->buffer = rx_payload;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a3a      	ldr	r2, [r7, #32]
 8002a92:	615a      	str	r2, [r3, #20]
    publish->buffer_pos = 0;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	61da      	str	r2, [r3, #28]
    publish->total_len = payload_len;
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	611a      	str	r2, [r3, #16]

    /* Only return the length provided in rx_buf_len */
    if ((int)publish->buffer_len >
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	4619      	mov	r1, r3
        (rx_buf_len - (header_len + variable_len)))
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	4413      	add	r3, r2
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	1ad3      	subs	r3, r2, r3
    if ((int)publish->buffer_len >
 8002ab6:	4299      	cmp	r1, r3
 8002ab8:	dd07      	ble.n	8002aca <MqttDecode_Publish+0xdc>
    {
        publish->buffer_len = (rx_buf_len - (header_len + variable_len));
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	4413      	add	r3, r2
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	61da      	str	r2, [r3, #28]
    }

    return header_len + variable_len + payload_len;
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	441a      	add	r2, r3
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	4413      	add	r3, r2
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3728      	adds	r7, #40	; 0x28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <MqttEncode_PublishResp>:

int MqttEncode_PublishResp(byte* tx_buf, int tx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08c      	sub	sp, #48	; 0x30
 8002ae0:	af04      	add	r7, sp, #16
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *tx_payload;
    MqttQoS qos;

    /* Validate required arguments */
    if (tx_buf == NULL || publish_resp == NULL) {
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <MqttEncode_PublishResp+0x1c>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <MqttEncode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002afc:	e030      	b.n	8002b60 <MqttEncode_PublishResp+0x84>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 8002afe:	2302      	movs	r3, #2
 8002b00:	61fb      	str	r3, [r7, #28]

    /* Determine Qos value */
    qos = (type == MQTT_PACKET_TYPE_PUBLISH_REL) ? MQTT_QOS_1 : MQTT_QOS_0;
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	2b06      	cmp	r3, #6
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	76fb      	strb	r3, [r7, #27]

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 8002b10:	79fa      	ldrb	r2, [r7, #7]
 8002b12:	2300      	movs	r3, #0
 8002b14:	9302      	str	r3, [sp, #8]
 8002b16:	7efb      	ldrb	r3, [r7, #27]
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f7ff fbae 	bl	8002286 <MqttEncode_FixedHeader>
 8002b2a:	6178      	str	r0, [r7, #20]
        type, 0, qos, 0);
    if (header_len < 0) {
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	da01      	bge.n	8002b36 <MqttEncode_PublishResp+0x5a>
        return header_len;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	e014      	b.n	8002b60 <MqttEncode_PublishResp+0x84>
    }
    tx_payload = &tx_buf[header_len];
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], publish_resp->packet_id);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	441a      	add	r2, r3
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	f7ff fcdb 	bl	8002506 <MqttEncode_Num>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	4413      	add	r3, r2
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3720      	adds	r7, #32
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <MqttDecode_PublishResp>:

int MqttDecode_PublishResp(byte* rx_buf, int rx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08c      	sub	sp, #48	; 0x30
 8002b6c:	af04      	add	r7, sp, #16
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <MqttDecode_PublishResp+0x1c>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	dc02      	bgt.n	8002b8a <MqttDecode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b88:	e027      	b.n	8002bda <MqttDecode_PublishResp+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8002b8a:	79f9      	ldrb	r1, [r7, #7]
 8002b8c:	f107 0214 	add.w	r2, r7, #20
 8002b90:	2300      	movs	r3, #0
 8002b92:	9302      	str	r3, [sp, #8]
 8002b94:	2300      	movs	r3, #0
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f7ff fbb7 	bl	8002314 <MqttDecode_FixedHeader>
 8002ba6:	61f8      	str	r0, [r7, #28]
        type, NULL, NULL, NULL);
    if (header_len < 0) {
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	da01      	bge.n	8002bb2 <MqttDecode_PublishResp+0x4a>
        return header_len;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	e013      	b.n	8002bda <MqttDecode_PublishResp+0x72>
    }
    rx_payload = &rx_buf[header_len];
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (publish_resp) {
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <MqttDecode_PublishResp+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &publish_resp->packet_id);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	69b8      	ldr	r0, [r7, #24]
 8002bc6:	f7ff fc7e 	bl	80024c6 <MqttDecode_Num>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	461a      	mov	r2, r3
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	4413      	add	r3, r2
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <MqttEncode_Subscribe>:

int MqttEncode_Subscribe(byte *tx_buf, int tx_buf_len,
    MqttSubscribe *subscribe)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b08e      	sub	sp, #56	; 0x38
 8002be6:	af04      	add	r7, sp, #16
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, i;
    byte *tx_payload;
    MqttTopic *topic;

    /* Validate required arguments */
    if (tx_buf == NULL || subscribe == NULL) {
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <MqttEncode_Subscribe+0x18>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <MqttEncode_Subscribe+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bfe:	e069      	b.n	8002cd4 <MqttEncode_Subscribe+0xf2>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 8002c00:	2302      	movs	r3, #2
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 8002c04:	2300      	movs	r3, #0
 8002c06:	623b      	str	r3, [r7, #32]
 8002c08:	e015      	b.n	8002c36 <MqttEncode_Subscribe+0x54>
                                topic = &subscribe->topics[i];
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4413      	add	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        remain_len += (int)XSTRLEN(topic->topic_filter) + MQTT_DATA_LEN_SIZE;
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fa98 	bl	8000150 <strlen>
 8002c20:	4603      	mov	r3, r0
 8002c22:	3302      	adds	r3, #2
 8002c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c26:	4413      	add	r3, r2
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len++; /* For QoS */
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	3301      	adds	r3, #1
 8002c34:	623b      	str	r3, [r7, #32]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	dce4      	bgt.n	8002c0a <MqttEncode_Subscribe+0x28>
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 8002c40:	2300      	movs	r3, #0
 8002c42:	9302      	str	r3, [sp, #8]
 8002c44:	2301      	movs	r3, #1
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2308      	movs	r3, #8
 8002c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff fb17 	bl	8002286 <MqttEncode_FixedHeader>
 8002c58:	6178      	str	r0, [r7, #20]
        MQTT_PACKET_TYPE_SUBSCRIBE, 0, MQTT_QOS_1, 0);
    if (header_len < 0) {
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	da01      	bge.n	8002c64 <MqttEncode_Subscribe+0x82>
        return header_len;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	e037      	b.n	8002cd4 <MqttEncode_Subscribe+0xf2>
    }
    tx_payload = &tx_buf[header_len];
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4413      	add	r3, r2
 8002c6a:	61fb      	str	r3, [r7, #28]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], subscribe->packet_id);
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	441a      	add	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	885b      	ldrh	r3, [r3, #2]
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f7ff fc44 	bl	8002506 <MqttEncode_Num>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	461a      	mov	r2, r3
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	4413      	add	r3, r2
 8002c86:	61fb      	str	r3, [r7, #28]

    /* Encode payload */
    for (i = 0; i < subscribe->topic_count; i++) {
 8002c88:	2300      	movs	r3, #0
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	e01a      	b.n	8002cc4 <MqttEncode_Subscribe+0xe2>
        topic = &subscribe->topics[i];
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4413      	add	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        tx_payload += MqttEncode_String(tx_payload, topic->topic_filter);
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	69f8      	ldr	r0, [r7, #28]
 8002ca2:	f7ff fc6c 	bl	800257e <MqttEncode_String>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	461a      	mov	r2, r3
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	4413      	add	r3, r2
 8002cae:	61fb      	str	r3, [r7, #28]
        *tx_payload = topic->qos;
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	791a      	ldrb	r2, [r3, #4]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	701a      	strb	r2, [r3, #0]
        tx_payload++;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < subscribe->topic_count; i++) {
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	623b      	str	r3, [r7, #32]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	dcdf      	bgt.n	8002c8e <MqttEncode_Subscribe+0xac>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	4413      	add	r3, r2
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3728      	adds	r7, #40	; 0x28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <MqttDecode_SubscribeAck>:

int MqttDecode_SubscribeAck(byte* rx_buf, int rx_buf_len,
    MqttSubscribeAck *subscribe_ack)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08c      	sub	sp, #48	; 0x30
 8002ce0:	af04      	add	r7, sp, #16
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || subscribe_ack == NULL) {
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <MqttDecode_SubscribeAck+0x1e>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	dd02      	ble.n	8002cfa <MqttDecode_SubscribeAck+0x1e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <MqttDecode_SubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cfe:	e029      	b.n	8002d54 <MqttDecode_SubscribeAck+0x78>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8002d00:	f107 0214 	add.w	r2, r7, #20
 8002d04:	2300      	movs	r3, #0
 8002d06:	9302      	str	r3, [sp, #8]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	2309      	movs	r3, #9
 8002d12:	68b9      	ldr	r1, [r7, #8]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f7ff fafd 	bl	8002314 <MqttDecode_FixedHeader>
 8002d1a:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_SUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	da01      	bge.n	8002d26 <MqttDecode_SubscribeAck+0x4a>
        return header_len;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	e016      	b.n	8002d54 <MqttDecode_SubscribeAck+0x78>
    }
    rx_payload = &rx_buf[header_len];
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (subscribe_ack) {
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00c      	beq.n	8002d4e <MqttDecode_SubscribeAck+0x72>
        rx_payload += MqttDecode_Num(rx_payload, &subscribe_ack->packet_id);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4619      	mov	r1, r3
 8002d38:	69b8      	ldr	r0, [r7, #24]
 8002d3a:	f7ff fbc4 	bl	80024c6 <MqttDecode_Num>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4413      	add	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        subscribe_ack->return_codes = rx_payload; /* List of return codes */
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	605a      	str	r2, [r3, #4]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	4413      	add	r3, r2
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3720      	adds	r7, #32
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <MqttDecode_UnsubscribeAck>:
    return header_len + remain_len;
}

int MqttDecode_UnsubscribeAck(byte *rx_buf, int rx_buf_len,
    MqttUnsubscribeAck *unsubscribe_ack)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08c      	sub	sp, #48	; 0x30
 8002d60:	af04      	add	r7, sp, #16
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || unsubscribe_ack == NULL) {
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <MqttDecode_UnsubscribeAck+0x1e>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	dd02      	ble.n	8002d7a <MqttDecode_UnsubscribeAck+0x1e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <MqttDecode_UnsubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d7e:	e026      	b.n	8002dce <MqttDecode_UnsubscribeAck+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8002d80:	f107 0214 	add.w	r2, r7, #20
 8002d84:	2300      	movs	r3, #0
 8002d86:	9302      	str	r3, [sp, #8]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	230b      	movs	r3, #11
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7ff fabd 	bl	8002314 <MqttDecode_FixedHeader>
 8002d9a:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	da01      	bge.n	8002da6 <MqttDecode_UnsubscribeAck+0x4a>
        return header_len;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	e013      	b.n	8002dce <MqttDecode_UnsubscribeAck+0x72>
    }
    rx_payload = &rx_buf[header_len];
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (unsubscribe_ack) {
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d009      	beq.n	8002dc8 <MqttDecode_UnsubscribeAck+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &unsubscribe_ack->packet_id);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4619      	mov	r1, r3
 8002db8:	69b8      	ldr	r0, [r7, #24]
 8002dba:	f7ff fb84 	bl	80024c6 <MqttDecode_Num>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	4413      	add	r3, r2
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <MqttDecode_Ping>:
    /* Return total length of packet */
    return header_len + remain_len;
}

int MqttDecode_Ping(byte *rx_buf, int rx_buf_len)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b088      	sub	sp, #32
 8002dda:	af04      	add	r7, sp, #16
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	6039      	str	r1, [r7, #0]
    int header_len, remain_len;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <MqttDecode_Ping+0x16>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	dc02      	bgt.n	8002df2 <MqttDecode_Ping+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8002dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002df0:	e015      	b.n	8002e1e <MqttDecode_Ping+0x48>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8002df2:	f107 0208 	add.w	r2, r7, #8
 8002df6:	2300      	movs	r3, #0
 8002df8:	9302      	str	r3, [sp, #8]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	230d      	movs	r3, #13
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff fa84 	bl	8002314 <MqttDecode_FixedHeader>
 8002e0c:	60f8      	str	r0, [r7, #12]
        MQTT_PACKET_TYPE_PING_RESP, NULL, NULL, NULL);
    if (header_len < 0) {
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	da01      	bge.n	8002e18 <MqttDecode_Ping+0x42>
        return header_len;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	e002      	b.n	8002e1e <MqttDecode_Ping+0x48>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4413      	add	r3, r2
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <MqttPacket_Write>:
    return header_len;
}


int MqttPacket_Write(MqttClient *client, byte* tx_buf, int tx_buf_len)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
    int rc;
    rc = MqttSocket_Write(client, tx_buf, tx_buf_len, client->cmd_timeout_ms);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f8e9 	bl	8003012 <MqttSocket_Write>
 8002e40:	6178      	str	r0, [r7, #20]
    return rc;
 8002e42:	697b      	ldr	r3, [r7, #20]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <MqttPacket_Read>:

/* Read return code is length when > 0 */
int MqttPacket_Read(MqttClient *client, byte* rx_buf, int rx_buf_len,
    int timeout_ms)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
    int rc, len, remain_read = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
    MqttPacket* header = (MqttPacket*)rx_buf;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	61bb      	str	r3, [r7, #24]

    switch (client->packet.stat)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	7f1b      	ldrb	r3, [r3, #28]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d01e      	beq.n	8002ea8 <MqttPacket_Read+0x5c>
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d057      	beq.n	8002f1e <MqttPacket_Read+0xd2>
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d17e      	bne.n	8002f70 <MqttPacket_Read+0x124>
    {
        case MQTT_PK_BEGIN:
        {
            client->packet.header_len = 2;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2202      	movs	r2, #2
 8002e76:	621a      	str	r2, [r3, #32]
            client->packet.remain_len = 0;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24

            /* Read fix header portion */
            rc = MqttSocket_Read(client, rx_buf, client->packet.header_len, timeout_ms);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f92a 	bl	80030e0 <MqttSocket_Read>
 8002e8c:	6178      	str	r0, [r7, #20]
            if (rc < 0) {
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da01      	bge.n	8002e98 <MqttPacket_Read+0x4c>
                return rc;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	e072      	b.n	8002f7e <MqttPacket_Read+0x132>
            }
            else if (rc != client->packet.header_len) {
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a1a      	ldr	r2, [r3, #32]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d002      	beq.n	8002ea8 <MqttPacket_Read+0x5c>
                return MQTT_CODE_ERROR_NETWORK;
 8002ea2:	f06f 0307 	mvn.w	r3, #7
 8002ea6:	e06a      	b.n	8002f7e <MqttPacket_Read+0x132>
            FALL_THROUGH;
        }

        case MQTT_PK_READ_HEAD:
        {
            client->packet.stat = MQTT_PK_READ_HEAD;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	771a      	strb	r2, [r3, #28]

            do {
                /* Try and decode remaining length */
                rc = MqttDecode_RemainLen(header, client->packet.header_len, &client->packet.remain_len);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a19      	ldr	r1, [r3, #32]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	3324      	adds	r3, #36	; 0x24
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	69b8      	ldr	r0, [r7, #24]
 8002eba:	f7ff fa79 	bl	80023b0 <MqttDecode_RemainLen>
 8002ebe:	6178      	str	r0, [r7, #20]
                if (rc < 0) { /* Indicates error */
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	da01      	bge.n	8002eca <MqttPacket_Read+0x7e>
                    return rc;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	e059      	b.n	8002f7e <MqttPacket_Read+0x132>
                }
                /* Indicates decode success and rc is len of header */
                else if (rc > 0) {
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	dd03      	ble.n	8002ed8 <MqttPacket_Read+0x8c>
                    client->packet.header_len = rc;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	621a      	str	r2, [r3, #32]
                    break; /* exit while */
 8002ed6:	e022      	b.n	8002f1e <MqttPacket_Read+0xd2>
                }

                /* Read next byte and try decode again */
                len = 1;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	613b      	str	r3, [r7, #16]
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len], len, timeout_ms);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1899      	adds	r1, r3, r2
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f8f8 	bl	80030e0 <MqttSocket_Read>
 8002ef0:	6178      	str	r0, [r7, #20]
                if (rc < 0) {
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	da01      	bge.n	8002efc <MqttPacket_Read+0xb0>
                    return rc;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	e040      	b.n	8002f7e <MqttPacket_Read+0x132>
                }
                else if (rc != len) {
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d002      	beq.n	8002f0a <MqttPacket_Read+0xbe>
                    return MQTT_CODE_ERROR_NETWORK;
 8002f04:	f06f 0307 	mvn.w	r3, #7
 8002f08:	e039      	b.n	8002f7e <MqttPacket_Read+0x132>
                }
                client->packet.header_len += len;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a1a      	ldr	r2, [r3, #32]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	441a      	add	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	621a      	str	r2, [r3, #32]

            } while (client->packet.header_len < MQTT_PACKET_MAX_SIZE);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	ddc7      	ble.n	8002eae <MqttPacket_Read+0x62>
            FALL_THROUGH;
        }

        case MQTT_PK_READ:
        {
            client->packet.stat = MQTT_PK_READ;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2202      	movs	r2, #2
 8002f22:	771a      	strb	r2, [r3, #28]

            /* Make sure it does not overflow rx_buf */
            if (client->packet.remain_len > (rx_buf_len - client->packet.header_len)) {
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	1acb      	subs	r3, r1, r3
 8002f30:	429a      	cmp	r2, r3
 8002f32:	dd05      	ble.n	8002f40 <MqttPacket_Read+0xf4>
                client->packet.remain_len = rx_buf_len - client->packet.header_len;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	1ad2      	subs	r2, r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24
            }

            /* Read remaining */
            if (client->packet.remain_len > 0) {
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	dd12      	ble.n	8002f6e <MqttPacket_Read+0x122>
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len],
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	1899      	adds	r1, r3, r2
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f8c1 	bl	80030e0 <MqttSocket_Read>
 8002f5e:	6178      	str	r0, [r7, #20]
                    client->packet.remain_len, timeout_ms);
                if (rc <= 0) {
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	dc01      	bgt.n	8002f6a <MqttPacket_Read+0x11e>
                    return rc;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	e009      	b.n	8002f7e <MqttPacket_Read+0x132>
                }
                remain_read = rc;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	61fb      	str	r3, [r7, #28]
            }

            break;
 8002f6e:	bf00      	nop
        }
    } /* switch (client->packet.stat) */

    /* reset state */
    client->packet.stat = MQTT_PK_BEGIN;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	771a      	strb	r2, [r3, #28]

    /* Return read length */
    return client->packet.header_len + remain_read;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a1a      	ldr	r2, [r3, #32]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	4413      	add	r3, r2
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3720      	adds	r7, #32
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <MqttSocket_Init>:
#endif


/* Public Functions */
int MqttSocket_Init(MqttClient *client, MqttNet *net)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b085      	sub	sp, #20
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	6039      	str	r1, [r7, #0]
    int rc = MQTT_CODE_ERROR_BAD_ARG;
 8002f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f94:	60fb      	str	r3, [r7, #12]
    if (client) {
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01d      	beq.n	8002fd8 <MqttSocket_Init+0x52>
        client->net = net;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	619a      	str	r2, [r3, #24]
        client->flags &= ~(MQTT_CLIENT_FLAG_IS_CONNECTED |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 0203 	bic.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	601a      	str	r2, [r3, #0]
        client->tls.ssl = NULL;
        client->tls.timeout_ms = client->cmd_timeout_ms;
    #endif

        /* Validate callbacks are not null! */
        if (net && net->connect && net->read && net->write && net->disconnect) {
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d011      	beq.n	8002fd8 <MqttSocket_Init+0x52>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00d      	beq.n	8002fd8 <MqttSocket_Init+0x52>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d009      	beq.n	8002fd8 <MqttSocket_Init+0x52>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <MqttSocket_Init+0x52>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MqttSocket_Init+0x52>
            rc = MQTT_CODE_SUCCESS;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
        }
    }
    return rc;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <MqttSocket_WriteDo>:

static int MqttSocket_WriteDo(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->write(client->net->context, buf, buf_len,
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	68dc      	ldr	r4, [r3, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	47a0      	blx	r4
 8003006:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Write: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 8003008:	697b      	ldr	r3, [r7, #20]
}
 800300a:	4618      	mov	r0, r3
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	bd90      	pop	{r4, r7, pc}

08003012 <MqttSocket_Write>:

int MqttSocket_Write(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->write == NULL ||
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00e      	beq.n	8003044 <MqttSocket_Write+0x32>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <MqttSocket_Write+0x32>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <MqttSocket_Write+0x32>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <MqttSocket_Write+0x32>
        buf == NULL || buf_len <= 0) {
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	dc02      	bgt.n	800304a <MqttSocket_Write+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8003044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003048:	e02f      	b.n	80030aa <MqttSocket_Write+0x98>
    }

    /* check for buffer position overflow */
    if (client->write.pos >= buf_len) {
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	429a      	cmp	r2, r3
 8003052:	db02      	blt.n	800305a <MqttSocket_Write+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8003054:	f06f 0301 	mvn.w	r3, #1
 8003058:	e027      	b.n	80030aa <MqttSocket_Write+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305e:	461a      	mov	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	1899      	adds	r1, r3, r2
            buf_len - client->write.pos, timeout_ms);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	1ad2      	subs	r2, r2, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f7ff ffb8 	bl	8002fe4 <MqttSocket_WriteDo>
 8003074:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2b00      	cmp	r3, #0
 800307a:	dd0b      	ble.n	8003094 <MqttSocket_Write+0x82>
            break;
        }
        client->write.pos += rc;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	441a      	add	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	635a      	str	r2, [r3, #52]	; 0x34
    } while (client->write.pos < buf_len);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	429a      	cmp	r2, r3
 8003090:	dbe3      	blt.n	800305a <MqttSocket_Write+0x48>
 8003092:	e000      	b.n	8003096 <MqttSocket_Write+0x84>
            break;
 8003094:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b00      	cmp	r3, #0
 800309a:	dd05      	ble.n	80030a8 <MqttSocket_Write+0x96>
        /* return length write and reset position */
        rc = client->write.pos;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a0:	617b      	str	r3, [r7, #20]
        client->write.pos = 0;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return rc;
 80030a8:	697b      	ldr	r3, [r7, #20]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <MqttSocket_ReadDo>:

static int MqttSocket_ReadDo(MqttClient *client, byte* buf, int buf_len,
    int timeout_ms)
{
 80030b2:	b590      	push	{r4, r7, lr}
 80030b4:	b087      	sub	sp, #28
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->read(client->net->context, buf, buf_len, timeout_ms);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	689c      	ldr	r4, [r3, #8]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	47a0      	blx	r4
 80030d4:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Read: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 80030d6:	697b      	ldr	r3, [r7, #20]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}

080030e0 <MqttSocket_Read>:

int MqttSocket_Read(MqttClient *client, byte* buf, int buf_len, int timeout_ms)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->read == NULL ||
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00e      	beq.n	8003112 <MqttSocket_Read+0x32>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <MqttSocket_Read+0x32>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <MqttSocket_Read+0x32>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <MqttSocket_Read+0x32>
        buf == NULL || buf_len <= 0) {
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	dc02      	bgt.n	8003118 <MqttSocket_Read+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003116:	e02f      	b.n	8003178 <MqttSocket_Read+0x98>
    }

    /* check for buffer position overflow */
    if (client->read.pos >= buf_len) {
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	429a      	cmp	r2, r3
 8003120:	db02      	blt.n	8003128 <MqttSocket_Read+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8003122:	f06f 0301 	mvn.w	r3, #1
 8003126:	e027      	b.n	8003178 <MqttSocket_Read+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	461a      	mov	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	1899      	adds	r1, r3, r2
            buf_len - client->read.pos, timeout_ms);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	1ad2      	subs	r2, r2, r3
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7ff ffb8 	bl	80030b2 <MqttSocket_ReadDo>
 8003142:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	dd0b      	ble.n	8003162 <MqttSocket_Read+0x82>
            break;
        }
        client->read.pos += rc;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	441a      	add	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	62da      	str	r2, [r3, #44]	; 0x2c
    } while (client->read.pos < buf_len);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	429a      	cmp	r2, r3
 800315e:	dbe3      	blt.n	8003128 <MqttSocket_Read+0x48>
 8003160:	e000      	b.n	8003164 <MqttSocket_Read+0x84>
            break;
 8003162:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	dd05      	ble.n	8003176 <MqttSocket_Read+0x96>
        /* return length read and reset position */
        rc = client->read.pos;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	617b      	str	r3, [r7, #20]
        client->read.pos = 0;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    return rc;
 8003176:	697b      	ldr	r3, [r7, #20]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <EnableGpioClk>:
#define PIN_CNF_PUSH_PULL		(0x2)
#define PIN_MODE_OUT			(0x1)



void EnableGpioClk (GPIO_TypeDef * gpioPort){
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	if (gpioPort == GPIOA){
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <EnableGpioClk+0x68>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d106      	bne.n	800319e <EnableGpioClk+0x1e>
		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8003190:	4a16      	ldr	r2, [pc, #88]	; (80031ec <EnableGpioClk+0x6c>)
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <EnableGpioClk+0x6c>)
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f043 0304 	orr.w	r3, r3, #4
 800319a:	6193      	str	r3, [r2, #24]
	} else if (gpioPort == GPIOC){
		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
	} else if (gpioPort == GPIOD){
		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
	}
}
 800319c:	e01f      	b.n	80031de <EnableGpioClk+0x5e>
	} else if (gpioPort == GPIOB){
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a13      	ldr	r2, [pc, #76]	; (80031f0 <EnableGpioClk+0x70>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d106      	bne.n	80031b4 <EnableGpioClk+0x34>
		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80031a6:	4a11      	ldr	r2, [pc, #68]	; (80031ec <EnableGpioClk+0x6c>)
 80031a8:	4b10      	ldr	r3, [pc, #64]	; (80031ec <EnableGpioClk+0x6c>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f043 0308 	orr.w	r3, r3, #8
 80031b0:	6193      	str	r3, [r2, #24]
}
 80031b2:	e014      	b.n	80031de <EnableGpioClk+0x5e>
	} else if (gpioPort == GPIOC){
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a0f      	ldr	r2, [pc, #60]	; (80031f4 <EnableGpioClk+0x74>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d106      	bne.n	80031ca <EnableGpioClk+0x4a>
		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 80031bc:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <EnableGpioClk+0x6c>)
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <EnableGpioClk+0x6c>)
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f043 0310 	orr.w	r3, r3, #16
 80031c6:	6193      	str	r3, [r2, #24]
}
 80031c8:	e009      	b.n	80031de <EnableGpioClk+0x5e>
	} else if (gpioPort == GPIOD){
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <EnableGpioClk+0x78>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d105      	bne.n	80031de <EnableGpioClk+0x5e>
		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 80031d2:	4a06      	ldr	r2, [pc, #24]	; (80031ec <EnableGpioClk+0x6c>)
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <EnableGpioClk+0x6c>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f043 0320 	orr.w	r3, r3, #32
 80031dc:	6193      	str	r3, [r2, #24]
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	40010800 	.word	0x40010800
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40010c00 	.word	0x40010c00
 80031f4:	40011000 	.word	0x40011000
 80031f8:	40011400 	.word	0x40011400

080031fc <SetGpioAsInFloating>:
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	}
}


void SetGpioAsInFloating (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	70fb      	strb	r3, [r7, #3]
	if (pinNb < 8){
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	2b07      	cmp	r3, #7
 800320c:	d923      	bls.n	8003256 <SetGpioAsInFloating+0x5a>
//		gpioPort->CRL &= ~(PIN_MODE_MSK<<pinNb);
//		gpioPort->CRL &= ~(PIN_CNF_MSK<<pinNb);
//		gpioPort->CRL |= (PIN_CNF_FLOAT<<pinNb);

	} else {
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	3a08      	subs	r2, #8
 8003216:	0092      	lsls	r2, r2, #2
 8003218:	2103      	movs	r1, #3
 800321a:	fa01 f202 	lsl.w	r2, r1, r2
 800321e:	43d2      	mvns	r2, r2
 8003220:	401a      	ands	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	605a      	str	r2, [r3, #4]
		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	3a08      	subs	r2, #8
 800322e:	0092      	lsls	r2, r2, #2
 8003230:	2103      	movs	r1, #3
 8003232:	fa01 f202 	lsl.w	r2, r1, r2
 8003236:	43d2      	mvns	r2, r2
 8003238:	401a      	ands	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	605a      	str	r2, [r3, #4]
		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	3a08      	subs	r2, #8
 8003246:	0092      	lsls	r2, r2, #2
 8003248:	3202      	adds	r2, #2
 800324a:	2101      	movs	r1, #1
 800324c:	fa01 f202 	lsl.w	r2, r1, r2
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	605a      	str	r2, [r3, #4]
	}
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <SetGpioAsOutAltPushPUll>:

void SetGpioAsOutAltPushPUll (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
	if (pinNb < 8){
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	2b07      	cmp	r3, #7
 8003270:	d92f      	bls.n	80032d2 <SetGpioAsOutAltPushPUll+0x72>
//
//		gpioPort->CRL |= (PIN_MODE_OUT<<pinNb);
//		gpioPort->CRL &= ~(PIN_CNF_PUSH_PULL<<pinNb);

	} else {
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	3a08      	subs	r2, #8
 800327a:	0092      	lsls	r2, r2, #2
 800327c:	2103      	movs	r1, #3
 800327e:	fa01 f202 	lsl.w	r2, r1, r2
 8003282:	43d2      	mvns	r2, r2
 8003284:	401a      	ands	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	605a      	str	r2, [r3, #4]
		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	3a08      	subs	r2, #8
 8003292:	0092      	lsls	r2, r2, #2
 8003294:	3202      	adds	r2, #2
 8003296:	2103      	movs	r1, #3
 8003298:	fa01 f202 	lsl.w	r2, r1, r2
 800329c:	43d2      	mvns	r2, r2
 800329e:	401a      	ands	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	605a      	str	r2, [r3, #4]

		gpioPort->CRH |= (PIN_MODE_OUT<<(pinNb-8)*4);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	3a08      	subs	r2, #8
 80032ac:	0092      	lsls	r2, r2, #2
 80032ae:	2101      	movs	r1, #1
 80032b0:	fa01 f202 	lsl.w	r2, r1, r2
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	605a      	str	r2, [r3, #4]
		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	3a08      	subs	r2, #8
 80032c2:	0092      	lsls	r2, r2, #2
 80032c4:	3202      	adds	r2, #2
 80032c6:	2102      	movs	r1, #2
 80032c8:	fa01 f202 	lsl.w	r2, r1, r2
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	605a      	str	r2, [r3, #4]
	}
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <calculateCRC16>:





uint16_t calculateCRC16(const uint8_t * data_p, uint16_t length){
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	807b      	strh	r3, [r7, #2]
    uint8_t x;
    uint16_t crc = 0xFFFF;
 80032e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032ec:	81fb      	strh	r3, [r7, #14]

    while (length--){
 80032ee:	e025      	b.n	800333c <calculateCRC16+0x60>
        x = crc >> 8 ^ *data_p++;
 80032f0:	89fb      	ldrh	r3, [r7, #14]
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	1c59      	adds	r1, r3, #1
 80032fc:	6079      	str	r1, [r7, #4]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	4053      	eors	r3, r2
 8003302:	737b      	strb	r3, [r7, #13]
        x ^= x>>4;
 8003304:	7b7b      	ldrb	r3, [r7, #13]
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	b2da      	uxtb	r2, r3
 800330a:	7b7b      	ldrb	r3, [r7, #13]
 800330c:	4053      	eors	r3, r2
 800330e:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 8003310:	89fb      	ldrh	r3, [r7, #14]
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	b21a      	sxth	r2, r3
 8003316:	7b7b      	ldrb	r3, [r7, #13]
 8003318:	b29b      	uxth	r3, r3
 800331a:	031b      	lsls	r3, r3, #12
 800331c:	b29b      	uxth	r3, r3
 800331e:	b21b      	sxth	r3, r3
 8003320:	4053      	eors	r3, r2
 8003322:	b21a      	sxth	r2, r3
 8003324:	7b7b      	ldrb	r3, [r7, #13]
 8003326:	b29b      	uxth	r3, r3
 8003328:	015b      	lsls	r3, r3, #5
 800332a:	b29b      	uxth	r3, r3
 800332c:	b21b      	sxth	r3, r3
 800332e:	4053      	eors	r3, r2
 8003330:	b21a      	sxth	r2, r3
 8003332:	7b7b      	ldrb	r3, [r7, #13]
 8003334:	b21b      	sxth	r3, r3
 8003336:	4053      	eors	r3, r2
 8003338:	b21b      	sxth	r3, r3
 800333a:	81fb      	strh	r3, [r7, #14]
    while (length--){
 800333c:	887b      	ldrh	r3, [r7, #2]
 800333e:	1e5a      	subs	r2, r3, #1
 8003340:	807a      	strh	r2, [r7, #2]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1d4      	bne.n	80032f0 <calculateCRC16+0x14>
    }
    return crc;
 8003346:	89fb      	ldrh	r3, [r7, #14]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
	...

08003354 <l3_send_packet>:





void l3_send_packet (uint8_t addr, uint8_t * data, uint8_t len){
 8003354:	b580      	push	{r7, lr}
 8003356:	b08c      	sub	sp, #48	; 0x30
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	71fb      	strb	r3, [r7, #7]
 8003360:	4613      	mov	r3, r2
 8003362:	71bb      	strb	r3, [r7, #6]
	uint8_t pos=0;
 8003364:	2300      	movs	r3, #0
 8003366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t frame[FRAME_SIZE];
	uint8_t frm_nb = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t total_frames_nb;
	uint8_t remaining_len = len;
 8003370:	79bb      	ldrb	r3, [r7, #6]
 8003372:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t size_to_send;

	total_frames_nb = (len + (L2_DATA_SIZE - 1)) / L2_DATA_SIZE;
 8003376:	79bb      	ldrb	r3, [r7, #6]
 8003378:	3319      	adds	r3, #25
 800337a:	4a2f      	ldr	r2, [pc, #188]	; (8003438 <l3_send_packet+0xe4>)
 800337c:	fb82 1203 	smull	r1, r2, r2, r3
 8003380:	10d2      	asrs	r2, r2, #3
 8003382:	17db      	asrs	r3, r3, #31
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	while (frm_nb < total_frames_nb){
 800338a:	e04b      	b.n	8003424 <l3_send_packet+0xd0>
		memset(&frame[0], 0, FRAME_SIZE);
 800338c:	f107 0308 	add.w	r3, r7, #8
 8003390:	2220      	movs	r2, #32
 8003392:	2100      	movs	r1, #0
 8003394:	4618      	mov	r0, r3
 8003396:	f001 f8c8 	bl	800452a <memset>

		frame[H_FRM] = frm_nb;
 800339a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800339e:	723b      	strb	r3, [r7, #8]
		frame[H_TOTAL] = total_frames_nb;
 80033a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80033a4:	727b      	strb	r3, [r7, #9]
		frame[H_LENH] = len >> 8;
 80033a6:	79bb      	ldrb	r3, [r7, #6]
 80033a8:	121b      	asrs	r3, r3, #8
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	72bb      	strb	r3, [r7, #10]
		frame[H_LENL] = (uint8_t) len & 0xFF;
 80033ae:	79bb      	ldrb	r3, [r7, #6]
 80033b0:	72fb      	strb	r3, [r7, #11]
		uint16_t calcCRC = calculateCRC16(data, len);
 80033b2:	79bb      	ldrb	r3, [r7, #6]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	4619      	mov	r1, r3
 80033b8:	6838      	ldr	r0, [r7, #0]
 80033ba:	f7ff ff8f 	bl	80032dc <calculateCRC16>
 80033be:	4603      	mov	r3, r0
 80033c0:	857b      	strh	r3, [r7, #42]	; 0x2a
		frame[H_CRCH] = calcCRC >> 8;
 80033c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	733b      	strb	r3, [r7, #12]
		frame[H_CRCL] = calcCRC & 0xFF;
 80033cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	737b      	strb	r3, [r7, #13]

		size_to_send = (remaining_len > L2_DATA_SIZE)? L2_DATA_SIZE : remaining_len;
 80033d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033d6:	2b1a      	cmp	r3, #26
 80033d8:	bf28      	it	cs
 80033da:	231a      	movcs	r3, #26
 80033dc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		memcpy(&frame[0 + L2_HEAD_SIZE], &data[pos], size_to_send);
 80033e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	18d1      	adds	r1, r2, r3
 80033e8:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80033ec:	f107 0308 	add.w	r3, r7, #8
 80033f0:	3306      	adds	r3, #6
 80033f2:	4618      	mov	r0, r3
 80033f4:	f001 f88e 	bl	8004514 <memcpy>
		nrf24_send(frame);
 80033f8:	f107 0308 	add.w	r3, r7, #8
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 f9cd 	bl	800379c <nrf24_send>

		remaining_len -= size_to_send;
 8003402:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003406:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		pos += L2_DATA_SIZE;
 8003410:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003414:	331a      	adds	r3, #26
 8003416:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		frm_nb++;
 800341a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800341e:	3301      	adds	r3, #1
 8003420:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	while (frm_nb < total_frames_nb){
 8003424:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003428:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800342c:	429a      	cmp	r2, r3
 800342e:	d3ad      	bcc.n	800338c <l3_send_packet+0x38>
	}
}
 8003430:	bf00      	nop
 8003432:	3730      	adds	r7, #48	; 0x30
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	4ec4ec4f 	.word	0x4ec4ec4f

0800343c <l3_receive_packet>:




uint16_t l3_receive_packet(uint8_t *data, uint8_t * packet_buff, uint16_t buff_len){
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]

	if (data[H_FRM] == 0){
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <l3_receive_packet+0x22>
		memset (packet_buff, 0, buff_len);
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	461a      	mov	r2, r3
 8003456:	2100      	movs	r1, #0
 8003458:	68b8      	ldr	r0, [r7, #8]
 800345a:	f001 f866 	bl	800452a <memset>
	}

	if (data[H_FRM] < data[H_TOTAL]){
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	3301      	adds	r3, #1
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d245      	bcs.n	80034f8 <l3_receive_packet+0xbc>
		uint8_t frm_nb = data[H_FRM];
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	75fb      	strb	r3, [r7, #23]
		memcpy(&packet_buff[L2_DATA_SIZE * frm_nb], &data[0+ L2_HEAD_SIZE], L2_DATA_SIZE);
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	221a      	movs	r2, #26
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	461a      	mov	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	1898      	adds	r0, r3, r2
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3306      	adds	r3, #6
 8003484:	221a      	movs	r2, #26
 8003486:	4619      	mov	r1, r3
 8003488:	f001 f844 	bl	8004514 <memcpy>
		if ((data[H_FRM]+1) == data[H_TOTAL]){
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	3301      	adds	r3, #1
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	3201      	adds	r2, #1
 8003496:	7812      	ldrb	r2, [r2, #0]
 8003498:	4293      	cmp	r3, r2
 800349a:	d12d      	bne.n	80034f8 <l3_receive_packet+0xbc>
			uint16_t pcktLen = (data[H_LENH] << 8) + data[H_LENL];
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3302      	adds	r3, #2
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3303      	adds	r3, #3
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	4413      	add	r3, r2
 80034b2:	82bb      	strh	r3, [r7, #20]
			uint16_t rxPcktCRC =  (data[H_CRCH]<<8)  + data[H_CRCL];
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3304      	adds	r3, #4
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3305      	adds	r3, #5
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	827b      	strh	r3, [r7, #18]
			uint16_t calcCRC = calculateCRC16(packet_buff, pcktLen);
 80034cc:	8abb      	ldrh	r3, [r7, #20]
 80034ce:	4619      	mov	r1, r3
 80034d0:	68b8      	ldr	r0, [r7, #8]
 80034d2:	f7ff ff03 	bl	80032dc <calculateCRC16>
 80034d6:	4603      	mov	r3, r0
 80034d8:	823b      	strh	r3, [r7, #16]
			if (rxPcktCRC == calcCRC){
 80034da:	8a7a      	ldrh	r2, [r7, #18]
 80034dc:	8a3b      	ldrh	r3, [r7, #16]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d10a      	bne.n	80034f8 <l3_receive_packet+0xbc>
				return (L2_DATA_SIZE * (frm_nb+1));
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
 80034e4:	3301      	adds	r3, #1
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	0052      	lsls	r2, r2, #1
 80034ec:	441a      	add	r2, r3
 80034ee:	0092      	lsls	r2, r2, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	e000      	b.n	80034fa <l3_receive_packet+0xbe>
			}
		}
	}
	return 0;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <nRF24_restore_defaults>:



// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_restore_defaults(void) {
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nrf24_configRegister(nRF24_REG_CONFIG, 0x08);
 8003508:	2108      	movs	r1, #8
 800350a:	2000      	movs	r0, #0
 800350c:	f000 fa11 	bl	8003932 <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_EN_AA, 0x3F);
 8003510:	213f      	movs	r1, #63	; 0x3f
 8003512:	2001      	movs	r0, #1
 8003514:	f000 fa0d 	bl	8003932 <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_EN_RXADDR, 0x03);
 8003518:	2103      	movs	r1, #3
 800351a:	2002      	movs	r0, #2
 800351c:	f000 fa09 	bl	8003932 <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_SETUP_AW, 0x03);
 8003520:	2103      	movs	r1, #3
 8003522:	2003      	movs	r0, #3
 8003524:	f000 fa05 	bl	8003932 <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_SETUP_RETR, 0x03);
 8003528:	2103      	movs	r1, #3
 800352a:	2004      	movs	r0, #4
 800352c:	f000 fa01 	bl	8003932 <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RF_CH, 0x02);
 8003530:	2102      	movs	r1, #2
 8003532:	2005      	movs	r0, #5
 8003534:	f000 f9fd 	bl	8003932 <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RF_SETUP, 0x0E);
 8003538:	210e      	movs	r1, #14
 800353a:	2006      	movs	r0, #6
 800353c:	f000 f9f9 	bl	8003932 <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_STATUS, 0x00);
 8003540:	2100      	movs	r1, #0
 8003542:	2007      	movs	r0, #7
 8003544:	f000 f9f5 	bl	8003932 <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P0, 0x00);
 8003548:	2100      	movs	r1, #0
 800354a:	2011      	movs	r0, #17
 800354c:	f000 f9f1 	bl	8003932 <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P1, 0x00);
 8003550:	2100      	movs	r1, #0
 8003552:	2012      	movs	r0, #18
 8003554:	f000 f9ed 	bl	8003932 <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P2, 0x00);
 8003558:	2100      	movs	r1, #0
 800355a:	2013      	movs	r0, #19
 800355c:	f000 f9e9 	bl	8003932 <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P3, 0x00);
 8003560:	2100      	movs	r1, #0
 8003562:	2014      	movs	r0, #20
 8003564:	f000 f9e5 	bl	8003932 <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P4, 0x00);
 8003568:	2100      	movs	r1, #0
 800356a:	2015      	movs	r0, #21
 800356c:	f000 f9e1 	bl	8003932 <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P5, 0x00);
 8003570:	2100      	movs	r1, #0
 8003572:	2016      	movs	r0, #22
 8003574:	f000 f9dd 	bl	8003932 <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_DYNPD, 0x00);
 8003578:	2100      	movs	r1, #0
 800357a:	201c      	movs	r0, #28
 800357c:	f000 f9d9 	bl	8003932 <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_FEATURE, 0x00);
 8003580:	2100      	movs	r1, #0
 8003582:	201d      	movs	r0, #29
 8003584:	f000 f9d5 	bl	8003932 <nrf24_configRegister>

	// Clear the FIFO's
	spi_transfer(FLUSH_RX);
 8003588:	20e2      	movs	r0, #226	; 0xe2
 800358a:	f000 f984 	bl	8003896 <spi_transfer>
    spi_transfer(FLUSH_TX);
 800358e:	20e1      	movs	r0, #225	; 0xe1
 8003590:	f000 f981 	bl	8003896 <spi_transfer>

	// Clear any pending interrupt flags
	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
    uint8_t reg;

	nrf24_readRegister(nRF24_REG_STATUS, &reg, 1);
 8003594:	1dfb      	adds	r3, r7, #7
 8003596:	2201      	movs	r2, #1
 8003598:	4619      	mov	r1, r3
 800359a:	2007      	movs	r0, #7
 800359c:	f000 f9e9 	bl	8003972 <nrf24_readRegister>
	reg |= nRF24_MASK_STATUS_IRQ;
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	71fb      	strb	r3, [r7, #7]
	//nRF24_WriteReg(nRF24_REG_STATUS, reg);
	nrf24_configRegister(nRF24_REG_STATUS, reg);
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	4619      	mov	r1, r3
 80035ae:	2007      	movs	r0, #7
 80035b0:	f000 f9bf 	bl	8003932 <nrf24_configRegister>


}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <nrf24_init>:
	}
}

/* init the hardware pins */
void nrf24_init() 
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
	nRF24_GPIO_Init();
 80035c0:	f000 fa18 	bl	80039f4 <nRF24_GPIO_Init>
    nrf24_ce_digitalWrite(LOW);
 80035c4:	2000      	movs	r0, #0
 80035c6:	f000 f805 	bl	80035d4 <nrf24_ce_digitalWrite>
    nrf24_csn_digitalWrite(HIGH);    
 80035ca:	2001      	movs	r0, #1
 80035cc:	f000 f81a 	bl	8003604 <nrf24_csn_digitalWrite>
}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <nrf24_ce_digitalWrite>:

void nrf24_ce_digitalWrite(uint8_t state)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
    if(state)
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d004      	beq.n	80035ee <nrf24_ce_digitalWrite+0x1a>
    {
    	nRF24_CE_H();
 80035e4:	2101      	movs	r1, #1
 80035e6:	4806      	ldr	r0, [pc, #24]	; (8003600 <nrf24_ce_digitalWrite+0x2c>)
 80035e8:	f7fe f99a 	bl	8001920 <GPIO_SetBits>
    }
    else
    {
    	 nRF24_CE_L();
    }
}
 80035ec:	e003      	b.n	80035f6 <nrf24_ce_digitalWrite+0x22>
    	 nRF24_CE_L();
 80035ee:	2101      	movs	r1, #1
 80035f0:	4803      	ldr	r0, [pc, #12]	; (8003600 <nrf24_ce_digitalWrite+0x2c>)
 80035f2:	f7fe f9a3 	bl	800193c <GPIO_ResetBits>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40010c00 	.word	0x40010c00

08003604 <nrf24_csn_digitalWrite>:


void nrf24_csn_digitalWrite(uint8_t state)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
    if(state)
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d004      	beq.n	800361e <nrf24_csn_digitalWrite+0x1a>
    {
    	nRF24_CSN_H();
 8003614:	2102      	movs	r1, #2
 8003616:	4806      	ldr	r0, [pc, #24]	; (8003630 <nrf24_csn_digitalWrite+0x2c>)
 8003618:	f7fe f982 	bl	8001920 <GPIO_SetBits>
    }
    else
    {
    	nRF24_CSN_L();
    }
}
 800361c:	e003      	b.n	8003626 <nrf24_csn_digitalWrite+0x22>
    	nRF24_CSN_L();
 800361e:	2102      	movs	r1, #2
 8003620:	4803      	ldr	r0, [pc, #12]	; (8003630 <nrf24_csn_digitalWrite+0x2c>)
 8003622:	f7fe f98b 	bl	800193c <GPIO_ResetBits>
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40010c00 	.word	0x40010c00

08003634 <nrf24_config>:



/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	460a      	mov	r2, r1
 800363e:	71fb      	strb	r3, [r7, #7]
 8003640:	4613      	mov	r3, r2
 8003642:	71bb      	strb	r3, [r7, #6]
    /* Use static payload length ... */
    payload_len = pay_length;
 8003644:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <nrf24_config+0x90>)
 8003646:	79bb      	ldrb	r3, [r7, #6]
 8003648:	7013      	strb	r3, [r2, #0]

    // Set RF channel
    nrf24_configRegister(RF_CH,channel);
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	4619      	mov	r1, r3
 800364e:	2005      	movs	r0, #5
 8003650:	f000 f96f 	bl	8003932 <nrf24_configRegister>

    // Set length of incoming payload 
    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
 8003654:	2100      	movs	r1, #0
 8003656:	2011      	movs	r0, #17
 8003658:	f000 f96b 	bl	8003932 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <nrf24_config+0x90>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	4619      	mov	r1, r3
 8003662:	2012      	movs	r0, #18
 8003664:	f000 f965 	bl	8003932 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
 8003668:	2100      	movs	r1, #0
 800366a:	2013      	movs	r0, #19
 800366c:	f000 f961 	bl	8003932 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
 8003670:	2100      	movs	r1, #0
 8003672:	2014      	movs	r0, #20
 8003674:	f000 f95d 	bl	8003932 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
 8003678:	2100      	movs	r1, #0
 800367a:	2015      	movs	r0, #21
 800367c:	f000 f959 	bl	8003932 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
 8003680:	2100      	movs	r1, #0
 8003682:	2016      	movs	r0, #22
 8003684:	f000 f955 	bl	8003932 <nrf24_configRegister>

    // 1 Mbps, TX gain: 0dbm
    nrf24_configRegister(RF_SETUP, (1 << RF_DR_LOW)|((0x03)<<RF_PWR));
 8003688:	2126      	movs	r1, #38	; 0x26
 800368a:	2006      	movs	r0, #6
 800368c:	f000 f951 	bl	8003932 <nrf24_configRegister>

    // CRC enable, 1 byte CRC length
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
 8003690:	2108      	movs	r1, #8
 8003692:	2000      	movs	r0, #0
 8003694:	f000 f94d 	bl	8003932 <nrf24_configRegister>

    // Auto Acknowledgment
    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
 8003698:	2103      	movs	r1, #3
 800369a:	2001      	movs	r0, #1
 800369c:	f000 f949 	bl	8003932 <nrf24_configRegister>

    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
 80036a0:	2103      	movs	r1, #3
 80036a2:	2002      	movs	r0, #2
 80036a4:	f000 f945 	bl	8003932 <nrf24_configRegister>

    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
 80036a8:	214f      	movs	r1, #79	; 0x4f
 80036aa:	2004      	movs	r0, #4
 80036ac:	f000 f941 	bl	8003932 <nrf24_configRegister>

    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
 80036b0:	2100      	movs	r1, #0
 80036b2:	201c      	movs	r0, #28
 80036b4:	f000 f93d 	bl	8003932 <nrf24_configRegister>

    // Start listening
    nrf24_powerUpRx();
 80036b8:	f000 f8c6 	bl	8003848 <nrf24_powerUpRx>
}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000194 	.word	0x20000194

080036c8 <nrf24_rx_address>:

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
    nrf24_ce_digitalWrite(LOW);
 80036d0:	2000      	movs	r0, #0
 80036d2:	f7ff ff7f 	bl	80035d4 <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 80036d6:	2205      	movs	r2, #5
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	200b      	movs	r0, #11
 80036dc:	f000 f968 	bl	80039b0 <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 80036e0:	2001      	movs	r0, #1
 80036e2:	f7ff ff77 	bl	80035d4 <nrf24_ce_digitalWrite>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 80036f6:	2205      	movs	r2, #5
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	200a      	movs	r0, #10
 80036fc:	f000 f958 	bl	80039b0 <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 8003700:	2205      	movs	r2, #5
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	2010      	movs	r0, #16
 8003706:	f000 f953 	bl	80039b0 <nrf24_writeRegister>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
 8003718:	f000 f883 	bl	8003822 <nrf24_getStatus>
 800371c:	4603      	mov	r3, r0
 800371e:	71fb      	strb	r3, [r7, #7]

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <nrf24_dataReady+0x1c>
    {
        return 1;
 800372a:	2301      	movs	r3, #1
 800372c:	e007      	b.n	800373e <nrf24_dataReady+0x2c>
    }

    return !nrf24_rxFifoEmpty();;
 800372e:	f000 f80a 	bl	8003746 <nrf24_rxFifoEmpty>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
 800374c:	1dfb      	adds	r3, r7, #7
 800374e:	2201      	movs	r2, #1
 8003750:	4619      	mov	r1, r3
 8003752:	2017      	movs	r0, #23
 8003754:	f000 f90d 	bl	8003972 <nrf24_readRegister>
    
    return (fifoStatus & (1 << RX_EMPTY));
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	b2db      	uxtb	r3, r3
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <nrf24_getData>:
    return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);                               
 8003770:	2000      	movs	r0, #0
 8003772:	f7ff ff47 	bl	8003604 <nrf24_csn_digitalWrite>

    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
 8003776:	2061      	movs	r0, #97	; 0x61
 8003778:	f000 f88d 	bl	8003896 <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <nrf24_getData+0x30>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f898 	bl	80038ba <nrf24_transferSync>
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
 800378a:	2001      	movs	r0, #1
 800378c:	f7ff ff3a 	bl	8003604 <nrf24_csn_digitalWrite>

    /* Reset status register */
 //   nrf24_configRegister(STATUS,(1<<RX_DR));
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	20000194 	.word	0x20000194

0800379c <nrf24_send>:
}

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value) 
{    
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
    /* Go to Standby-I first */
    nrf24_ce_digitalWrite(LOW);
 80037a4:	2000      	movs	r0, #0
 80037a6:	f7ff ff15 	bl	80035d4 <nrf24_ce_digitalWrite>
     
    /* Set to transmitter mode , Power up if needed */
    nrf24_powerUpTx();
 80037aa:	f000 f868 	bl	800387e <nrf24_powerUpTx>
//    _delay_ms(50);
    /* Do we really need to flush TX fifo each time ? */
    #if 1
        /* Pull down chip select */
        nrf24_csn_digitalWrite(LOW);           
 80037ae:	2000      	movs	r0, #0
 80037b0:	f7ff ff28 	bl	8003604 <nrf24_csn_digitalWrite>

        /* Write cmd to flush transmit FIFO */
        spi_transfer(FLUSH_TX);     
 80037b4:	20e1      	movs	r0, #225	; 0xe1
 80037b6:	f000 f86e 	bl	8003896 <spi_transfer>

        /* Pull up chip select */
        nrf24_csn_digitalWrite(HIGH);                    
 80037ba:	2001      	movs	r0, #1
 80037bc:	f7ff ff22 	bl	8003604 <nrf24_csn_digitalWrite>
    #endif 

    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);
 80037c0:	2000      	movs	r0, #0
 80037c2:	f7ff ff1f 	bl	8003604 <nrf24_csn_digitalWrite>

    /* Write cmd to write payload */
    spi_transfer(W_TX_PAYLOAD);
 80037c6:	20a0      	movs	r0, #160	; 0xa0
 80037c8:	f000 f865 	bl	8003896 <spi_transfer>

    /* Write payload */
    nrf24_transmitSync(value,payload_len);   
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <nrf24_send+0x5c>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	4619      	mov	r1, r3
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f892 	bl	80038fc <nrf24_transmitSync>

    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
 80037d8:	2001      	movs	r0, #1
 80037da:	f7ff ff13 	bl	8003604 <nrf24_csn_digitalWrite>

    /* Start the transmission */
    nrf24_ce_digitalWrite(HIGH);
 80037de:	2001      	movs	r0, #1
 80037e0:	f7ff fef8 	bl	80035d4 <nrf24_ce_digitalWrite>
    while (nrf24_isSending());
 80037e4:	bf00      	nop
 80037e6:	f000 f809 	bl	80037fc <nrf24_isSending>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1fa      	bne.n	80037e6 <nrf24_send+0x4a>

}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20000194 	.word	0x20000194

080037fc <nrf24_isSending>:

uint8_t nrf24_isSending()
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
    uint8_t status;

    /* read the current status */
    status = nrf24_getStatus();
 8003802:	f000 f80e 	bl	8003822 <nrf24_getStatus>
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
                
    /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
    if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <nrf24_isSending+0x1c>
    {        
        return 0; /* false */
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <nrf24_isSending+0x1e>
    }

    return 1; /* true */
 8003818:	2301      	movs	r3, #1

}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <nrf24_getStatus>:

uint8_t nrf24_getStatus()
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
 8003828:	2000      	movs	r0, #0
 800382a:	f7ff feeb 	bl	8003604 <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
 800382e:	20ff      	movs	r0, #255	; 0xff
 8003830:	f000 f831 	bl	8003896 <spi_transfer>
 8003834:	4603      	mov	r3, r0
 8003836:	71fb      	strb	r3, [r7, #7]
    nrf24_csn_digitalWrite(HIGH);
 8003838:	2001      	movs	r0, #1
 800383a:	f7ff fee3 	bl	8003604 <nrf24_csn_digitalWrite>
    return rv;
 800383e:	79fb      	ldrb	r3, [r7, #7]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <nrf24_powerUpRx>:
        return 0xFF;
    }
}

void nrf24_powerUpRx()
{     
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
    nrf24_csn_digitalWrite(LOW);
 800384c:	2000      	movs	r0, #0
 800384e:	f7ff fed9 	bl	8003604 <nrf24_csn_digitalWrite>
    spi_transfer(FLUSH_RX);
 8003852:	20e2      	movs	r0, #226	; 0xe2
 8003854:	f000 f81f 	bl	8003896 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 8003858:	2001      	movs	r0, #1
 800385a:	f7ff fed3 	bl	8003604 <nrf24_csn_digitalWrite>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 800385e:	2170      	movs	r1, #112	; 0x70
 8003860:	2007      	movs	r0, #7
 8003862:	f000 f866 	bl	8003932 <nrf24_configRegister>

    nrf24_ce_digitalWrite(LOW);    
 8003866:	2000      	movs	r0, #0
 8003868:	f7ff feb4 	bl	80035d4 <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
 800386c:	210b      	movs	r1, #11
 800386e:	2000      	movs	r0, #0
 8003870:	f000 f85f 	bl	8003932 <nrf24_configRegister>
    nrf24_ce_digitalWrite(HIGH);
 8003874:	2001      	movs	r0, #1
 8003876:	f7ff fead 	bl	80035d4 <nrf24_ce_digitalWrite>
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}

0800387e <nrf24_powerUpTx>:

void nrf24_powerUpTx()
{
 800387e:	b580      	push	{r7, lr}
 8003880:	af00      	add	r7, sp, #0
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 8003882:	2170      	movs	r1, #112	; 0x70
 8003884:	2007      	movs	r0, #7
 8003886:	f000 f854 	bl	8003932 <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
 800388a:	210a      	movs	r1, #10
 800388c:	2000      	movs	r0, #0
 800388e:	f000 f850 	bl	8003932 <nrf24_configRegister>
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}

08003896 <spi_transfer>:
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
}

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	4603      	mov	r3, r0
 800389e:	71fb      	strb	r3, [r7, #7]
    uint8_t rx = 0;    
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]

	rx  = nRF24_LL_RW(tx);
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f91a 	bl	8003ae0 <nRF24_LL_RW>
 80038ac:	4603      	mov	r3, r0
 80038ae:	73fb      	strb	r3, [r7, #15]

    return rx;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
 80038ba:	b590      	push	{r4, r7, lr}
 80038bc:	b087      	sub	sp, #28
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	4613      	mov	r3, r2
 80038c6:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    for(i=0;i<len;i++)
 80038c8:	2300      	movs	r3, #0
 80038ca:	75fb      	strb	r3, [r7, #23]
 80038cc:	e00e      	b.n	80038ec <nrf24_transferSync+0x32>
    {
        datain[i] = spi_transfer(dataout[i]);
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	18d4      	adds	r4, r2, r3
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4413      	add	r3, r2
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff ffda 	bl	8003896 <spi_transfer>
 80038e2:	4603      	mov	r3, r0
 80038e4:	7023      	strb	r3, [r4, #0]
    for(i=0;i<len;i++)
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
 80038e8:	3301      	adds	r3, #1
 80038ea:	75fb      	strb	r3, [r7, #23]
 80038ec:	7dfa      	ldrb	r2, [r7, #23]
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d3ec      	bcc.n	80038ce <nrf24_transferSync+0x14>
    }

}
 80038f4:	bf00      	nop
 80038f6:	371c      	adds	r7, #28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd90      	pop	{r4, r7, pc}

080038fc <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    
    for(i=0;i<len;i++)
 8003908:	2300      	movs	r3, #0
 800390a:	73fb      	strb	r3, [r7, #15]
 800390c:	e009      	b.n	8003922 <nrf24_transmitSync+0x26>
    {
        spi_transfer(dataout[i]);
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	4413      	add	r3, r2
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff ffbd 	bl	8003896 <spi_transfer>
    for(i=0;i<len;i++)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	3301      	adds	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
 8003922:	7bfa      	ldrb	r2, [r7, #15]
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	429a      	cmp	r2, r3
 8003928:	d3f1      	bcc.n	800390e <nrf24_transmitSync+0x12>
    }

}
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	4603      	mov	r3, r0
 800393a:	460a      	mov	r2, r1
 800393c:	71fb      	strb	r3, [r7, #7]
 800393e:	4613      	mov	r3, r2
 8003940:	71bb      	strb	r3, [r7, #6]
    nrf24_csn_digitalWrite(LOW);
 8003942:	2000      	movs	r0, #0
 8003944:	f7ff fe5e 	bl	8003604 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	f003 031f 	and.w	r3, r3, #31
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f043 0320 	orr.w	r3, r3, #32
 8003954:	b2db      	uxtb	r3, r3
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff ff9d 	bl	8003896 <spi_transfer>
    spi_transfer(value);
 800395c:	79bb      	ldrb	r3, [r7, #6]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff ff99 	bl	8003896 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 8003964:	2001      	movs	r0, #1
 8003966:	f7ff fe4d 	bl	8003604 <nrf24_csn_digitalWrite>
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	4603      	mov	r3, r0
 800397a:	6039      	str	r1, [r7, #0]
 800397c:	71fb      	strb	r3, [r7, #7]
 800397e:	4613      	mov	r3, r2
 8003980:	71bb      	strb	r3, [r7, #6]
    nrf24_csn_digitalWrite(LOW);
 8003982:	2000      	movs	r0, #0
 8003984:	f7ff fe3e 	bl	8003604 <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	b2db      	uxtb	r3, r3
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff80 	bl	8003896 <spi_transfer>
    nrf24_transferSync(value,value,len);
 8003996:	79bb      	ldrb	r3, [r7, #6]
 8003998:	461a      	mov	r2, r3
 800399a:	6839      	ldr	r1, [r7, #0]
 800399c:	6838      	ldr	r0, [r7, #0]
 800399e:	f7ff ff8c 	bl	80038ba <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
 80039a2:	2001      	movs	r0, #1
 80039a4:	f7ff fe2e 	bl	8003604 <nrf24_csn_digitalWrite>
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	6039      	str	r1, [r7, #0]
 80039ba:	71fb      	strb	r3, [r7, #7]
 80039bc:	4613      	mov	r3, r2
 80039be:	71bb      	strb	r3, [r7, #6]
    nrf24_csn_digitalWrite(LOW);
 80039c0:	2000      	movs	r0, #0
 80039c2:	f7ff fe1f 	bl	8003604 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f043 0320 	orr.w	r3, r3, #32
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff ff5e 	bl	8003896 <spi_transfer>
    nrf24_transmitSync(value,len);
 80039da:	79bb      	ldrb	r3, [r7, #6]
 80039dc:	4619      	mov	r1, r3
 80039de:	6838      	ldr	r0, [r7, #0]
 80039e0:	f7ff ff8c 	bl	80038fc <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 80039e4:	2001      	movs	r0, #1
 80039e6:	f7ff fe0d 	bl	8003604 <nrf24_csn_digitalWrite>
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <nRF24_GPIO_Init>:
#include <nrf24_platform.h>
#include "nrf24.h"

// Configure the GPIO lines of the nRF24L01 transceiver
// note: IRQ pin must be configured separately
void nRF24_GPIO_Init(void) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80039fa:	2101      	movs	r1, #1
 80039fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a00:	f7fd ffaa 	bl	8001958 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8003a04:	2101      	movs	r1, #1
 8003a06:	2004      	movs	r0, #4
 8003a08:	f7fd ffa6 	bl	8001958 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	2008      	movs	r0, #8
 8003a10:	f7fd ffa2 	bl	8001958 <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8003a14:	23e0      	movs	r3, #224	; 0xe0
 8003a16:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003a18:	2318      	movs	r3, #24
 8003a1a:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003a20:	f107 0308 	add.w	r3, r7, #8
 8003a24:	4619      	mov	r1, r3
 8003a26:	482a      	ldr	r0, [pc, #168]	; (8003ad0 <nRF24_GPIO_Init+0xdc>)
 8003a28:	f7fd febe 	bl	80017a8 <GPIO_Init>



	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8003a2c:	2340      	movs	r3, #64	; 0x40
 8003a2e:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003a30:	2310      	movs	r3, #16
 8003a32:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8003a34:	2301      	movs	r3, #1
 8003a36:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003a38:	f107 0308 	add.w	r3, r7, #8
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4825      	ldr	r0, [pc, #148]	; (8003ad4 <nRF24_GPIO_Init+0xe0>)
 8003a40:	f7fd feb2 	bl	80017a8 <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8003a44:	2300      	movs	r3, #0
 8003a46:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8003a48:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003a4c:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8003a52:	2300      	movs	r3, #0
 8003a54:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8003a56:	2300      	movs	r3, #0
 8003a58:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8003a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a5e:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8003a60:	2318      	movs	r3, #24
 8003a62:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8003a64:	2300      	movs	r3, #0
 8003a66:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8003a68:	2307      	movs	r3, #7
 8003a6a:	83bb      	strh	r3, [r7, #28]
	SPI_SSOutputCmd(SPI1, ENABLE);
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	481a      	ldr	r0, [pc, #104]	; (8003ad8 <nRF24_GPIO_Init+0xe4>)
 8003a70:	f7fe f80c 	bl	8001a8c <SPI_SSOutputCmd>
	SPI_Init(SPI1, &SPI_InitStructure);
 8003a74:	f107 030c 	add.w	r3, r7, #12
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4817      	ldr	r0, [pc, #92]	; (8003ad8 <nRF24_GPIO_Init+0xe4>)
 8003a7c:	f7fd ff8a 	bl	8001994 <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI1, ENABLE);
 8003a80:	2101      	movs	r1, #1
 8003a82:	4815      	ldr	r0, [pc, #84]	; (8003ad8 <nRF24_GPIO_Init+0xe4>)
 8003a84:	f7fd ffc9 	bl	8001a1a <SPI_Cmd>


	GPIO_InitTypeDef PORT;

	// Enable the nRF24L01 GPIO peripherals
	RCC->APB2ENR |= nRF24_GPIO_PERIPHERALS;
 8003a88:	4a14      	ldr	r2, [pc, #80]	; (8003adc <nRF24_GPIO_Init+0xe8>)
 8003a8a:	4b14      	ldr	r3, [pc, #80]	; (8003adc <nRF24_GPIO_Init+0xe8>)
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f043 0308 	orr.w	r3, r3, #8
 8003a92:	6193      	str	r3, [r2, #24]

	// Configure CSN pin
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 8003a94:	2310      	movs	r3, #16
 8003a96:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = nRF24_CSN_PIN;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(nRF24_CSN_PORT, &PORT);
 8003aa0:	1d3b      	adds	r3, r7, #4
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	480b      	ldr	r0, [pc, #44]	; (8003ad4 <nRF24_GPIO_Init+0xe0>)
 8003aa6:	f7fd fe7f 	bl	80017a8 <GPIO_Init>
	nRF24_CSN_H();
 8003aaa:	2102      	movs	r1, #2
 8003aac:	4809      	ldr	r0, [pc, #36]	; (8003ad4 <nRF24_GPIO_Init+0xe0>)
 8003aae:	f7fd ff37 	bl	8001920 <GPIO_SetBits>

	// Configure CE pin
	PORT.GPIO_Pin = nRF24_CE_PIN;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(nRF24_CE_PORT, &PORT);
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4806      	ldr	r0, [pc, #24]	; (8003ad4 <nRF24_GPIO_Init+0xe0>)
 8003abc:	f7fd fe74 	bl	80017a8 <GPIO_Init>
	nRF24_CE_L();
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	4804      	ldr	r0, [pc, #16]	; (8003ad4 <nRF24_GPIO_Init+0xe0>)
 8003ac4:	f7fd ff3a 	bl	800193c <GPIO_ResetBits>
}
 8003ac8:	bf00      	nop
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40010800 	.word	0x40010800
 8003ad4:	40010c00 	.word	0x40010c00
 8003ad8:	40013000 	.word	0x40013000
 8003adc:	40021000 	.word	0x40021000

08003ae0 <nRF24_LL_RW>:

// Low level SPI transmit/receive function (hardware depended)
// input:
//   data - value to transmit via SPI
// return: value received from SPI
uint8_t nRF24_LL_RW(uint8_t data) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 8003aea:	bf00      	nop
 8003aec:	2102      	movs	r1, #2
 8003aee:	480e      	ldr	r0, [pc, #56]	; (8003b28 <nRF24_LL_RW+0x48>)
 8003af0:	f7fd ffeb 	bl	8001aca <SPI_I2S_GetFlagStatus>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f8      	beq.n	8003aec <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	4619      	mov	r1, r3
 8003b00:	4809      	ldr	r0, [pc, #36]	; (8003b28 <nRF24_LL_RW+0x48>)
 8003b02:	f7fd ffa9 	bl	8001a58 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 8003b06:	bf00      	nop
 8003b08:	2101      	movs	r1, #1
 8003b0a:	4807      	ldr	r0, [pc, #28]	; (8003b28 <nRF24_LL_RW+0x48>)
 8003b0c:	f7fd ffdd 	bl	8001aca <SPI_I2S_GetFlagStatus>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f8      	beq.n	8003b08 <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 8003b16:	4804      	ldr	r0, [pc, #16]	; (8003b28 <nRF24_LL_RW+0x48>)
 8003b18:	f7fd ffac 	bl	8001a74 <SPI_I2S_ReceiveData>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	b2db      	uxtb	r3, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40013000 	.word	0x40013000

08003b2c <gpio_init>:
#include "rtc.h"
QueueHandle_t internalMsgQueue;
QueueHandle_t externalMsgQueue;
QueueHandle_t logMsgQueue;

void  gpio_init(void){
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003b32:	2101      	movs	r1, #1
 8003b34:	2010      	movs	r0, #16
 8003b36:	f7fd ff0f 	bl	8001958 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef PORT;
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 8003b3a:	2310      	movs	r3, #16
 8003b3c:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_13;
 8003b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b46:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOC, &PORT);
 8003b48:	1d3b      	adds	r3, r7, #4
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	480c      	ldr	r0, [pc, #48]	; (8003b80 <gpio_init+0x54>)
 8003b4e:	f7fd fe2b 	bl	80017a8 <GPIO_Init>
	GPIOC->ODR |= GPIO_Pin_13;
 8003b52:	4a0b      	ldr	r2, [pc, #44]	; (8003b80 <gpio_init+0x54>)
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <gpio_init+0x54>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b5c:	60d3      	str	r3, [r2, #12]

	PORT.GPIO_Mode =  GPIO_Mode_IPU;
 8003b5e:	2348      	movs	r3, #72	; 0x48
 8003b60:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8003b62:	2302      	movs	r3, #2
 8003b64:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_11;
 8003b66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b6a:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOB, &PORT);
 8003b6c:	1d3b      	adds	r3, r7, #4
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4804      	ldr	r0, [pc, #16]	; (8003b84 <gpio_init+0x58>)
 8003b72:	f7fd fe19 	bl	80017a8 <GPIO_Init>
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40011000 	.word	0x40011000
 8003b84:	40010c00 	.word	0x40010c00

08003b88 <main>:



 int main(){
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af02      	add	r7, sp, #8



	 	EnableGpioClk(LOG_UART_PORT);
 8003b8e:	4828      	ldr	r0, [pc, #160]	; (8003c30 <main+0xa8>)
 8003b90:	f7ff faf6 	bl	8003180 <EnableGpioClk>
	 	SetGpioAsOutAltPushPUll(LOG_UART_PORT, LOG_UART_PIN_TX);
 8003b94:	2109      	movs	r1, #9
 8003b96:	4826      	ldr	r0, [pc, #152]	; (8003c30 <main+0xa8>)
 8003b98:	f7ff fb62 	bl	8003260 <SetGpioAsOutAltPushPUll>
	 	SetGpioAsInFloating(LOG_UART_PORT, LOG_UART_PIN_RX);
 8003b9c:	210a      	movs	r1, #10
 8003b9e:	4824      	ldr	r0, [pc, #144]	; (8003c30 <main+0xa8>)
 8003ba0:	f7ff fb2c 	bl	80031fc <SetGpioAsInFloating>
	 	EnableUart(USART1);
 8003ba4:	4823      	ldr	r0, [pc, #140]	; (8003c34 <main+0xac>)
 8003ba6:	f000 f859 	bl	8003c5c <EnableUart>





	 RTC_Init();
 8003baa:	f000 f8ff 	bl	8003dac <RTC_Init>
	 RtcClear();
 8003bae:	f000 f8c1 	bl	8003d34 <RtcClear>
	 internalMsgQueue = xQueueCreate(OUTPUT_QUEUE_SIZE, sizeof(msgDataInt_t));
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	211a      	movs	r1, #26
 8003bb6:	2010      	movs	r0, #16
 8003bb8:	f7fc fd0a 	bl	80005d0 <xQueueGenericCreate>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <main+0xb0>)
 8003bc0:	601a      	str	r2, [r3, #0]
	 externalMsgQueue = xQueueCreate(OUTPUT_QUEUE_SIZE, sizeof(msgDataExt_t));
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2120      	movs	r1, #32
 8003bc6:	2010      	movs	r0, #16
 8003bc8:	f7fc fd02 	bl	80005d0 <xQueueGenericCreate>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <main+0xb4>)
 8003bd0:	601a      	str	r2, [r3, #0]
	 logMsgQueue = xQueueCreate(OUTPUT_QUEUE_SIZE, sizeof(msgDataExt_t));
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2120      	movs	r1, #32
 8003bd6:	2010      	movs	r0, #16
 8003bd8:	f7fc fcfa 	bl	80005d0 <xQueueGenericCreate>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b18      	ldr	r3, [pc, #96]	; (8003c40 <main+0xb8>)
 8003be0:	601a      	str	r2, [r3, #0]

	 //	xTaskCreate( ThreadLightSensor, "ThreadLigtSensor", 256, NULL, tskIDLE_PRIORITY + 1, NULL);
	 	xTaskCreate( ThreadSupervisor, "Supervisor", 1024, NULL, tskIDLE_PRIORITY + 1, NULL);
 8003be2:	2300      	movs	r3, #0
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	2301      	movs	r3, #1
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2300      	movs	r3, #0
 8003bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bf0:	4914      	ldr	r1, [pc, #80]	; (8003c44 <main+0xbc>)
 8003bf2:	4815      	ldr	r0, [pc, #84]	; (8003c48 <main+0xc0>)
 8003bf4:	f7fc ffce 	bl	8000b94 <xTaskCreate>
	 	xTaskCreate( ThreadCommunication, "Communication", 2048, NULL, tskIDLE_PRIORITY + 1, NULL);
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2300      	movs	r3, #0
 8003c02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c06:	4911      	ldr	r1, [pc, #68]	; (8003c4c <main+0xc4>)
 8003c08:	4811      	ldr	r0, [pc, #68]	; (8003c50 <main+0xc8>)
 8003c0a:	f7fc ffc3 	bl	8000b94 <xTaskCreate>
		xTaskCreate( ThreadServiceMode, "ServiceMode", 1024, NULL, tskIDLE_PRIORITY + 1, NULL);
 8003c0e:	2300      	movs	r3, #0
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	2301      	movs	r3, #1
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2300      	movs	r3, #0
 8003c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c1c:	490d      	ldr	r1, [pc, #52]	; (8003c54 <main+0xcc>)
 8003c1e:	480e      	ldr	r0, [pc, #56]	; (8003c58 <main+0xd0>)
 8003c20:	f7fc ffb8 	bl	8000b94 <xTaskCreate>
	 	vTaskStartScheduler();
 8003c24:	f7fd f900 	bl	8000e28 <vTaskStartScheduler>
 8003c28:	2300      	movs	r3, #0





 }
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40010800 	.word	0x40010800
 8003c34:	40013800 	.word	0x40013800
 8003c38:	2000019c 	.word	0x2000019c
 8003c3c:	200001a0 	.word	0x200001a0
 8003c40:	20000198 	.word	0x20000198
 8003c44:	080046fc 	.word	0x080046fc
 8003c48:	08004445 	.word	0x08004445
 8003c4c:	08004708 	.word	0x08004708
 8003c50:	080041a9 	.word	0x080041a9
 8003c54:	08004718 	.word	0x08004718
 8003c58:	080043dd 	.word	0x080043dd

08003c5c <EnableUart>:
#include "stm32f10x.h"
#include "platform.h"



void EnableUart (USART_TypeDef * usart){
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8003c64:	4a13      	ldr	r2, [pc, #76]	; (8003cb4 <EnableUart+0x58>)
 8003c66:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <EnableUart+0x58>)
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c6e:	6193      	str	r3, [r2, #24]
	usart->BRR = 72000000/115200;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f240 2271 	movw	r2, #625	; 0x271
 8003c76:	811a      	strh	r2, [r3, #8]
	usart->CR1 |= USART_CR1_UE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	899b      	ldrh	r3, [r3, #12]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_TE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	899b      	ldrh	r3, [r3, #12]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f043 0308 	orr.w	r3, r3, #8
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_RE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	899b      	ldrh	r3, [r3, #12]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	f043 0304 	orr.w	r3, r3, #4
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	819a      	strh	r2, [r3, #12]
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000

08003cb8 <uart1_send>:
		;
	}
	return (uint16_t) USART1->DR;
}

void uart1_send(uint16_t c){
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	80fb      	strh	r3, [r7, #6]
	 while (!(USART1->SR & USART_SR_TXE)){
 8003cc2:	bf00      	nop
 8003cc4:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <uart1_send+0x2c>)
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f8      	beq.n	8003cc4 <uart1_send+0xc>
	    	;
	 }
	 USART1->DR =c;
 8003cd2:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <uart1_send+0x2c>)
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	8093      	strh	r3, [r2, #4]
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40013800 	.word	0x40013800

08003ce8 <SendString>:


void SendString (const char* string){
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	const uint8_t maxCharToSend = 32;
 8003cf0:	2320      	movs	r3, #32
 8003cf2:	73bb      	strb	r3, [r7, #14]
	uint8_t i;
	while (string[i] != 0)
 8003cf4:	e00e      	b.n	8003d14 <SendString+0x2c>
	{
		uart1_send(string[i]);
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff ffd9 	bl	8003cb8 <uart1_send>
		i++;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
		if (i == maxCharToSend){
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	7bbb      	ldrb	r3, [r7, #14]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d006      	beq.n	8003d22 <SendString+0x3a>
	while (string[i] != 0)
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1ea      	bne.n	8003cf6 <SendString+0xe>
 8003d20:	e000      	b.n	8003d24 <SendString+0x3c>
			break;
 8003d22:	bf00      	nop
		}
	}
	uart1_send(0xA);
 8003d24:	200a      	movs	r0, #10
 8003d26:	f7ff ffc7 	bl	8003cb8 <uart1_send>
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <RtcClear>:
#include "stm32f10x.h"




void RtcClear (void){
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0

	PWR->CR |= PWR_CR_DBP;
 8003d38:	4a1a      	ldr	r2, [pc, #104]	; (8003da4 <RtcClear+0x70>)
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <RtcClear+0x70>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d42:	6013      	str	r3, [r2, #0]
	RCC->BDCR |= RCC_BDCR_BDRST;
 8003d44:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <RtcClear+0x74>)
 8003d46:	4b18      	ldr	r3, [pc, #96]	; (8003da8 <RtcClear+0x74>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4e:	6213      	str	r3, [r2, #32]
	RCC->BDCR &= ~RCC_BDCR_BDRST;
 8003d50:	4a15      	ldr	r2, [pc, #84]	; (8003da8 <RtcClear+0x74>)
 8003d52:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <RtcClear+0x74>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5a:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_LSEON;
 8003d5c:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <RtcClear+0x74>)
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <RtcClear+0x74>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6213      	str	r3, [r2, #32]
	while (!(RCC->BDCR & RCC_BDCR_LSERDY));
 8003d68:	bf00      	nop
 8003d6a:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <RtcClear+0x74>)
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f9      	beq.n	8003d6a <RtcClear+0x36>
	RCC->BDCR |= RCC_BDCR_RTCSEL_LSE;
 8003d76:	4a0c      	ldr	r2, [pc, #48]	; (8003da8 <RtcClear+0x74>)
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <RtcClear+0x74>)
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d80:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_RTCEN;
 8003d82:	4a09      	ldr	r2, [pc, #36]	; (8003da8 <RtcClear+0x74>)
 8003d84:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <RtcClear+0x74>)
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8c:	6213      	str	r3, [r2, #32]
	PWR->CR &= ~PWR_CR_DBP;
 8003d8e:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <RtcClear+0x70>)
 8003d90:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <RtcClear+0x70>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d98:	6013      	str	r3, [r2, #0]

}
 8003d9a:	bf00      	nop
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40007000 	.word	0x40007000
 8003da8:	40021000 	.word	0x40021000

08003dac <RTC_Init>:


void RTC_Init (void){
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003db0:	4a32      	ldr	r2, [pc, #200]	; (8003e7c <RTC_Init+0xd0>)
 8003db2:	4b32      	ldr	r3, [pc, #200]	; (8003e7c <RTC_Init+0xd0>)
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dba:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_BKPEN;
 8003dbc:	4a2f      	ldr	r2, [pc, #188]	; (8003e7c <RTC_Init+0xd0>)
 8003dbe:	4b2f      	ldr	r3, [pc, #188]	; (8003e7c <RTC_Init+0xd0>)
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dc6:	61d3      	str	r3, [r2, #28]
	PWR->CR |= PWR_CR_DBP;
 8003dc8:	4a2d      	ldr	r2, [pc, #180]	; (8003e80 <RTC_Init+0xd4>)
 8003dca:	4b2d      	ldr	r3, [pc, #180]	; (8003e80 <RTC_Init+0xd4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd2:	6013      	str	r3, [r2, #0]
	RCC->BDCR &= ~RCC_BDCR_BDRST;
 8003dd4:	4a29      	ldr	r2, [pc, #164]	; (8003e7c <RTC_Init+0xd0>)
 8003dd6:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <RTC_Init+0xd0>)
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dde:	6213      	str	r3, [r2, #32]

	RCC->BDCR |= RCC_BDCR_LSEON;
 8003de0:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <RTC_Init+0xd0>)
 8003de2:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <RTC_Init+0xd0>)
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	6213      	str	r3, [r2, #32]
	while (!(RCC->BDCR & RCC_BDCR_LSERDY));
 8003dec:	bf00      	nop
 8003dee:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <RTC_Init+0xd0>)
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f9      	beq.n	8003dee <RTC_Init+0x42>
	RCC->BDCR |= RCC_BDCR_RTCSEL_LSE;
 8003dfa:	4a20      	ldr	r2, [pc, #128]	; (8003e7c <RTC_Init+0xd0>)
 8003dfc:	4b1f      	ldr	r3, [pc, #124]	; (8003e7c <RTC_Init+0xd0>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e04:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_RTCEN;
 8003e06:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <RTC_Init+0xd0>)
 8003e08:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <RTC_Init+0xd0>)
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e10:	6213      	str	r3, [r2, #32]

	while (!(RTC->CRL & RTC_CRL_RTOFF));
 8003e12:	bf00      	nop
 8003e14:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <RTC_Init+0xd8>)
 8003e16:	889b      	ldrh	r3, [r3, #4]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f8      	beq.n	8003e14 <RTC_Init+0x68>
	RTC->CRL |= RTC_CRL_CNF;
 8003e22:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <RTC_Init+0xd8>)
 8003e24:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <RTC_Init+0xd8>)
 8003e26:	889b      	ldrh	r3, [r3, #4]
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	f043 0310 	orr.w	r3, r3, #16
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	8093      	strh	r3, [r2, #4]

	RTC->PRLL = 0x7FFF;
 8003e32:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <RTC_Init+0xd8>)
 8003e34:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003e38:	819a      	strh	r2, [r3, #12]
	RTC->CNTH =0;
 8003e3a:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <RTC_Init+0xd8>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	831a      	strh	r2, [r3, #24]
	RTC->CNTL =0;
 8003e40:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <RTC_Init+0xd8>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	839a      	strh	r2, [r3, #28]

	RTC->CRL &= RTC_CRL_CNF;
 8003e46:	4a0f      	ldr	r2, [pc, #60]	; (8003e84 <RTC_Init+0xd8>)
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <RTC_Init+0xd8>)
 8003e4a:	889b      	ldrh	r3, [r3, #4]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	8093      	strh	r3, [r2, #4]
	while (!(RTC->CRL & RTC_CRL_RTOFF));
 8003e56:	bf00      	nop
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <RTC_Init+0xd8>)
 8003e5a:	889b      	ldrh	r3, [r3, #4]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f8      	beq.n	8003e58 <RTC_Init+0xac>
	PWR->CR &= ~PWR_CR_DBP;
 8003e66:	4a06      	ldr	r2, [pc, #24]	; (8003e80 <RTC_Init+0xd4>)
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <RTC_Init+0xd4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e70:	6013      	str	r3, [r2, #0]
}
 8003e72:	bf00      	nop
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40007000 	.word	0x40007000
 8003e84:	40002800 	.word	0x40002800

08003e88 <getCurrentTime>:



uint32_t getCurrentTime (void){
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
	return 1;
 8003e8c:	2301      	movs	r3, #1
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr
	...

08003e98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ed0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003e9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003e9e:	e003      	b.n	8003ea8 <LoopCopyDataInit>

08003ea0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8003ea2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003ea4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003ea6:	3104      	adds	r1, #4

08003ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003ea8:	480b      	ldr	r0, [pc, #44]	; (8003ed8 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8003eac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003eae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003eb0:	d3f6      	bcc.n	8003ea0 <CopyDataInit>
	ldr	r2, =_sbss
 8003eb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ee0 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8003eb4:	e002      	b.n	8003ebc <LoopFillZerobss>

08003eb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003eb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003eb8:	f842 3b04 	str.w	r3, [r2], #4

08003ebc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003ebc:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8003ebe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ec0:	d3f9      	bcc.n	8003eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ec2:	f000 f82b 	bl	8003f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ec6:	f000 faf1 	bl	80044ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003eca:	f7ff fe5d 	bl	8003b88 <main>
	bx	lr
 8003ece:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ed0:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8003ed4:	080047fc 	.word	0x080047fc
	ldr	r0, =_sdata
 8003ed8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003edc:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8003ee0:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8003ee4:	200001a8 	.word	0x200001a8

08003ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ee8:	e7fe      	b.n	8003ee8 <ADC1_2_IRQHandler>

08003eea <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0
}
 8003eee:	bf00      	nop
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003efa:	e7fe      	b.n	8003efa <HardFault_Handler+0x4>

08003efc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003f00:	e7fe      	b.n	8003f00 <MemManage_Handler+0x4>

08003f02 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003f02:	b480      	push	{r7}
 8003f04:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003f06:	e7fe      	b.n	8003f06 <BusFault_Handler+0x4>

08003f08 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003f0c:	e7fe      	b.n	8003f0c <UsageFault_Handler+0x4>

08003f0e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0
}
 8003f12:	bf00      	nop
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr
	...

08003f1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003f20:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <SystemInit+0x5c>)
 8003f22:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <SystemInit+0x5c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003f2c:	4912      	ldr	r1, [pc, #72]	; (8003f78 <SystemInit+0x5c>)
 8003f2e:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <SystemInit+0x5c>)
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <SystemInit+0x60>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003f38:	4a0f      	ldr	r2, [pc, #60]	; (8003f78 <SystemInit+0x5c>)
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <SystemInit+0x5c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f46:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003f48:	4a0b      	ldr	r2, [pc, #44]	; (8003f78 <SystemInit+0x5c>)
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <SystemInit+0x5c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f52:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003f54:	4a08      	ldr	r2, [pc, #32]	; (8003f78 <SystemInit+0x5c>)
 8003f56:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <SystemInit+0x5c>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003f5e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <SystemInit+0x5c>)
 8003f62:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003f66:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8003f68:	f000 f80c 	bl	8003f84 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003f6c:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <SystemInit+0x64>)
 8003f6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f72:	609a      	str	r2, [r3, #8]
#endif 
}
 8003f74:	bf00      	nop
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	f8ff0000 	.word	0xf8ff0000
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8003f88:	f000 f802 	bl	8003f90 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003f8c:	bf00      	nop
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003f9e:	4a3a      	ldr	r2, [pc, #232]	; (8004088 <SetSysClockTo72+0xf8>)
 8003fa0:	4b39      	ldr	r3, [pc, #228]	; (8004088 <SetSysClockTo72+0xf8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003faa:	4b37      	ldr	r3, [pc, #220]	; (8004088 <SetSysClockTo72+0xf8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d103      	bne.n	8003fc8 <SetSysClockTo72+0x38>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003fc6:	d1f0      	bne.n	8003faa <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <SetSysClockTo72+0xf8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	e001      	b.n	8003fde <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d14b      	bne.n	800407c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8003fe4:	4a29      	ldr	r2, [pc, #164]	; (800408c <SetSysClockTo72+0xfc>)
 8003fe6:	4b29      	ldr	r3, [pc, #164]	; (800408c <SetSysClockTo72+0xfc>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f043 0310 	orr.w	r3, r3, #16
 8003fee:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8003ff0:	4a26      	ldr	r2, [pc, #152]	; (800408c <SetSysClockTo72+0xfc>)
 8003ff2:	4b26      	ldr	r3, [pc, #152]	; (800408c <SetSysClockTo72+0xfc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8003ffc:	4a23      	ldr	r2, [pc, #140]	; (800408c <SetSysClockTo72+0xfc>)
 8003ffe:	4b23      	ldr	r3, [pc, #140]	; (800408c <SetSysClockTo72+0xfc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f043 0302 	orr.w	r3, r3, #2
 8004006:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004008:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <SetSysClockTo72+0xf8>)
 800400a:	4b1f      	ldr	r3, [pc, #124]	; (8004088 <SetSysClockTo72+0xf8>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8004010:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <SetSysClockTo72+0xf8>)
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <SetSysClockTo72+0xf8>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8004018:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <SetSysClockTo72+0xf8>)
 800401a:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <SetSysClockTo72+0xf8>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004022:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8004024:	4a18      	ldr	r2, [pc, #96]	; (8004088 <SetSysClockTo72+0xf8>)
 8004026:	4b18      	ldr	r3, [pc, #96]	; (8004088 <SetSysClockTo72+0xf8>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800402e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8004030:	4a15      	ldr	r2, [pc, #84]	; (8004088 <SetSysClockTo72+0xf8>)
 8004032:	4b15      	ldr	r3, [pc, #84]	; (8004088 <SetSysClockTo72+0xf8>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800403a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800403c:	4a12      	ldr	r2, [pc, #72]	; (8004088 <SetSysClockTo72+0xf8>)
 800403e:	4b12      	ldr	r3, [pc, #72]	; (8004088 <SetSysClockTo72+0xf8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004046:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004048:	bf00      	nop
 800404a:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <SetSysClockTo72+0xf8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f9      	beq.n	800404a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004056:	4a0c      	ldr	r2, [pc, #48]	; (8004088 <SetSysClockTo72+0xf8>)
 8004058:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <SetSysClockTo72+0xf8>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f023 0303 	bic.w	r3, r3, #3
 8004060:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <SetSysClockTo72+0xf8>)
 8004064:	4b08      	ldr	r3, [pc, #32]	; (8004088 <SetSysClockTo72+0xf8>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f043 0302 	orr.w	r3, r3, #2
 800406c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800406e:	bf00      	nop
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <SetSysClockTo72+0xf8>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 030c 	and.w	r3, r3, #12
 8004078:	2b08      	cmp	r3, #8
 800407a:	d1f9      	bne.n	8004070 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	40022000 	.word	0x40022000

08004090 <client_rec>:

extern QueueHandle_t logMsgQueue;



int client_rec(byte* buf, uint16_t bufLen){
 8004090:	b580      	push	{r7, lr}
 8004092:	b08c      	sub	sp, #48	; 0x30
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	807b      	strh	r3, [r7, #2]
	if(nrf24_dataReady())
 800409c:	f7ff fb39 	bl	8003712 <nrf24_dataReady>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01e      	beq.n	80040e4 <client_rec+0x54>
	{
		if(nrf24_dataReady())
 80040a6:	f7ff fb34 	bl	8003712 <nrf24_dataReady>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d019      	beq.n	80040e4 <client_rec+0x54>
		{	uint8_t rxBytesNb;
			uint8_t data_array[32];
			nrf24_getData(data_array);
 80040b0:	f107 030c 	add.w	r3, r7, #12
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fb57 	bl	8003768 <nrf24_getData>
			rxBytesNb = l3_receive_packet(data_array, buf, bufLen);
 80040ba:	887a      	ldrh	r2, [r7, #2]
 80040bc:	f107 030c 	add.w	r3, r7, #12
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff f9ba 	bl	800343c <l3_receive_packet>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (rxBytesNb){
 80040ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d006      	beq.n	80040e4 <client_rec+0x54>

				GPIOC->BRR = GPIO_Pin_13;
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <client_rec+0x60>)
 80040d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040dc:	615a      	str	r2, [r3, #20]
				return rxBytesNb;
 80040de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040e2:	e000      	b.n	80040e6 <client_rec+0x56>
			}
		}
//		_delay_ms(10);
	}
	return 0;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3730      	adds	r7, #48	; 0x30
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40011000 	.word	0x40011000

080040f4 <mqtt_message_cb>:


QueueHandle_t externalMsgQueue;

int mqtt_message_cb(struct _MqttClient *client, MqttMessage *message, byte msg_new, byte msg_done){
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	4611      	mov	r1, r2
 8004100:	461a      	mov	r2, r3
 8004102:	460b      	mov	r3, r1
 8004104:	71fb      	strb	r3, [r7, #7]
 8004106:	4613      	mov	r3, r2
 8004108:	71bb      	strb	r3, [r7, #6]
	return 1;
 800410a:	2301      	movs	r3, #1
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <mqt_net_connect_cb>:

int mqt_net_connect_cb (void *context, const char* host, word16 port, int timeout_ms){
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	603b      	str	r3, [r7, #0]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
	return 1;
 8004126:	2301      	movs	r3, #1
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <mqtt_net_read_cb>:

int mqtt_net_read_cb(void *context, byte* buf, int buf_len, int timeout_ms){
 8004132:	b580      	push	{r7, lr}
 8004134:	b086      	sub	sp, #24
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	607a      	str	r2, [r7, #4]
 800413e:	603b      	str	r3, [r7, #0]

	uint32_t enterTimestamp = xTaskGetTickCount();
 8004140:	f7fc ff46 	bl	8000fd0 <xTaskGetTickCount>
 8004144:	6178      	str	r0, [r7, #20]
	while (xTaskGetTickCount() - enterTimestamp  > timeout_ms){
 8004146:	e005      	b.n	8004154 <mqtt_net_read_cb+0x22>
		client_rec(buf, buf_len);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	b29b      	uxth	r3, r3
 800414c:	4619      	mov	r1, r3
 800414e:	68b8      	ldr	r0, [r7, #8]
 8004150:	f7ff ff9e 	bl	8004090 <client_rec>
	while (xTaskGetTickCount() - enterTimestamp  > timeout_ms){
 8004154:	f7fc ff3c 	bl	8000fd0 <xTaskGetTickCount>
 8004158:	4602      	mov	r2, r0
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	1ad2      	subs	r2, r2, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d8f1      	bhi.n	8004148 <mqtt_net_read_cb+0x16>
	}
	return 1;
 8004164:	2301      	movs	r3, #1
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <mqtt_net_write_cb>:

int mqtt_net_write_cb(void *context, const byte* buf, int buf_len, int timeout_ms){
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	603b      	str	r3, [r7, #0]
	l3_send_packet(0, (uint8_t*) buf, buf_len);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	2000      	movs	r0, #0
 8004186:	f7ff f8e5 	bl	8003354 <l3_send_packet>
	return 1;
 800418a:	2301      	movs	r3, #1
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <mqtt_net_disconnect_cb>:

int mqtt_net_disconnect_cb(void *context){
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
	return 0;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <ThreadCommunication>:



void  ThreadCommunication ( void * pvParameters )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80041ae:	af04      	add	r7, sp, #16
 80041b0:	1d3b      	adds	r3, r7, #4
 80041b2:	6018      	str	r0, [r3, #0]
	xQueueSend(logMsgQueue, "communication started", 0);
 80041b4:	4b77      	ldr	r3, [pc, #476]	; (8004394 <ThreadCommunication+0x1ec>)
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	2300      	movs	r3, #0
 80041ba:	2200      	movs	r2, #0
 80041bc:	4976      	ldr	r1, [pc, #472]	; (8004398 <ThreadCommunication+0x1f0>)
 80041be:	f7fc fa57 	bl	8000670 <xQueueGenericSend>

	vPortEnterCritical();
 80041c2:	f7fc f91f 	bl	8000404 <vPortEnterCritical>
	nrf24_init();
 80041c6:	f7ff f9f9 	bl	80035bc <nrf24_init>
	nRF24_restore_defaults();
 80041ca:	f7ff f99a 	bl	8003502 <nRF24_restore_defaults>
	vPortExitCritical();
 80041ce:	f7fc f931 	bl	8000434 <vPortExitCritical>
	gpio_init();
 80041d2:	f7ff fcab 	bl	8003b2c <gpio_init>

	/* Channel #2 , payload length: 4 */
	const uint8_t channel = 2;
 80041d6:	2302      	movs	r3, #2
 80041d8:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	const uint8_t payload_len = 32;
 80041dc:	2320      	movs	r3, #32
 80041de:	f887 3226 	strb.w	r3, [r7, #550]	; 0x226
	nrf24_config(channel, payload_len);
 80041e2:	f897 2226 	ldrb.w	r2, [r7, #550]	; 0x226
 80041e6:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fa21 	bl	8003634 <nrf24_config>
	uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};
 80041f2:	4a6a      	ldr	r2, [pc, #424]	; (800439c <ThreadCommunication+0x1f4>)
 80041f4:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80041f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041fc:	6018      	str	r0, [r3, #0]
 80041fe:	3304      	adds	r3, #4
 8004200:	7019      	strb	r1, [r3, #0]
	uint8_t tx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
 8004202:	4a67      	ldr	r2, [pc, #412]	; (80043a0 <ThreadCommunication+0x1f8>)
 8004204:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8004208:	e892 0003 	ldmia.w	r2, {r0, r1}
 800420c:	6018      	str	r0, [r3, #0]
 800420e:	3304      	adds	r3, #4
 8004210:	7019      	strb	r1, [r3, #0]
	/* Set the device addresses */
	nrf24_tx_address(tx_address);
 8004212:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fa69 	bl	80036ee <nrf24_tx_address>
	nrf24_rx_address(rx_address);
 800421c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff fa51 	bl	80036c8 <nrf24_rx_address>



	MqttNet net;
	MqttClient client;
	net.connect = mqt_net_connect_cb;
 8004226:	4b5f      	ldr	r3, [pc, #380]	; (80043a4 <ThreadCommunication+0x1fc>)
 8004228:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	net.read = mqtt_net_read_cb;
 800422c:	4b5e      	ldr	r3, [pc, #376]	; (80043a8 <ThreadCommunication+0x200>)
 800422e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	net.write = mqtt_net_write_cb;
 8004232:	4b5e      	ldr	r3, [pc, #376]	; (80043ac <ThreadCommunication+0x204>)
 8004234:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	net.disconnect = mqtt_net_disconnect_cb;
 8004238:	4b5d      	ldr	r3, [pc, #372]	; (80043b0 <ThreadCommunication+0x208>)
 800423a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

	uint8_t tx_buf[BUF_SIZE_TX];
	uint8_t rx_buf[BUF_SIZE_RX];
	MqttClient_Init(&client, &net, mqtt_message_cb, tx_buf, BUF_SIZE_TX, rx_buf, BUF_SIZE_RX, CMD_TIMEOUT_MS);
 800423e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8004242:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8004246:	f507 70c6 	add.w	r0, r7, #396	; 0x18c
 800424a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800424e:	9303      	str	r3, [sp, #12]
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	9302      	str	r3, [sp, #8]
 8004254:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	4613      	mov	r3, r2
 8004260:	4a54      	ldr	r2, [pc, #336]	; (80043b4 <ThreadCommunication+0x20c>)
 8004262:	f7fd fe5f 	bl	8001f24 <MqttClient_Init>

	MqttConnect mqtt_con;
	mqtt_con.clean_session =0;
 8004266:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800426a:	2200      	movs	r2, #0
 800426c:	711a      	strb	r2, [r3, #4]
	mqtt_con.client_id = "rt1";
 800426e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004272:	4a51      	ldr	r2, [pc, #324]	; (80043b8 <ThreadCommunication+0x210>)
 8004274:	609a      	str	r2, [r3, #8]
	mqtt_con.enable_lwt = 0;
 8004276:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800427a:	2200      	movs	r2, #0
 800427c:	731a      	strb	r2, [r3, #12]
	mqtt_con.keep_alive_sec =30;
 800427e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004282:	221e      	movs	r2, #30
 8004284:	805a      	strh	r2, [r3, #2]
	mqtt_con.stat = MQTT_MSG_BEGIN;
 8004286:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
	mqtt_con.username ="bedroomTMP1";
 800428e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004292:	4a4a      	ldr	r2, [pc, #296]	; (80043bc <ThreadCommunication+0x214>)
 8004294:	615a      	str	r2, [r3, #20]
	mqtt_con.password = "passw0rd";
 8004296:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800429a:	4a49      	ldr	r2, [pc, #292]	; (80043c0 <ThreadCommunication+0x218>)
 800429c:	619a      	str	r2, [r3, #24]
	MqttClient_Connect(&client, &mqtt_con);
 800429e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80042a2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fd fe77 	bl	8001f9c <MqttClient_Connect>

	xQueueSend(logMsgQueue, "client connected", 0);
 80042ae:	4b39      	ldr	r3, [pc, #228]	; (8004394 <ThreadCommunication+0x1ec>)
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	2300      	movs	r3, #0
 80042b4:	2200      	movs	r2, #0
 80042b6:	4943      	ldr	r1, [pc, #268]	; (80043c4 <ThreadCommunication+0x21c>)
 80042b8:	f7fc f9da 	bl	8000670 <xQueueGenericSend>

	const char* test_topic1 = "flat/livingroom/temp/1";
 80042bc:	4b42      	ldr	r3, [pc, #264]	; (80043c8 <ThreadCommunication+0x220>)
 80042be:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	const char* test_topic2 = "flat/bedroom/humidity/2";
 80042c2:	4b42      	ldr	r3, [pc, #264]	; (80043cc <ThreadCommunication+0x224>)
 80042c4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	MqttTopic topics[2];
	topics[0].qos =1;
 80042c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80042cc:	2201      	movs	r2, #1
 80042ce:	711a      	strb	r2, [r3, #4]
	topics[0].topic_filter = test_topic1;
 80042d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80042d4:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80042d8:	601a      	str	r2, [r3, #0]
    topics[1].qos =1;
 80042da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80042de:	2201      	movs	r2, #1
 80042e0:	731a      	strb	r2, [r3, #12]
	topics[1].topic_filter = test_topic2;
 80042e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80042e6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80042ea:	609a      	str	r2, [r3, #8]


	MqttSubscribe subscribe;
	subscribe.packet_id = 1;
 80042ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80042f0:	2201      	movs	r2, #1
 80042f2:	805a      	strh	r2, [r3, #2]
	uint8_t topic_count = 2;
 80042f4:	2302      	movs	r3, #2
 80042f6:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
	subscribe.topic_count = topic_count;
 80042fa:	f897 221b 	ldrb.w	r2, [r7, #539]	; 0x21b
 80042fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004302:	605a      	str	r2, [r3, #4]
	subscribe.topics = topics;
 8004304:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004308:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800430c:	609a      	str	r2, [r3, #8]

	MqttClient_Subscribe(&client, &subscribe);
 800430e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004312:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f7fd ff3b 	bl	8002194 <MqttClient_Subscribe>
	xQueueSend(logMsgQueue, "client subsribe", 0);
 800431e:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <ThreadCommunication+0x1ec>)
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	2300      	movs	r3, #0
 8004324:	2200      	movs	r2, #0
 8004326:	492a      	ldr	r1, [pc, #168]	; (80043d0 <ThreadCommunication+0x228>)
 8004328:	f7fc f9a2 	bl	8000670 <xQueueGenericSend>
//		if (!(IsGpioHigh(GPIOB, 11))){
//			MqttClient_Connect(&client, &mqtt_con);
//			GPIOC->ODR ^= GPIO_Pin_13;
//		}

		MqttClient_WaitMessage(&client,100);
 800432c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004330:	2164      	movs	r1, #100	; 0x64
 8004332:	4618      	mov	r0, r3
 8004334:	f7fd ff91 	bl	800225a <MqttClient_WaitMessage>




		msgDataExt_t messageExt;
		if (xQueueReceive(externalMsgQueue, &messageExt, 0)){
 8004338:	4b26      	ldr	r3, [pc, #152]	; (80043d4 <ThreadCommunication+0x22c>)
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	f107 0108 	add.w	r1, r7, #8
 8004340:	2300      	movs	r3, #0
 8004342:	2200      	movs	r2, #0
 8004344:	f7fc fa3e 	bl	80007c4 <xQueueGenericReceive>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01c      	beq.n	8004388 <ThreadCommunication+0x1e0>

			MqttPublish publishPckt;
			switch (messageExt.type){
 800434e:	f107 0308 	add.w	r3, r7, #8
 8004352:	7e5b      	ldrb	r3, [r3, #25]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10f      	bne.n	8004378 <ThreadCommunication+0x1d0>
			case lightLevel:
				publishPckt.topic_name = test_topic1;
 8004358:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800435c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8004360:	609a      	str	r2, [r3, #8]
				publishPckt.topic_name_len = sizeof(test_topic1);
 8004362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004366:	2204      	movs	r2, #4
 8004368:	819a      	strh	r2, [r3, #12]
				xQueueSend(logMsgQueue, "light msg rcv", 0);
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <ThreadCommunication+0x1ec>)
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	2300      	movs	r3, #0
 8004370:	2200      	movs	r2, #0
 8004372:	4919      	ldr	r1, [pc, #100]	; (80043d8 <ThreadCommunication+0x230>)
 8004374:	f7fc f97c 	bl	8000670 <xQueueGenericSend>
			}


			 MqttClient_Publish(&client, &publishPckt);
 8004378:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800437c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f7fd fe52 	bl	800202c <MqttClient_Publish>
		}

		//poll sevrer b ping and inform supervisor about broken connection
		vTaskDelay(1000);
 8004388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800438c:	f7fc fd28 	bl	8000de0 <vTaskDelay>
	for (;;) {
 8004390:	e7cc      	b.n	800432c <ThreadCommunication+0x184>
 8004392:	bf00      	nop
 8004394:	20000198 	.word	0x20000198
 8004398:	08004724 	.word	0x08004724
 800439c:	080047bc 	.word	0x080047bc
 80043a0:	080047c4 	.word	0x080047c4
 80043a4:	08004117 	.word	0x08004117
 80043a8:	08004133 	.word	0x08004133
 80043ac:	0800416f 	.word	0x0800416f
 80043b0:	08004195 	.word	0x08004195
 80043b4:	080040f5 	.word	0x080040f5
 80043b8:	0800473c 	.word	0x0800473c
 80043bc:	08004740 	.word	0x08004740
 80043c0:	0800474c 	.word	0x0800474c
 80043c4:	08004758 	.word	0x08004758
 80043c8:	0800476c 	.word	0x0800476c
 80043cc:	08004784 	.word	0x08004784
 80043d0:	0800479c 	.word	0x0800479c
 80043d4:	200001a0 	.word	0x200001a0
 80043d8:	080047ac 	.word	0x080047ac

080043dc <ThreadServiceMode>:
extern QueueHandle_t logMsgQueue;



void ThreadServiceMode ( void * pvParameters )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	; 0x28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	xQueueSend(logMsgQueue, "serviceMode started", 0);
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <ThreadServiceMode+0x38>)
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	2300      	movs	r3, #0
 80043ea:	2200      	movs	r2, #0
 80043ec:	490a      	ldr	r1, [pc, #40]	; (8004418 <ThreadServiceMode+0x3c>)
 80043ee:	f7fc f93f 	bl	8000670 <xQueueGenericSend>

	for (;;) {
		char commandBuff[MAX_CMD_SIZE];
		if (xQueueReceive(logMsgQueue, &commandBuff, MAX_CMD_SIZE)){
 80043f2:	4b08      	ldr	r3, [pc, #32]	; (8004414 <ThreadServiceMode+0x38>)
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	f107 0108 	add.w	r1, r7, #8
 80043fa:	2300      	movs	r3, #0
 80043fc:	2220      	movs	r2, #32
 80043fe:	f7fc f9e1 	bl	80007c4 <xQueueGenericReceive>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f4      	beq.n	80043f2 <ThreadServiceMode+0x16>
			SendString(commandBuff);
 8004408:	f107 0308 	add.w	r3, r7, #8
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff fc6b 	bl	8003ce8 <SendString>
	for (;;) {
 8004412:	e7ee      	b.n	80043f2 <ThreadServiceMode+0x16>
 8004414:	20000198 	.word	0x20000198
 8004418:	080047cc 	.word	0x080047cc

0800441c <ConvertToExtMsg>:
extern QueueHandle_t internalMsgQueue;
extern QueueHandle_t externalMsgQueue;
extern QueueHandle_t logMsgQueue;


void ConvertToExtMsg(msgDataInt_t * msgDataInt, msgDataExt_t * msgDataExt){
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
	memcpy(msgDataExt, msgDataInt, sizeof(msgDataInt_t));
 8004426:	221a      	movs	r2, #26
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	6838      	ldr	r0, [r7, #0]
 800442c:	f000 f872 	bl	8004514 <memcpy>
	msgDataExt->timeStamp = getCurrentTime();
 8004430:	f7ff fd2a 	bl	8003e88 <getCurrentTime>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	61da      	str	r2, [r3, #28]

}
 800443c:	bf00      	nop
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <ThreadSupervisor>:


void ThreadSupervisor ( void * pvParameters )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b092      	sub	sp, #72	; 0x48
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	xQueueSend(logMsgQueue, "supervisor started", 0);
 800444c:	4b13      	ldr	r3, [pc, #76]	; (800449c <ThreadSupervisor+0x58>)
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	2300      	movs	r3, #0
 8004452:	2200      	movs	r2, #0
 8004454:	4912      	ldr	r1, [pc, #72]	; (80044a0 <ThreadSupervisor+0x5c>)
 8004456:	f7fc f90b 	bl	8000670 <xQueueGenericSend>
	for (;;) {
		//measurements scheduler here

		//parse and send internal data
		msgDataInt_t messageInt;
		if (xQueueReceive(internalMsgQueue, &messageInt, 0)){
 800445a:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <ThreadSupervisor+0x60>)
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004462:	2300      	movs	r3, #0
 8004464:	2200      	movs	r2, #0
 8004466:	f7fc f9ad 	bl	80007c4 <xQueueGenericReceive>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00f      	beq.n	8004490 <ThreadSupervisor+0x4c>
			msgDataExt_t messageExt;
			ConvertToExtMsg(&messageInt, &messageExt); //add timestamp instead?
 8004470:	f107 020c 	add.w	r2, r7, #12
 8004474:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004478:	4611      	mov	r1, r2
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff ffce 	bl	800441c <ConvertToExtMsg>
			xQueueSend(externalMsgQueue, &messageExt, 0);
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <ThreadSupervisor+0x64>)
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	f107 010c 	add.w	r1, r7, #12
 8004488:	2300      	movs	r3, #0
 800448a:	2200      	movs	r2, #0
 800448c:	f7fc f8f0 	bl	8000670 <xQueueGenericSend>
		}

		vTaskDelay(1000);
 8004490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004494:	f7fc fca4 	bl	8000de0 <vTaskDelay>
	for (;;) {
 8004498:	e7df      	b.n	800445a <ThreadSupervisor+0x16>
 800449a:	bf00      	nop
 800449c:	20000198 	.word	0x20000198
 80044a0:	080047e0 	.word	0x080047e0
 80044a4:	2000019c 	.word	0x2000019c
 80044a8:	200001a0 	.word	0x200001a0

080044ac <__libc_init_array>:
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	2500      	movs	r5, #0
 80044b0:	4e0c      	ldr	r6, [pc, #48]	; (80044e4 <__libc_init_array+0x38>)
 80044b2:	4c0d      	ldr	r4, [pc, #52]	; (80044e8 <__libc_init_array+0x3c>)
 80044b4:	1ba4      	subs	r4, r4, r6
 80044b6:	10a4      	asrs	r4, r4, #2
 80044b8:	42a5      	cmp	r5, r4
 80044ba:	d109      	bne.n	80044d0 <__libc_init_array+0x24>
 80044bc:	f000 f908 	bl	80046d0 <_init>
 80044c0:	2500      	movs	r5, #0
 80044c2:	4e0a      	ldr	r6, [pc, #40]	; (80044ec <__libc_init_array+0x40>)
 80044c4:	4c0a      	ldr	r4, [pc, #40]	; (80044f0 <__libc_init_array+0x44>)
 80044c6:	1ba4      	subs	r4, r4, r6
 80044c8:	10a4      	asrs	r4, r4, #2
 80044ca:	42a5      	cmp	r5, r4
 80044cc:	d105      	bne.n	80044da <__libc_init_array+0x2e>
 80044ce:	bd70      	pop	{r4, r5, r6, pc}
 80044d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044d4:	4798      	blx	r3
 80044d6:	3501      	adds	r5, #1
 80044d8:	e7ee      	b.n	80044b8 <__libc_init_array+0xc>
 80044da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044de:	4798      	blx	r3
 80044e0:	3501      	adds	r5, #1
 80044e2:	e7f2      	b.n	80044ca <__libc_init_array+0x1e>
 80044e4:	080047f4 	.word	0x080047f4
 80044e8:	080047f4 	.word	0x080047f4
 80044ec:	080047f4 	.word	0x080047f4
 80044f0:	080047f8 	.word	0x080047f8

080044f4 <malloc>:
 80044f4:	4b02      	ldr	r3, [pc, #8]	; (8004500 <malloc+0xc>)
 80044f6:	4601      	mov	r1, r0
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	f000 b86b 	b.w	80045d4 <_malloc_r>
 80044fe:	bf00      	nop
 8004500:	20000004 	.word	0x20000004

08004504 <free>:
 8004504:	4b02      	ldr	r3, [pc, #8]	; (8004510 <free+0xc>)
 8004506:	4601      	mov	r1, r0
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	f000 b817 	b.w	800453c <_free_r>
 800450e:	bf00      	nop
 8004510:	20000004 	.word	0x20000004

08004514 <memcpy>:
 8004514:	b510      	push	{r4, lr}
 8004516:	1e43      	subs	r3, r0, #1
 8004518:	440a      	add	r2, r1
 800451a:	4291      	cmp	r1, r2
 800451c:	d100      	bne.n	8004520 <memcpy+0xc>
 800451e:	bd10      	pop	{r4, pc}
 8004520:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004528:	e7f7      	b.n	800451a <memcpy+0x6>

0800452a <memset>:
 800452a:	4603      	mov	r3, r0
 800452c:	4402      	add	r2, r0
 800452e:	4293      	cmp	r3, r2
 8004530:	d100      	bne.n	8004534 <memset+0xa>
 8004532:	4770      	bx	lr
 8004534:	f803 1b01 	strb.w	r1, [r3], #1
 8004538:	e7f9      	b.n	800452e <memset+0x4>
	...

0800453c <_free_r>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	4605      	mov	r5, r0
 8004540:	2900      	cmp	r1, #0
 8004542:	d043      	beq.n	80045cc <_free_r+0x90>
 8004544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004548:	1f0c      	subs	r4, r1, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	bfb8      	it	lt
 800454e:	18e4      	addlt	r4, r4, r3
 8004550:	f000 f8ae 	bl	80046b0 <__malloc_lock>
 8004554:	4a1e      	ldr	r2, [pc, #120]	; (80045d0 <_free_r+0x94>)
 8004556:	6813      	ldr	r3, [r2, #0]
 8004558:	4610      	mov	r0, r2
 800455a:	b933      	cbnz	r3, 800456a <_free_r+0x2e>
 800455c:	6063      	str	r3, [r4, #4]
 800455e:	6014      	str	r4, [r2, #0]
 8004560:	4628      	mov	r0, r5
 8004562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004566:	f000 b8a4 	b.w	80046b2 <__malloc_unlock>
 800456a:	42a3      	cmp	r3, r4
 800456c:	d90b      	bls.n	8004586 <_free_r+0x4a>
 800456e:	6821      	ldr	r1, [r4, #0]
 8004570:	1862      	adds	r2, r4, r1
 8004572:	4293      	cmp	r3, r2
 8004574:	bf01      	itttt	eq
 8004576:	681a      	ldreq	r2, [r3, #0]
 8004578:	685b      	ldreq	r3, [r3, #4]
 800457a:	1852      	addeq	r2, r2, r1
 800457c:	6022      	streq	r2, [r4, #0]
 800457e:	6063      	str	r3, [r4, #4]
 8004580:	6004      	str	r4, [r0, #0]
 8004582:	e7ed      	b.n	8004560 <_free_r+0x24>
 8004584:	4613      	mov	r3, r2
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	b10a      	cbz	r2, 800458e <_free_r+0x52>
 800458a:	42a2      	cmp	r2, r4
 800458c:	d9fa      	bls.n	8004584 <_free_r+0x48>
 800458e:	6819      	ldr	r1, [r3, #0]
 8004590:	1858      	adds	r0, r3, r1
 8004592:	42a0      	cmp	r0, r4
 8004594:	d10b      	bne.n	80045ae <_free_r+0x72>
 8004596:	6820      	ldr	r0, [r4, #0]
 8004598:	4401      	add	r1, r0
 800459a:	1858      	adds	r0, r3, r1
 800459c:	4282      	cmp	r2, r0
 800459e:	6019      	str	r1, [r3, #0]
 80045a0:	d1de      	bne.n	8004560 <_free_r+0x24>
 80045a2:	6810      	ldr	r0, [r2, #0]
 80045a4:	6852      	ldr	r2, [r2, #4]
 80045a6:	4401      	add	r1, r0
 80045a8:	6019      	str	r1, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
 80045ac:	e7d8      	b.n	8004560 <_free_r+0x24>
 80045ae:	d902      	bls.n	80045b6 <_free_r+0x7a>
 80045b0:	230c      	movs	r3, #12
 80045b2:	602b      	str	r3, [r5, #0]
 80045b4:	e7d4      	b.n	8004560 <_free_r+0x24>
 80045b6:	6820      	ldr	r0, [r4, #0]
 80045b8:	1821      	adds	r1, r4, r0
 80045ba:	428a      	cmp	r2, r1
 80045bc:	bf01      	itttt	eq
 80045be:	6811      	ldreq	r1, [r2, #0]
 80045c0:	6852      	ldreq	r2, [r2, #4]
 80045c2:	1809      	addeq	r1, r1, r0
 80045c4:	6021      	streq	r1, [r4, #0]
 80045c6:	6062      	str	r2, [r4, #4]
 80045c8:	605c      	str	r4, [r3, #4]
 80045ca:	e7c9      	b.n	8004560 <_free_r+0x24>
 80045cc:	bd38      	pop	{r3, r4, r5, pc}
 80045ce:	bf00      	nop
 80045d0:	20000188 	.word	0x20000188

080045d4 <_malloc_r>:
 80045d4:	b570      	push	{r4, r5, r6, lr}
 80045d6:	1ccd      	adds	r5, r1, #3
 80045d8:	f025 0503 	bic.w	r5, r5, #3
 80045dc:	3508      	adds	r5, #8
 80045de:	2d0c      	cmp	r5, #12
 80045e0:	bf38      	it	cc
 80045e2:	250c      	movcc	r5, #12
 80045e4:	2d00      	cmp	r5, #0
 80045e6:	4606      	mov	r6, r0
 80045e8:	db01      	blt.n	80045ee <_malloc_r+0x1a>
 80045ea:	42a9      	cmp	r1, r5
 80045ec:	d903      	bls.n	80045f6 <_malloc_r+0x22>
 80045ee:	230c      	movs	r3, #12
 80045f0:	6033      	str	r3, [r6, #0]
 80045f2:	2000      	movs	r0, #0
 80045f4:	bd70      	pop	{r4, r5, r6, pc}
 80045f6:	f000 f85b 	bl	80046b0 <__malloc_lock>
 80045fa:	4a23      	ldr	r2, [pc, #140]	; (8004688 <_malloc_r+0xb4>)
 80045fc:	6814      	ldr	r4, [r2, #0]
 80045fe:	4621      	mov	r1, r4
 8004600:	b991      	cbnz	r1, 8004628 <_malloc_r+0x54>
 8004602:	4c22      	ldr	r4, [pc, #136]	; (800468c <_malloc_r+0xb8>)
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	b91b      	cbnz	r3, 8004610 <_malloc_r+0x3c>
 8004608:	4630      	mov	r0, r6
 800460a:	f000 f841 	bl	8004690 <_sbrk_r>
 800460e:	6020      	str	r0, [r4, #0]
 8004610:	4629      	mov	r1, r5
 8004612:	4630      	mov	r0, r6
 8004614:	f000 f83c 	bl	8004690 <_sbrk_r>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d126      	bne.n	800466a <_malloc_r+0x96>
 800461c:	230c      	movs	r3, #12
 800461e:	4630      	mov	r0, r6
 8004620:	6033      	str	r3, [r6, #0]
 8004622:	f000 f846 	bl	80046b2 <__malloc_unlock>
 8004626:	e7e4      	b.n	80045f2 <_malloc_r+0x1e>
 8004628:	680b      	ldr	r3, [r1, #0]
 800462a:	1b5b      	subs	r3, r3, r5
 800462c:	d41a      	bmi.n	8004664 <_malloc_r+0x90>
 800462e:	2b0b      	cmp	r3, #11
 8004630:	d90f      	bls.n	8004652 <_malloc_r+0x7e>
 8004632:	600b      	str	r3, [r1, #0]
 8004634:	18cc      	adds	r4, r1, r3
 8004636:	50cd      	str	r5, [r1, r3]
 8004638:	4630      	mov	r0, r6
 800463a:	f000 f83a 	bl	80046b2 <__malloc_unlock>
 800463e:	f104 000b 	add.w	r0, r4, #11
 8004642:	1d23      	adds	r3, r4, #4
 8004644:	f020 0007 	bic.w	r0, r0, #7
 8004648:	1ac3      	subs	r3, r0, r3
 800464a:	d01b      	beq.n	8004684 <_malloc_r+0xb0>
 800464c:	425a      	negs	r2, r3
 800464e:	50e2      	str	r2, [r4, r3]
 8004650:	bd70      	pop	{r4, r5, r6, pc}
 8004652:	428c      	cmp	r4, r1
 8004654:	bf0b      	itete	eq
 8004656:	6863      	ldreq	r3, [r4, #4]
 8004658:	684b      	ldrne	r3, [r1, #4]
 800465a:	6013      	streq	r3, [r2, #0]
 800465c:	6063      	strne	r3, [r4, #4]
 800465e:	bf18      	it	ne
 8004660:	460c      	movne	r4, r1
 8004662:	e7e9      	b.n	8004638 <_malloc_r+0x64>
 8004664:	460c      	mov	r4, r1
 8004666:	6849      	ldr	r1, [r1, #4]
 8004668:	e7ca      	b.n	8004600 <_malloc_r+0x2c>
 800466a:	1cc4      	adds	r4, r0, #3
 800466c:	f024 0403 	bic.w	r4, r4, #3
 8004670:	42a0      	cmp	r0, r4
 8004672:	d005      	beq.n	8004680 <_malloc_r+0xac>
 8004674:	1a21      	subs	r1, r4, r0
 8004676:	4630      	mov	r0, r6
 8004678:	f000 f80a 	bl	8004690 <_sbrk_r>
 800467c:	3001      	adds	r0, #1
 800467e:	d0cd      	beq.n	800461c <_malloc_r+0x48>
 8004680:	6025      	str	r5, [r4, #0]
 8004682:	e7d9      	b.n	8004638 <_malloc_r+0x64>
 8004684:	bd70      	pop	{r4, r5, r6, pc}
 8004686:	bf00      	nop
 8004688:	20000188 	.word	0x20000188
 800468c:	2000018c 	.word	0x2000018c

08004690 <_sbrk_r>:
 8004690:	b538      	push	{r3, r4, r5, lr}
 8004692:	2300      	movs	r3, #0
 8004694:	4c05      	ldr	r4, [pc, #20]	; (80046ac <_sbrk_r+0x1c>)
 8004696:	4605      	mov	r5, r0
 8004698:	4608      	mov	r0, r1
 800469a:	6023      	str	r3, [r4, #0]
 800469c:	f000 f80a 	bl	80046b4 <_sbrk>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d102      	bne.n	80046aa <_sbrk_r+0x1a>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	b103      	cbz	r3, 80046aa <_sbrk_r+0x1a>
 80046a8:	602b      	str	r3, [r5, #0]
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	200001a4 	.word	0x200001a4

080046b0 <__malloc_lock>:
 80046b0:	4770      	bx	lr

080046b2 <__malloc_unlock>:
 80046b2:	4770      	bx	lr

080046b4 <_sbrk>:
 80046b4:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <_sbrk+0x14>)
 80046b6:	4602      	mov	r2, r0
 80046b8:	6819      	ldr	r1, [r3, #0]
 80046ba:	b909      	cbnz	r1, 80046c0 <_sbrk+0xc>
 80046bc:	4903      	ldr	r1, [pc, #12]	; (80046cc <_sbrk+0x18>)
 80046be:	6019      	str	r1, [r3, #0]
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	4402      	add	r2, r0
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	4770      	bx	lr
 80046c8:	20000190 	.word	0x20000190
 80046cc:	200001a8 	.word	0x200001a8

080046d0 <_init>:
 80046d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d2:	bf00      	nop
 80046d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d6:	bc08      	pop	{r3}
 80046d8:	469e      	mov	lr, r3
 80046da:	4770      	bx	lr

080046dc <_fini>:
 80046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046de:	bf00      	nop
 80046e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e2:	bc08      	pop	{r3}
 80046e4:	469e      	mov	lr, r3
 80046e6:	4770      	bx	lr
