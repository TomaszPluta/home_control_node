
home_control_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001954  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001a60  08001a68  00011a68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001a60  08001a60  00011a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a64  08001a64  00011a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00011a68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000064  20000000  08001a68  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000064  08001a68  00020064  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00011a68  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000410e  00000000  00000000  00011a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000d19  00000000  00000000  00015b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000004e8  00000000  00000000  000168b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  00016da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001db2  00000000  00000000  00017200  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001984  00000000  00000000  00018fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0001a936  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000015f0  00000000  00000000  0001a9b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0001bfa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a48 	.word	0x08001a48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08001a48 	.word	0x08001a48

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	bf14      	ite	ne
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800044c:	e720      	b.n	8000290 <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_ul2d>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	b530      	push	{r4, r5, lr}
 800045a:	f04f 0500 	mov.w	r5, #0
 800045e:	e00a      	b.n	8000476 <__aeabi_l2d+0x16>

08000460 <__aeabi_l2d>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800046e:	d502      	bpl.n	8000476 <__aeabi_l2d+0x16>
 8000470:	4240      	negs	r0, r0
 8000472:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000476:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000482:	f43f aedc 	beq.w	800023e <__adddf3+0xe6>
 8000486:	f04f 0203 	mov.w	r2, #3
 800048a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800048e:	bf18      	it	ne
 8000490:	3203      	addne	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800049e:	f1c2 0320 	rsb	r3, r2, #32
 80004a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ae:	ea40 000e 	orr.w	r0, r0, lr
 80004b2:	fa21 f102 	lsr.w	r1, r1, r2
 80004b6:	4414      	add	r4, r2
 80004b8:	e6c1      	b.n	800023e <__adddf3+0xe6>
 80004ba:	bf00      	nop

080004bc <__aeabi_dmul>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ca:	bf1d      	ittte	ne
 80004cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d0:	ea94 0f0c 	teqne	r4, ip
 80004d4:	ea95 0f0c 	teqne	r5, ip
 80004d8:	f000 f8de 	bleq	8000698 <__aeabi_dmul+0x1dc>
 80004dc:	442c      	add	r4, r5
 80004de:	ea81 0603 	eor.w	r6, r1, r3
 80004e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004ee:	bf18      	it	ne
 80004f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004fc:	d038      	beq.n	8000570 <__aeabi_dmul+0xb4>
 80004fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800050e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000512:	f04f 0600 	mov.w	r6, #0
 8000516:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051a:	f09c 0f00 	teq	ip, #0
 800051e:	bf18      	it	ne
 8000520:	f04e 0e01 	orrne.w	lr, lr, #1
 8000524:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000528:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800052c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000530:	d204      	bcs.n	800053c <__aeabi_dmul+0x80>
 8000532:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000536:	416d      	adcs	r5, r5
 8000538:	eb46 0606 	adc.w	r6, r6, r6
 800053c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000540:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000544:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000548:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800054c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000550:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000554:	bf88      	it	hi
 8000556:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055a:	d81e      	bhi.n	800059a <__aeabi_dmul+0xde>
 800055c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000574:	ea46 0101 	orr.w	r1, r6, r1
 8000578:	ea40 0002 	orr.w	r0, r0, r2
 800057c:	ea81 0103 	eor.w	r1, r1, r3
 8000580:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000584:	bfc2      	ittt	gt
 8000586:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800058e:	bd70      	popgt	{r4, r5, r6, pc}
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f04f 0e00 	mov.w	lr, #0
 8000598:	3c01      	subs	r4, #1
 800059a:	f300 80ab 	bgt.w	80006f4 <__aeabi_dmul+0x238>
 800059e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a2:	bfde      	ittt	le
 80005a4:	2000      	movle	r0, #0
 80005a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd70      	pople	{r4, r5, r6, pc}
 80005ac:	f1c4 0400 	rsb	r4, r4, #0
 80005b0:	3c20      	subs	r4, #32
 80005b2:	da35      	bge.n	8000620 <__aeabi_dmul+0x164>
 80005b4:	340c      	adds	r4, #12
 80005b6:	dc1b      	bgt.n	80005f0 <__aeabi_dmul+0x134>
 80005b8:	f104 0414 	add.w	r4, r4, #20
 80005bc:	f1c4 0520 	rsb	r5, r4, #32
 80005c0:	fa00 f305 	lsl.w	r3, r0, r5
 80005c4:	fa20 f004 	lsr.w	r0, r0, r4
 80005c8:	fa01 f205 	lsl.w	r2, r1, r5
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005dc:	fa21 f604 	lsr.w	r6, r1, r4
 80005e0:	eb42 0106 	adc.w	r1, r2, r6
 80005e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005e8:	bf08      	it	eq
 80005ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f1c4 040c 	rsb	r4, r4, #12
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f304 	lsl.w	r3, r0, r4
 80005fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000600:	fa01 f204 	lsl.w	r2, r1, r4
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	f141 0100 	adc.w	r1, r1, #0
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f205 	lsl.w	r2, r0, r5
 8000628:	ea4e 0e02 	orr.w	lr, lr, r2
 800062c:	fa20 f304 	lsr.w	r3, r0, r4
 8000630:	fa01 f205 	lsl.w	r2, r1, r5
 8000634:	ea43 0302 	orr.w	r3, r3, r2
 8000638:	fa21 f004 	lsr.w	r0, r1, r4
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	fa21 f204 	lsr.w	r2, r1, r4
 8000644:	ea20 0002 	bic.w	r0, r0, r2
 8000648:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f094 0f00 	teq	r4, #0
 800065c:	d10f      	bne.n	800067e <__aeabi_dmul+0x1c2>
 800065e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000662:	0040      	lsls	r0, r0, #1
 8000664:	eb41 0101 	adc.w	r1, r1, r1
 8000668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800066c:	bf08      	it	eq
 800066e:	3c01      	subeq	r4, #1
 8000670:	d0f7      	beq.n	8000662 <__aeabi_dmul+0x1a6>
 8000672:	ea41 0106 	orr.w	r1, r1, r6
 8000676:	f095 0f00 	teq	r5, #0
 800067a:	bf18      	it	ne
 800067c:	4770      	bxne	lr
 800067e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	eb43 0303 	adc.w	r3, r3, r3
 8000688:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3d01      	subeq	r5, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1c6>
 8000692:	ea43 0306 	orr.w	r3, r3, r6
 8000696:	4770      	bx	lr
 8000698:	ea94 0f0c 	teq	r4, ip
 800069c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a0:	bf18      	it	ne
 80006a2:	ea95 0f0c 	teqne	r5, ip
 80006a6:	d00c      	beq.n	80006c2 <__aeabi_dmul+0x206>
 80006a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ac:	bf18      	it	ne
 80006ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b2:	d1d1      	bne.n	8000658 <__aeabi_dmul+0x19c>
 80006b4:	ea81 0103 	eor.w	r1, r1, r3
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c6:	bf06      	itte	eq
 80006c8:	4610      	moveq	r0, r2
 80006ca:	4619      	moveq	r1, r3
 80006cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d0:	d019      	beq.n	8000706 <__aeabi_dmul+0x24a>
 80006d2:	ea94 0f0c 	teq	r4, ip
 80006d6:	d102      	bne.n	80006de <__aeabi_dmul+0x222>
 80006d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006dc:	d113      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006de:	ea95 0f0c 	teq	r5, ip
 80006e2:	d105      	bne.n	80006f0 <__aeabi_dmul+0x234>
 80006e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006e8:	bf1c      	itt	ne
 80006ea:	4610      	movne	r0, r2
 80006ec:	4619      	movne	r1, r3
 80006ee:	d10a      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800070e:	bd70      	pop	{r4, r5, r6, pc}

08000710 <__aeabi_ddiv>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800071e:	bf1d      	ittte	ne
 8000720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000724:	ea94 0f0c 	teqne	r4, ip
 8000728:	ea95 0f0c 	teqne	r5, ip
 800072c:	f000 f8a7 	bleq	800087e <__aeabi_ddiv+0x16e>
 8000730:	eba4 0405 	sub.w	r4, r4, r5
 8000734:	ea81 0e03 	eor.w	lr, r1, r3
 8000738:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800073c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000740:	f000 8088 	beq.w	8000854 <__aeabi_ddiv+0x144>
 8000744:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000748:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800074c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000750:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000754:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000758:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800075c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000760:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000764:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000768:	429d      	cmp	r5, r3
 800076a:	bf08      	it	eq
 800076c:	4296      	cmpeq	r6, r2
 800076e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000772:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000776:	d202      	bcs.n	800077e <__aeabi_ddiv+0x6e>
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	ea4f 0232 	mov.w	r2, r2, rrx
 800077e:	1ab6      	subs	r6, r6, r2
 8000780:	eb65 0503 	sbc.w	r5, r5, r3
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800078e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000792:	ebb6 0e02 	subs.w	lr, r6, r2
 8000796:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079a:	bf22      	ittt	cs
 800079c:	1ab6      	subcs	r6, r6, r2
 800079e:	4675      	movcs	r5, lr
 80007a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f0:	d018      	beq.n	8000824 <__aeabi_ddiv+0x114>
 80007f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000802:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000806:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800080e:	d1c0      	bne.n	8000792 <__aeabi_ddiv+0x82>
 8000810:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000814:	d10b      	bne.n	800082e <__aeabi_ddiv+0x11e>
 8000816:	ea41 0100 	orr.w	r1, r1, r0
 800081a:	f04f 0000 	mov.w	r0, #0
 800081e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000822:	e7b6      	b.n	8000792 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf04      	itt	eq
 800082a:	4301      	orreq	r1, r0
 800082c:	2000      	moveq	r0, #0
 800082e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000832:	bf88      	it	hi
 8000834:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000838:	f63f aeaf 	bhi.w	800059a <__aeabi_dmul+0xde>
 800083c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000840:	bf04      	itt	eq
 8000842:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000846:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084a:	f150 0000 	adcs.w	r0, r0, #0
 800084e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000858:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800085c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000860:	bfc2      	ittt	gt
 8000862:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086a:	bd70      	popgt	{r4, r5, r6, pc}
 800086c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000870:	f04f 0e00 	mov.w	lr, #0
 8000874:	3c01      	subs	r4, #1
 8000876:	e690      	b.n	800059a <__aeabi_dmul+0xde>
 8000878:	ea45 0e06 	orr.w	lr, r5, r6
 800087c:	e68d      	b.n	800059a <__aeabi_dmul+0xde>
 800087e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000882:	ea94 0f0c 	teq	r4, ip
 8000886:	bf08      	it	eq
 8000888:	ea95 0f0c 	teqeq	r5, ip
 800088c:	f43f af3b 	beq.w	8000706 <__aeabi_dmul+0x24a>
 8000890:	ea94 0f0c 	teq	r4, ip
 8000894:	d10a      	bne.n	80008ac <__aeabi_ddiv+0x19c>
 8000896:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089a:	f47f af34 	bne.w	8000706 <__aeabi_dmul+0x24a>
 800089e:	ea95 0f0c 	teq	r5, ip
 80008a2:	f47f af25 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008a6:	4610      	mov	r0, r2
 80008a8:	4619      	mov	r1, r3
 80008aa:	e72c      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008ac:	ea95 0f0c 	teq	r5, ip
 80008b0:	d106      	bne.n	80008c0 <__aeabi_ddiv+0x1b0>
 80008b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b6:	f43f aefd 	beq.w	80006b4 <__aeabi_dmul+0x1f8>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e722      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c4:	bf18      	it	ne
 80008c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ca:	f47f aec5 	bne.w	8000658 <__aeabi_dmul+0x19c>
 80008ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d2:	f47f af0d 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008da:	f47f aeeb 	bne.w	80006b4 <__aeabi_dmul+0x1f8>
 80008de:	e712      	b.n	8000706 <__aeabi_dmul+0x24a>

080008e0 <__gedf2>:
 80008e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008e4:	e006      	b.n	80008f4 <__cmpdf2+0x4>
 80008e6:	bf00      	nop

080008e8 <__ledf2>:
 80008e8:	f04f 0c01 	mov.w	ip, #1
 80008ec:	e002      	b.n	80008f4 <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__cmpdf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000904:	bf18      	it	ne
 8000906:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090a:	d01b      	beq.n	8000944 <__cmpdf2+0x54>
 800090c:	b001      	add	sp, #4
 800090e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000912:	bf0c      	ite	eq
 8000914:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000918:	ea91 0f03 	teqne	r1, r3
 800091c:	bf02      	ittt	eq
 800091e:	ea90 0f02 	teqeq	r0, r2
 8000922:	2000      	moveq	r0, #0
 8000924:	4770      	bxeq	lr
 8000926:	f110 0f00 	cmn.w	r0, #0
 800092a:	ea91 0f03 	teq	r1, r3
 800092e:	bf58      	it	pl
 8000930:	4299      	cmppl	r1, r3
 8000932:	bf08      	it	eq
 8000934:	4290      	cmpeq	r0, r2
 8000936:	bf2c      	ite	cs
 8000938:	17d8      	asrcs	r0, r3, #31
 800093a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800093e:	f040 0001 	orr.w	r0, r0, #1
 8000942:	4770      	bx	lr
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	d102      	bne.n	8000954 <__cmpdf2+0x64>
 800094e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000952:	d107      	bne.n	8000964 <__cmpdf2+0x74>
 8000954:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800095c:	d1d6      	bne.n	800090c <__cmpdf2+0x1c>
 800095e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000962:	d0d3      	beq.n	800090c <__cmpdf2+0x1c>
 8000964:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <__aeabi_cdrcmple>:
 800096c:	4684      	mov	ip, r0
 800096e:	4610      	mov	r0, r2
 8000970:	4662      	mov	r2, ip
 8000972:	468c      	mov	ip, r1
 8000974:	4619      	mov	r1, r3
 8000976:	4663      	mov	r3, ip
 8000978:	e000      	b.n	800097c <__aeabi_cdcmpeq>
 800097a:	bf00      	nop

0800097c <__aeabi_cdcmpeq>:
 800097c:	b501      	push	{r0, lr}
 800097e:	f7ff ffb7 	bl	80008f0 <__cmpdf2>
 8000982:	2800      	cmp	r0, #0
 8000984:	bf48      	it	mi
 8000986:	f110 0f00 	cmnmi.w	r0, #0
 800098a:	bd01      	pop	{r0, pc}

0800098c <__aeabi_dcmpeq>:
 800098c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000990:	f7ff fff4 	bl	800097c <__aeabi_cdcmpeq>
 8000994:	bf0c      	ite	eq
 8000996:	2001      	moveq	r0, #1
 8000998:	2000      	movne	r0, #0
 800099a:	f85d fb08 	ldr.w	pc, [sp], #8
 800099e:	bf00      	nop

080009a0 <__aeabi_dcmplt>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff ffea 	bl	800097c <__aeabi_cdcmpeq>
 80009a8:	bf34      	ite	cc
 80009aa:	2001      	movcc	r0, #1
 80009ac:	2000      	movcs	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmple>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffe0 	bl	800097c <__aeabi_cdcmpeq>
 80009bc:	bf94      	ite	ls
 80009be:	2001      	movls	r0, #1
 80009c0:	2000      	movhi	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmpge>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffce 	bl	800096c <__aeabi_cdrcmple>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpgt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffc4 	bl	800096c <__aeabi_cdrcmple>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_d2iz>:
 80009f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009f8:	d215      	bcs.n	8000a26 <__aeabi_d2iz+0x36>
 80009fa:	d511      	bpl.n	8000a20 <__aeabi_d2iz+0x30>
 80009fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a04:	d912      	bls.n	8000a2c <__aeabi_d2iz+0x3c>
 8000a06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a16:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1a:	bf18      	it	ne
 8000a1c:	4240      	negne	r0, r0
 8000a1e:	4770      	bx	lr
 8000a20:	f04f 0000 	mov.w	r0, #0
 8000a24:	4770      	bx	lr
 8000a26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2a:	d105      	bne.n	8000a38 <__aeabi_d2iz+0x48>
 8000a2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	bf08      	it	eq
 8000a32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a36:	4770      	bx	lr
 8000a38:	f04f 0000 	mov.w	r0, #0
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b089      	sub	sp, #36	; 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	78db      	ldrb	r3, [r3, #3]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	78db      	ldrb	r3, [r3, #3]
 8000a70:	f003 0310 	and.w	r3, r3, #16
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d005      	beq.n	8000a84 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	789b      	ldrb	r3, [r3, #2]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d044      	beq.n	8000b18 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
 8000a98:	e038      	b.n	8000b0c <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d126      	bne.n	8000b06 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000abe:	220f      	movs	r2, #15
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000ad2:	69fa      	ldr	r2, [r7, #28]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	78db      	ldrb	r3, [r3, #3]
 8000ae4:	2b28      	cmp	r3, #40	; 0x28
 8000ae6:	d105      	bne.n	8000af4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	409a      	lsls	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	e008      	b.n	8000b06 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	78db      	ldrb	r3, [r3, #3]
 8000af8:	2b48      	cmp	r3, #72	; 0x48
 8000afa:	d104      	bne.n	8000b06 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000afc:	2201      	movs	r2, #1
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	409a      	lsls	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	2b07      	cmp	r3, #7
 8000b10:	d9c3      	bls.n	8000a9a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	2bff      	cmp	r3, #255	; 0xff
 8000b1e:	d946      	bls.n	8000bae <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
 8000b2a:	e03a      	b.n	8000ba2 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	3308      	adds	r3, #8
 8000b30:	2201      	movs	r2, #1
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d127      	bne.n	8000b9c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000b52:	220f      	movs	r2, #15
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	4013      	ands	r3, r2
 8000b64:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b66:	69fa      	ldr	r2, [r7, #28]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	78db      	ldrb	r3, [r3, #3]
 8000b78:	2b28      	cmp	r3, #40	; 0x28
 8000b7a:	d105      	bne.n	8000b88 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	3308      	adds	r3, #8
 8000b80:	2201      	movs	r2, #1
 8000b82:	409a      	lsls	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	78db      	ldrb	r3, [r3, #3]
 8000b8c:	2b48      	cmp	r3, #72	; 0x48
 8000b8e:	d105      	bne.n	8000b9c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	3308      	adds	r3, #8
 8000b94:	2201      	movs	r2, #1
 8000b96:	409a      	lsls	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	61bb      	str	r3, [r7, #24]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	2b07      	cmp	r3, #7
 8000ba6:	d9c1      	bls.n	8000b2c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	605a      	str	r2, [r3, #4]
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000bc4:	887a      	ldrh	r2, [r7, #2]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	611a      	str	r2, [r3, #16]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000be0:	887a      	ldrh	r2, [r7, #2]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	615a      	str	r2, [r3, #20]
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000bfc:	78fb      	ldrb	r3, [r7, #3]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d006      	beq.n	8000c10 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c02:	4909      	ldr	r1, [pc, #36]	; (8000c28 <RCC_APB2PeriphClockCmd+0x38>)
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <RCC_APB2PeriphClockCmd+0x38>)
 8000c06:	699a      	ldr	r2, [r3, #24]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000c0e:	e006      	b.n	8000c1e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c10:	4905      	ldr	r1, [pc, #20]	; (8000c28 <RCC_APB2PeriphClockCmd+0x38>)
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <RCC_APB2PeriphClockCmd+0x38>)
 8000c14:	699a      	ldr	r2, [r3, #24]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	618b      	str	r3, [r1, #24]
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	40021000 	.word	0x40021000

08000c2c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c38:	78fb      	ldrb	r3, [r7, #3]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d006      	beq.n	8000c4c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c3e:	4909      	ldr	r1, [pc, #36]	; (8000c64 <RCC_APB1PeriphClockCmd+0x38>)
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <RCC_APB1PeriphClockCmd+0x38>)
 8000c42:	69da      	ldr	r2, [r3, #28]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000c4a:	e006      	b.n	8000c5a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000c4c:	4905      	ldr	r1, [pc, #20]	; (8000c64 <RCC_APB1PeriphClockCmd+0x38>)
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <RCC_APB1PeriphClockCmd+0x38>)
 8000c50:	69da      	ldr	r2, [r3, #28]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	4013      	ands	r3, r2
 8000c58:	61cb      	str	r3, [r1, #28]
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	40021000 	.word	0x40021000

08000c68 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000c7c:	89fb      	ldrh	r3, [r7, #14]
 8000c7e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000c82:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	881a      	ldrh	r2, [r3, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	885b      	ldrh	r3, [r3, #2]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000c94:	4313      	orrs	r3, r2
 8000c96:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	89fb      	ldrh	r3, [r7, #14]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	89fa      	ldrh	r2, [r7, #14]
 8000cca:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	8b9b      	ldrh	r3, [r3, #28]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	8a1a      	ldrh	r2, [r3, #16]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	821a      	strh	r2, [r3, #16]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr

08000cee <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cfa:	78fb      	ldrb	r3, [r7, #3]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d008      	beq.n	8000d12 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8000d10:	e007      	b.n	8000d22 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	801a      	strh	r2, [r3, #0]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	887a      	ldrh	r2, [r7, #2]
 8000d3c:	819a      	strh	r2, [r3, #12]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	899b      	ldrh	r3, [r3, #12]
 8000d54:	b29b      	uxth	r3, r3
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d008      	beq.n	8000d84 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	889b      	ldrh	r3, [r3, #4]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 8000d82:	e007      	b.n	8000d94 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	889b      	ldrh	r3, [r3, #4]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	f023 0304 	bic.w	r3, r3, #4
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	809a      	strh	r2, [r3, #4]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b085      	sub	sp, #20
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	460b      	mov	r3, r1
 8000da8:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000daa:	2300      	movs	r3, #0
 8000dac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	891b      	ldrh	r3, [r3, #8]
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	4013      	ands	r3, r2
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	73fb      	strb	r3, [r7, #15]
 8000dc2:	e001      	b.n	8000dc8 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <bmp280_init>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE bmp280_init(struct bmp280_t *bmp280)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8000ddc:	23ff      	movs	r3, #255	; 0xff
 8000dde:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	737b      	strb	r3, [r7, #13]
	u8 v_chip_id_read_count = BMP280_CHIP_ID_READ_COUNT;
 8000de4:	2305      	movs	r3, #5
 8000de6:	73bb      	strb	r3, [r7, #14]

	p_bmp280 = bmp280;/* assign BMP280 ptr */
 8000de8:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <bmp280_init+0x9c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]

	while (v_chip_id_read_count > 0) {
 8000dee:	e01d      	b.n	8000e2c <bmp280_init+0x58>
		/* read chip id */
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <bmp280_init+0x9c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <bmp280_init+0x9c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	7f58      	ldrb	r0, [r3, #29]
 8000dfc:	f107 020d 	add.w	r2, r7, #13
 8000e00:	2301      	movs	r3, #1
 8000e02:	21d0      	movs	r1, #208	; 0xd0
 8000e04:	47a0      	blx	r4
 8000e06:	4603      	mov	r3, r0
 8000e08:	73fb      	strb	r3, [r7, #15]
				//BMP280_TEMPERATURE_LSB_REG, &v_data_u8,
				BMP280_CHIP_ID_REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		/* Check for the correct chip id */
		if ((v_data_u8 == BMP280_CHIP_ID1)
 8000e0a:	7b7b      	ldrb	r3, [r7, #13]
 8000e0c:	2b56      	cmp	r3, #86	; 0x56
 8000e0e:	d010      	beq.n	8000e32 <bmp280_init+0x5e>
			|| (v_data_u8 == BMP280_CHIP_ID2)
 8000e10:	7b7b      	ldrb	r3, [r7, #13]
 8000e12:	2b57      	cmp	r3, #87	; 0x57
 8000e14:	d00d      	beq.n	8000e32 <bmp280_init+0x5e>
			|| (v_data_u8 == BMP280_CHIP_ID3))
 8000e16:	7b7b      	ldrb	r3, [r7, #13]
 8000e18:	2b58      	cmp	r3, #88	; 0x58
 8000e1a:	d00a      	beq.n	8000e32 <bmp280_init+0x5e>
			break;
		v_chip_id_read_count--;
 8000e1c:	7bbb      	ldrb	r3, [r7, #14]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	73bb      	strb	r3, [r7, #14]
		/* Delay added concerning the low speed of power up system to
		facilitate the proper reading of the chip ID */
		p_bmp280->delay_msec(BMP280_REGISTER_READ_DELAY);
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <bmp280_init+0x9c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4798      	blx	r3
	while (v_chip_id_read_count > 0) {
 8000e2c:	7bbb      	ldrb	r3, [r7, #14]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1de      	bne.n	8000df0 <bmp280_init+0x1c>
	}

	/*assign chip ID to the global structure*/
	p_bmp280->chip_id = v_data_u8;
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <bmp280_init+0x9c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	7b7a      	ldrb	r2, [r7, #13]
 8000e38:	771a      	strb	r2, [r3, #28]
	/*com_rslt status of chip ID read*/
	com_rslt = (v_chip_id_read_count == BMP280_INIT_VALUE) ?
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <bmp280_init+0x72>
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e44:	e000      	b.n	8000e48 <bmp280_init+0x74>
 8000e46:	2300      	movs	r3, #0
 8000e48:	73fb      	strb	r3, [r7, #15]
			BMP280_CHIP_ID_READ_FAIL : BMP280_CHIP_ID_READ_SUCCESS;

	if (com_rslt == BMP280_CHIP_ID_READ_SUCCESS) {
 8000e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d107      	bne.n	8000e62 <bmp280_init+0x8e>
		/* readout bmp280 calibration parameter structure */
		com_rslt += bmp280_get_calib_param();
 8000e52:	f000 f971 	bl	8001138 <bmp280_get_calib_param>
 8000e56:	4603      	mov	r3, r0
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	73fb      	strb	r3, [r7, #15]
	}
	return com_rslt;
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd90      	pop	{r4, r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000001c 	.word	0x2000001c

08000e74 <bmp280_read_uncomp_temperature>:
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE bmp280_read_uncomp_temperature(
		s32 *v_uncomp_temperature_s32)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8000e7c:	23ff      	movs	r3, #255	; 0xff
 8000e7e:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	 a_data_u8r[0] - Temperature MSB
	 a_data_u8r[1] - Temperature LSB
	 a_data_u8r[2] - Temperature LSB
	 */
	u8 a_data_u8r[BMP280_TEMPERATURE_DATA_SIZE] = {BMP280_INIT_VALUE,
 8000e80:	2300      	movs	r3, #0
 8000e82:	733b      	strb	r3, [r7, #12]
 8000e84:	2300      	movs	r3, #0
 8000e86:	737b      	strb	r3, [r7, #13]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73bb      	strb	r3, [r7, #14]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <bmp280_read_uncomp_temperature+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <bmp280_read_uncomp_temperature+0x26>
		com_rslt = E_BMP280_NULL_PTR;
 8000e94:	2381      	movs	r3, #129	; 0x81
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e018      	b.n	8000ecc <bmp280_read_uncomp_temperature+0x58>
	} else {
		/* read temperature data */
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <bmp280_read_uncomp_temperature+0x64>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <bmp280_read_uncomp_temperature+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	7f58      	ldrb	r0, [r3, #29]
 8000ea6:	f107 020c 	add.w	r2, r7, #12
 8000eaa:	2306      	movs	r3, #6
 8000eac:	21fa      	movs	r1, #250	; 0xfa
 8000eae:	47a0      	blx	r4
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73fb      	strb	r3, [r7, #15]
				BMP280_TEMPERATURE_MSB_REG, a_data_u8r,
				BMP280_TEMPERATURE_DATA_LENGTH*2);
		*v_uncomp_temperature_s32 = (s32)((((u32)(
				a_data_u8r[BMP280_TEMPERATURE_MSB_DATA]))
 8000eb4:	7b3b      	ldrb	r3, [r7, #12]
				<< BMP280_SHIFT_BIT_POSITION_BY_12_BITS)
 8000eb6:	031a      	lsls	r2, r3, #12
				| (((u32)(
				a_data_u8r[BMP280_TEMPERATURE_LSB_DATA]))
 8000eb8:	7b7b      	ldrb	r3, [r7, #13]
				<< BMP280_SHIFT_BIT_POSITION_BY_04_BITS)
 8000eba:	011b      	lsls	r3, r3, #4
				| (((u32)(
 8000ebc:	4313      	orrs	r3, r2
				| ((u32)a_data_u8r[BMP280_TEMPERATURE_XLSB_DATA]
 8000ebe:	7bba      	ldrb	r2, [r7, #14]
				>> BMP280_SHIFT_BIT_POSITION_BY_04_BITS));
 8000ec0:	0912      	lsrs	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
				| ((u32)a_data_u8r[BMP280_TEMPERATURE_XLSB_DATA]
 8000ec4:	4313      	orrs	r3, r2
		*v_uncomp_temperature_s32 = (s32)((((u32)(
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	601a      	str	r2, [r3, #0]
	}
	return com_rslt;
 8000ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd90      	pop	{r4, r7, pc}
 8000ed8:	2000001c 	.word	0x2000001c

08000edc <bmp280_compensate_temperature_int32>:
 *
 *  @return Actual temperature output as s32
 *
 */
s32 bmp280_compensate_temperature_int32(s32 v_uncomp_temperature_s32)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	s32 v_x1_u32r = BMP280_INIT_VALUE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
	s32 v_x2_u32r = BMP280_INIT_VALUE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
	s32 temperature = BMP280_INIT_VALUE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
	/* calculate true temperature*/
	/*calculate x1*/
	v_x1_u32r = ((((v_uncomp_temperature_s32
			>> BMP280_SHIFT_BIT_POSITION_BY_03_BITS)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	10da      	asrs	r2, r3, #3
			- ((s32)p_bmp280->calib_param.dig_T1
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <bmp280_compensate_temperature_int32+0x8c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	881b      	ldrh	r3, [r3, #0]
			<< BMP280_SHIFT_BIT_POSITION_BY_01_BIT)))
 8000efa:	005b      	lsls	r3, r3, #1
			- ((s32)p_bmp280->calib_param.dig_T1
 8000efc:	1ad3      	subs	r3, r2, r3
			* ((s32)p_bmp280->calib_param.dig_T2))
 8000efe:	4a1a      	ldr	r2, [pc, #104]	; (8000f68 <bmp280_compensate_temperature_int32+0x8c>)
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
	v_x1_u32r = ((((v_uncomp_temperature_s32
 8000f0a:	12db      	asrs	r3, r3, #11
 8000f0c:	617b      	str	r3, [r7, #20]
			>> BMP280_SHIFT_BIT_POSITION_BY_11_BITS;
	/*calculate x2*/
	v_x2_u32r = (((((v_uncomp_temperature_s32
			>> BMP280_SHIFT_BIT_POSITION_BY_04_BITS)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	111b      	asrs	r3, r3, #4
			- ((s32)p_bmp280->calib_param.dig_T1))
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <bmp280_compensate_temperature_int32+0x8c>)
 8000f14:	6812      	ldr	r2, [r2, #0]
 8000f16:	8812      	ldrh	r2, [r2, #0]
 8000f18:	1a9b      	subs	r3, r3, r2
			* ((v_uncomp_temperature_s32
			>> BMP280_SHIFT_BIT_POSITION_BY_04_BITS)
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	1112      	asrs	r2, r2, #4
			- ((s32)p_bmp280->calib_param.dig_T1)))
 8000f1e:	4912      	ldr	r1, [pc, #72]	; (8000f68 <bmp280_compensate_temperature_int32+0x8c>)
 8000f20:	6809      	ldr	r1, [r1, #0]
 8000f22:	8809      	ldrh	r1, [r1, #0]
 8000f24:	1a52      	subs	r2, r2, r1
			* ((v_uncomp_temperature_s32
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
			>> BMP280_SHIFT_BIT_POSITION_BY_12_BITS)
 8000f2a:	131b      	asrs	r3, r3, #12
			* ((s32)p_bmp280->calib_param.dig_T3))
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <bmp280_compensate_temperature_int32+0x8c>)
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f34:	fb02 f303 	mul.w	r3, r2, r3
	v_x2_u32r = (((((v_uncomp_temperature_s32
 8000f38:	139b      	asrs	r3, r3, #14
 8000f3a:	613b      	str	r3, [r7, #16]
			>> BMP280_SHIFT_BIT_POSITION_BY_14_BITS;
	/*calculate t_fine*/
	p_bmp280->calib_param.t_fine = v_x1_u32r + v_x2_u32r;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <bmp280_compensate_temperature_int32+0x8c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6979      	ldr	r1, [r7, #20]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	440a      	add	r2, r1
 8000f46:	619a      	str	r2, [r3, #24]
	/*calculate temperature*/
	temperature = (p_bmp280->calib_param.t_fine * 5 + 128)
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <bmp280_compensate_temperature_int32+0x8c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	699a      	ldr	r2, [r3, #24]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	3380      	adds	r3, #128	; 0x80
 8000f56:	121b      	asrs	r3, r3, #8
 8000f58:	60fb      	str	r3, [r7, #12]
			>> BMP280_SHIFT_BIT_POSITION_BY_08_BITS;

	return temperature;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	371c      	adds	r7, #28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	2000001c 	.word	0x2000001c

08000f6c <bmp280_read_uncomp_pressure>:
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE bmp280_read_uncomp_pressure(
		s32 *v_uncomp_pressure_s32)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8000f74:	23ff      	movs	r3, #255	; 0xff
 8000f76:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	 a_data_u8[0] - Pressure MSB
	 a_data_u8[1] - Pressure LSB
	 a_data_u8[2] - Pressure LSB
	 */
	u8 a_data_u8[BMP280_PRESSURE_DATA_SIZE] = {BMP280_INIT_VALUE,
 8000f78:	2300      	movs	r3, #0
 8000f7a:	733b      	strb	r3, [r7, #12]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	737b      	strb	r3, [r7, #13]
 8000f80:	2300      	movs	r3, #0
 8000f82:	73bb      	strb	r3, [r7, #14]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <bmp280_read_uncomp_pressure+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <bmp280_read_uncomp_pressure+0x26>
		com_rslt = E_BMP280_NULL_PTR;
 8000f8c:	2381      	movs	r3, #129	; 0x81
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	e018      	b.n	8000fc4 <bmp280_read_uncomp_pressure+0x58>
	} else {
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <bmp280_read_uncomp_pressure+0x64>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <bmp280_read_uncomp_pressure+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	7f58      	ldrb	r0, [r3, #29]
 8000f9e:	f107 020c 	add.w	r2, r7, #12
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	21f7      	movs	r1, #247	; 0xf7
 8000fa6:	47a0      	blx	r4
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]
				BMP280_PRESSURE_MSB_REG, a_data_u8,
				BMP280_PRESSURE_DATA_LENGTH);
		*v_uncomp_pressure_s32 = (s32)((((u32)(
				a_data_u8[BMP280_PRESSURE_MSB_DATA]))
 8000fac:	7b3b      	ldrb	r3, [r7, #12]
				<< BMP280_SHIFT_BIT_POSITION_BY_12_BITS)
 8000fae:	031a      	lsls	r2, r3, #12
				| (((u32)(a_data_u8[BMP280_PRESSURE_LSB_DATA]))
 8000fb0:	7b7b      	ldrb	r3, [r7, #13]
				<< BMP280_SHIFT_BIT_POSITION_BY_04_BITS)
 8000fb2:	011b      	lsls	r3, r3, #4
				| (((u32)(a_data_u8[BMP280_PRESSURE_LSB_DATA]))
 8000fb4:	4313      	orrs	r3, r2
				| ((u32)a_data_u8[BMP280_PRESSURE_XLSB_DATA]
 8000fb6:	7bba      	ldrb	r2, [r7, #14]
				>> BMP280_SHIFT_BIT_POSITION_BY_04_BITS));
 8000fb8:	0912      	lsrs	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
				| ((u32)a_data_u8[BMP280_PRESSURE_XLSB_DATA]
 8000fbc:	4313      	orrs	r3, r2
		*v_uncomp_pressure_s32 = (s32)((((u32)(
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	601a      	str	r2, [r3, #0]
	}
	return com_rslt;
 8000fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd90      	pop	{r4, r7, pc}
 8000fd0:	2000001c 	.word	0x2000001c

08000fd4 <bmp280_compensate_pressure_int32>:
 *
 *  @return Returns the Actual pressure out put as s32
 *
 */
u32 bmp280_compensate_pressure_int32(s32 v_uncomp_pressure_s32)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	s32 v_x1_u32r = BMP280_INIT_VALUE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
	s32 v_x2_u32r = BMP280_INIT_VALUE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
	u32 v_pressure_u32 = BMP280_INIT_VALUE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
	/* calculate x1*/
	v_x1_u32r = (((s32)p_bmp280->calib_param.t_fine)
 8000fe8:	4b52      	ldr	r3, [pc, #328]	; (8001134 <bmp280_compensate_pressure_int32+0x160>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	699b      	ldr	r3, [r3, #24]
			>> BMP280_SHIFT_BIT_POSITION_BY_01_BIT) - (s32)64000;
 8000fee:	105b      	asrs	r3, r3, #1
	v_x1_u32r = (((s32)p_bmp280->calib_param.t_fine)
 8000ff0:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000ff4:	613b      	str	r3, [r7, #16]
	/* calculate x2*/
	v_x2_u32r = (((v_x1_u32r >> BMP280_SHIFT_BIT_POSITION_BY_02_BITS)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	109b      	asrs	r3, r3, #2
			* (v_x1_u32r >> BMP280_SHIFT_BIT_POSITION_BY_02_BITS))
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	1092      	asrs	r2, r2, #2
 8000ffe:	fb02 f303 	mul.w	r3, r2, r3
			>> BMP280_SHIFT_BIT_POSITION_BY_11_BITS)
 8001002:	12db      	asrs	r3, r3, #11
			* ((s32)p_bmp280->calib_param.dig_P6);
 8001004:	4a4b      	ldr	r2, [pc, #300]	; (8001134 <bmp280_compensate_pressure_int32+0x160>)
 8001006:	6812      	ldr	r2, [r2, #0]
 8001008:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
	v_x2_u32r = (((v_x1_u32r >> BMP280_SHIFT_BIT_POSITION_BY_02_BITS)
 800100c:	fb02 f303 	mul.w	r3, r2, r3
 8001010:	60fb      	str	r3, [r7, #12]
	v_x2_u32r = v_x2_u32r + ((v_x1_u32r *
			((s32)p_bmp280->calib_param.dig_P5))
 8001012:	4b48      	ldr	r3, [pc, #288]	; (8001134 <bmp280_compensate_pressure_int32+0x160>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800101a:	461a      	mov	r2, r3
	v_x2_u32r = v_x2_u32r + ((v_x1_u32r *
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	fb03 f302 	mul.w	r3, r3, r2
			<< BMP280_SHIFT_BIT_POSITION_BY_01_BIT);
 8001022:	005b      	lsls	r3, r3, #1
	v_x2_u32r = v_x2_u32r + ((v_x1_u32r *
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
	v_x2_u32r = (v_x2_u32r >> BMP280_SHIFT_BIT_POSITION_BY_02_BITS)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	109a      	asrs	r2, r3, #2
			+ (((s32)p_bmp280->calib_param.dig_P4)
 800102e:	4b41      	ldr	r3, [pc, #260]	; (8001134 <bmp280_compensate_pressure_int32+0x160>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
			<< BMP280_SHIFT_BIT_POSITION_BY_16_BITS);
 8001036:	041b      	lsls	r3, r3, #16
	v_x2_u32r = (v_x2_u32r >> BMP280_SHIFT_BIT_POSITION_BY_02_BITS)
 8001038:	4413      	add	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]
	/* calculate x1*/
	v_x1_u32r = (((p_bmp280->calib_param.dig_P3
 800103c:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <bmp280_compensate_pressure_int32+0x160>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001044:	4619      	mov	r1, r3
			* (((v_x1_u32r
			>> BMP280_SHIFT_BIT_POSITION_BY_02_BITS) * (v_x1_u32r
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	109b      	asrs	r3, r3, #2
			>> BMP280_SHIFT_BIT_POSITION_BY_02_BITS))
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	1092      	asrs	r2, r2, #2
			>> BMP280_SHIFT_BIT_POSITION_BY_02_BITS) * (v_x1_u32r
 800104e:	fb02 f303 	mul.w	r3, r2, r3
			>> BMP280_SHIFT_BIT_POSITION_BY_13_BITS))
 8001052:	135b      	asrs	r3, r3, #13
			* (((v_x1_u32r
 8001054:	fb03 f301 	mul.w	r3, r3, r1
			>> BMP280_SHIFT_BIT_POSITION_BY_03_BITS)
 8001058:	10da      	asrs	r2, r3, #3
			+ ((((s32)p_bmp280->calib_param.dig_P2)
 800105a:	4b36      	ldr	r3, [pc, #216]	; (8001134 <bmp280_compensate_pressure_int32+0x160>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001062:	4619      	mov	r1, r3
			* v_x1_u32r)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	fb03 f301 	mul.w	r3, r3, r1
			>> BMP280_SHIFT_BIT_POSITION_BY_01_BIT))
 800106a:	105b      	asrs	r3, r3, #1
			+ ((((s32)p_bmp280->calib_param.dig_P2)
 800106c:	4413      	add	r3, r2
	v_x1_u32r = (((p_bmp280->calib_param.dig_P3
 800106e:	149b      	asrs	r3, r3, #18
 8001070:	613b      	str	r3, [r7, #16]
			>> BMP280_SHIFT_BIT_POSITION_BY_18_BITS;
	v_x1_u32r = ((((32768 + v_x1_u32r))
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
			* ((s32)p_bmp280->calib_param.dig_P1))
 8001078:	4a2e      	ldr	r2, [pc, #184]	; (8001134 <bmp280_compensate_pressure_int32+0x160>)
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	88d2      	ldrh	r2, [r2, #6]
 800107e:	fb02 f303 	mul.w	r3, r2, r3
	v_x1_u32r = ((((32768 + v_x1_u32r))
 8001082:	13db      	asrs	r3, r3, #15
 8001084:	613b      	str	r3, [r7, #16]
			>> BMP280_SHIFT_BIT_POSITION_BY_15_BITS);
	/* calculate pressure*/
	v_pressure_u32 = (((u32)(((s32)1048576) - v_uncomp_pressure_s32)
			- (v_x2_u32r >> BMP280_SHIFT_BIT_POSITION_BY_12_BITS)))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	425b      	negs	r3, r3
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	1312      	asrs	r2, r2, #12
 800108e:	1a9b      	subs	r3, r3, r2
			* 3125;
 8001090:	f640 4235 	movw	r2, #3125	; 0xc35
 8001094:	fb02 f303 	mul.w	r3, r2, r3
	v_pressure_u32 = (((u32)(((s32)1048576) - v_uncomp_pressure_s32)
 8001098:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 800109c:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 80010a0:	617b      	str	r3, [r7, #20]
	/* check overflow*/
	if (v_pressure_u32 < 0x80000000)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0b      	blt.n	80010c0 <bmp280_compensate_pressure_int32+0xec>
		/* Avoid exception caused by division by zero */
		if (v_x1_u32r != BMP280_INIT_VALUE)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d006      	beq.n	80010bc <bmp280_compensate_pressure_int32+0xe8>
			v_pressure_u32 = (v_pressure_u32
					<< BMP280_SHIFT_BIT_POSITION_BY_01_BIT)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005a      	lsls	r2, r3, #1
					/ ((u32)v_x1_u32r);
 80010b2:	693b      	ldr	r3, [r7, #16]
			v_pressure_u32 = (v_pressure_u32
 80010b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	e00d      	b.n	80010d8 <bmp280_compensate_pressure_int32+0x104>
		else
			return BMP280_INVALID_DATA;
 80010bc:	2300      	movs	r3, #0
 80010be:	e033      	b.n	8001128 <bmp280_compensate_pressure_int32+0x154>
	else
	/* Avoid exception caused by division by zero */
	if (v_x1_u32r != BMP280_INIT_VALUE)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <bmp280_compensate_pressure_int32+0x100>
		v_pressure_u32 = (v_pressure_u32 / (u32)v_x1_u32r) * 2;
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e001      	b.n	80010d8 <bmp280_compensate_pressure_int32+0x104>
	else
		return BMP280_INVALID_DATA;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e027      	b.n	8001128 <bmp280_compensate_pressure_int32+0x154>
	/* calculate x1*/
	v_x1_u32r = (((s32)p_bmp280->calib_param.dig_P9) * ((s32)(
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <bmp280_compensate_pressure_int32+0x160>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80010e0:	4619      	mov	r1, r3
			((v_pressure_u32
			>> BMP280_SHIFT_BIT_POSITION_BY_03_BITS)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	08db      	lsrs	r3, r3, #3
			* (v_pressure_u32
			>> BMP280_SHIFT_BIT_POSITION_BY_03_BITS))
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	08d2      	lsrs	r2, r2, #3
			* (v_pressure_u32
 80010ea:	fb02 f303 	mul.w	r3, r2, r3
			>> BMP280_SHIFT_BIT_POSITION_BY_13_BITS)))
 80010ee:	0b5b      	lsrs	r3, r3, #13
	v_x1_u32r = (((s32)p_bmp280->calib_param.dig_P9) * ((s32)(
 80010f0:	fb03 f301 	mul.w	r3, r3, r1
 80010f4:	131b      	asrs	r3, r3, #12
 80010f6:	613b      	str	r3, [r7, #16]
			>> BMP280_SHIFT_BIT_POSITION_BY_12_BITS;
	/* calculate x2*/
	v_x2_u32r = (((s32)(v_pressure_u32 >>
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	461a      	mov	r2, r3
			BMP280_SHIFT_BIT_POSITION_BY_02_BITS))
			* ((s32)p_bmp280->calib_param.dig_P8))
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <bmp280_compensate_pressure_int32+0x160>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001106:	fb03 f302 	mul.w	r3, r3, r2
	v_x2_u32r = (((s32)(v_pressure_u32 >>
 800110a:	135b      	asrs	r3, r3, #13
 800110c:	60fb      	str	r3, [r7, #12]
			>> BMP280_SHIFT_BIT_POSITION_BY_13_BITS;
	/* calculate true pressure*/
	v_pressure_u32 = (u32)((s32)v_pressure_u32 + ((v_x1_u32r + v_x2_u32r
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
			+ p_bmp280->calib_param.dig_P7)
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <bmp280_compensate_pressure_int32+0x160>)
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800111c:	4413      	add	r3, r2
			>> BMP280_SHIFT_BIT_POSITION_BY_04_BITS));
 800111e:	111a      	asrs	r2, r3, #4
	v_pressure_u32 = (u32)((s32)v_pressure_u32 + ((v_x1_u32r + v_x2_u32r
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	4413      	add	r3, r2
 8001124:	617b      	str	r3, [r7, #20]

	return v_pressure_u32;
 8001126:	697b      	ldr	r3, [r7, #20]
}
 8001128:	4618      	mov	r0, r3
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	2000001c 	.word	0x2000001c

08001138 <bmp280_get_calib_param>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE bmp280_get_calib_param(void)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 800113e:	23ff      	movs	r3, #255	; 0xff
 8001140:	77fb      	strb	r3, [r7, #31]
	u8 a_data_u8[BMP280_CALIB_DATA_SIZE] = {BMP280_INIT_VALUE,
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	615a      	str	r2, [r3, #20]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001152:	4b4e      	ldr	r3, [pc, #312]	; (800128c <bmp280_get_calib_param+0x154>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <bmp280_get_calib_param+0x28>
		com_rslt = E_BMP280_NULL_PTR;
 800115a:	2381      	movs	r3, #129	; 0x81
 800115c:	77fb      	strb	r3, [r7, #31]
 800115e:	e08f      	b.n	8001280 <bmp280_get_calib_param+0x148>
	} else {
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8001160:	4b4a      	ldr	r3, [pc, #296]	; (800128c <bmp280_get_calib_param+0x154>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001166:	4b49      	ldr	r3, [pc, #292]	; (800128c <bmp280_get_calib_param+0x154>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	7f58      	ldrb	r0, [r3, #29]
 800116c:	1d3a      	adds	r2, r7, #4
 800116e:	2318      	movs	r3, #24
 8001170:	2188      	movs	r1, #136	; 0x88
 8001172:	47a0      	blx	r4
 8001174:	4603      	mov	r3, r0
 8001176:	77fb      	strb	r3, [r7, #31]
				BMP280_TEMPERATURE_CALIB_DIG_T1_LSB_REG,
				a_data_u8,
				BMP280_PRESSURE_TEMPERATURE_CALIB_DATA_LENGTH);
		/* read calibration values*/
		p_bmp280->calib_param.dig_T1 = (u16)((((u16)((u8)a_data_u8[
 8001178:	4b44      	ldr	r3, [pc, #272]	; (800128c <bmp280_get_calib_param+0x154>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	797a      	ldrb	r2, [r7, #5]
					BMP280_TEMPERATURE_CALIB_DIG_T1_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 800117e:	0212      	lsls	r2, r2, #8
					| a_data_u8[
 8001180:	b211      	sxth	r1, r2
 8001182:	793a      	ldrb	r2, [r7, #4]
 8001184:	b212      	sxth	r2, r2
 8001186:	430a      	orrs	r2, r1
 8001188:	b212      	sxth	r2, r2
		p_bmp280->calib_param.dig_T1 = (u16)((((u16)((u8)a_data_u8[
 800118a:	b292      	uxth	r2, r2
 800118c:	801a      	strh	r2, [r3, #0]
					BMP280_TEMPERATURE_CALIB_DIG_T1_LSB]);
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 800118e:	4b3f      	ldr	r3, [pc, #252]	; (800128c <bmp280_get_calib_param+0x154>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	79fa      	ldrb	r2, [r7, #7]
 8001194:	b252      	sxtb	r2, r2
					BMP280_TEMPERATURE_CALIB_DIG_T2_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001196:	0212      	lsls	r2, r2, #8
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 8001198:	b211      	sxth	r1, r2
					| a_data_u8[
 800119a:	79ba      	ldrb	r2, [r7, #6]
 800119c:	b212      	sxth	r2, r2
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 800119e:	430a      	orrs	r2, r1
 80011a0:	b212      	sxth	r2, r2
 80011a2:	805a      	strh	r2, [r3, #2]
					BMP280_TEMPERATURE_CALIB_DIG_T2_LSB]);
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 80011a4:	4b39      	ldr	r3, [pc, #228]	; (800128c <bmp280_get_calib_param+0x154>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	7a7a      	ldrb	r2, [r7, #9]
 80011aa:	b252      	sxtb	r2, r2
					BMP280_TEMPERATURE_CALIB_DIG_T3_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 80011ac:	0212      	lsls	r2, r2, #8
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 80011ae:	b211      	sxth	r1, r2
					| a_data_u8[
 80011b0:	7a3a      	ldrb	r2, [r7, #8]
 80011b2:	b212      	sxth	r2, r2
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 80011b4:	430a      	orrs	r2, r1
 80011b6:	b212      	sxth	r2, r2
 80011b8:	809a      	strh	r2, [r3, #4]
					BMP280_TEMPERATURE_CALIB_DIG_T3_LSB]);
		p_bmp280->calib_param.dig_P1 = (u16)((((u16)((u8)a_data_u8[
 80011ba:	4b34      	ldr	r3, [pc, #208]	; (800128c <bmp280_get_calib_param+0x154>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	7afa      	ldrb	r2, [r7, #11]
					BMP280_PRESSURE_CALIB_DIG_P1_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 80011c0:	0212      	lsls	r2, r2, #8
					| a_data_u8[
 80011c2:	b211      	sxth	r1, r2
 80011c4:	7aba      	ldrb	r2, [r7, #10]
 80011c6:	b212      	sxth	r2, r2
 80011c8:	430a      	orrs	r2, r1
 80011ca:	b212      	sxth	r2, r2
		p_bmp280->calib_param.dig_P1 = (u16)((((u16)((u8)a_data_u8[
 80011cc:	b292      	uxth	r2, r2
 80011ce:	80da      	strh	r2, [r3, #6]
					BMP280_PRESSURE_CALIB_DIG_P1_LSB]);
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 80011d0:	4b2e      	ldr	r3, [pc, #184]	; (800128c <bmp280_get_calib_param+0x154>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	7b7a      	ldrb	r2, [r7, #13]
 80011d6:	b252      	sxtb	r2, r2
					BMP280_PRESSURE_CALIB_DIG_P2_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 80011d8:	0212      	lsls	r2, r2, #8
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 80011da:	b211      	sxth	r1, r2
					| a_data_u8[
 80011dc:	7b3a      	ldrb	r2, [r7, #12]
 80011de:	b212      	sxth	r2, r2
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 80011e0:	430a      	orrs	r2, r1
 80011e2:	b212      	sxth	r2, r2
 80011e4:	811a      	strh	r2, [r3, #8]
					BMP280_PRESSURE_CALIB_DIG_P2_LSB]);
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 80011e6:	4b29      	ldr	r3, [pc, #164]	; (800128c <bmp280_get_calib_param+0x154>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	b252      	sxtb	r2, r2
					BMP280_PRESSURE_CALIB_DIG_P3_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 80011ee:	0212      	lsls	r2, r2, #8
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 80011f0:	b211      	sxth	r1, r2
					| a_data_u8[
 80011f2:	7bba      	ldrb	r2, [r7, #14]
 80011f4:	b212      	sxth	r2, r2
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 80011f6:	430a      	orrs	r2, r1
 80011f8:	b212      	sxth	r2, r2
 80011fa:	815a      	strh	r2, [r3, #10]
					BMP280_PRESSURE_CALIB_DIG_P3_LSB]);
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <bmp280_get_calib_param+0x154>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	7c7a      	ldrb	r2, [r7, #17]
 8001202:	b252      	sxtb	r2, r2
					BMP280_PRESSURE_CALIB_DIG_P4_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001204:	0212      	lsls	r2, r2, #8
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 8001206:	b211      	sxth	r1, r2
					| a_data_u8[
 8001208:	7c3a      	ldrb	r2, [r7, #16]
 800120a:	b212      	sxth	r2, r2
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 800120c:	430a      	orrs	r2, r1
 800120e:	b212      	sxth	r2, r2
 8001210:	819a      	strh	r2, [r3, #12]
					BMP280_PRESSURE_CALIB_DIG_P4_LSB]);
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 8001212:	4b1e      	ldr	r3, [pc, #120]	; (800128c <bmp280_get_calib_param+0x154>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	7cfa      	ldrb	r2, [r7, #19]
 8001218:	b252      	sxtb	r2, r2
					BMP280_PRESSURE_CALIB_DIG_P5_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 800121a:	0212      	lsls	r2, r2, #8
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 800121c:	b211      	sxth	r1, r2
					| a_data_u8[
 800121e:	7cba      	ldrb	r2, [r7, #18]
 8001220:	b212      	sxth	r2, r2
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 8001222:	430a      	orrs	r2, r1
 8001224:	b212      	sxth	r2, r2
 8001226:	81da      	strh	r2, [r3, #14]
					BMP280_PRESSURE_CALIB_DIG_P5_LSB]);
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <bmp280_get_calib_param+0x154>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	7d7a      	ldrb	r2, [r7, #21]
 800122e:	b252      	sxtb	r2, r2
					BMP280_PRESSURE_CALIB_DIG_P6_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001230:	0212      	lsls	r2, r2, #8
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 8001232:	b211      	sxth	r1, r2
					| a_data_u8[
 8001234:	7d3a      	ldrb	r2, [r7, #20]
 8001236:	b212      	sxth	r2, r2
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 8001238:	430a      	orrs	r2, r1
 800123a:	b212      	sxth	r2, r2
 800123c:	821a      	strh	r2, [r3, #16]
					BMP280_PRESSURE_CALIB_DIG_P6_LSB]);
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <bmp280_get_calib_param+0x154>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	7dfa      	ldrb	r2, [r7, #23]
 8001244:	b252      	sxtb	r2, r2
					BMP280_PRESSURE_CALIB_DIG_P7_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001246:	0212      	lsls	r2, r2, #8
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 8001248:	b211      	sxth	r1, r2
					| a_data_u8[
 800124a:	7dba      	ldrb	r2, [r7, #22]
 800124c:	b212      	sxth	r2, r2
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 800124e:	430a      	orrs	r2, r1
 8001250:	b212      	sxth	r2, r2
 8001252:	825a      	strh	r2, [r3, #18]
					BMP280_PRESSURE_CALIB_DIG_P7_LSB]);
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <bmp280_get_calib_param+0x154>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	7e7a      	ldrb	r2, [r7, #25]
 800125a:	b252      	sxtb	r2, r2
					BMP280_PRESSURE_CALIB_DIG_P8_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 800125c:	0212      	lsls	r2, r2, #8
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 800125e:	b211      	sxth	r1, r2
					| a_data_u8[
 8001260:	7e3a      	ldrb	r2, [r7, #24]
 8001262:	b212      	sxth	r2, r2
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 8001264:	430a      	orrs	r2, r1
 8001266:	b212      	sxth	r2, r2
 8001268:	829a      	strh	r2, [r3, #20]
					BMP280_PRESSURE_CALIB_DIG_P8_LSB]);
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <bmp280_get_calib_param+0x154>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	7efa      	ldrb	r2, [r7, #27]
 8001270:	b252      	sxtb	r2, r2
					BMP280_PRESSURE_CALIB_DIG_P9_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001272:	0212      	lsls	r2, r2, #8
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 8001274:	b211      	sxth	r1, r2
					| a_data_u8[
 8001276:	7eba      	ldrb	r2, [r7, #26]
 8001278:	b212      	sxth	r2, r2
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 800127a:	430a      	orrs	r2, r1
 800127c:	b212      	sxth	r2, r2
 800127e:	82da      	strh	r2, [r3, #22]
					BMP280_PRESSURE_CALIB_DIG_P9_LSB]);
	}
	return com_rslt;
 8001280:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3724      	adds	r7, #36	; 0x24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	2000001c 	.word	0x2000001c

08001290 <spi2_init>:
#include "stm32f10x.h"
#include "bmp280.h"
#include "bmp280_hal.h"


void spi2_init(void) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001296:	2101      	movs	r1, #1
 8001298:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800129c:	f7ff fcc6 	bl	8000c2c <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80012a0:	2101      	movs	r1, #1
 80012a2:	2008      	movs	r0, #8
 80012a4:	f7ff fca4 	bl	8000bf0 <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 80012a8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012ac:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80012ae:	2318      	movs	r3, #24
 80012b0:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80012b2:	2301      	movs	r3, #1
 80012b4:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80012b6:	463b      	mov	r3, r7
 80012b8:	4619      	mov	r1, r3
 80012ba:	481a      	ldr	r0, [pc, #104]	; (8001324 <spi2_init+0x94>)
 80012bc:	f7ff fbc0 	bl	8000a40 <GPIO_Init>


	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80012c6:	2310      	movs	r3, #16
 80012c8:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80012ca:	2301      	movs	r3, #1
 80012cc:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80012ce:	463b      	mov	r3, r7
 80012d0:	4619      	mov	r1, r3
 80012d2:	4814      	ldr	r0, [pc, #80]	; (8001324 <spi2_init+0x94>)
 80012d4:	f7ff fbb4 	bl	8000a40 <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80012d8:	2300      	movs	r3, #0
 80012da:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80012dc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80012e0:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80012e2:	2300      	movs	r3, #0
 80012e4:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80012e6:	2300      	movs	r3, #0
 80012e8:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80012ea:	2300      	movs	r3, #0
 80012ec:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80012ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f2:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 80012f4:	2318      	movs	r3, #24
 80012f6:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80012f8:	2300      	movs	r3, #0
 80012fa:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 80012fc:	2307      	movs	r3, #7
 80012fe:	82bb      	strh	r3, [r7, #20]
	SPI_SSOutputCmd(SPI2, ENABLE);
 8001300:	2101      	movs	r1, #1
 8001302:	4809      	ldr	r0, [pc, #36]	; (8001328 <spi2_init+0x98>)
 8001304:	f7ff fd2c 	bl	8000d60 <SPI_SSOutputCmd>
	SPI_Init(SPI2, &SPI_InitStructure);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4806      	ldr	r0, [pc, #24]	; (8001328 <spi2_init+0x98>)
 800130e:	f7ff fcab 	bl	8000c68 <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI2, ENABLE);
 8001312:	2101      	movs	r1, #1
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <spi2_init+0x98>)
 8001316:	f7ff fcea 	bl	8000cee <SPI_Cmd>

}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40010c00 	.word	0x40010c00
 8001328:	40003800 	.word	0x40003800

0800132c <spi_read_write_string>:


uint8_t  spi_read_write_string(uint8_t * read, uint8_t* write, uint8_t cnt){
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	4613      	mov	r3, r2
 8001338:	71fb      	strb	r3, [r7, #7]
	 // Wait until TX buffer is empty

	bmp280_CSN_L();
 800133a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800133e:	481c      	ldr	r0, [pc, #112]	; (80013b0 <spi_read_write_string+0x84>)
 8001340:	f7ff fc48 	bl	8000bd4 <GPIO_ResetBits>
	uint8_t i =0;
 8001344:	2300      	movs	r3, #0
 8001346:	75fb      	strb	r3, [r7, #23]
	while (i != cnt){
 8001348:	e024      	b.n	8001394 <spi_read_write_string+0x68>

		while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
 800134a:	bf00      	nop
 800134c:	2102      	movs	r1, #2
 800134e:	4819      	ldr	r0, [pc, #100]	; (80013b4 <spi_read_write_string+0x88>)
 8001350:	f7ff fd25 	bl	8000d9e <SPI_I2S_GetFlagStatus>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f8      	beq.n	800134c <spi_read_write_string+0x20>
		// Send byte to SPI (TXE cleared)
		SPI_I2S_SendData(SPI2, write[i]);
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b29b      	uxth	r3, r3
 8001364:	4619      	mov	r1, r3
 8001366:	4813      	ldr	r0, [pc, #76]	; (80013b4 <spi_read_write_string+0x88>)
 8001368:	f7ff fce0 	bl	8000d2c <SPI_I2S_SendData>
			// Wait while receive buffer is empty
		while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
 800136c:	bf00      	nop
 800136e:	2101      	movs	r1, #1
 8001370:	4810      	ldr	r0, [pc, #64]	; (80013b4 <spi_read_write_string+0x88>)
 8001372:	f7ff fd14 	bl	8000d9e <SPI_I2S_GetFlagStatus>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f8      	beq.n	800136e <spi_read_write_string+0x42>


		read[i] = SPI_I2S_ReceiveData(SPI2);
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	18d4      	adds	r4, r2, r3
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <spi_read_write_string+0x88>)
 8001384:	f7ff fce0 	bl	8000d48 <SPI_I2S_ReceiveData>
 8001388:	4603      	mov	r3, r0
 800138a:	b2db      	uxtb	r3, r3
 800138c:	7023      	strb	r3, [r4, #0]

		i++;
 800138e:	7dfb      	ldrb	r3, [r7, #23]
 8001390:	3301      	adds	r3, #1
 8001392:	75fb      	strb	r3, [r7, #23]
	while (i != cnt){
 8001394:	7dfa      	ldrb	r2, [r7, #23]
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	429a      	cmp	r2, r3
 800139a:	d1d6      	bne.n	800134a <spi_read_write_string+0x1e>
	}
	bmp280_CSN_H();
 800139c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <spi_read_write_string+0x84>)
 80013a2:	f7ff fc09 	bl	8000bb8 <GPIO_SetBits>
	return 1;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	371c      	adds	r7, #28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	40010c00 	.word	0x40010c00
 80013b4:	40003800 	.word	0x40003800

080013b8 <BMP280_SPI_bus_read>:
//
//}


s8  BMP280_SPI_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b094      	sub	sp, #80	; 0x50
 80013bc:	af00      	add	r7, sp, #0
 80013be:	603a      	str	r2, [r7, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
 80013c6:	460b      	mov	r3, r1
 80013c8:	71bb      	strb	r3, [r7, #6]
 80013ca:	4613      	mov	r3, r2
 80013cc:	717b      	strb	r3, [r7, #5]
	s32 iError=BMP280_INIT_VALUE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	64bb      	str	r3, [r7, #72]	; 0x48
	u8 array[SPI_BUFFER_LEN]={BUFFER_LENGTH};
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	2240      	movs	r2, #64	; 0x40
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fb2c 	bl	8001a38 <memset>
 80013e0:	23ff      	movs	r3, #255	; 0xff
 80013e2:	723b      	strb	r3, [r7, #8]
	u8 stringpos;
	/*	For the SPI mode only 7 bits of register addresses are used.
	The MSB of register address denotes the type of SPI data transfer, whether
	read/write (read as 1/write as 0)*/
	array[BMP280_INIT_VALUE] = reg_addr|SPI_READ;
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	723b      	strb	r3, [r7, #8]
	spi_read_write_string(array, array, cnt+1);
 80013ee:	797b      	ldrb	r3, [r7, #5]
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	f107 0108 	add.w	r1, r7, #8
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff96 	bl	800132c <spi_read_write_string>
	* The first read data is discarded, for that extra write operation
	* have to be initiated. Thus cnt+1 operation done in the SPI read
	* and write string function
	* For more information please refer the SPI communication in data sheet
	*/
	for (stringpos = BMP280_INIT_VALUE; stringpos < cnt; stringpos++) {
 8001400:	2300      	movs	r3, #0
 8001402:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001406:	e011      	b.n	800142c <BMP280_SPI_bus_read+0x74>
		*(reg_data + stringpos) = array[stringpos+BMP280_DATA_INDEX];
 8001408:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	4413      	add	r3, r2
 8001410:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001414:	3201      	adds	r2, #1
 8001416:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800141a:	440a      	add	r2, r1
 800141c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8001420:	701a      	strb	r2, [r3, #0]
	for (stringpos = BMP280_INIT_VALUE; stringpos < cnt; stringpos++) {
 8001422:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001426:	3301      	adds	r3, #1
 8001428:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800142c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001430:	797b      	ldrb	r3, [r7, #5]
 8001432:	429a      	cmp	r2, r3
 8001434:	d3e8      	bcc.n	8001408 <BMP280_SPI_bus_read+0x50>
	}
	return (s8)iError;
 8001436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001438:	b25b      	sxtb	r3, r3
}
 800143a:	4618      	mov	r0, r3
 800143c:	3750      	adds	r7, #80	; 0x50
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <BMP280_SPI_bus_write>:
 *	\param reg_data : It is a value held in the array,
 *		which is written in the register
 *	\param cnt : The no of bytes of data to be written
 */
s8  BMP280_SPI_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b0a8      	sub	sp, #160	; 0xa0
 8001446:	af00      	add	r7, sp, #0
 8001448:	603a      	str	r2, [r7, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	460b      	mov	r3, r1
 8001452:	71bb      	strb	r3, [r7, #6]
 8001454:	4613      	mov	r3, r2
 8001456:	717b      	strb	r3, [r7, #5]
	s32 iError = BMP280_INIT_VALUE;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	u8 array[SPI_BUFFER_LEN * BMP280_ADDRESS_INDEX];
	u8 stringpos = BMP280_INIT_VALUE;
 800145e:	2300      	movs	r3, #0
 8001460:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	u8 index = BMP280_INIT_VALUE;
 8001464:	2300      	movs	r3, #0
 8001466:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	for (stringpos = BMP280_INIT_VALUE; stringpos < cnt; stringpos++) {
 800146a:	2300      	movs	r3, #0
 800146c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001470:	e024      	b.n	80014bc <BMP280_SPI_bus_write+0x7a>
		/* the operation of (reg_addr++)&0x7F done as per the
		SPI communication protocol specified in the data sheet*/
		index = stringpos * BMP280_ADDRESS_INDEX;
 8001472:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		array[index] = (reg_addr++) & SPI_WRITE;
 800147c:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	1c59      	adds	r1, r3, #1
 8001484:	71b9      	strb	r1, [r7, #6]
 8001486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800148a:	b2d9      	uxtb	r1, r3
 800148c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001490:	4413      	add	r3, r2
 8001492:	460a      	mov	r2, r1
 8001494:	f803 2c8c 	strb.w	r2, [r3, #-140]
		array[index + BMP280_DATA_INDEX] = *(reg_data + stringpos);
 8001498:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800149c:	3301      	adds	r3, #1
 800149e:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80014a2:	6839      	ldr	r1, [r7, #0]
 80014a4:	440a      	add	r2, r1
 80014a6:	7812      	ldrb	r2, [r2, #0]
 80014a8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80014ac:	440b      	add	r3, r1
 80014ae:	f803 2c8c 	strb.w	r2, [r3, #-140]
	for (stringpos = BMP280_INIT_VALUE; stringpos < cnt; stringpos++) {
 80014b2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80014b6:	3301      	adds	r3, #1
 80014b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80014bc:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80014c0:	797b      	ldrb	r3, [r7, #5]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d3d5      	bcc.n	8001472 <BMP280_SPI_bus_write+0x30>
	}

	uint8_t read_buff[8];
	spi_read_write_string(read_buff, array, cnt*2 );
 80014c6:	797b      	ldrb	r3, [r7, #5]
 80014c8:	005a      	lsls	r2, r3, #1
 80014ca:	f107 0114 	add.w	r1, r7, #20
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff2a 	bl	800132c <spi_read_write_string>
	 * "IERROR = SPI_WRITE_STRING(ARRAY, CNT*2)"
	 * iError is an return value of SPI write function
	 * Please select your valid return value
	 * In the driver SUCCESS is defined as 0 and FAILURE is defined as -1
	 */
	return (s8)iError;
 80014d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014dc:	b25b      	sxtb	r3, r3
}
 80014de:	4618      	mov	r0, r3
 80014e0:	37a0      	adds	r7, #160	; 0xa0
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <BMP280_delay_msek>:

/*	Brief : The delay routine
 *	\param : delay in ms
*/
void  BMP280_delay_msek(u32 msek)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
	/*Here you can write your own delay routine*/
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <SPI_routine>:




s8 SPI_routine(void) {
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
 *	Bus write function pointer: BMP280_WR_FUNC_PTR
 *	Bus read function pointer: BMP280_RD_FUNC_PTR
 *	Delay function pointer: delay_msec
 *--------------------------------------------------------------------------*/

	bmp280.bus_write = BMP280_SPI_bus_write;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <SPI_routine+0x20>)
 80014fe:	4a07      	ldr	r2, [pc, #28]	; (800151c <SPI_routine+0x24>)
 8001500:	621a      	str	r2, [r3, #32]
	bmp280.bus_read = BMP280_SPI_bus_read;
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SPI_routine+0x20>)
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <SPI_routine+0x28>)
 8001506:	625a      	str	r2, [r3, #36]	; 0x24
	bmp280.delay_msec = BMP280_delay_msek;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <SPI_routine+0x20>)
 800150a:	4a06      	ldr	r2, [pc, #24]	; (8001524 <SPI_routine+0x2c>)
 800150c:	629a      	str	r2, [r3, #40]	; 0x28

	return BMP280_INIT_VALUE;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	20000034 	.word	0x20000034
 800151c:	08001443 	.word	0x08001443
 8001520:	080013b9 	.word	0x080013b9
 8001524:	080014e7 	.word	0x080014e7

08001528 <bmp280_compensate_T_int32>:


signed long t_fine;
signed long bmp280_compensate_T_int32(signed long adc_T)
{
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	long signed int var1, var2, T;
	var1 = ((((adc_T>>3) - ((long signed int)bmp280.calib_param.dig_T1<<1))) * ((long signed int)bmp280.calib_param.dig_T1)) >> 11;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	10da      	asrs	r2, r3, #3
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <bmp280_compensate_T_int32+0x70>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	4a16      	ldr	r2, [pc, #88]	; (8001598 <bmp280_compensate_T_int32+0x70>)
 800153e:	8812      	ldrh	r2, [r2, #0]
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	12db      	asrs	r3, r3, #11
 8001546:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((long signed int)bmp280.calib_param.dig_T1)) * ((adc_T>>4) - ((long signed int)bmp280.calib_param.dig_T1))) >> 12) *
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	111b      	asrs	r3, r3, #4
 800154c:	4a12      	ldr	r2, [pc, #72]	; (8001598 <bmp280_compensate_T_int32+0x70>)
 800154e:	8812      	ldrh	r2, [r2, #0]
 8001550:	1a9b      	subs	r3, r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	1112      	asrs	r2, r2, #4
 8001556:	4910      	ldr	r1, [pc, #64]	; (8001598 <bmp280_compensate_T_int32+0x70>)
 8001558:	8809      	ldrh	r1, [r1, #0]
 800155a:	1a52      	subs	r2, r2, r1
 800155c:	fb02 f303 	mul.w	r3, r2, r3
 8001560:	131b      	asrs	r3, r3, #12
	((long signed int)bmp280.calib_param.dig_T3)) >> 14;
 8001562:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <bmp280_compensate_T_int32+0x70>)
 8001564:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	var2 = (((((adc_T>>4) - ((long signed int)bmp280.calib_param.dig_T1)) * ((adc_T>>4) - ((long signed int)bmp280.calib_param.dig_T1))) >> 12) *
 8001568:	fb02 f303 	mul.w	r3, r2, r3
 800156c:	139b      	asrs	r3, r3, #14
 800156e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4413      	add	r3, r2
 8001576:	4a09      	ldr	r2, [pc, #36]	; (800159c <bmp280_compensate_T_int32+0x74>)
 8001578:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <bmp280_compensate_T_int32+0x74>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	3380      	adds	r3, #128	; 0x80
 8001586:	121b      	asrs	r3, r3, #8
 8001588:	60fb      	str	r3, [r7, #12]
	return T;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	4618      	mov	r0, r3
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000034 	.word	0x20000034
 800159c:	20000060 	.word	0x20000060

080015a0 <compensate_temperature>:




 double compensate_temperature(signed long adc_T)
{
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	4c5b      	ldr	r4, [pc, #364]	; (800171c <compensate_temperature+0x17c>)
 80015ae:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double temperature_max = 85;
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	4c5a      	ldr	r4, [pc, #360]	; (8001720 <compensate_temperature+0x180>)
 80015b8:	e9c7 3406 	strd	r3, r4, [r7, #24]

	var1 = ((double)adc_T) / 16384.0 - ((double)bmp280.calib_param.dig_T1) / 1024.0;
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7fe ff17 	bl	80003f0 <__aeabi_i2d>
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	4b57      	ldr	r3, [pc, #348]	; (8001724 <compensate_temperature+0x184>)
 80015c8:	f7ff f8a2 	bl	8000710 <__aeabi_ddiv>
 80015cc:	4603      	mov	r3, r0
 80015ce:	460c      	mov	r4, r1
 80015d0:	4625      	mov	r5, r4
 80015d2:	461c      	mov	r4, r3
 80015d4:	4b54      	ldr	r3, [pc, #336]	; (8001728 <compensate_temperature+0x188>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe fef9 	bl	80003d0 <__aeabi_ui2d>
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	4b52      	ldr	r3, [pc, #328]	; (800172c <compensate_temperature+0x18c>)
 80015e4:	f7ff f894 	bl	8000710 <__aeabi_ddiv>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4620      	mov	r0, r4
 80015ee:	4629      	mov	r1, r5
 80015f0:	f7fe fdb0 	bl	8000154 <__aeabi_dsub>
 80015f4:	4603      	mov	r3, r0
 80015f6:	460c      	mov	r4, r1
 80015f8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = var1 * ((double)bmp280.calib_param.dig_T2);
 80015fc:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <compensate_temperature+0x188>)
 80015fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe fef4 	bl	80003f0 <__aeabi_i2d>
 8001608:	4603      	mov	r3, r0
 800160a:	460c      	mov	r4, r1
 800160c:	461a      	mov	r2, r3
 800160e:	4623      	mov	r3, r4
 8001610:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001614:	f7fe ff52 	bl	80004bc <__aeabi_dmul>
 8001618:	4603      	mov	r3, r0
 800161a:	460c      	mov	r4, r1
 800161c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var2 = (((double)adc_T) / 131072.0 - ((double)bmp280.calib_param.dig_T1) / 8192.0);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7fe fee5 	bl	80003f0 <__aeabi_i2d>
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800162e:	f7ff f86f 	bl	8000710 <__aeabi_ddiv>
 8001632:	4603      	mov	r3, r0
 8001634:	460c      	mov	r4, r1
 8001636:	4625      	mov	r5, r4
 8001638:	461c      	mov	r4, r3
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <compensate_temperature+0x188>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe fec6 	bl	80003d0 <__aeabi_ui2d>
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	4b39      	ldr	r3, [pc, #228]	; (8001730 <compensate_temperature+0x190>)
 800164a:	f7ff f861 	bl	8000710 <__aeabi_ddiv>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4620      	mov	r0, r4
 8001654:	4629      	mov	r1, r5
 8001656:	f7fe fd7d 	bl	8000154 <__aeabi_dsub>
 800165a:	4603      	mov	r3, r0
 800165c:	460c      	mov	r4, r1
 800165e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	var2 = (var2 * var2) * ((double)bmp280.calib_param.dig_T1);
 8001662:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001666:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800166a:	f7fe ff27 	bl	80004bc <__aeabi_dmul>
 800166e:	4603      	mov	r3, r0
 8001670:	460c      	mov	r4, r1
 8001672:	4625      	mov	r5, r4
 8001674:	461c      	mov	r4, r3
 8001676:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <compensate_temperature+0x188>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fea8 	bl	80003d0 <__aeabi_ui2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7fe ff18 	bl	80004bc <__aeabi_dmul>
 800168c:	4603      	mov	r3, r0
 800168e:	460c      	mov	r4, r1
 8001690:	e9c7 3402 	strd	r3, r4, [r7, #8]
	static int32_t t_fine;
	t_fine = (int32_t)(var1 + var2);
 8001694:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001698:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800169c:	f7fe fd5c 	bl	8000158 <__adddf3>
 80016a0:	4603      	mov	r3, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	4618      	mov	r0, r3
 80016a6:	4621      	mov	r1, r4
 80016a8:	f7ff f9a2 	bl	80009f0 <__aeabi_d2iz>
 80016ac:	4602      	mov	r2, r0
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <compensate_temperature+0x194>)
 80016b0:	601a      	str	r2, [r3, #0]
	temperature = (var1 + var2) / 5120.0;
 80016b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016ba:	f7fe fd4d 	bl	8000158 <__adddf3>
 80016be:	4603      	mov	r3, r0
 80016c0:	460c      	mov	r4, r1
 80016c2:	4618      	mov	r0, r3
 80016c4:	4621      	mov	r1, r4
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <compensate_temperature+0x198>)
 80016cc:	f7ff f820 	bl	8000710 <__aeabi_ddiv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	460c      	mov	r4, r1
 80016d4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80016d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016e0:	f7ff f95e 	bl	80009a0 <__aeabi_dcmplt>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d004      	beq.n	80016f4 <compensate_temperature+0x154>
		temperature = temperature_min;
 80016ea:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80016ee:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 80016f2:	e00c      	b.n	800170e <compensate_temperature+0x16e>
	else if (temperature > temperature_max)
 80016f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016fc:	f7ff f96e 	bl	80009dc <__aeabi_dcmpgt>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <compensate_temperature+0x16e>
		temperature = temperature_max;
 8001706:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800170a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	return temperature;
 800170e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
}
 8001712:	4618      	mov	r0, r3
 8001714:	4621      	mov	r1, r4
 8001716:	3730      	adds	r7, #48	; 0x30
 8001718:	46bd      	mov	sp, r7
 800171a:	bdb0      	pop	{r4, r5, r7, pc}
 800171c:	c0440000 	.word	0xc0440000
 8001720:	40554000 	.word	0x40554000
 8001724:	40d00000 	.word	0x40d00000
 8001728:	20000034 	.word	0x20000034
 800172c:	40900000 	.word	0x40900000
 8001730:	40c00000 	.word	0x40c00000
 8001734:	20000020 	.word	0x20000020
 8001738:	40b40000 	.word	0x40b40000

0800173c <main>:



int
main(int argc, char* argv[])
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]



	uint8_t pBuf[10] = {'a', 'b', 'c', 'd', 'e'};
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	811a      	strh	r2, [r3, #8]
 8001752:	2361      	movs	r3, #97	; 0x61
 8001754:	733b      	strb	r3, [r7, #12]
 8001756:	2362      	movs	r3, #98	; 0x62
 8001758:	737b      	strb	r3, [r7, #13]
 800175a:	2363      	movs	r3, #99	; 0x63
 800175c:	73bb      	strb	r3, [r7, #14]
 800175e:	2364      	movs	r3, #100	; 0x64
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	2365      	movs	r3, #101	; 0x65
 8001764:	743b      	strb	r3, [r7, #16]
	static signed long temperature;
	static signed long pressure;



	spi2_init();
 8001766:	f7ff fd93 	bl	8001290 <spi2_init>
	SPI_routine();
 800176a:	f7ff fec5 	bl	80014f8 <SPI_routine>
	bmp280_init(&bmp280);
 800176e:	4814      	ldr	r0, [pc, #80]	; (80017c0 <main+0x84>)
 8001770:	f7ff fb30 	bl	8000dd4 <bmp280_init>


while(1){


	bmp280_read_uncomp_temperature(&temperature);
 8001774:	4813      	ldr	r0, [pc, #76]	; (80017c4 <main+0x88>)
 8001776:	f7ff fb7d 	bl	8000e74 <bmp280_read_uncomp_temperature>
	temp_out = bmp280_compensate_T_int32(temperature);
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <main+0x88>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fed2 	bl	8001528 <bmp280_compensate_T_int32>
 8001784:	4602      	mov	r2, r0
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <main+0x8c>)
 8001788:	601a      	str	r2, [r3, #0]
	temp_out = bmp280_compensate_temperature_int32(temperature);
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <main+0x88>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fba4 	bl	8000edc <bmp280_compensate_temperature_int32>
 8001794:	4602      	mov	r2, r0
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <main+0x8c>)
 8001798:	601a      	str	r2, [r3, #0]
	compensate_temperature(temperature);
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <main+0x88>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fefe 	bl	80015a0 <compensate_temperature>

	bmp280_read_uncomp_pressure(&pressure);
 80017a4:	4809      	ldr	r0, [pc, #36]	; (80017cc <main+0x90>)
 80017a6:	f7ff fbe1 	bl	8000f6c <bmp280_read_uncomp_pressure>
	press_out = bmp280_compensate_pressure_int32(pressure);
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <main+0x90>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fc10 	bl	8000fd4 <bmp280_compensate_pressure_int32>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <main+0x94>)
 80017ba:	601a      	str	r2, [r3, #0]
	bmp280_read_uncomp_temperature(&temperature);
 80017bc:	e7da      	b.n	8001774 <main+0x38>
 80017be:	bf00      	nop
 80017c0:	20000034 	.word	0x20000034
 80017c4:	20000024 	.word	0x20000024
 80017c8:	20000028 	.word	0x20000028
 80017cc:	2000002c 	.word	0x2000002c
 80017d0:	20000030 	.word	0x20000030

080017d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800180c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017da:	e003      	b.n	80017e4 <LoopCopyDataInit>

080017dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80017de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017e2:	3104      	adds	r1, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017e4:	480b      	ldr	r0, [pc, #44]	; (8001814 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80017e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017ec:	d3f6      	bcc.n	80017dc <CopyDataInit>
	ldr	r2, =_sbss
 80017ee:	4a0b      	ldr	r2, [pc, #44]	; (800181c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80017f0:	e002      	b.n	80017f8 <LoopFillZerobss>

080017f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017f4:	f842 3b04 	str.w	r3, [r2], #4

080017f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80017fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017fc:	d3f9      	bcc.n	80017f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017fe:	f000 f83d 	bl	800187c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001802:	f000 f8f5 	bl	80019f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001806:	f7ff ff99 	bl	800173c <main>
	bx	lr
 800180a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800180c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001810:	08001a68 	.word	0x08001a68
	ldr	r0, =_sdata
 8001814:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001818:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 800181c:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8001820:	20000064 	.word	0x20000064

08001824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC1_2_IRQHandler>

08001826 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
	...

0800187c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001880:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <SystemInit+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <SystemInit+0x5c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800188c:	4912      	ldr	r1, [pc, #72]	; (80018d8 <SystemInit+0x5c>)
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <SystemInit+0x5c>)
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <SystemInit+0x60>)
 8001894:	4013      	ands	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <SystemInit+0x5c>)
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <SystemInit+0x5c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80018a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018a8:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <SystemInit+0x5c>)
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <SystemInit+0x5c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80018b4:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <SystemInit+0x5c>)
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <SystemInit+0x5c>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80018be:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SystemInit+0x5c>)
 80018c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80018c6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80018c8:	f000 f80c 	bl	80018e4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <SystemInit+0x64>)
 80018ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018d2:	609a      	str	r2, [r3, #8]
#endif 
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000
 80018dc:	f8ff0000 	.word	0xf8ff0000
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80018e8:	f000 f802 	bl	80018f0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	2300      	movs	r3, #0
 80018fc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80018fe:	4a3a      	ldr	r2, [pc, #232]	; (80019e8 <SetSysClockTo72+0xf8>)
 8001900:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <SetSysClockTo72+0xf8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800190a:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <SetSysClockTo72+0xf8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3301      	adds	r3, #1
 8001918:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d103      	bne.n	8001928 <SetSysClockTo72+0x38>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001926:	d1f0      	bne.n	800190a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <SetSysClockTo72+0xf8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001934:	2301      	movs	r3, #1
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	e001      	b.n	800193e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d14b      	bne.n	80019dc <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001944:	4a29      	ldr	r2, [pc, #164]	; (80019ec <SetSysClockTo72+0xfc>)
 8001946:	4b29      	ldr	r3, [pc, #164]	; (80019ec <SetSysClockTo72+0xfc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f043 0310 	orr.w	r3, r3, #16
 800194e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001950:	4a26      	ldr	r2, [pc, #152]	; (80019ec <SetSysClockTo72+0xfc>)
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <SetSysClockTo72+0xfc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 0303 	bic.w	r3, r3, #3
 800195a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800195c:	4a23      	ldr	r2, [pc, #140]	; (80019ec <SetSysClockTo72+0xfc>)
 800195e:	4b23      	ldr	r3, [pc, #140]	; (80019ec <SetSysClockTo72+0xfc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f043 0302 	orr.w	r3, r3, #2
 8001966:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001968:	4a1f      	ldr	r2, [pc, #124]	; (80019e8 <SetSysClockTo72+0xf8>)
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <SetSysClockTo72+0xf8>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001970:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <SetSysClockTo72+0xf8>)
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <SetSysClockTo72+0xf8>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001978:	4a1b      	ldr	r2, [pc, #108]	; (80019e8 <SetSysClockTo72+0xf8>)
 800197a:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <SetSysClockTo72+0xf8>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001982:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001984:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <SetSysClockTo72+0xf8>)
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <SetSysClockTo72+0xf8>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800198e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001990:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <SetSysClockTo72+0xf8>)
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <SetSysClockTo72+0xf8>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800199a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800199c:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <SetSysClockTo72+0xf8>)
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <SetSysClockTo72+0xf8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019a6:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80019a8:	bf00      	nop
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <SetSysClockTo72+0xf8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f9      	beq.n	80019aa <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80019b6:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <SetSysClockTo72+0xf8>)
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <SetSysClockTo72+0xf8>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f023 0303 	bic.w	r3, r3, #3
 80019c0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <SetSysClockTo72+0xf8>)
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <SetSysClockTo72+0xf8>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80019ce:	bf00      	nop
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <SetSysClockTo72+0xf8>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d1f9      	bne.n	80019d0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40022000 	.word	0x40022000

080019f0 <__libc_init_array>:
 80019f0:	b570      	push	{r4, r5, r6, lr}
 80019f2:	2500      	movs	r5, #0
 80019f4:	4e0c      	ldr	r6, [pc, #48]	; (8001a28 <__libc_init_array+0x38>)
 80019f6:	4c0d      	ldr	r4, [pc, #52]	; (8001a2c <__libc_init_array+0x3c>)
 80019f8:	1ba4      	subs	r4, r4, r6
 80019fa:	10a4      	asrs	r4, r4, #2
 80019fc:	42a5      	cmp	r5, r4
 80019fe:	d109      	bne.n	8001a14 <__libc_init_array+0x24>
 8001a00:	f000 f822 	bl	8001a48 <_init>
 8001a04:	2500      	movs	r5, #0
 8001a06:	4e0a      	ldr	r6, [pc, #40]	; (8001a30 <__libc_init_array+0x40>)
 8001a08:	4c0a      	ldr	r4, [pc, #40]	; (8001a34 <__libc_init_array+0x44>)
 8001a0a:	1ba4      	subs	r4, r4, r6
 8001a0c:	10a4      	asrs	r4, r4, #2
 8001a0e:	42a5      	cmp	r5, r4
 8001a10:	d105      	bne.n	8001a1e <__libc_init_array+0x2e>
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
 8001a14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a18:	4798      	blx	r3
 8001a1a:	3501      	adds	r5, #1
 8001a1c:	e7ee      	b.n	80019fc <__libc_init_array+0xc>
 8001a1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a22:	4798      	blx	r3
 8001a24:	3501      	adds	r5, #1
 8001a26:	e7f2      	b.n	8001a0e <__libc_init_array+0x1e>
 8001a28:	08001a60 	.word	0x08001a60
 8001a2c:	08001a60 	.word	0x08001a60
 8001a30:	08001a60 	.word	0x08001a60
 8001a34:	08001a64 	.word	0x08001a64

08001a38 <memset>:
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4402      	add	r2, r0
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d100      	bne.n	8001a42 <memset+0xa>
 8001a40:	4770      	bx	lr
 8001a42:	f803 1b01 	strb.w	r1, [r3], #1
 8001a46:	e7f9      	b.n	8001a3c <memset+0x4>

08001a48 <_init>:
 8001a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a4a:	bf00      	nop
 8001a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a4e:	bc08      	pop	{r3}
 8001a50:	469e      	mov	lr, r3
 8001a52:	4770      	bx	lr

08001a54 <_fini>:
 8001a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a56:	bf00      	nop
 8001a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a5a:	bc08      	pop	{r3}
 8001a5c:	469e      	mov	lr, r3
 8001a5e:	4770      	bx	lr
