
home_control_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000074c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800085c  08000864  00010864  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800085c  0800085c  0001085c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000860  08000860  00010860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010864  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a8  20000000  08000864  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200000a8  08000864  000200a8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010864  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004217  00000000  00000000  0001088d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000c7a  00000000  00000000  00014aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000390  00000000  00000000  00015720  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  00015ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001b59  00000000  00000000  00015dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001764  00000000  00000000  00017921  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00019085  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000ca8  00000000  00000000  00019104  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000000 	.word	0x20000000
 800012c:	00000000 	.word	0x00000000
 8000130:	08000844 	.word	0x08000844

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000004 	.word	0x20000004
 800014c:	08000844 	.word	0x08000844

08000150 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	685b      	ldr	r3, [r3, #4]
 800015e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000160:	683b      	ldr	r3, [r7, #0]
 8000162:	68fa      	ldr	r2, [r7, #12]
 8000164:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	689a      	ldr	r2, [r3, #8]
 800016a:	683b      	ldr	r3, [r7, #0]
 800016c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	689b      	ldr	r3, [r3, #8]
 8000172:	683a      	ldr	r2, [r7, #0]
 8000174:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	683a      	ldr	r2, [r7, #0]
 800017a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800017c:	683b      	ldr	r3, [r7, #0]
 800017e:	687a      	ldr	r2, [r7, #4]
 8000180:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	1c5a      	adds	r2, r3, #1
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	601a      	str	r2, [r3, #0]
}
 800018c:	bf00      	nop
 800018e:	3714      	adds	r7, #20
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr

08000196 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000196:	b480      	push	{r7}
 8000198:	b085      	sub	sp, #20
 800019a:	af00      	add	r7, sp, #0
 800019c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	691b      	ldr	r3, [r3, #16]
 80001a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	687a      	ldr	r2, [r7, #4]
 80001aa:	6892      	ldr	r2, [r2, #8]
 80001ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	689b      	ldr	r3, [r3, #8]
 80001b2:	687a      	ldr	r2, [r7, #4]
 80001b4:	6852      	ldr	r2, [r2, #4]
 80001b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	685a      	ldr	r2, [r3, #4]
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d103      	bne.n	80001ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	689a      	ldr	r2, [r3, #8]
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2200      	movs	r2, #0
 80001ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	1e5a      	subs	r2, r3, #1
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	681b      	ldr	r3, [r3, #0]
}
 80001de:	4618      	mov	r0, r3
 80001e0:	3714      	adds	r7, #20
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
	...

080001f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <pxCurrentTCBConst2>)
 80001f2:	6819      	ldr	r1, [r3, #0]
 80001f4:	6808      	ldr	r0, [r1, #0]
 80001f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80001fa:	f380 8809 	msr	PSP, r0
 80001fe:	f3bf 8f6f 	isb	sy
 8000202:	f04f 0000 	mov.w	r0, #0
 8000206:	f380 8811 	msr	BASEPRI, r0
 800020a:	f04e 0e0d 	orr.w	lr, lr, #13
 800020e:	4770      	bx	lr

08000210 <pxCurrentTCBConst2>:
 8000210:	2000001c 	.word	0x2000001c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000214:	bf00      	nop
 8000216:	bf00      	nop
	...

08000220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000220:	f3ef 8009 	mrs	r0, PSP
 8000224:	f3bf 8f6f 	isb	sy
 8000228:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <pxCurrentTCBConst>)
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000230:	6010      	str	r0, [r2, #0]
 8000232:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000236:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800023a:	f380 8811 	msr	BASEPRI, r0
 800023e:	f000 f8df 	bl	8000400 <vTaskSwitchContext>
 8000242:	f04f 0000 	mov.w	r0, #0
 8000246:	f380 8811 	msr	BASEPRI, r0
 800024a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800024e:	6819      	ldr	r1, [r3, #0]
 8000250:	6808      	ldr	r0, [r1, #0]
 8000252:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000256:	f380 8809 	msr	PSP, r0
 800025a:	f3bf 8f6f 	isb	sy
 800025e:	4770      	bx	lr

08000260 <pxCurrentTCBConst>:
 8000260:	2000001c 	.word	0x2000001c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000264:	bf00      	nop
 8000266:	bf00      	nop

08000268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800026e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000272:	f383 8811 	msr	BASEPRI, r3
 8000276:	f3bf 8f6f 	isb	sy
 800027a:	f3bf 8f4f 	dsb	sy
 800027e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000280:	f000 f812 	bl	80002a8 <xTaskIncrementTick>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d003      	beq.n	8000292 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <SysTick_Handler+0x3c>)
 800028c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	e000ed04 	.word	0xe000ed04

080002a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80002b2:	4b48      	ldr	r3, [pc, #288]	; (80003d4 <xTaskIncrementTick+0x12c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d17c      	bne.n	80003b4 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80002ba:	4b47      	ldr	r3, [pc, #284]	; (80003d8 <xTaskIncrementTick+0x130>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	3301      	adds	r3, #1
 80002c0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80002c2:	4a45      	ldr	r2, [pc, #276]	; (80003d8 <xTaskIncrementTick+0x130>)
 80002c4:	693b      	ldr	r3, [r7, #16]
 80002c6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d110      	bne.n	80002f0 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80002ce:	4b43      	ldr	r3, [pc, #268]	; (80003dc <xTaskIncrementTick+0x134>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	4b42      	ldr	r3, [pc, #264]	; (80003e0 <xTaskIncrementTick+0x138>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a40      	ldr	r2, [pc, #256]	; (80003dc <xTaskIncrementTick+0x134>)
 80002da:	6013      	str	r3, [r2, #0]
 80002dc:	4a40      	ldr	r2, [pc, #256]	; (80003e0 <xTaskIncrementTick+0x138>)
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	6013      	str	r3, [r2, #0]
 80002e2:	4b40      	ldr	r3, [pc, #256]	; (80003e4 <xTaskIncrementTick+0x13c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	3301      	adds	r3, #1
 80002e8:	4a3e      	ldr	r2, [pc, #248]	; (80003e4 <xTaskIncrementTick+0x13c>)
 80002ea:	6013      	str	r3, [r2, #0]
 80002ec:	f000 f8ce 	bl	800048c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80002f0:	4b3d      	ldr	r3, [pc, #244]	; (80003e8 <xTaskIncrementTick+0x140>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	693a      	ldr	r2, [r7, #16]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d34d      	bcc.n	8000396 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80002fa:	4b38      	ldr	r3, [pc, #224]	; (80003dc <xTaskIncrementTick+0x134>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <xTaskIncrementTick+0x60>
 8000304:	2301      	movs	r3, #1
 8000306:	e000      	b.n	800030a <xTaskIncrementTick+0x62>
 8000308:	2300      	movs	r3, #0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d004      	beq.n	8000318 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800030e:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <xTaskIncrementTick+0x140>)
 8000310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000314:	601a      	str	r2, [r3, #0]
					break;
 8000316:	e03e      	b.n	8000396 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000318:	4b30      	ldr	r3, [pc, #192]	; (80003dc <xTaskIncrementTick+0x134>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000328:	693a      	ldr	r2, [r7, #16]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	429a      	cmp	r2, r3
 800032e:	d203      	bcs.n	8000338 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000330:	4a2d      	ldr	r2, [pc, #180]	; (80003e8 <xTaskIncrementTick+0x140>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	6013      	str	r3, [r2, #0]
						break;
 8000336:	e02e      	b.n	8000396 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	3304      	adds	r3, #4
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff2a 	bl	8000196 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000346:	2b00      	cmp	r3, #0
 8000348:	d004      	beq.n	8000354 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	3318      	adds	r3, #24
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ff21 	bl	8000196 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000358:	2201      	movs	r2, #1
 800035a:	409a      	lsls	r2, r3
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <xTaskIncrementTick+0x144>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4313      	orrs	r3, r2
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <xTaskIncrementTick+0x144>)
 8000364:	6013      	str	r3, [r2, #0]
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800036a:	4613      	mov	r3, r2
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	4413      	add	r3, r2
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <xTaskIncrementTick+0x148>)
 8000374:	441a      	add	r2, r3
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	3304      	adds	r3, #4
 800037a:	4619      	mov	r1, r3
 800037c:	4610      	mov	r0, r2
 800037e:	f7ff fee7 	bl	8000150 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000386:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <xTaskIncrementTick+0x14c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800038c:	429a      	cmp	r2, r3
 800038e:	d3b4      	bcc.n	80002fa <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8000390:	2301      	movs	r3, #1
 8000392:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000394:	e7b1      	b.n	80002fa <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <xTaskIncrementTick+0x14c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800039c:	4914      	ldr	r1, [pc, #80]	; (80003f0 <xTaskIncrementTick+0x148>)
 800039e:	4613      	mov	r3, r2
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	4413      	add	r3, r2
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	440b      	add	r3, r1
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d907      	bls.n	80003be <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80003ae:	2301      	movs	r3, #1
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	e004      	b.n	80003be <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80003b4:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <xTaskIncrementTick+0x150>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	3301      	adds	r3, #1
 80003ba:	4a0f      	ldr	r2, [pc, #60]	; (80003f8 <xTaskIncrementTick+0x150>)
 80003bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <xTaskIncrementTick+0x154>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 80003c6:	2301      	movs	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80003ca:	697b      	ldr	r3, [r7, #20]
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3718      	adds	r7, #24
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200000a4 	.word	0x200000a4
 80003d8:	2000008c 	.word	0x2000008c
 80003dc:	20000084 	.word	0x20000084
 80003e0:	20000088 	.word	0x20000088
 80003e4:	2000009c 	.word	0x2000009c
 80003e8:	200000a0 	.word	0x200000a0
 80003ec:	20000090 	.word	0x20000090
 80003f0:	20000020 	.word	0x20000020
 80003f4:	2000001c 	.word	0x2000001c
 80003f8:	20000094 	.word	0x20000094
 80003fc:	20000098 	.word	0x20000098

08000400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000406:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <vTaskSwitchContext+0x78>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d003      	beq.n	8000416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800040e:	4b1b      	ldr	r3, [pc, #108]	; (800047c <vTaskSwitchContext+0x7c>)
 8000410:	2201      	movs	r2, #1
 8000412:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000414:	e02a      	b.n	800046c <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000416:	4b19      	ldr	r3, [pc, #100]	; (800047c <vTaskSwitchContext+0x7c>)
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <vTaskSwitchContext+0x80>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	fab3 f383 	clz	r3, r3
 8000428:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800042a:	78fb      	ldrb	r3, [r7, #3]
 800042c:	f1c3 031f 	rsb	r3, r3, #31
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	4613      	mov	r3, r2
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	4413      	add	r3, r2
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <vTaskSwitchContext+0x84>)
 800043e:	4413      	add	r3, r2
 8000440:	60bb      	str	r3, [r7, #8]
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	685a      	ldr	r2, [r3, #4]
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	3308      	adds	r3, #8
 8000454:	429a      	cmp	r2, r3
 8000456:	d104      	bne.n	8000462 <vTaskSwitchContext+0x62>
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	685a      	ldr	r2, [r3, #4]
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a07      	ldr	r2, [pc, #28]	; (8000488 <vTaskSwitchContext+0x88>)
 800046a:	6013      	str	r3, [r2, #0]
}
 800046c:	bf00      	nop
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	200000a4 	.word	0x200000a4
 800047c:	20000098 	.word	0x20000098
 8000480:	20000090 	.word	0x20000090
 8000484:	20000020 	.word	0x20000020
 8000488:	2000001c 	.word	0x2000001c

0800048c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <prvResetNextTaskUnblockTime+0x40>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d101      	bne.n	80004a0 <prvResetNextTaskUnblockTime+0x14>
 800049c:	2301      	movs	r3, #1
 800049e:	e000      	b.n	80004a2 <prvResetNextTaskUnblockTime+0x16>
 80004a0:	2300      	movs	r3, #0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d004      	beq.n	80004b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80004a6:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <prvResetNextTaskUnblockTime+0x44>)
 80004a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80004ae:	e008      	b.n	80004c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <prvResetNextTaskUnblockTime+0x40>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	68db      	ldr	r3, [r3, #12]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <prvResetNextTaskUnblockTime+0x44>)
 80004c0:	6013      	str	r3, [r2, #0]
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	20000084 	.word	0x20000084
 80004d0:	200000a0 	.word	0x200000a0

080004d4 <main>:
QueueHandle_t externalMsgQueue;




 int main(){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
	 EnableGpioClk(APB2_PBB);
 80004da:	2003      	movs	r0, #3
 80004dc:	f000 f91c 	bl	8000718 <EnableGpioClk>
	 SetGpioAsOutput(GPIOB, 9);
 80004e0:	2109      	movs	r1, #9
 80004e2:	480e      	ldr	r0, [pc, #56]	; (800051c <main+0x48>)
 80004e4:	f000 f94f 	bl	8000786 <SetGpioAsOutput>
	 SetGpioAsInput(GPIOB, 9);
 80004e8:	2109      	movs	r1, #9
 80004ea:	480c      	ldr	r0, [pc, #48]	; (800051c <main+0x48>)
 80004ec:	f000 f926 	bl	800073c <SetGpioAsInput>

	 while(1){
		bool on =  ReadtGpioPin(GPIOB, 9);
 80004f0:	2109      	movs	r1, #9
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <main+0x48>)
 80004f4:	f000 f96a 	bl	80007cc <ReadtGpioPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	bf14      	ite	ne
 80004fe:	2301      	movne	r3, #1
 8000500:	2300      	moveq	r3, #0
 8000502:	71fb      	strb	r3, [r7, #7]
		 on =  ReadtGpioPin(GPIOB, 9);
 8000504:	2109      	movs	r1, #9
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <main+0x48>)
 8000508:	f000 f960 	bl	80007cc <ReadtGpioPin>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	bf14      	ite	ne
 8000512:	2301      	movne	r3, #1
 8000514:	2300      	moveq	r3, #0
 8000516:	71fb      	strb	r3, [r7, #7]
	 while(1){
 8000518:	e7ea      	b.n	80004f0 <main+0x1c>
 800051a:	bf00      	nop
 800051c:	40010c00 	.word	0x40010c00

08000520 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000558 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000524:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000526:	e003      	b.n	8000530 <LoopCopyDataInit>

08000528 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800052a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800052c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800052e:	3104      	adds	r1, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000534:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000536:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000538:	d3f6      	bcc.n	8000528 <CopyDataInit>
	ldr	r2, =_sbss
 800053a:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800053c:	e002      	b.n	8000544 <LoopFillZerobss>

0800053e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800053e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000540:	f842 3b04 	str.w	r3, [r2], #4

08000544 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000546:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000548:	d3f9      	bcc.n	800053e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800054a:	f000 f82b 	bl	80005a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054e:	f000 f955 	bl	80007fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000552:	f7ff ffbf 	bl	80004d4 <main>
	bx	lr
 8000556:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000558:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 800055c:	08000864 	.word	0x08000864
	ldr	r0, =_sdata
 8000560:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000564:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000568:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 800056c:	200000a8 	.word	0x200000a8

08000570 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000570:	e7fe      	b.n	8000570 <ADC1_2_IRQHandler>

08000572 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000582:	e7fe      	b.n	8000582 <HardFault_Handler+0x4>

08000584 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000588:	e7fe      	b.n	8000588 <MemManage_Handler+0x4>

0800058a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800058e:	e7fe      	b.n	800058e <BusFault_Handler+0x4>

08000590 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000594:	e7fe      	b.n	8000594 <UsageFault_Handler+0x4>

08000596 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
	...

080005a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005a8:	4a15      	ldr	r2, [pc, #84]	; (8000600 <SystemInit+0x5c>)
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <SystemInit+0x5c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80005b4:	4912      	ldr	r1, [pc, #72]	; (8000600 <SystemInit+0x5c>)
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <SystemInit+0x5c>)
 80005b8:	685a      	ldr	r2, [r3, #4]
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <SystemInit+0x60>)
 80005bc:	4013      	ands	r3, r2
 80005be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005c0:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <SystemInit+0x5c>)
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <SystemInit+0x5c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005d0:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <SystemInit+0x5c>)
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <SystemInit+0x5c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80005dc:	4a08      	ldr	r2, [pc, #32]	; (8000600 <SystemInit+0x5c>)
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <SystemInit+0x5c>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <SystemInit+0x5c>)
 80005ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005ee:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80005f0:	f000 f80c 	bl	800060c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <SystemInit+0x64>)
 80005f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005fa:	609a      	str	r2, [r3, #8]
#endif 
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	f8ff0000 	.word	0xf8ff0000
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000610:	f000 f802 	bl	8000618 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000626:	4a3a      	ldr	r2, [pc, #232]	; (8000710 <SetSysClockTo72+0xf8>)
 8000628:	4b39      	ldr	r3, [pc, #228]	; (8000710 <SetSysClockTo72+0xf8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000630:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000632:	4b37      	ldr	r3, [pc, #220]	; (8000710 <SetSysClockTo72+0xf8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3301      	adds	r3, #1
 8000640:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d103      	bne.n	8000650 <SetSysClockTo72+0x38>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800064e:	d1f0      	bne.n	8000632 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000650:	4b2f      	ldr	r3, [pc, #188]	; (8000710 <SetSysClockTo72+0xf8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800065c:	2301      	movs	r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	e001      	b.n	8000666 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d14b      	bne.n	8000704 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800066c:	4a29      	ldr	r2, [pc, #164]	; (8000714 <SetSysClockTo72+0xfc>)
 800066e:	4b29      	ldr	r3, [pc, #164]	; (8000714 <SetSysClockTo72+0xfc>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000678:	4a26      	ldr	r2, [pc, #152]	; (8000714 <SetSysClockTo72+0xfc>)
 800067a:	4b26      	ldr	r3, [pc, #152]	; (8000714 <SetSysClockTo72+0xfc>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f023 0303 	bic.w	r3, r3, #3
 8000682:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000684:	4a23      	ldr	r2, [pc, #140]	; (8000714 <SetSysClockTo72+0xfc>)
 8000686:	4b23      	ldr	r3, [pc, #140]	; (8000714 <SetSysClockTo72+0xfc>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f043 0302 	orr.w	r3, r3, #2
 800068e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000690:	4a1f      	ldr	r2, [pc, #124]	; (8000710 <SetSysClockTo72+0xf8>)
 8000692:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SetSysClockTo72+0xf8>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000698:	4a1d      	ldr	r2, [pc, #116]	; (8000710 <SetSysClockTo72+0xf8>)
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <SetSysClockTo72+0xf8>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <SetSysClockTo72+0xf8>)
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <SetSysClockTo72+0xf8>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006aa:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80006ac:	4a18      	ldr	r2, [pc, #96]	; (8000710 <SetSysClockTo72+0xf8>)
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <SetSysClockTo72+0xf8>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80006b6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80006b8:	4a15      	ldr	r2, [pc, #84]	; (8000710 <SetSysClockTo72+0xf8>)
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <SetSysClockTo72+0xf8>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80006c2:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006c4:	4a12      	ldr	r2, [pc, #72]	; (8000710 <SetSysClockTo72+0xf8>)
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <SetSysClockTo72+0xf8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006ce:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006d0:	bf00      	nop
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <SetSysClockTo72+0xf8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d0f9      	beq.n	80006d2 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80006de:	4a0c      	ldr	r2, [pc, #48]	; (8000710 <SetSysClockTo72+0xf8>)
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <SetSysClockTo72+0xf8>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	f023 0303 	bic.w	r3, r3, #3
 80006e8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80006ea:	4a09      	ldr	r2, [pc, #36]	; (8000710 <SetSysClockTo72+0xf8>)
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <SetSysClockTo72+0xf8>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80006f6:	bf00      	nop
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <SetSysClockTo72+0xf8>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	f003 030c 	and.w	r3, r3, #12
 8000700:	2b08      	cmp	r3, #8
 8000702:	d1f9      	bne.n	80006f8 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000
 8000714:	40022000 	.word	0x40022000

08000718 <EnableGpioClk>:





void EnableGpioClk (uint8_t  gpioPort){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
	RCC->APB2ENR = (1<<gpioPort);
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <EnableGpioClk+0x20>)
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	2101      	movs	r1, #1
 8000728:	fa01 f303 	lsl.w	r3, r1, r3
 800072c:	6193      	str	r3, [r2, #24]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	40021000 	.word	0x40021000

0800073c <SetGpioAsInput>:

void SetGpioAsInput (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
	if (pinNb < 8){
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	2b07      	cmp	r3, #7
 800074c:	d80a      	bhi.n	8000764 <SetGpioAsInput+0x28>
		gpioPort->CRL &= ~(PIN_MODE_MSK<<pinNb);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	78fa      	ldrb	r2, [r7, #3]
 8000754:	2103      	movs	r1, #3
 8000756:	fa01 f202 	lsl.w	r2, r1, r2
 800075a:	43d2      	mvns	r2, r2
 800075c:	401a      	ands	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	601a      	str	r2, [r3, #0]
	} else {
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	}
}
 8000762:	e00b      	b.n	800077c <SetGpioAsInput+0x40>
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	78fa      	ldrb	r2, [r7, #3]
 800076a:	3a08      	subs	r2, #8
 800076c:	0092      	lsls	r2, r2, #2
 800076e:	2103      	movs	r1, #3
 8000770:	fa01 f202 	lsl.w	r2, r1, r2
 8000774:	43d2      	mvns	r2, r2
 8000776:	401a      	ands	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	605a      	str	r2, [r3, #4]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <SetGpioAsOutput>:

void SetGpioAsOutput(GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	460b      	mov	r3, r1
 8000790:	70fb      	strb	r3, [r7, #3]
	if (pinNb < 8){
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	2b07      	cmp	r3, #7
 8000796:	d809      	bhi.n	80007ac <SetGpioAsOutput+0x26>
		gpioPort->CRL |= (PIN_MODE_MSK<<pinNb);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	78fa      	ldrb	r2, [r7, #3]
 800079e:	2103      	movs	r1, #3
 80007a0:	fa01 f202 	lsl.w	r2, r1, r2
 80007a4:	431a      	orrs	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	601a      	str	r2, [r3, #0]
	} else {
		gpioPort->CRH |= (PIN_MODE_MSK<<((pinNb-8)*4));
	}
}
 80007aa:	e00a      	b.n	80007c2 <SetGpioAsOutput+0x3c>
		gpioPort->CRH |= (PIN_MODE_MSK<<((pinNb-8)*4));
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	78fa      	ldrb	r2, [r7, #3]
 80007b2:	3a08      	subs	r2, #8
 80007b4:	0092      	lsls	r2, r2, #2
 80007b6:	2103      	movs	r1, #3
 80007b8:	fa01 f202 	lsl.w	r2, r1, r2
 80007bc:	431a      	orrs	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	605a      	str	r2, [r3, #4]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <ReadtGpioPin>:


bool ReadtGpioPin(GPIO_TypeDef * gpioPort, uint8_t pinNb){
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	70fb      	strb	r3, [r7, #3]
	return (gpioPort->IDR & (1<<pinNb));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	78fa      	ldrb	r2, [r7, #3]
 80007de:	2101      	movs	r1, #1
 80007e0:	fa01 f202 	lsl.w	r2, r1, r2
 80007e4:	4013      	ands	r3, r2
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	bf14      	ite	ne
 80007ea:	2301      	movne	r3, #1
 80007ec:	2300      	moveq	r3, #0
 80007ee:	b2db      	uxtb	r3, r3
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
	...

080007fc <__libc_init_array>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	2500      	movs	r5, #0
 8000800:	4e0c      	ldr	r6, [pc, #48]	; (8000834 <__libc_init_array+0x38>)
 8000802:	4c0d      	ldr	r4, [pc, #52]	; (8000838 <__libc_init_array+0x3c>)
 8000804:	1ba4      	subs	r4, r4, r6
 8000806:	10a4      	asrs	r4, r4, #2
 8000808:	42a5      	cmp	r5, r4
 800080a:	d109      	bne.n	8000820 <__libc_init_array+0x24>
 800080c:	f000 f81a 	bl	8000844 <_init>
 8000810:	2500      	movs	r5, #0
 8000812:	4e0a      	ldr	r6, [pc, #40]	; (800083c <__libc_init_array+0x40>)
 8000814:	4c0a      	ldr	r4, [pc, #40]	; (8000840 <__libc_init_array+0x44>)
 8000816:	1ba4      	subs	r4, r4, r6
 8000818:	10a4      	asrs	r4, r4, #2
 800081a:	42a5      	cmp	r5, r4
 800081c:	d105      	bne.n	800082a <__libc_init_array+0x2e>
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000824:	4798      	blx	r3
 8000826:	3501      	adds	r5, #1
 8000828:	e7ee      	b.n	8000808 <__libc_init_array+0xc>
 800082a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800082e:	4798      	blx	r3
 8000830:	3501      	adds	r5, #1
 8000832:	e7f2      	b.n	800081a <__libc_init_array+0x1e>
 8000834:	0800085c 	.word	0x0800085c
 8000838:	0800085c 	.word	0x0800085c
 800083c:	0800085c 	.word	0x0800085c
 8000840:	08000860 	.word	0x08000860

08000844 <_init>:
 8000844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000846:	bf00      	nop
 8000848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084a:	bc08      	pop	{r3}
 800084c:	469e      	mov	lr, r3
 800084e:	4770      	bx	lr

08000850 <_fini>:
 8000850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000852:	bf00      	nop
 8000854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000856:	bc08      	pop	{r3}
 8000858:	469e      	mov	lr, r3
 800085a:	4770      	bx	lr
