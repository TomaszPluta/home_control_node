
home_control_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d68  08002d68  00012d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00012d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007b8  20000000  08002d6c  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00002000  200007b8  08002d6c  000207b8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00012d6c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d403  00000000  00000000  00012d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000228e  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009d8  00000000  00000000  00022428  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008e0  00000000  00000000  00022e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004484  00000000  00000000  000236e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003917  00000000  00000000  00027b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002b47b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000026a0  00000000  00000000  0002b4f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000000 	.word	0x20000000
 800012c:	00000000 	.word	0x00000000
 8000130:	08002cbc 	.word	0x08002cbc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000004 	.word	0x20000004
 800014c:	08002cbc 	.word	0x08002cbc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
 8000168:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	685b      	ldr	r3, [r3, #4]
 800016e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000170:	683b      	ldr	r3, [r7, #0]
 8000172:	68fa      	ldr	r2, [r7, #12]
 8000174:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	689a      	ldr	r2, [r3, #8]
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	689b      	ldr	r3, [r3, #8]
 8000182:	683a      	ldr	r2, [r7, #0]
 8000184:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	683a      	ldr	r2, [r7, #0]
 800018a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800018c:	683b      	ldr	r3, [r7, #0]
 800018e:	687a      	ldr	r2, [r7, #4]
 8000190:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	1c5a      	adds	r2, r3, #1
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	601a      	str	r2, [r3, #0]
}
 800019c:	bf00      	nop
 800019e:	3714      	adds	r7, #20
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr

080001a6 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80001a6:	b480      	push	{r7}
 80001a8:	b085      	sub	sp, #20
 80001aa:	af00      	add	r7, sp, #0
 80001ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	691b      	ldr	r3, [r3, #16]
 80001b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	687a      	ldr	r2, [r7, #4]
 80001ba:	6892      	ldr	r2, [r2, #8]
 80001bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	689b      	ldr	r3, [r3, #8]
 80001c2:	687a      	ldr	r2, [r7, #4]
 80001c4:	6852      	ldr	r2, [r2, #4]
 80001c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	685a      	ldr	r2, [r3, #4]
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d103      	bne.n	80001da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	689a      	ldr	r2, [r3, #8]
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	2200      	movs	r2, #0
 80001de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	1e5a      	subs	r2, r3, #1
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	681b      	ldr	r3, [r3, #0]
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
	...

08000200 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000200:	4b07      	ldr	r3, [pc, #28]	; (8000220 <pxCurrentTCBConst2>)
 8000202:	6819      	ldr	r1, [r3, #0]
 8000204:	6808      	ldr	r0, [r1, #0]
 8000206:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800020a:	f380 8809 	msr	PSP, r0
 800020e:	f3bf 8f6f 	isb	sy
 8000212:	f04f 0000 	mov.w	r0, #0
 8000216:	f380 8811 	msr	BASEPRI, r0
 800021a:	f04e 0e0d 	orr.w	lr, lr, #13
 800021e:	4770      	bx	lr

08000220 <pxCurrentTCBConst2>:
 8000220:	2000001c 	.word	0x2000001c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000224:	bf00      	nop
 8000226:	bf00      	nop
	...

08000230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000230:	f3ef 8009 	mrs	r0, PSP
 8000234:	f3bf 8f6f 	isb	sy
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <pxCurrentTCBConst>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000240:	6010      	str	r0, [r2, #0]
 8000242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000246:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800024a:	f380 8811 	msr	BASEPRI, r0
 800024e:	f000 f8ed 	bl	800042c <vTaskSwitchContext>
 8000252:	f04f 0000 	mov.w	r0, #0
 8000256:	f380 8811 	msr	BASEPRI, r0
 800025a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800025e:	6819      	ldr	r1, [r3, #0]
 8000260:	6808      	ldr	r0, [r1, #0]
 8000262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000266:	f380 8809 	msr	PSP, r0
 800026a:	f3bf 8f6f 	isb	sy
 800026e:	4770      	bx	lr

08000270 <pxCurrentTCBConst>:
 8000270:	2000001c 	.word	0x2000001c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000274:	bf00      	nop
 8000276:	bf00      	nop

08000278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800027e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000282:	f383 8811 	msr	BASEPRI, r3
 8000286:	f3bf 8f6f 	isb	sy
 800028a:	f3bf 8f4f 	dsb	sy
 800028e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000290:	f000 f820 	bl	80002d4 <xTaskIncrementTick>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d003      	beq.n	80002a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <SysTick_Handler+0x3c>)
 800029c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	2300      	movs	r3, #0
 80002a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	e000ed04 	.word	0xe000ed04

080002b8 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80002be:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <xTaskGetTickCount+0x18>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80002c4:	687b      	ldr	r3, [r7, #4]
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	2000008c 	.word	0x2000008c

080002d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80002de:	4b48      	ldr	r3, [pc, #288]	; (8000400 <xTaskIncrementTick+0x12c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d17c      	bne.n	80003e0 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80002e6:	4b47      	ldr	r3, [pc, #284]	; (8000404 <xTaskIncrementTick+0x130>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	3301      	adds	r3, #1
 80002ec:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80002ee:	4a45      	ldr	r2, [pc, #276]	; (8000404 <xTaskIncrementTick+0x130>)
 80002f0:	693b      	ldr	r3, [r7, #16]
 80002f2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80002f4:	693b      	ldr	r3, [r7, #16]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d110      	bne.n	800031c <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80002fa:	4b43      	ldr	r3, [pc, #268]	; (8000408 <xTaskIncrementTick+0x134>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	4b42      	ldr	r3, [pc, #264]	; (800040c <xTaskIncrementTick+0x138>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a40      	ldr	r2, [pc, #256]	; (8000408 <xTaskIncrementTick+0x134>)
 8000306:	6013      	str	r3, [r2, #0]
 8000308:	4a40      	ldr	r2, [pc, #256]	; (800040c <xTaskIncrementTick+0x138>)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	4b40      	ldr	r3, [pc, #256]	; (8000410 <xTaskIncrementTick+0x13c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	3301      	adds	r3, #1
 8000314:	4a3e      	ldr	r2, [pc, #248]	; (8000410 <xTaskIncrementTick+0x13c>)
 8000316:	6013      	str	r3, [r2, #0]
 8000318:	f000 f8ce 	bl	80004b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800031c:	4b3d      	ldr	r3, [pc, #244]	; (8000414 <xTaskIncrementTick+0x140>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	693a      	ldr	r2, [r7, #16]
 8000322:	429a      	cmp	r2, r3
 8000324:	d34d      	bcc.n	80003c2 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000326:	4b38      	ldr	r3, [pc, #224]	; (8000408 <xTaskIncrementTick+0x134>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d101      	bne.n	8000334 <xTaskIncrementTick+0x60>
 8000330:	2301      	movs	r3, #1
 8000332:	e000      	b.n	8000336 <xTaskIncrementTick+0x62>
 8000334:	2300      	movs	r3, #0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d004      	beq.n	8000344 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800033a:	4b36      	ldr	r3, [pc, #216]	; (8000414 <xTaskIncrementTick+0x140>)
 800033c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000340:	601a      	str	r2, [r3, #0]
					break;
 8000342:	e03e      	b.n	80003c2 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000344:	4b30      	ldr	r3, [pc, #192]	; (8000408 <xTaskIncrementTick+0x134>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	68db      	ldr	r3, [r3, #12]
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000354:	693a      	ldr	r2, [r7, #16]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	429a      	cmp	r2, r3
 800035a:	d203      	bcs.n	8000364 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800035c:	4a2d      	ldr	r2, [pc, #180]	; (8000414 <xTaskIncrementTick+0x140>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	6013      	str	r3, [r2, #0]
						break;
 8000362:	e02e      	b.n	80003c2 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	3304      	adds	r3, #4
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff ff1c 	bl	80001a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000372:	2b00      	cmp	r3, #0
 8000374:	d004      	beq.n	8000380 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	3318      	adds	r3, #24
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff13 	bl	80001a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000384:	2201      	movs	r2, #1
 8000386:	409a      	lsls	r2, r3
 8000388:	4b23      	ldr	r3, [pc, #140]	; (8000418 <xTaskIncrementTick+0x144>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4313      	orrs	r3, r2
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <xTaskIncrementTick+0x144>)
 8000390:	6013      	str	r3, [r2, #0]
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000396:	4613      	mov	r3, r2
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	4413      	add	r3, r2
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	4a1f      	ldr	r2, [pc, #124]	; (800041c <xTaskIncrementTick+0x148>)
 80003a0:	441a      	add	r2, r3
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	3304      	adds	r3, #4
 80003a6:	4619      	mov	r1, r3
 80003a8:	4610      	mov	r0, r2
 80003aa:	f7ff fed9 	bl	8000160 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003b2:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <xTaskIncrementTick+0x14c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d3b4      	bcc.n	8000326 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80003bc:	2301      	movs	r3, #1
 80003be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80003c0:	e7b1      	b.n	8000326 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <xTaskIncrementTick+0x14c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003c8:	4914      	ldr	r1, [pc, #80]	; (800041c <xTaskIncrementTick+0x148>)
 80003ca:	4613      	mov	r3, r2
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	4413      	add	r3, r2
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	440b      	add	r3, r1
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d907      	bls.n	80003ea <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80003da:	2301      	movs	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	e004      	b.n	80003ea <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80003e0:	4b10      	ldr	r3, [pc, #64]	; (8000424 <xTaskIncrementTick+0x150>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	4a0f      	ldr	r2, [pc, #60]	; (8000424 <xTaskIncrementTick+0x150>)
 80003e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <xTaskIncrementTick+0x154>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 80003f2:	2301      	movs	r3, #1
 80003f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80003f6:	697b      	ldr	r3, [r7, #20]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3718      	adds	r7, #24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	200000a4 	.word	0x200000a4
 8000404:	2000008c 	.word	0x2000008c
 8000408:	20000084 	.word	0x20000084
 800040c:	20000088 	.word	0x20000088
 8000410:	2000009c 	.word	0x2000009c
 8000414:	200000a0 	.word	0x200000a0
 8000418:	20000090 	.word	0x20000090
 800041c:	20000020 	.word	0x20000020
 8000420:	2000001c 	.word	0x2000001c
 8000424:	20000094 	.word	0x20000094
 8000428:	20000098 	.word	0x20000098

0800042c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <vTaskSwitchContext+0x78>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d003      	beq.n	8000442 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800043a:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <vTaskSwitchContext+0x7c>)
 800043c:	2201      	movs	r2, #1
 800043e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000440:	e02a      	b.n	8000498 <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000442:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <vTaskSwitchContext+0x7c>)
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <vTaskSwitchContext+0x80>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	fab3 f383 	clz	r3, r3
 8000454:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8000456:	78fb      	ldrb	r3, [r7, #3]
 8000458:	f1c3 031f 	rsb	r3, r3, #31
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	68fa      	ldr	r2, [r7, #12]
 8000460:	4613      	mov	r3, r2
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	4413      	add	r3, r2
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <vTaskSwitchContext+0x84>)
 800046a:	4413      	add	r3, r2
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	685a      	ldr	r2, [r3, #4]
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	685a      	ldr	r2, [r3, #4]
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	3308      	adds	r3, #8
 8000480:	429a      	cmp	r2, r3
 8000482:	d104      	bne.n	800048e <vTaskSwitchContext+0x62>
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	685a      	ldr	r2, [r3, #4]
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <vTaskSwitchContext+0x88>)
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	200000a4 	.word	0x200000a4
 80004a8:	20000098 	.word	0x20000098
 80004ac:	20000090 	.word	0x20000090
 80004b0:	20000020 	.word	0x20000020
 80004b4:	2000001c 	.word	0x2000001c

080004b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <prvResetNextTaskUnblockTime+0x40>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d101      	bne.n	80004cc <prvResetNextTaskUnblockTime+0x14>
 80004c8:	2301      	movs	r3, #1
 80004ca:	e000      	b.n	80004ce <prvResetNextTaskUnblockTime+0x16>
 80004cc:	2300      	movs	r3, #0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d004      	beq.n	80004dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80004d2:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <prvResetNextTaskUnblockTime+0x44>)
 80004d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80004da:	e008      	b.n	80004ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <prvResetNextTaskUnblockTime+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	68db      	ldr	r3, [r3, #12]
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	4a04      	ldr	r2, [pc, #16]	; (80004fc <prvResetNextTaskUnblockTime+0x44>)
 80004ec:	6013      	str	r3, [r2, #0]
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	20000084 	.word	0x20000084
 80004fc:	200000a0 	.word	0x200000a0

08000500 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000508:	4a03      	ldr	r2, [pc, #12]	; (8000518 <EXTI_ClearITPendingBit+0x18>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6153      	str	r3, [r2, #20]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	40010400 	.word	0x40010400

0800051c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800051c:	b480      	push	{r7}
 800051e:	b089      	sub	sp, #36	; 0x24
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	78db      	ldrb	r3, [r3, #3]
 8000542:	f003 030f 	and.w	r3, r3, #15
 8000546:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	78db      	ldrb	r3, [r3, #3]
 800054c:	f003 0310 	and.w	r3, r3, #16
 8000550:	2b00      	cmp	r3, #0
 8000552:	d005      	beq.n	8000560 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	789b      	ldrb	r3, [r3, #2]
 8000558:	461a      	mov	r2, r3
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	4313      	orrs	r3, r2
 800055e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d044      	beq.n	80005f4 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
 8000574:	e038      	b.n	80005e8 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000576:	2201      	movs	r2, #1
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	fa02 f303 	lsl.w	r3, r2, r3
 800057e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	4013      	ands	r3, r2
 800058a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800058c:	693a      	ldr	r2, [r7, #16]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	429a      	cmp	r2, r3
 8000592:	d126      	bne.n	80005e2 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800059a:	220f      	movs	r2, #15
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	43db      	mvns	r3, r3
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	4013      	ands	r3, r2
 80005ac:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80005ae:	69fa      	ldr	r2, [r7, #28]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	697a      	ldr	r2, [r7, #20]
 80005b8:	4313      	orrs	r3, r2
 80005ba:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	78db      	ldrb	r3, [r3, #3]
 80005c0:	2b28      	cmp	r3, #40	; 0x28
 80005c2:	d105      	bne.n	80005d0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80005c4:	2201      	movs	r2, #1
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	409a      	lsls	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	615a      	str	r2, [r3, #20]
 80005ce:	e008      	b.n	80005e2 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	78db      	ldrb	r3, [r3, #3]
 80005d4:	2b48      	cmp	r3, #72	; 0x48
 80005d6:	d104      	bne.n	80005e2 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80005d8:	2201      	movs	r2, #1
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	409a      	lsls	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	3301      	adds	r3, #1
 80005e6:	61bb      	str	r3, [r7, #24]
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	2b07      	cmp	r3, #7
 80005ec:	d9c3      	bls.n	8000576 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	2bff      	cmp	r3, #255	; 0xff
 80005fa:	d946      	bls.n	800068a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
 8000606:	e03a      	b.n	800067e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	3308      	adds	r3, #8
 800060c:	2201      	movs	r2, #1
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	4013      	ands	r3, r2
 800061e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000620:	693a      	ldr	r2, [r7, #16]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	429a      	cmp	r2, r3
 8000626:	d127      	bne.n	8000678 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800062e:	220f      	movs	r2, #15
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	fa02 f303 	lsl.w	r3, r2, r3
 8000636:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	43db      	mvns	r3, r3
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	4013      	ands	r3, r2
 8000640:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000642:	69fa      	ldr	r2, [r7, #28]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	4313      	orrs	r3, r2
 800064e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	78db      	ldrb	r3, [r3, #3]
 8000654:	2b28      	cmp	r3, #40	; 0x28
 8000656:	d105      	bne.n	8000664 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	3308      	adds	r3, #8
 800065c:	2201      	movs	r2, #1
 800065e:	409a      	lsls	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	78db      	ldrb	r3, [r3, #3]
 8000668:	2b48      	cmp	r3, #72	; 0x48
 800066a:	d105      	bne.n	8000678 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	3308      	adds	r3, #8
 8000670:	2201      	movs	r2, #1
 8000672:	409a      	lsls	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	3301      	adds	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	2b07      	cmp	r3, #7
 8000682:	d9c1      	bls.n	8000608 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	605a      	str	r2, [r3, #4]
  }
}
 800068a:	bf00      	nop
 800068c:	3724      	adds	r7, #36	; 0x24
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80006a0:	887a      	ldrh	r2, [r7, #2]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	611a      	str	r2, [r3, #16]
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80006bc:	887a      	ldrh	r2, [r7, #2]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	615a      	str	r2, [r3, #20]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006de:	4909      	ldr	r1, [pc, #36]	; (8000704 <RCC_APB2PeriphClockCmd+0x38>)
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <RCC_APB2PeriphClockCmd+0x38>)
 80006e2:	699a      	ldr	r2, [r3, #24]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006ea:	e006      	b.n	80006fa <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006ec:	4905      	ldr	r1, [pc, #20]	; (8000704 <RCC_APB2PeriphClockCmd+0x38>)
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <RCC_APB2PeriphClockCmd+0x38>)
 80006f0:	699a      	ldr	r2, [r3, #24]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	43db      	mvns	r3, r3
 80006f6:	4013      	ands	r3, r2
 80006f8:	618b      	str	r3, [r1, #24]
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	40021000 	.word	0x40021000

08000708 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 800071c:	89fb      	ldrh	r3, [r7, #14]
 800071e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000722:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	881a      	ldrh	r2, [r3, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	885b      	ldrh	r3, [r3, #2]
 800072c:	4313      	orrs	r3, r2
 800072e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000734:	4313      	orrs	r3, r2
 8000736:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800073c:	4313      	orrs	r3, r2
 800073e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000744:	4313      	orrs	r3, r2
 8000746:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800074c:	4313      	orrs	r3, r2
 800074e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000754:	4313      	orrs	r3, r2
 8000756:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800075c:	4313      	orrs	r3, r2
 800075e:	b29a      	uxth	r2, r3
 8000760:	89fb      	ldrh	r3, [r7, #14]
 8000762:	4313      	orrs	r3, r2
 8000764:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	89fa      	ldrh	r2, [r7, #14]
 800076a:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	8b9b      	ldrh	r3, [r3, #28]
 8000770:	b29b      	uxth	r3, r3
 8000772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000776:	b29a      	uxth	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	8a1a      	ldrh	r2, [r3, #16]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	821a      	strh	r2, [r3, #16]
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800078e:	b480      	push	{r7}
 8000790:	b083      	sub	sp, #12
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	460b      	mov	r3, r1
 8000798:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800079a:	78fb      	ldrb	r3, [r7, #3]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d008      	beq.n	80007b2 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80007b0:	e007      	b.n	80007c2 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007bc:	b29a      	uxth	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	801a      	strh	r2, [r3, #0]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	887a      	ldrh	r2, [r7, #2]
 80007dc:	819a      	strh	r2, [r3, #12]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	899b      	ldrh	r3, [r3, #12]
 80007f4:	b29b      	uxth	r3, r3
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	889b      	ldrh	r3, [r3, #4]
 8000816:	b29b      	uxth	r3, r3
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	b29a      	uxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 8000822:	e007      	b.n	8000834 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	889b      	ldrh	r3, [r3, #4]
 8000828:	b29b      	uxth	r3, r3
 800082a:	f023 0304 	bic.w	r3, r3, #4
 800082e:	b29a      	uxth	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	809a      	strh	r2, [r3, #4]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800083e:	b480      	push	{r7}
 8000840:	b085      	sub	sp, #20
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	460b      	mov	r3, r1
 8000848:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	891b      	ldrh	r3, [r3, #8]
 8000852:	b29a      	uxth	r2, r3
 8000854:	887b      	ldrh	r3, [r7, #2]
 8000856:	4013      	ands	r3, r2
 8000858:	b29b      	uxth	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800085e:	2301      	movs	r3, #1
 8000860:	73fb      	strb	r3, [r7, #15]
 8000862:	e001      	b.n	8000868 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000868:	7bfb      	ldrb	r3, [r7, #15]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <MqttClient_HandlePayload>:
#endif

/* Private functions */
static int MqttClient_HandlePayload(MqttClient* client, MqttMessage* msg,
    int timeout_ms, void* p_decode, word16* packet_id)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b091      	sub	sp, #68	; 0x44
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
 8000880:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8000882:	2300      	movs	r3, #0
 8000884:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch (msg->type)
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	3b02      	subs	r3, #2
 800088c:	2b0b      	cmp	r3, #11
 800088e:	f200 817e 	bhi.w	8000b8e <MqttClient_HandlePayload+0x31a>
 8000892:	a201      	add	r2, pc, #4	; (adr r2, 8000898 <MqttClient_HandlePayload+0x24>)
 8000894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000898:	080008c9 	.word	0x080008c9
 800089c:	080008ef 	.word	0x080008ef
 80008a0:	08000a7f 	.word	0x08000a7f
 80008a4:	08000a7f 	.word	0x08000a7f
 80008a8:	08000a7f 	.word	0x08000a7f
 80008ac:	08000a7f 	.word	0x08000a7f
 80008b0:	08000b8f 	.word	0x08000b8f
 80008b4:	08000b0f 	.word	0x08000b0f
 80008b8:	08000b8f 	.word	0x08000b8f
 80008bc:	08000b45 	.word	0x08000b45
 80008c0:	08000b8f 	.word	0x08000b8f
 80008c4:	08000b7b 	.word	0x08000b7b
    {
        case MQTT_PACKET_TYPE_CONNECT_ACK:
        {
            /* Decode connect ack */
            MqttConnectAck connect_ack, *p_connect_ack = &connect_ack;
 80008c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008cc:	63bb      	str	r3, [r7, #56]	; 0x38
            if (p_decode) {
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MqttClient_HandlePayload+0x64>
                p_connect_ack = (MqttConnectAck*)p_decode;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            rc = MqttDecode_ConnectAck(client->rx_buf, client->packet.buf_len,
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	6918      	ldr	r0, [r3, #16]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80008e2:	4619      	mov	r1, r3
 80008e4:	f000 fdaa 	bl	800143c <MqttDecode_ConnectAck>
 80008e8:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                                p_connect_ack);
            break;
 80008ea:	bf00      	nop
 80008ec:	e154      	b.n	8000b98 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_PUBLISH:
        {
            byte msg_done;

            if (msg->buffer_new) {
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	7e1b      	ldrb	r3, [r3, #24]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00d      	beq.n	8000912 <MqttClient_HandlePayload+0x9e>
                /* Decode publish message */
                rc = MqttDecode_Publish(client->rx_buf, client->packet.buf_len, msg);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6918      	ldr	r0, [r3, #16]
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	4619      	mov	r1, r3
 8000902:	f000 fdd3 	bl	80014ac <MqttDecode_Publish>
 8000906:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 8000908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800090a:	2b00      	cmp	r3, #0
 800090c:	dc01      	bgt.n	8000912 <MqttClient_HandlePayload+0x9e>
                    return rc;
 800090e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000910:	e143      	b.n	8000b9a <MqttClient_HandlePayload+0x326>
            }

            /* Handle packet callback and read remaining payload */
            do {
                /* Determine if message is done */
                msg_done = ((msg->buffer_pos + msg->buffer_len) >= msg->total_len) ? 1 : 0;
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	6a1a      	ldr	r2, [r3, #32]
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	441a      	add	r2, r3
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	691b      	ldr	r3, [r3, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	bf2c      	ite	cs
 8000924:	2301      	movcs	r3, #1
 8000926:	2300      	movcc	r3, #0
 8000928:	b2db      	uxtb	r3, r3
 800092a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if (msg->stat != MQTT_MSG_READ_PAYLOAD) {
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b04      	cmp	r3, #4
 8000934:	d029      	beq.n	800098a <MqttClient_HandlePayload+0x116>
                    /* Issue callback for new message */
                    if (client->msg_cb) {
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800093a:	2b00      	cmp	r3, #0
 800093c:	d022      	beq.n	8000984 <MqttClient_HandlePayload+0x110>
                        if (!msg->buffer_new) {
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	7e1b      	ldrb	r3, [r3, #24]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d105      	bne.n	8000952 <MqttClient_HandlePayload+0xde>
                            /* Reset topic name since valid on new message only */
                            msg->topic_name = NULL;
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
                            msg->topic_name_len = 0;
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	2200      	movs	r2, #0
 8000950:	819a      	strh	r2, [r3, #12]
                        }
                        /* if using the temp publish message buffer,
                           then populate message context with client context */
                        if (&client->msg == msg)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	429a      	cmp	r2, r3
 800095c:	d103      	bne.n	8000966 <MqttClient_HandlePayload+0xf2>
                            msg->ctx = client->ctx;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
                        rc = client->msg_cb(client, msg, msg->buffer_new, msg_done);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	7e1a      	ldrb	r2, [r3, #24]
 800096e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000972:	68b9      	ldr	r1, [r7, #8]
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	47a0      	blx	r4
 8000978:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc != MQTT_CODE_SUCCESS) {
 800097a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MqttClient_HandlePayload+0x110>
                            return rc;
 8000980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000982:	e10a      	b.n	8000b9a <MqttClient_HandlePayload+0x326>
                        };
                    }
                    msg->buffer_new = 0;
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	2200      	movs	r2, #0
 8000988:	761a      	strb	r2, [r3, #24]
                }

                /* Read payload */
                if (!msg_done) {
 800098a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800098e:	2b00      	cmp	r3, #0
 8000990:	d13b      	bne.n	8000a0a <MqttClient_HandlePayload+0x196>
                    int msg_len;

                    /* add last length to position and reset len */
                    msg->buffer_pos += msg->buffer_len;
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	6a1a      	ldr	r2, [r3, #32]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	441a      	add	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	621a      	str	r2, [r3, #32]
                    msg->buffer_len = 0;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]

                    /* set state to reading payload */
                    msg->stat = MQTT_MSG_READ_PAYLOAD;
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	2204      	movs	r2, #4
 80009aa:	701a      	strb	r2, [r3, #0]

                    msg_len = (msg->total_len - msg->buffer_pos);
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	691a      	ldr	r2, [r3, #16]
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	6a1b      	ldr	r3, [r3, #32]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
                    if (msg_len > client->rx_buf_len) {
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	695a      	ldr	r2, [r3, #20]
 80009bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009be:	429a      	cmp	r2, r3
 80009c0:	da02      	bge.n	80009c8 <MqttClient_HandlePayload+0x154>
                        msg_len = client->rx_buf_len;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
                    }

                    /* make sure there is something to read */
                    rc = MQTT_CODE_SUCCESS;
 80009c8:	2300      	movs	r3, #0
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                    if (msg_len > 0) {
 80009cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	dd16      	ble.n	8000a00 <MqttClient_HandlePayload+0x18c>
                        rc = MqttSocket_Read(client, client->rx_buf, msg_len, timeout_ms);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	6919      	ldr	r1, [r3, #16]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f001 f8df 	bl	8001b9e <MqttSocket_Read>
 80009e0:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc > 0) {
 80009e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	dd0b      	ble.n	8000a00 <MqttClient_HandlePayload+0x18c>
                            /* make sure state is back to read */
                            msg->stat = MQTT_MSG_READ;
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	2203      	movs	r2, #3
 80009ec:	701a      	strb	r2, [r3, #0]

                            /* Update message */
                            msg->buffer = client->rx_buf;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	691a      	ldr	r2, [r3, #16]
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	615a      	str	r2, [r3, #20]
                            msg->buffer_len = rc;
 80009f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	61da      	str	r2, [r3, #28]
                            rc = MQTT_CODE_SUCCESS;
 80009fc:	2300      	movs	r3, #0
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }
                    if (rc < 0) {
 8000a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	da01      	bge.n	8000a0a <MqttClient_HandlePayload+0x196>
                        return rc;
 8000a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a08:	e0c7      	b.n	8000b9a <MqttClient_HandlePayload+0x326>
                    }
                }
            } while (!msg_done);
 8000a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f43f af7f 	beq.w	8000912 <MqttClient_HandlePayload+0x9e>

            /* Handle Qos */
            if (msg->qos > MQTT_QOS_0) {
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	795b      	ldrb	r3, [r3, #5]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	f000 80ba 	beq.w	8000b92 <MqttClient_HandlePayload+0x31e>
                MqttPublishResp publish_resp;
                MqttPacketType type;

                *packet_id = msg->packet_id;
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	885a      	ldrh	r2, [r3, #2]
 8000a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a24:	801a      	strh	r2, [r3, #0]

                /* Determine packet type to write */
                type = (msg->qos == MQTT_QOS_1) ?
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	795b      	ldrb	r3, [r3, #5]
                    MQTT_PACKET_TYPE_PUBLISH_ACK :
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d101      	bne.n	8000a32 <MqttClient_HandlePayload+0x1be>
 8000a2e:	2304      	movs	r3, #4
 8000a30:	e000      	b.n	8000a34 <MqttClient_HandlePayload+0x1c0>
 8000a32:	2305      	movs	r3, #5
                type = (msg->qos == MQTT_QOS_1) ?
 8000a34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    MQTT_PACKET_TYPE_PUBLISH_REC;
                publish_resp.packet_id = msg->packet_id;
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	885b      	ldrh	r3, [r3, #2]
 8000a3c:	843b      	strh	r3, [r7, #32]

                /* Encode publish response */
                rc = MqttEncode_PublishResp(client->tx_buf,
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	6898      	ldr	r0, [r3, #8]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	68d9      	ldr	r1, [r3, #12]
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000a4e:	f000 fda4 	bl	800159a <MqttEncode_PublishResp>
 8000a52:	63f8      	str	r0, [r7, #60]	; 0x3c
                                    client->tx_buf_len, type, &publish_resp);
                if (rc <= 0) {
 8000a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	dc01      	bgt.n	8000a5e <MqttClient_HandlePayload+0x1ea>
                    return rc;
 8000a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a5c:	e09d      	b.n	8000b9a <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf,
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	6899      	ldr	r1, [r3, #8]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	461a      	mov	r2, r3
 8000a74:	68f8      	ldr	r0, [r7, #12]
 8000a76:	f000 ff35 	bl	80018e4 <MqttPacket_Write>
 8000a7a:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                    client->packet.buf_len);
            }
            break;
 8000a7c:	e089      	b.n	8000b92 <MqttClient_HandlePayload+0x31e>
        case MQTT_PACKET_TYPE_PUBLISH_ACK:
        case MQTT_PACKET_TYPE_PUBLISH_REC:
        case MQTT_PACKET_TYPE_PUBLISH_REL:
        case MQTT_PACKET_TYPE_PUBLISH_COMP:
        {
            MqttPublishResp publish_resp, *p_publish_resp = &publish_resp;
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
            if (p_decode) {
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MqttClient_HandlePayload+0x21a>
                p_publish_resp = (MqttPublishResp*)p_decode;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* Decode publish response message */
            rc = MqttDecode_PublishResp(client->rx_buf, client->packet.buf_len,
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	6918      	ldr	r0, [r3, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	791a      	ldrb	r2, [r3, #4]
 8000a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9c:	f000 fdc3 	bl	8001626 <MqttDecode_PublishResp>
 8000aa0:	63f8      	str	r0, [r7, #60]	; 0x3c
                msg->type, p_publish_resp);
            if (rc <= 0) {
 8000aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	dc01      	bgt.n	8000aac <MqttClient_HandlePayload+0x238>
                return rc;
 8000aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aaa:	e076      	b.n	8000b9a <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_publish_resp->packet_id;
 8000aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aae:	881a      	ldrh	r2, [r3, #0]
 8000ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ab2:	801a      	strh	r2, [r3, #0]

            /* If Qos then send response */
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	791b      	ldrb	r3, [r3, #4]
 8000ab8:	2b05      	cmp	r3, #5
 8000aba:	d003      	beq.n	8000ac4 <MqttClient_HandlePayload+0x250>
                msg->type == MQTT_PACKET_TYPE_PUBLISH_REL) {
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	791b      	ldrb	r3, [r3, #4]
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 8000ac0:	2b06      	cmp	r3, #6
 8000ac2:	d168      	bne.n	8000b96 <MqttClient_HandlePayload+0x322>

                /* Encode publish response */
                publish_resp.packet_id = p_publish_resp->packet_id;
 8000ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	83bb      	strh	r3, [r7, #28]
                rc = MqttEncode_PublishResp(client->tx_buf,
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	6898      	ldr	r0, [r3, #8]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	68d9      	ldr	r1, [r3, #12]
                    client->tx_buf_len, msg->type+1, &publish_resp);
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	791b      	ldrb	r3, [r3, #4]
                rc = MqttEncode_PublishResp(client->tx_buf,
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	f000 fd5c 	bl	800159a <MqttEncode_PublishResp>
 8000ae2:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 8000ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	dc01      	bgt.n	8000aee <MqttClient_HandlePayload+0x27a>
                    return rc;
 8000aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aec:	e055      	b.n	8000b9a <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf, client->packet.buf_len);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6899      	ldr	r1, [r3, #8]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b02:	461a      	mov	r2, r3
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f000 feed 	bl	80018e4 <MqttPacket_Write>
 8000b0a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000b0c:	e044      	b.n	8000b98 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_SUBSCRIBE_ACK:
        {
            /* Decode subscribe ack */
            MqttSubscribeAck subscribe_ack;
            MqttSubscribeAck *p_subscribe_ack = &subscribe_ack;
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (p_decode) {
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MqttClient_HandlePayload+0x2aa>
                p_subscribe_ack = (MqttSubscribeAck*)p_decode;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            rc = MqttDecode_SubscribeAck(client->rx_buf, client->packet.buf_len,
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	6918      	ldr	r0, [r3, #16]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f000 fe36 	bl	800179a <MqttDecode_SubscribeAck>
 8000b2e:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_subscribe_ack);
            if (rc <= 0) {
 8000b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	dc01      	bgt.n	8000b3a <MqttClient_HandlePayload+0x2c6>
                return rc;
 8000b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b38:	e02f      	b.n	8000b9a <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_subscribe_ack->packet_id;
 8000b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3c:	881a      	ldrh	r2, [r3, #0]
 8000b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b40:	801a      	strh	r2, [r3, #0]
 8000b42:	e029      	b.n	8000b98 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK:
        {
            /* Decode unsubscribe ack */
            MqttUnsubscribeAck unsubscribe_ack;
            MqttUnsubscribeAck *p_unsubscribe_ack = &unsubscribe_ack;
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28

            if (p_decode) {
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MqttClient_HandlePayload+0x2e0>
                p_unsubscribe_ack = (MqttUnsubscribeAck*)p_decode;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            rc = MqttDecode_UnsubscribeAck(client->rx_buf, client->packet.buf_len,
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	6918      	ldr	r0, [r3, #16]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f000 fe5b 	bl	800181a <MqttDecode_UnsubscribeAck>
 8000b64:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_unsubscribe_ack);
            if (rc <= 0) {
 8000b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	dc01      	bgt.n	8000b70 <MqttClient_HandlePayload+0x2fc>
                return rc;
 8000b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b6e:	e014      	b.n	8000b9a <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_unsubscribe_ack->packet_id;
 8000b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b72:	881a      	ldrh	r2, [r3, #0]
 8000b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b76:	801a      	strh	r2, [r3, #0]
 8000b78:	e00e      	b.n	8000b98 <MqttClient_HandlePayload+0x324>
            break;
        }
        case MQTT_PACKET_TYPE_PING_RESP:
        {
            /* Decode ping */
            rc = MqttDecode_Ping(client->rx_buf, client->packet.buf_len);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	691a      	ldr	r2, [r3, #16]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b82:	4619      	mov	r1, r3
 8000b84:	4610      	mov	r0, r2
 8000b86:	f000 fe85 	bl	8001894 <MqttDecode_Ping>
 8000b8a:	63f8      	str	r0, [r7, #60]	; 0x3c
            break;
 8000b8c:	e004      	b.n	8000b98 <MqttClient_HandlePayload+0x324>
            /* Other types are server side only, ignore */
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitMessage: Invalid client packet type %u!",
                msg->type);
        #endif
            break;
 8000b8e:	bf00      	nop
 8000b90:	e002      	b.n	8000b98 <MqttClient_HandlePayload+0x324>
            break;
 8000b92:	bf00      	nop
 8000b94:	e000      	b.n	8000b98 <MqttClient_HandlePayload+0x324>
            break;
 8000b96:	bf00      	nop
        }
    } /* switch (msg->type) */

    return rc;
 8000b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3744      	adds	r7, #68	; 0x44
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd90      	pop	{r4, r7, pc}
 8000ba2:	bf00      	nop

08000ba4 <MqttClient_WaitType>:

static int MqttClient_WaitType(MqttClient *client, MqttMessage* msg,
    int timeout_ms, byte wait_type, word16 wait_packet_id, void* p_decode)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af02      	add	r7, sp, #8
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	70fb      	strb	r3, [r7, #3]
    int rc;
    word16 packet_id = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	82fb      	strh	r3, [r7, #22]

wait_again:

    switch (msg->stat)
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	d85e      	bhi.n	8000c7c <MqttClient_WaitType+0xd8>
 8000bbe:	a201      	add	r2, pc, #4	; (adr r2, 8000bc4 <MqttClient_WaitType+0x20>)
 8000bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc4:	08000bd9 	.word	0x08000bd9
 8000bc8:	08000bdf 	.word	0x08000bdf
 8000bcc:	08000c7d 	.word	0x08000c7d
 8000bd0:	08000c35 	.word	0x08000c35
 8000bd4:	08000c35 	.word	0x08000c35
    {
        case MQTT_MSG_BEGIN:
        {
            /* reset the packet state */
            client->packet.stat = MQTT_PK_BEGIN;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	771a      	strb	r2, [r3, #28]
        case MQTT_MSG_WAIT:
        {
            MqttPacket* header;

            /* Wait for packet */
            rc = MqttPacket_Read(client, client->rx_buf, client->rx_buf_len, timeout_ms);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6919      	ldr	r1, [r3, #16]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	695a      	ldr	r2, [r3, #20]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f000 fe8e 	bl	800190a <MqttPacket_Read>
 8000bee:	61f8      	str	r0, [r7, #28]
            if (rc <= 0) {
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	dc01      	bgt.n	8000bfa <MqttClient_WaitType+0x56>
                return rc;
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	e049      	b.n	8000c8e <MqttClient_WaitType+0xea>
            }

            msg->stat = MQTT_MSG_WAIT;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
            client->packet.buf_len = rc;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	69fa      	ldr	r2, [r7, #28]
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28

            /* Determine packet type */
            header = (MqttPacket*)client->rx_buf;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	61bb      	str	r3, [r7, #24]
            msg->type = MQTT_PACKET_TYPE_GET(header->type_flags);
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	091b      	lsrs	r3, r3, #4
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	711a      	strb	r2, [r3, #4]
            msg->qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	105b      	asrs	r3, r3, #1
 8000c1e:	f003 0303 	and.w	r3, r3, #3
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	715a      	strb	r2, [r3, #5]
            msg->buffer_new = 1;
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	761a      	strb	r2, [r3, #24]
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("Read Packet: Len %d, Type %d, Qos %d",
                client->packet.buf_len, msg->type, msg->qos);
        #endif

            msg->stat = MQTT_MSG_READ;
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	2203      	movs	r2, #3
 8000c32:	701a      	strb	r2, [r3, #0]
        }

        case MQTT_MSG_READ:
        case MQTT_MSG_READ_PAYLOAD:
        {
            rc = MqttClient_HandlePayload(client, msg, timeout_ms, p_decode,
 8000c34:	f107 0316 	add.w	r3, r7, #22
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	68b9      	ldr	r1, [r7, #8]
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f7ff fe17 	bl	8000874 <MqttClient_HandlePayload>
 8000c46:	61f8      	str	r0, [r7, #28]
                                                                &packet_id);
            if (rc < 0) {
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	da01      	bge.n	8000c52 <MqttClient_WaitType+0xae>
                return rc;
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	e01d      	b.n	8000c8e <MqttClient_WaitType+0xea>
            }
            rc = MQTT_CODE_SUCCESS;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]

            /* Check for type and packet id */
            if (wait_type < MQTT_PACKET_TYPE_MAX) {
 8000c56:	78fb      	ldrb	r3, [r7, #3]
 8000c58:	2b0e      	cmp	r3, #14
 8000c5a:	d813      	bhi.n	8000c84 <MqttClient_WaitType+0xe0>
                if (wait_type == msg->type) {
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	791b      	ldrb	r3, [r3, #4]
 8000c60:	78fa      	ldrb	r2, [r7, #3]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d106      	bne.n	8000c74 <MqttClient_WaitType+0xd0>
                    if (wait_packet_id == 0 || wait_packet_id == packet_id) {
 8000c66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d00c      	beq.n	8000c86 <MqttClient_WaitType+0xe2>
 8000c6c:	8afb      	ldrh	r3, [r7, #22]
 8000c6e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d008      	beq.n	8000c86 <MqttClient_WaitType+0xe2>
                        /* We found the packet type and id */
                        break;
                    }
                }

                msg->stat = MQTT_MSG_BEGIN;
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
                goto wait_again;
 8000c7a:	e79c      	b.n	8000bb6 <MqttClient_WaitType+0x12>
        {
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitType: Invalid state %d!",
                msg->stat);
        #endif
            rc = MQTT_CODE_ERROR_STAT;
 8000c7c:	f06f 0309 	mvn.w	r3, #9
 8000c80:	61fb      	str	r3, [r7, #28]
            break;
 8000c82:	e000      	b.n	8000c86 <MqttClient_WaitType+0xe2>
            break;
 8000c84:	bf00      	nop
        }
    } /* switch (msg->stat) */

    /* reset state */
    msg->stat = MQTT_MSG_BEGIN;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]

    return rc;
 8000c8c:	69fb      	ldr	r3, [r7, #28]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3720      	adds	r7, #32
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop

08000c98 <MqttClient_Init>:
int MqttClient_Init(MqttClient *client, MqttNet* net,
    MqttMsgCb msg_cb,
    byte* tx_buf, int tx_buf_len,
    byte* rx_buf, int rx_buf_len,
    int cmd_timeout_ms)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]

    /* Check arguments */
    if (client == NULL ||
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00b      	beq.n	8000cc8 <MqttClient_Init+0x30>
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d008      	beq.n	8000cc8 <MqttClient_Init+0x30>
        tx_buf == NULL || tx_buf_len <= 0 ||
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	dd05      	ble.n	8000cc8 <MqttClient_Init+0x30>
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <MqttClient_Init+0x30>
        rx_buf == NULL || rx_buf_len <= 0) {
 8000cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	dc02      	bgt.n	8000cce <MqttClient_Init+0x36>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ccc:	e01c      	b.n	8000d08 <MqttClient_Init+0x70>
    }

    /* Initialize the client structure to zero */
    XMEMSET(client, 0, sizeof(MqttClient));
 8000cce:	226c      	movs	r2, #108	; 0x6c
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f001 ffe9 	bl	8002caa <memset>

    /* Setup client structure */
    client->msg_cb = msg_cb;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	63da      	str	r2, [r3, #60]	; 0x3c
    client->tx_buf = tx_buf;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	609a      	str	r2, [r3, #8]
    client->tx_buf_len = tx_buf_len;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6a3a      	ldr	r2, [r7, #32]
 8000ce8:	60da      	str	r2, [r3, #12]
    client->rx_buf = rx_buf;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cee:	611a      	str	r2, [r3, #16]
    client->rx_buf_len = rx_buf_len;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cf4:	615a      	str	r2, [r3, #20]
    client->cmd_timeout_ms = cmd_timeout_ms;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cfa:	605a      	str	r2, [r3, #4]

    /* Init socket */
    rc = MqttSocket_Init(client, net);
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f000 fea0 	bl	8001a44 <MqttSocket_Init>
 8000d04:	6178      	str	r0, [r7, #20]

    return rc;
 8000d06:	697b      	ldr	r3, [r7, #20]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <MqttClient_Connect>:

int MqttClient_Connect(MqttClient *client, MqttConnect *connect)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af02      	add	r7, sp, #8
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
    int rc, len;

    /* Validate required arguments */
    if (client == NULL || connect == NULL) {
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <MqttClient_Connect+0x16>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d102      	bne.n	8000d2c <MqttClient_Connect+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d2a:	e034      	b.n	8000d96 <MqttClient_Connect+0x86>
    }

    if (connect->stat == MQTT_MSG_BEGIN) {
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d120      	bne.n	8000d76 <MqttClient_Connect+0x66>

        /* Encode the connect packet */
        rc = MqttEncode_Connect(client->tx_buf, client->tx_buf_len, connect);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6898      	ldr	r0, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f000 fa4c 	bl	80011dc <MqttEncode_Connect>
 8000d44:	60f8      	str	r0, [r7, #12]
        if (rc <= 0) {
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	dc01      	bgt.n	8000d50 <MqttClient_Connect+0x40>
            return rc;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	e022      	b.n	8000d96 <MqttClient_Connect+0x86>
        }
        len = rc;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	60bb      	str	r3, [r7, #8]

        /* Send connect packet */
        rc = MqttPacket_Write(client, client->tx_buf, len);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	68ba      	ldr	r2, [r7, #8]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 fdc1 	bl	80018e4 <MqttPacket_Write>
 8000d62:	60f8      	str	r0, [r7, #12]
        if (rc != len) {
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d001      	beq.n	8000d70 <MqttClient_Connect+0x60>
            return rc;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	e012      	b.n	8000d96 <MqttClient_Connect+0x86>
        }
        connect->stat = MQTT_MSG_WAIT;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	2201      	movs	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
	broker_decode_connect(&broker, local_host.data, &stat);
	broker_send_conn_ack(&broker, &stat);
*/

    /* Wait for connect ack packet */
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685a      	ldr	r2, [r3, #4]
        MQTT_PACKET_TYPE_CONNECT_ACK, 0, &connect->ack);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	331c      	adds	r3, #28
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	2300      	movs	r3, #0
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff09 	bl	8000ba4 <MqttClient_WaitType>
 8000d92:	60f8      	str	r0, [r7, #12]

    return rc;
 8000d94:	68fb      	ldr	r3, [r7, #12]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <MqttClient_Subscribe>:

    return rc;
}

int MqttClient_Subscribe(MqttClient *client, MqttSubscribe *subscribe)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b08a      	sub	sp, #40	; 0x28
 8000da2:	af02      	add	r7, sp, #8
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
    int rc, len, i;
    MqttSubscribeAck subscribe_ack;
    MqttTopic* topic;

    /* Validate required arguments */
    if (client == NULL || subscribe == NULL) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <MqttClient_Subscribe+0x16>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <MqttClient_Subscribe+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000db8:	e050      	b.n	8000e5c <MqttClient_Subscribe+0xbe>
    }

    if (subscribe->stat == MQTT_MSG_BEGIN) {
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d120      	bne.n	8000e04 <MqttClient_Subscribe+0x66>
        /* Encode the subscribe packet */
        rc = MqttEncode_Subscribe(client->tx_buf, client->tx_buf_len, subscribe);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6898      	ldr	r0, [r3, #8]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f000 fc67 	bl	80016a0 <MqttEncode_Subscribe>
 8000dd2:	61b8      	str	r0, [r7, #24]
        if (rc <= 0) { return rc; }
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	dc01      	bgt.n	8000dde <MqttClient_Subscribe+0x40>
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	e03e      	b.n	8000e5c <MqttClient_Subscribe+0xbe>
        len = rc;
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	617b      	str	r3, [r7, #20]

        /* Send subscribe packet */
        rc = MqttPacket_Write(client, client->tx_buf, len);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4619      	mov	r1, r3
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 fd7a 	bl	80018e4 <MqttPacket_Write>
 8000df0:	61b8      	str	r0, [r7, #24]
        if (rc != len) { return rc; }
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d001      	beq.n	8000dfe <MqttClient_Subscribe+0x60>
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	e02e      	b.n	8000e5c <MqttClient_Subscribe+0xbe>

        subscribe->stat = MQTT_MSG_WAIT;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]
    }

    /* Wait for subscribe ack packet */
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6858      	ldr	r0, [r3, #4]
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	885b      	ldrh	r3, [r3, #2]
 8000e12:	f107 0208 	add.w	r2, r7, #8
 8000e16:	9201      	str	r2, [sp, #4]
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2309      	movs	r3, #9
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fec0 	bl	8000ba4 <MqttClient_WaitType>
 8000e24:	61b8      	str	r0, [r7, #24]
        MQTT_PACKET_TYPE_SUBSCRIBE_ACK, subscribe->packet_id, &subscribe_ack);

    /* Populate return codes */
    if (rc == MQTT_CODE_SUCCESS) {
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d116      	bne.n	8000e5a <MqttClient_Subscribe+0xbc>
        for (i = 0; i < subscribe->topic_count; i++) {
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	e00e      	b.n	8000e50 <MqttClient_Subscribe+0xb2>
            topic = &subscribe->topics[i];
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
            topic->return_code = subscribe_ack.return_codes[i];
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	4413      	add	r3, r2
 8000e44:	781a      	ldrb	r2, [r3, #0]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	715a      	strb	r2, [r3, #5]
        for (i = 0; i < subscribe->topic_count; i++) {
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	dceb      	bgt.n	8000e32 <MqttClient_Subscribe+0x94>
        }
    }

    return rc;
 8000e5a:	69bb      	ldr	r3, [r7, #24]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <MqttEncode_FixedHeader>:
#include "mqtt_client.h"

/* Positive return value is header length, zero or negative indicates error */
static int MqttEncode_FixedHeader(byte *tx_buf, int tx_buf_len, int remain_len,
    byte type, byte retain, byte qos, byte duplicate)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)tx_buf;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	617b      	str	r3, [r7, #20]

    /* Encode fixed header */
    header->type_flags = MQTT_PACKET_TYPE_SET(type) | MQTT_PACKET_FLAGS_SET(0);
 8000e76:	78fb      	ldrb	r3, [r7, #3]
 8000e78:	011b      	lsls	r3, r3, #4
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	701a      	strb	r2, [r3, #0]
    if (retain) {
 8000e80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d006      	beq.n	8000e96 <MqttEncode_FixedHeader+0x32>
        header->type_flags |= MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_RETAIN);
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	701a      	strb	r2, [r3, #0]
    }
    if (qos) {
 8000e96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00e      	beq.n	8000ebc <MqttEncode_FixedHeader+0x58>
        header->type_flags |= MQTT_PACKET_FLAGS_SET_QOS(qos);
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b25a      	sxtb	r2, r3
 8000ea4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	f003 0306 	and.w	r3, r3, #6
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	701a      	strb	r2, [r3, #0]
    }
    if (duplicate) {
 8000ebc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d006      	beq.n	8000ed2 <MqttEncode_FixedHeader+0x6e>
        header->type_flags |=
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	701a      	strb	r2, [r3, #0]
            MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_DUPLICATE);
    }

    /* Encode the length remaining into the header */
    header_len = MqttEncode_RemainLen(header, tx_buf_len, remain_len);
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f000 f89f 	bl	800101a <MqttEncode_RemainLen>
 8000edc:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	da01      	bge.n	8000ee8 <MqttEncode_FixedHeader+0x84>
        return header_len;
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	e000      	b.n	8000eea <MqttEncode_FixedHeader+0x86>
    }

    return header_len;
 8000ee8:	693b      	ldr	r3, [r7, #16]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <MqttDecode_FixedHeader>:

static int MqttDecode_FixedHeader(byte *rx_buf, int rx_buf_len,
    int *remain_len, byte type, MqttQoS *p_qos, byte *p_retain,
    byte *p_duplicate)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)rx_buf;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	617b      	str	r3, [r7, #20]

    /* Decode the length remaining */
    header_len = MqttDecode_RemainLen(header, rx_buf_len, remain_len);
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	6978      	ldr	r0, [r7, #20]
 8000f0a:	f000 f840 	bl	8000f8e <MqttDecode_RemainLen>
 8000f0e:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	da01      	bge.n	8000f1a <MqttDecode_FixedHeader+0x28>
        return header_len;
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	e035      	b.n	8000f86 <MqttDecode_FixedHeader+0x94>
    }

    /* Validate packet type */
    if (MQTT_PACKET_TYPE_GET(header->type_flags) != type) {
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	f003 020f 	and.w	r2, r3, #15
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d002      	beq.n	8000f32 <MqttDecode_FixedHeader+0x40>
        return MQTT_CODE_ERROR_PACKET_TYPE;
 8000f2c:	f06f 0303 	mvn.w	r3, #3
 8000f30:	e029      	b.n	8000f86 <MqttDecode_FixedHeader+0x94>
    }

    /* Extract header flags */
    if (p_qos) {
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d007      	beq.n	8000f48 <MqttDecode_FixedHeader+0x56>
        *p_qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	105b      	asrs	r3, r3, #1
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	6a3b      	ldr	r3, [r7, #32]
 8000f46:	701a      	strb	r2, [r3, #0]
    }
    if (p_retain) {
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00b      	beq.n	8000f66 <MqttDecode_FixedHeader+0x74>
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	f003 0301 	and.w	r3, r3, #1
            MQTT_PACKET_FLAG_RETAIN) ? 1 : 0;
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bf14      	ite	ne
 8000f5a:	2301      	movne	r3, #1
 8000f5c:	2300      	moveq	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	461a      	mov	r2, r3
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	701a      	strb	r2, [r3, #0]
    }
    if (p_duplicate) {
 8000f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00b      	beq.n	8000f84 <MqttDecode_FixedHeader+0x92>
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	f003 0308 	and.w	r3, r3, #8
            MQTT_PACKET_FLAG_DUPLICATE) ? 1 : 0;
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf14      	ite	ne
 8000f78:	2301      	movne	r3, #1
 8000f7a:	2300      	moveq	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f82:	701a      	strb	r2, [r3, #0]
    }

    return header_len;
 8000f84:	693b      	ldr	r3, [r7, #16]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <MqttDecode_RemainLen>:


/* Packet Element Encoders/Decoders */
/* Returns number of decoded bytes, errors are negative value */
int MqttDecode_RemainLen(MqttPacket *header, int buf_len, int *remain_len)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b089      	sub	sp, #36	; 0x24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
    int decode_bytes = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
    int multiplier = 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	61bb      	str	r3, [r7, #24]
    byte tmp_len;

    if (header == NULL || remain_len == NULL || buf_len <= 0) {
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <MqttDecode_RemainLen+0x26>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <MqttDecode_RemainLen+0x26>
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	dc02      	bgt.n	8000fba <MqttDecode_RemainLen+0x2c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb8:	e02a      	b.n	8001010 <MqttDecode_RemainLen+0x82>
    }

    *remain_len = 0;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
    do {
        /* Check decoded length byte count */
        if ((decode_bytes + 1) >= buf_len) {
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	db01      	blt.n	8000fce <MqttDecode_RemainLen+0x40>
            return 0; /* Zero incidates we need another byte */
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e020      	b.n	8001010 <MqttDecode_RemainLen+0x82>
        }
        if (decode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	dd02      	ble.n	8000fda <MqttDecode_RemainLen+0x4c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8000fd4:	f06f 0302 	mvn.w	r3, #2
 8000fd8:	e01a      	b.n	8001010 <MqttDecode_RemainLen+0x82>
        }

        /* Decode Length */
        tmp_len = header->len[decode_bytes++];
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	61fa      	str	r2, [r7, #28]
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	785b      	ldrb	r3, [r3, #1]
 8000fe6:	75fb      	strb	r3, [r7, #23]
        *remain_len += (tmp_len & ~MQTT_PACKET_LEN_ENCODE_MASK) * multiplier;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ff2:	69b9      	ldr	r1, [r7, #24]
 8000ff4:	fb01 f303 	mul.w	r3, r1, r3
 8000ff8:	441a      	add	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	601a      	str	r2, [r3, #0]
        multiplier *= MQTT_PACKET_LEN_ENCODE_MASK;
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	01db      	lsls	r3, r3, #7
 8001002:	61bb      	str	r3, [r7, #24]
    } while (tmp_len & MQTT_PACKET_LEN_ENCODE_MASK);
 8001004:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001008:	2b00      	cmp	r3, #0
 800100a:	dbd9      	blt.n	8000fc0 <MqttDecode_RemainLen+0x32>

    return decode_bytes + 1; /* Add byte for header flags/type */
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	3301      	adds	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3724      	adds	r7, #36	; 0x24
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <MqttEncode_RemainLen>:

/* Returns number of encoded bytes, errors are negative value */
int MqttEncode_RemainLen(MqttPacket *header, int buf_len, int remain_len)
{
 800101a:	b480      	push	{r7}
 800101c:	b087      	sub	sp, #28
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
    int encode_bytes = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
    byte tmp_len;

    if (header == NULL || remain_len < 0) {
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <MqttEncode_RemainLen+0x1c>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	da02      	bge.n	800103c <MqttEncode_RemainLen+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800103a:	e02e      	b.n	800109a <MqttEncode_RemainLen+0x80>
    }

    do {
        /* Check decoded length byte count */
        if ((encode_bytes + 1) >= buf_len) {
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	429a      	cmp	r2, r3
 8001044:	db01      	blt.n	800104a <MqttEncode_RemainLen+0x30>
            return 0; /* Zero incidates we need another byte */
 8001046:	2300      	movs	r3, #0
 8001048:	e027      	b.n	800109a <MqttEncode_RemainLen+0x80>
        }
        if (encode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	2b03      	cmp	r3, #3
 800104e:	dd02      	ble.n	8001056 <MqttEncode_RemainLen+0x3c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8001050:	f06f 0302 	mvn.w	r3, #2
 8001054:	e021      	b.n	800109a <MqttEncode_RemainLen+0x80>
        }

        /* Encode length */
        tmp_len = (remain_len % MQTT_PACKET_LEN_ENCODE_MASK);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	425a      	negs	r2, r3
 800105a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800105e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001062:	bf58      	it	pl
 8001064:	4253      	negpl	r3, r2
 8001066:	74fb      	strb	r3, [r7, #19]
        remain_len /= MQTT_PACKET_LEN_ENCODE_MASK;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	da00      	bge.n	8001070 <MqttEncode_RemainLen+0x56>
 800106e:	337f      	adds	r3, #127	; 0x7f
 8001070:	11db      	asrs	r3, r3, #7
 8001072:	607b      	str	r3, [r7, #4]

        /* If more length, set the top bit of this byte */
        if (remain_len > 0) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	dd03      	ble.n	8001082 <MqttEncode_RemainLen+0x68>
            tmp_len |= MQTT_PACKET_LEN_ENCODE_MASK;
 800107a:	7cfb      	ldrb	r3, [r7, #19]
 800107c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001080:	74fb      	strb	r3, [r7, #19]
        }
        header->len[encode_bytes++] = tmp_len;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	617a      	str	r2, [r7, #20]
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	7cfa      	ldrb	r2, [r7, #19]
 800108e:	705a      	strb	r2, [r3, #1]
    } while (remain_len > 0);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	dcd2      	bgt.n	800103c <MqttEncode_RemainLen+0x22>

    return encode_bytes + 1; /* Add byte for header flags/type */
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	371c      	adds	r7, #28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <MqttDecode_Num>:

/* Returns number of buffer bytes decoded */
int MqttDecode_Num(byte* buf, word16 *len)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
    if (len) {
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d011      	beq.n	80010d8 <MqttDecode_Num+0x34>
        *len = buf[0];
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	801a      	strh	r2, [r3, #0]
        *len = (*len << 8) | buf[1];
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3301      	adds	r3, #1
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	801a      	strh	r2, [r3, #0]
    }
    return MQTT_DATA_LEN_SIZE;
 80010d8:	2302      	movs	r3, #2
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <MqttEncode_Num>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Num(byte *buf, word16 len)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]
    buf[0] = len >> 8;
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	701a      	strb	r2, [r3, #0]
    buf[1] = len & 0xFF;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3301      	adds	r3, #1
 8001100:	887a      	ldrh	r2, [r7, #2]
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	701a      	strb	r2, [r3, #0]
    return MQTT_DATA_LEN_SIZE;
 8001106:	2302      	movs	r3, #2
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <MqttDecode_String>:

/* Returns number of buffer bytes decoded */
/* Returns pointer to string (which is not guarenteed to be null terminated) */
int MqttDecode_String(byte *buf, const char **pstr, word16 *pstr_len)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
    int len;
    word16 str_len;
    len = MqttDecode_Num(buf, &str_len);
 800111e:	f107 0312 	add.w	r3, r7, #18
 8001122:	4619      	mov	r1, r3
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff ffbd 	bl	80010a4 <MqttDecode_Num>
 800112a:	6178      	str	r0, [r7, #20]
    buf += len;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
    if (pstr_len) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <MqttDecode_String+0x2e>
        *pstr_len = str_len;
 800113a:	8a7a      	ldrh	r2, [r7, #18]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	801a      	strh	r2, [r3, #0]
    }
    if (pstr) {
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <MqttDecode_String+0x3a>
        *pstr = (char*)buf;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	601a      	str	r2, [r3, #0]
    }
    return len + str_len;
 800114c:	8a7b      	ldrh	r3, [r7, #18]
 800114e:	461a      	mov	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	4413      	add	r3, r2
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <MqttEncode_String>:

/* Returns number of buffer bytes encoded */
int MqttEncode_String(byte *buf, const char *str)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
    int str_len = (int)XSTRLEN(str);
 8001166:	6838      	ldr	r0, [r7, #0]
 8001168:	f7fe fff2 	bl	8000150 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	60fb      	str	r3, [r7, #12]
    int len = (int)MqttEncode_Num(buf, (word16)str_len);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	b29b      	uxth	r3, r3
 8001174:	4619      	mov	r1, r3
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffb4 	bl	80010e4 <MqttEncode_Num>
 800117c:	60b8      	str	r0, [r7, #8]
    buf += len;
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	607b      	str	r3, [r7, #4]
    XMEMCPY(buf, str, str_len);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	461a      	mov	r2, r3
 800118a:	6839      	ldr	r1, [r7, #0]
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f001 fd81 	bl	8002c94 <memcpy>
    return len + str_len;
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <MqttEncode_Data>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Data(byte *buf, const byte *data, word16 data_len)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	4613      	mov	r3, r2
 80011ac:	80fb      	strh	r3, [r7, #6]
    int len = (int)MqttEncode_Num(buf, data_len);
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	4619      	mov	r1, r3
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f7ff ff96 	bl	80010e4 <MqttEncode_Num>
 80011b8:	6178      	str	r0, [r7, #20]
    buf += len;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
    XMEMCPY(buf, data, data_len);
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	461a      	mov	r2, r3
 80011c6:	68b9      	ldr	r1, [r7, #8]
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f001 fd63 	bl	8002c94 <memcpy>
    return len + data_len;
 80011ce:	88fa      	ldrh	r2, [r7, #6]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	4413      	add	r3, r2
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <MqttEncode_Connect>:


/* Packet Type Encoders/Decoders */
int MqttEncode_Connect(byte *tx_buf, int tx_buf_len, MqttConnect *connect)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08e      	sub	sp, #56	; 0x38
 80011e0:	af04      	add	r7, sp, #16
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    MqttConnectPacket packet = MQTT_CONNECT_INIT;
 80011e8:	4a93      	ldr	r2, [pc, #588]	; (8001438 <MqttEncode_Connect+0x25c>)
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f0:	c303      	stmia	r3!, {r0, r1}
 80011f2:	801a      	strh	r2, [r3, #0]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || connect == NULL || connect->client_id == NULL) {
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d006      	beq.n	8001208 <MqttEncode_Connect+0x2c>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <MqttEncode_Connect+0x2c>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <MqttEncode_Connect+0x32>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800120c:	e110      	b.n	8001430 <MqttEncode_Connect+0x254>
    }

    /* Determine packet length */
    /* MQTT Version 4 header is 10 bytes */
    remain_len = sizeof(MqttConnectPacket);
 800120e:	230a      	movs	r3, #10
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    remain_len += (int)XSTRLEN(connect->client_id) + MQTT_DATA_LEN_SIZE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	4618      	mov	r0, r3
 8001218:	f7fe ff9a 	bl	8000150 <strlen>
 800121c:	4603      	mov	r3, r0
 800121e:	3302      	adds	r3, #2
 8001220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001222:	4413      	add	r3, r2
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    if (connect->enable_lwt) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7b1b      	ldrb	r3, [r3, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d02c      	beq.n	8001288 <MqttEncode_Connect+0xac>
        /* Verify all required fields are present */
        if (connect->lwt_msg == NULL ||
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00e      	beq.n	8001254 <MqttEncode_Connect+0x78>
            connect->lwt_msg->topic_name == NULL ||
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	689b      	ldr	r3, [r3, #8]
        if (connect->lwt_msg == NULL ||
 800123c:	2b00      	cmp	r3, #0
 800123e:	d009      	beq.n	8001254 <MqttEncode_Connect+0x78>
            connect->lwt_msg->buffer == NULL ||
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	695b      	ldr	r3, [r3, #20]
            connect->lwt_msg->topic_name == NULL ||
 8001246:	2b00      	cmp	r3, #0
 8001248:	d004      	beq.n	8001254 <MqttEncode_Connect+0x78>
            connect->lwt_msg->total_len <= 0)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	691b      	ldr	r3, [r3, #16]
            connect->lwt_msg->buffer == NULL ||
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <MqttEncode_Connect+0x7e>
        {
            return MQTT_CODE_ERROR_BAD_ARG;
 8001254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001258:	e0ea      	b.n	8001430 <MqttEncode_Connect+0x254>
        }

        remain_len += (int)XSTRLEN(connect->lwt_msg->topic_name);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4618      	mov	r0, r3
 8001262:	f7fe ff75 	bl	8000150 <strlen>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	4413      	add	r3, r2
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	3302      	adds	r3, #2
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += connect->lwt_msg->total_len;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	4413      	add	r3, r2
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	3302      	adds	r3, #2
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->username) {
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d009      	beq.n	80012a4 <MqttEncode_Connect+0xc8>
        remain_len += (int)XSTRLEN(connect->username) + MQTT_DATA_LEN_SIZE;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	4618      	mov	r0, r3
 8001296:	f7fe ff5b 	bl	8000150 <strlen>
 800129a:	4603      	mov	r3, r0
 800129c:	3302      	adds	r3, #2
 800129e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a0:	4413      	add	r3, r2
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->password) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d009      	beq.n	80012c0 <MqttEncode_Connect+0xe4>
        remain_len += (int)XSTRLEN(connect->password) + MQTT_DATA_LEN_SIZE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7fe ff4d 	bl	8000150 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	3302      	adds	r3, #2
 80012ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012bc:	4413      	add	r3, r2
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 80012c0:	2300      	movs	r3, #0
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	2300      	movs	r3, #0
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	2300      	movs	r3, #0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f7ff fdc6 	bl	8000e64 <MqttEncode_FixedHeader>
 80012d8:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT, 0, 0, 0);
    if (header_len < 0) {
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	da01      	bge.n	80012e4 <MqttEncode_Connect+0x108>
        return header_len;
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	e0a5      	b.n	8001430 <MqttEncode_Connect+0x254>
    }
    tx_payload = &tx_buf[header_len];
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	4413      	add	r3, r2
 80012ea:	623b      	str	r3, [r7, #32]

    /* Encode variable header */
    /* Set connection flags */
    if (connect->clean_session) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	791b      	ldrb	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d004      	beq.n	80012fe <MqttEncode_Connect+0x122>
        packet.flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->enable_lwt) {
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7b1b      	ldrb	r3, [r3, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d021      	beq.n	800134a <MqttEncode_Connect+0x16e>
        packet.flags |= MQTT_CONNECT_FLAG_WILL_FLAG;
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	b2db      	uxtb	r3, r3
 800130e:	75fb      	strb	r3, [r7, #23]

        if (connect->lwt_msg->qos) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	795b      	ldrb	r3, [r3, #5]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00d      	beq.n	8001336 <MqttEncode_Connect+0x15a>
            packet.flags |= MQTT_CONNECT_FLAG_SET_QOS(connect->lwt_msg->qos);
 800131a:	7dfb      	ldrb	r3, [r7, #23]
 800131c:	b25a      	sxtb	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	795b      	ldrb	r3, [r3, #5]
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	b25b      	sxtb	r3, r3
 8001328:	f003 0318 	and.w	r3, r3, #24
 800132c:	b25b      	sxtb	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b25b      	sxtb	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	75fb      	strb	r3, [r7, #23]
        }
        if (connect->lwt_msg->retain) {
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	799b      	ldrb	r3, [r3, #6]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d004      	beq.n	800134a <MqttEncode_Connect+0x16e>
            packet.flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	f043 0320 	orr.w	r3, r3, #32
 8001346:	b2db      	uxtb	r3, r3
 8001348:	75fb      	strb	r3, [r7, #23]
        }
    }
    if (connect->username) {
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d004      	beq.n	800135c <MqttEncode_Connect+0x180>
        packet.flags |= MQTT_CONNECT_FLAG_USERNAME;
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001358:	b2db      	uxtb	r3, r3
 800135a:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->password) {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d004      	beq.n	800136e <MqttEncode_Connect+0x192>
        packet.flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136a:	b2db      	uxtb	r3, r3
 800136c:	75fb      	strb	r3, [r7, #23]
    }
    MqttEncode_Num((byte*)&packet.keep_alive, connect->keep_alive_sec);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	885a      	ldrh	r2, [r3, #2]
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	3308      	adds	r3, #8
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff feb2 	bl	80010e4 <MqttEncode_Num>
    XMEMCPY(tx_payload, &packet, sizeof(MqttConnectPacket));
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	461a      	mov	r2, r3
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	cb03      	ldmia	r3!, {r0, r1}
 800138a:	6010      	str	r0, [r2, #0]
 800138c:	6051      	str	r1, [r2, #4]
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	8113      	strh	r3, [r2, #8]
    tx_payload += sizeof(MqttConnectPacket);
 8001392:	6a3b      	ldr	r3, [r7, #32]
 8001394:	330a      	adds	r3, #10
 8001396:	623b      	str	r3, [r7, #32]

    /* Encode payload */
    tx_payload += MqttEncode_String(tx_payload, connect->client_id);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	4619      	mov	r1, r3
 800139e:	6a38      	ldr	r0, [r7, #32]
 80013a0:	f7ff fedc 	bl	800115c <MqttEncode_String>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	4413      	add	r3, r2
 80013ac:	623b      	str	r3, [r7, #32]
    if (connect->enable_lwt) {
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7b1b      	ldrb	r3, [r3, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d01b      	beq.n	80013ee <MqttEncode_Connect+0x212>
        tx_payload += MqttEncode_String(tx_payload,
            connect->lwt_msg->topic_name);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_String(tx_payload,
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	4619      	mov	r1, r3
 80013be:	6a38      	ldr	r0, [r7, #32]
 80013c0:	f7ff fecc 	bl	800115c <MqttEncode_String>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	4413      	add	r3, r2
 80013cc:	623b      	str	r3, [r7, #32]
        tx_payload += MqttEncode_Data(tx_payload,
            connect->lwt_msg->buffer, (word16)connect->lwt_msg->total_len);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	6959      	ldr	r1, [r3, #20]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_Data(tx_payload,
 80013da:	b29b      	uxth	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	6a38      	ldr	r0, [r7, #32]
 80013e0:	f7ff fede 	bl	80011a0 <MqttEncode_Data>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	4413      	add	r3, r2
 80013ec:	623b      	str	r3, [r7, #32]
    }
    if (connect->username) {
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00a      	beq.n	800140c <MqttEncode_Connect+0x230>
        tx_payload += MqttEncode_String(tx_payload, connect->username);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	4619      	mov	r1, r3
 80013fc:	6a38      	ldr	r0, [r7, #32]
 80013fe:	f7ff fead 	bl	800115c <MqttEncode_String>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	4413      	add	r3, r2
 800140a:	623b      	str	r3, [r7, #32]
    }
    if (connect->password) {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00a      	beq.n	800142a <MqttEncode_Connect+0x24e>
        tx_payload += MqttEncode_String(tx_payload, connect->password);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4619      	mov	r1, r3
 800141a:	6a38      	ldr	r0, [r7, #32]
 800141c:	f7ff fe9e 	bl	800115c <MqttEncode_String>
 8001420:	4603      	mov	r3, r0
 8001422:	461a      	mov	r2, r3
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	4413      	add	r3, r2
 8001428:	623b      	str	r3, [r7, #32]
    }
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	4413      	add	r3, r2
}
 8001430:	4618      	mov	r0, r3
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	08002cd4 	.word	0x08002cd4

0800143c <MqttDecode_ConnectAck>:

int MqttDecode_ConnectAck(byte *rx_buf, int rx_buf_len,
    MqttConnectAck *connect_ack)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	; 0x30
 8001440:	af04      	add	r7, sp, #16
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <MqttDecode_ConnectAck+0x18>
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	dc02      	bgt.n	800145a <MqttDecode_ConnectAck+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001458:	e024      	b.n	80014a4 <MqttDecode_ConnectAck+0x68>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 800145a:	f107 0214 	add.w	r2, r7, #20
 800145e:	2300      	movs	r3, #0
 8001460:	9302      	str	r3, [sp, #8]
 8001462:	2300      	movs	r3, #0
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	2300      	movs	r3, #0
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2302      	movs	r3, #2
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f7ff fd3f 	bl	8000ef2 <MqttDecode_FixedHeader>
 8001474:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	2b00      	cmp	r3, #0
 800147a:	da01      	bge.n	8001480 <MqttDecode_ConnectAck+0x44>
        return header_len;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	e011      	b.n	80014a4 <MqttDecode_ConnectAck+0x68>
    }
    rx_payload = &rx_buf[header_len];
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	4413      	add	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (connect_ack) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <MqttDecode_ConnectAck+0x62>
        connect_ack->flags = rx_payload[0];
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	701a      	strb	r2, [r3, #0]
        connect_ack->return_code = rx_payload[1];
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	785a      	ldrb	r2, [r3, #1]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	705a      	strb	r2, [r3, #1]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	4413      	add	r3, r2
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <MqttDecode_Publish>:
    /* Return length of packet placed into tx_buf */
    return header_len + variable_len + payload_len;
}

int MqttDecode_Publish(byte *rx_buf, int rx_buf_len, MqttPublish *publish)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08e      	sub	sp, #56	; 0x38
 80014b0:	af04      	add	r7, sp, #16
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, variable_len, payload_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || publish == NULL) {
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <MqttDecode_Publish+0x1e>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	dd02      	ble.n	80014ca <MqttDecode_Publish+0x1e>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <MqttDecode_Publish+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ce:	e060      	b.n	8001592 <MqttDecode_Publish+0xe6>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3305      	adds	r3, #5
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	3206      	adds	r2, #6
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	3107      	adds	r1, #7
 80014dc:	f107 0014 	add.w	r0, r7, #20
 80014e0:	9102      	str	r1, [sp, #8]
 80014e2:	9201      	str	r2, [sp, #4]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2303      	movs	r3, #3
 80014e8:	4602      	mov	r2, r0
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff fd00 	bl	8000ef2 <MqttDecode_FixedHeader>
 80014f2:	61f8      	str	r0, [r7, #28]
        &remain_len, MQTT_PACKET_TYPE_PUBLISH, &publish->qos,
        &publish->retain, &publish->duplicate);
    if (header_len < 0) {
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	da01      	bge.n	80014fe <MqttDecode_Publish+0x52>
        return header_len;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	e049      	b.n	8001592 <MqttDecode_Publish+0xe6>
    }
    rx_payload = &rx_buf[header_len];
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	623b      	str	r3, [r7, #32]

    /* Decode variable header */
    variable_len = MqttDecode_String(rx_payload, &publish->topic_name,
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f103 0108 	add.w	r1, r3, #8
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	330c      	adds	r3, #12
 8001510:	461a      	mov	r2, r3
 8001512:	6a38      	ldr	r0, [r7, #32]
 8001514:	f7ff fdfd 	bl	8001112 <MqttDecode_String>
 8001518:	6278      	str	r0, [r7, #36]	; 0x24
        &publish->topic_name_len);
    rx_payload += variable_len;
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	6a3a      	ldr	r2, [r7, #32]
 800151e:	4413      	add	r3, r2
 8001520:	623b      	str	r3, [r7, #32]

    /* If QoS > 0 then get packet Id */
    if (publish->qos > MQTT_QOS_0) {
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	795b      	ldrb	r3, [r3, #5]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00c      	beq.n	8001544 <MqttDecode_Publish+0x98>
        variable_len += MqttDecode_Num(rx_payload, &publish->packet_id);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3302      	adds	r3, #2
 800152e:	4619      	mov	r1, r3
 8001530:	6a38      	ldr	r0, [r7, #32]
 8001532:	f7ff fdb7 	bl	80010a4 <MqttDecode_Num>
 8001536:	4602      	mov	r2, r0
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	4413      	add	r3, r2
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
        rx_payload += MQTT_DATA_LEN_SIZE;
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	3302      	adds	r3, #2
 8001542:	623b      	str	r3, [r7, #32]
    }

    /* Decode Payload */
    payload_len = remain_len - variable_len;
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	61bb      	str	r3, [r7, #24]
    publish->buffer = rx_payload;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a3a      	ldr	r2, [r7, #32]
 8001550:	615a      	str	r2, [r3, #20]
    publish->buffer_pos = 0;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	61da      	str	r2, [r3, #28]
    publish->total_len = payload_len;
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	611a      	str	r2, [r3, #16]

    /* Only return the length provided in rx_buf_len */
    if ((int)publish->buffer_len >
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	4619      	mov	r1, r3
        (rx_buf_len - (header_len + variable_len)))
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	4413      	add	r3, r2
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	1ad3      	subs	r3, r2, r3
    if ((int)publish->buffer_len >
 8001574:	4299      	cmp	r1, r3
 8001576:	dd07      	ble.n	8001588 <MqttDecode_Publish+0xdc>
    {
        publish->buffer_len = (rx_buf_len - (header_len + variable_len));
 8001578:	69fa      	ldr	r2, [r7, #28]
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	4413      	add	r3, r2
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	461a      	mov	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	61da      	str	r2, [r3, #28]
    }

    return header_len + variable_len + payload_len;
 8001588:	69fa      	ldr	r2, [r7, #28]
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	441a      	add	r2, r3
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4413      	add	r3, r2
}
 8001592:	4618      	mov	r0, r3
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <MqttEncode_PublishResp>:

int MqttEncode_PublishResp(byte* tx_buf, int tx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b08c      	sub	sp, #48	; 0x30
 800159e:	af04      	add	r7, sp, #16
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4613      	mov	r3, r2
 80015a8:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *tx_payload;
    MqttQoS qos;

    /* Validate required arguments */
    if (tx_buf == NULL || publish_resp == NULL) {
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <MqttEncode_PublishResp+0x1c>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <MqttEncode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ba:	e030      	b.n	800161e <MqttEncode_PublishResp+0x84>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 80015bc:	2302      	movs	r3, #2
 80015be:	61fb      	str	r3, [r7, #28]

    /* Determine Qos value */
    qos = (type == MQTT_PACKET_TYPE_PUBLISH_REL) ? MQTT_QOS_1 : MQTT_QOS_0;
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	bf0c      	ite	eq
 80015c6:	2301      	moveq	r3, #1
 80015c8:	2300      	movne	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	76fb      	strb	r3, [r7, #27]

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 80015ce:	79fa      	ldrb	r2, [r7, #7]
 80015d0:	2300      	movs	r3, #0
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	7efb      	ldrb	r3, [r7, #27]
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	4613      	mov	r3, r2
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f7ff fc3e 	bl	8000e64 <MqttEncode_FixedHeader>
 80015e8:	6178      	str	r0, [r7, #20]
        type, 0, qos, 0);
    if (header_len < 0) {
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da01      	bge.n	80015f4 <MqttEncode_PublishResp+0x5a>
        return header_len;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	e014      	b.n	800161e <MqttEncode_PublishResp+0x84>
    }
    tx_payload = &tx_buf[header_len];
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4413      	add	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], publish_resp->packet_id);
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	441a      	add	r2, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	4619      	mov	r1, r3
 8001608:	4610      	mov	r0, r2
 800160a:	f7ff fd6b 	bl	80010e4 <MqttEncode_Num>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4413      	add	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	4413      	add	r3, r2
}
 800161e:	4618      	mov	r0, r3
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <MqttDecode_PublishResp>:

int MqttDecode_PublishResp(byte* rx_buf, int rx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b08c      	sub	sp, #48	; 0x30
 800162a:	af04      	add	r7, sp, #16
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	4613      	mov	r3, r2
 8001634:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <MqttDecode_PublishResp+0x1c>
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	dc02      	bgt.n	8001648 <MqttDecode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001646:	e027      	b.n	8001698 <MqttDecode_PublishResp+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8001648:	79f9      	ldrb	r1, [r7, #7]
 800164a:	f107 0214 	add.w	r2, r7, #20
 800164e:	2300      	movs	r3, #0
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	2300      	movs	r3, #0
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	2300      	movs	r3, #0
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	460b      	mov	r3, r1
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f7ff fc47 	bl	8000ef2 <MqttDecode_FixedHeader>
 8001664:	61f8      	str	r0, [r7, #28]
        type, NULL, NULL, NULL);
    if (header_len < 0) {
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	2b00      	cmp	r3, #0
 800166a:	da01      	bge.n	8001670 <MqttDecode_PublishResp+0x4a>
        return header_len;
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	e013      	b.n	8001698 <MqttDecode_PublishResp+0x72>
    }
    rx_payload = &rx_buf[header_len];
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4413      	add	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (publish_resp) {
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d009      	beq.n	8001692 <MqttDecode_PublishResp+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &publish_resp->packet_id);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	69b8      	ldr	r0, [r7, #24]
 8001684:	f7ff fd0e 	bl	80010a4 <MqttDecode_Num>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	4413      	add	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	4413      	add	r3, r2
}
 8001698:	4618      	mov	r0, r3
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <MqttEncode_Subscribe>:

int MqttEncode_Subscribe(byte *tx_buf, int tx_buf_len,
    MqttSubscribe *subscribe)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	; 0x38
 80016a4:	af04      	add	r7, sp, #16
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, i;
    byte *tx_payload;
    MqttTopic *topic;

    /* Validate required arguments */
    if (tx_buf == NULL || subscribe == NULL) {
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <MqttEncode_Subscribe+0x18>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <MqttEncode_Subscribe+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016bc:	e069      	b.n	8001792 <MqttEncode_Subscribe+0xf2>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 80016be:	2302      	movs	r3, #2
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
 80016c6:	e015      	b.n	80016f4 <MqttEncode_Subscribe+0x54>
                                topic = &subscribe->topics[i];
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4413      	add	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        remain_len += (int)XSTRLEN(topic->topic_filter) + MQTT_DATA_LEN_SIZE;
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fd39 	bl	8000150 <strlen>
 80016de:	4603      	mov	r3, r0
 80016e0:	3302      	adds	r3, #2
 80016e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e4:	4413      	add	r3, r2
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len++; /* For QoS */
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3301      	adds	r3, #1
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	3301      	adds	r3, #1
 80016f2:	623b      	str	r3, [r7, #32]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dce4      	bgt.n	80016c8 <MqttEncode_Subscribe+0x28>
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 80016fe:	2300      	movs	r3, #0
 8001700:	9302      	str	r3, [sp, #8]
 8001702:	2301      	movs	r3, #1
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	2300      	movs	r3, #0
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	2308      	movs	r3, #8
 800170c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170e:	68b9      	ldr	r1, [r7, #8]
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f7ff fba7 	bl	8000e64 <MqttEncode_FixedHeader>
 8001716:	6178      	str	r0, [r7, #20]
        MQTT_PACKET_TYPE_SUBSCRIBE, 0, MQTT_QOS_1, 0);
    if (header_len < 0) {
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2b00      	cmp	r3, #0
 800171c:	da01      	bge.n	8001722 <MqttEncode_Subscribe+0x82>
        return header_len;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	e037      	b.n	8001792 <MqttEncode_Subscribe+0xf2>
    }
    tx_payload = &tx_buf[header_len];
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	61fb      	str	r3, [r7, #28]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], subscribe->packet_id);
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	441a      	add	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	885b      	ldrh	r3, [r3, #2]
 8001734:	4619      	mov	r1, r3
 8001736:	4610      	mov	r0, r2
 8001738:	f7ff fcd4 	bl	80010e4 <MqttEncode_Num>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4413      	add	r3, r2
 8001744:	61fb      	str	r3, [r7, #28]

    /* Encode payload */
    for (i = 0; i < subscribe->topic_count; i++) {
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
 800174a:	e01a      	b.n	8001782 <MqttEncode_Subscribe+0xe2>
        topic = &subscribe->topics[i];
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4413      	add	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        tx_payload += MqttEncode_String(tx_payload, topic->topic_filter);
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	69f8      	ldr	r0, [r7, #28]
 8001760:	f7ff fcfc 	bl	800115c <MqttEncode_String>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	4413      	add	r3, r2
 800176c:	61fb      	str	r3, [r7, #28]
        *tx_payload = topic->qos;
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	791a      	ldrb	r2, [r3, #4]
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	701a      	strb	r2, [r3, #0]
        tx_payload++;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3301      	adds	r3, #1
 800177a:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < subscribe->topic_count; i++) {
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	3301      	adds	r3, #1
 8001780:	623b      	str	r3, [r7, #32]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	429a      	cmp	r2, r3
 800178a:	dcdf      	bgt.n	800174c <MqttEncode_Subscribe+0xac>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	4413      	add	r3, r2
}
 8001792:	4618      	mov	r0, r3
 8001794:	3728      	adds	r7, #40	; 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <MqttDecode_SubscribeAck>:

int MqttDecode_SubscribeAck(byte* rx_buf, int rx_buf_len,
    MqttSubscribeAck *subscribe_ack)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b08c      	sub	sp, #48	; 0x30
 800179e:	af04      	add	r7, sp, #16
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || subscribe_ack == NULL) {
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <MqttDecode_SubscribeAck+0x1e>
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	dd02      	ble.n	80017b8 <MqttDecode_SubscribeAck+0x1e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <MqttDecode_SubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017bc:	e029      	b.n	8001812 <MqttDecode_SubscribeAck+0x78>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80017be:	f107 0214 	add.w	r2, r7, #20
 80017c2:	2300      	movs	r3, #0
 80017c4:	9302      	str	r3, [sp, #8]
 80017c6:	2300      	movs	r3, #0
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	2300      	movs	r3, #0
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2309      	movs	r3, #9
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f7ff fb8d 	bl	8000ef2 <MqttDecode_FixedHeader>
 80017d8:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_SUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	da01      	bge.n	80017e4 <MqttDecode_SubscribeAck+0x4a>
        return header_len;
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	e016      	b.n	8001812 <MqttDecode_SubscribeAck+0x78>
    }
    rx_payload = &rx_buf[header_len];
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4413      	add	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (subscribe_ack) {
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00c      	beq.n	800180c <MqttDecode_SubscribeAck+0x72>
        rx_payload += MqttDecode_Num(rx_payload, &subscribe_ack->packet_id);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4619      	mov	r1, r3
 80017f6:	69b8      	ldr	r0, [r7, #24]
 80017f8:	f7ff fc54 	bl	80010a4 <MqttDecode_Num>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	4413      	add	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        subscribe_ack->return_codes = rx_payload; /* List of return codes */
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	605a      	str	r2, [r3, #4]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
}
 8001812:	4618      	mov	r0, r3
 8001814:	3720      	adds	r7, #32
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <MqttDecode_UnsubscribeAck>:
    return header_len + remain_len;
}

int MqttDecode_UnsubscribeAck(byte *rx_buf, int rx_buf_len,
    MqttUnsubscribeAck *unsubscribe_ack)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b08c      	sub	sp, #48	; 0x30
 800181e:	af04      	add	r7, sp, #16
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || unsubscribe_ack == NULL) {
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <MqttDecode_UnsubscribeAck+0x1e>
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	dd02      	ble.n	8001838 <MqttDecode_UnsubscribeAck+0x1e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <MqttDecode_UnsubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800183c:	e026      	b.n	800188c <MqttDecode_UnsubscribeAck+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 800183e:	f107 0214 	add.w	r2, r7, #20
 8001842:	2300      	movs	r3, #0
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	2300      	movs	r3, #0
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	2300      	movs	r3, #0
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	230b      	movs	r3, #11
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f7ff fb4d 	bl	8000ef2 <MqttDecode_FixedHeader>
 8001858:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	2b00      	cmp	r3, #0
 800185e:	da01      	bge.n	8001864 <MqttDecode_UnsubscribeAck+0x4a>
        return header_len;
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	e013      	b.n	800188c <MqttDecode_UnsubscribeAck+0x72>
    }
    rx_payload = &rx_buf[header_len];
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4413      	add	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (unsubscribe_ack) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d009      	beq.n	8001886 <MqttDecode_UnsubscribeAck+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &unsubscribe_ack->packet_id);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4619      	mov	r1, r3
 8001876:	69b8      	ldr	r0, [r7, #24]
 8001878:	f7ff fc14 	bl	80010a4 <MqttDecode_Num>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	4413      	add	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	4413      	add	r3, r2
}
 800188c:	4618      	mov	r0, r3
 800188e:	3720      	adds	r7, #32
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <MqttDecode_Ping>:
    /* Return total length of packet */
    return header_len + remain_len;
}

int MqttDecode_Ping(byte *rx_buf, int rx_buf_len)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af04      	add	r7, sp, #16
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
    int header_len, remain_len;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <MqttDecode_Ping+0x16>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	dc02      	bgt.n	80018b0 <MqttDecode_Ping+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ae:	e015      	b.n	80018dc <MqttDecode_Ping+0x48>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80018b0:	f107 0208 	add.w	r2, r7, #8
 80018b4:	2300      	movs	r3, #0
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	2300      	movs	r3, #0
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	2300      	movs	r3, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	230d      	movs	r3, #13
 80018c2:	6839      	ldr	r1, [r7, #0]
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff fb14 	bl	8000ef2 <MqttDecode_FixedHeader>
 80018ca:	60f8      	str	r0, [r7, #12]
        MQTT_PACKET_TYPE_PING_RESP, NULL, NULL, NULL);
    if (header_len < 0) {
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	da01      	bge.n	80018d6 <MqttDecode_Ping+0x42>
        return header_len;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	e002      	b.n	80018dc <MqttDecode_Ping+0x48>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <MqttPacket_Write>:
    return header_len;
}


int MqttPacket_Write(MqttClient *client, byte* tx_buf, int tx_buf_len)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
    int rc;
    rc = MqttSocket_Write(client, tx_buf, tx_buf_len, client->cmd_timeout_ms);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f8e9 	bl	8001ad0 <MqttSocket_Write>
 80018fe:	6178      	str	r0, [r7, #20]
    return rc;
 8001900:	697b      	ldr	r3, [r7, #20]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <MqttPacket_Read>:

/* Read return code is length when > 0 */
int MqttPacket_Read(MqttClient *client, byte* rx_buf, int rx_buf_len,
    int timeout_ms)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b088      	sub	sp, #32
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	603b      	str	r3, [r7, #0]
    int rc, len, remain_read = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
    MqttPacket* header = (MqttPacket*)rx_buf;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	61bb      	str	r3, [r7, #24]

    switch (client->packet.stat)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	7f1b      	ldrb	r3, [r3, #28]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d01e      	beq.n	8001966 <MqttPacket_Read+0x5c>
 8001928:	2b02      	cmp	r3, #2
 800192a:	d057      	beq.n	80019dc <MqttPacket_Read+0xd2>
 800192c:	2b00      	cmp	r3, #0
 800192e:	d17e      	bne.n	8001a2e <MqttPacket_Read+0x124>
    {
        case MQTT_PK_BEGIN:
        {
            client->packet.header_len = 2;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2202      	movs	r2, #2
 8001934:	621a      	str	r2, [r3, #32]
            client->packet.remain_len = 0;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	625a      	str	r2, [r3, #36]	; 0x24

            /* Read fix header portion */
            rc = MqttSocket_Read(client, rx_buf, client->packet.header_len, timeout_ms);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a1a      	ldr	r2, [r3, #32]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 f92a 	bl	8001b9e <MqttSocket_Read>
 800194a:	6178      	str	r0, [r7, #20]
            if (rc < 0) {
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2b00      	cmp	r3, #0
 8001950:	da01      	bge.n	8001956 <MqttPacket_Read+0x4c>
                return rc;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	e072      	b.n	8001a3c <MqttPacket_Read+0x132>
            }
            else if (rc != client->packet.header_len) {
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a1a      	ldr	r2, [r3, #32]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	429a      	cmp	r2, r3
 800195e:	d002      	beq.n	8001966 <MqttPacket_Read+0x5c>
                return MQTT_CODE_ERROR_NETWORK;
 8001960:	f06f 0307 	mvn.w	r3, #7
 8001964:	e06a      	b.n	8001a3c <MqttPacket_Read+0x132>
            FALL_THROUGH;
        }

        case MQTT_PK_READ_HEAD:
        {
            client->packet.stat = MQTT_PK_READ_HEAD;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2201      	movs	r2, #1
 800196a:	771a      	strb	r2, [r3, #28]

            do {
                /* Try and decode remaining length */
                rc = MqttDecode_RemainLen(header, client->packet.header_len, &client->packet.remain_len);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a19      	ldr	r1, [r3, #32]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3324      	adds	r3, #36	; 0x24
 8001974:	461a      	mov	r2, r3
 8001976:	69b8      	ldr	r0, [r7, #24]
 8001978:	f7ff fb09 	bl	8000f8e <MqttDecode_RemainLen>
 800197c:	6178      	str	r0, [r7, #20]
                if (rc < 0) { /* Indicates error */
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2b00      	cmp	r3, #0
 8001982:	da01      	bge.n	8001988 <MqttPacket_Read+0x7e>
                    return rc;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	e059      	b.n	8001a3c <MqttPacket_Read+0x132>
                }
                /* Indicates decode success and rc is len of header */
                else if (rc > 0) {
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b00      	cmp	r3, #0
 800198c:	dd03      	ble.n	8001996 <MqttPacket_Read+0x8c>
                    client->packet.header_len = rc;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	621a      	str	r2, [r3, #32]
                    break; /* exit while */
 8001994:	e022      	b.n	80019dc <MqttPacket_Read+0xd2>
                }

                /* Read next byte and try decode again */
                len = 1;
 8001996:	2301      	movs	r3, #1
 8001998:	613b      	str	r3, [r7, #16]
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len], len, timeout_ms);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	461a      	mov	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	1899      	adds	r1, r3, r2
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 f8f8 	bl	8001b9e <MqttSocket_Read>
 80019ae:	6178      	str	r0, [r7, #20]
                if (rc < 0) {
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	da01      	bge.n	80019ba <MqttPacket_Read+0xb0>
                    return rc;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	e040      	b.n	8001a3c <MqttPacket_Read+0x132>
                }
                else if (rc != len) {
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d002      	beq.n	80019c8 <MqttPacket_Read+0xbe>
                    return MQTT_CODE_ERROR_NETWORK;
 80019c2:	f06f 0307 	mvn.w	r3, #7
 80019c6:	e039      	b.n	8001a3c <MqttPacket_Read+0x132>
                }
                client->packet.header_len += len;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a1a      	ldr	r2, [r3, #32]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	441a      	add	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	621a      	str	r2, [r3, #32]

            } while (client->packet.header_len < MQTT_PACKET_MAX_SIZE);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	2b04      	cmp	r3, #4
 80019da:	ddc7      	ble.n	800196c <MqttPacket_Read+0x62>
            FALL_THROUGH;
        }

        case MQTT_PK_READ:
        {
            client->packet.stat = MQTT_PK_READ;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2202      	movs	r2, #2
 80019e0:	771a      	strb	r2, [r3, #28]

            /* Make sure it does not overflow rx_buf */
            if (client->packet.remain_len > (rx_buf_len - client->packet.header_len)) {
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	1acb      	subs	r3, r1, r3
 80019ee:	429a      	cmp	r2, r3
 80019f0:	dd05      	ble.n	80019fe <MqttPacket_Read+0xf4>
                client->packet.remain_len = rx_buf_len - client->packet.header_len;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	1ad2      	subs	r2, r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
            }

            /* Read remaining */
            if (client->packet.remain_len > 0) {
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dd12      	ble.n	8001a2c <MqttPacket_Read+0x122>
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len],
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	1899      	adds	r1, r3, r2
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 f8c1 	bl	8001b9e <MqttSocket_Read>
 8001a1c:	6178      	str	r0, [r7, #20]
                    client->packet.remain_len, timeout_ms);
                if (rc <= 0) {
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	dc01      	bgt.n	8001a28 <MqttPacket_Read+0x11e>
                    return rc;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	e009      	b.n	8001a3c <MqttPacket_Read+0x132>
                }
                remain_read = rc;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	61fb      	str	r3, [r7, #28]
            }

            break;
 8001a2c:	bf00      	nop
        }
    } /* switch (client->packet.stat) */

    /* reset state */
    client->packet.stat = MQTT_PK_BEGIN;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	771a      	strb	r2, [r3, #28]

    /* Return read length */
    return client->packet.header_len + remain_read;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a1a      	ldr	r2, [r3, #32]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	4413      	add	r3, r2
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <MqttSocket_Init>:
#endif


/* Public Functions */
int MqttSocket_Init(MqttClient *client, MqttNet *net)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
    int rc = MQTT_CODE_ERROR_BAD_ARG;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a52:	60fb      	str	r3, [r7, #12]
    if (client) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01d      	beq.n	8001a96 <MqttSocket_Init+0x52>
        client->net = net;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	619a      	str	r2, [r3, #24]
        client->flags &= ~(MQTT_CLIENT_FLAG_IS_CONNECTED |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 0203 	bic.w	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	601a      	str	r2, [r3, #0]
        client->tls.ssl = NULL;
        client->tls.timeout_ms = client->cmd_timeout_ms;
    #endif

        /* Validate callbacks are not null! */
        if (net && net->connect && net->read && net->write && net->disconnect) {
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d011      	beq.n	8001a96 <MqttSocket_Init+0x52>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00d      	beq.n	8001a96 <MqttSocket_Init+0x52>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <MqttSocket_Init+0x52>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <MqttSocket_Init+0x52>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MqttSocket_Init+0x52>
            rc = MQTT_CODE_SUCCESS;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
        }
    }
    return rc;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <MqttSocket_WriteDo>:

static int MqttSocket_WriteDo(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 8001aa2:	b590      	push	{r4, r7, lr}
 8001aa4:	b087      	sub	sp, #28
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->write(client->net->context, buf, buf_len,
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	68dc      	ldr	r4, [r3, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	47a0      	blx	r4
 8001ac4:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Write: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 8001ac6:	697b      	ldr	r3, [r7, #20]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd90      	pop	{r4, r7, pc}

08001ad0 <MqttSocket_Write>:

int MqttSocket_Write(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->write == NULL ||
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00e      	beq.n	8001b02 <MqttSocket_Write+0x32>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00a      	beq.n	8001b02 <MqttSocket_Write+0x32>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <MqttSocket_Write+0x32>
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <MqttSocket_Write+0x32>
        buf == NULL || buf_len <= 0) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	dc02      	bgt.n	8001b08 <MqttSocket_Write+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b06:	e02f      	b.n	8001b68 <MqttSocket_Write+0x98>
    }

    /* check for buffer position overflow */
    if (client->write.pos >= buf_len) {
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	db02      	blt.n	8001b18 <MqttSocket_Write+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8001b12:	f06f 0301 	mvn.w	r3, #1
 8001b16:	e027      	b.n	8001b68 <MqttSocket_Write+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1899      	adds	r1, r3, r2
            buf_len - client->write.pos, timeout_ms);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	1ad2      	subs	r2, r2, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f7ff ffb8 	bl	8001aa2 <MqttSocket_WriteDo>
 8001b32:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	dd0b      	ble.n	8001b52 <MqttSocket_Write+0x82>
            break;
        }
        client->write.pos += rc;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	441a      	add	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	635a      	str	r2, [r3, #52]	; 0x34
    } while (client->write.pos < buf_len);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	dbe3      	blt.n	8001b18 <MqttSocket_Write+0x48>
 8001b50:	e000      	b.n	8001b54 <MqttSocket_Write+0x84>
            break;
 8001b52:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	dd05      	ble.n	8001b66 <MqttSocket_Write+0x96>
        /* return length write and reset position */
        rc = client->write.pos;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5e:	617b      	str	r3, [r7, #20]
        client->write.pos = 0;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return rc;
 8001b66:	697b      	ldr	r3, [r7, #20]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <MqttSocket_ReadDo>:

static int MqttSocket_ReadDo(MqttClient *client, byte* buf, int buf_len,
    int timeout_ms)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->read(client->net->context, buf, buf_len, timeout_ms);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	689c      	ldr	r4, [r3, #8]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	68b9      	ldr	r1, [r7, #8]
 8001b90:	47a0      	blx	r4
 8001b92:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Read: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 8001b94:	697b      	ldr	r3, [r7, #20]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd90      	pop	{r4, r7, pc}

08001b9e <MqttSocket_Read>:

int MqttSocket_Read(MqttClient *client, byte* buf, int buf_len, int timeout_ms)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->read == NULL ||
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00e      	beq.n	8001bd0 <MqttSocket_Read+0x32>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00a      	beq.n	8001bd0 <MqttSocket_Read+0x32>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <MqttSocket_Read+0x32>
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <MqttSocket_Read+0x32>
        buf == NULL || buf_len <= 0) {
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	dc02      	bgt.n	8001bd6 <MqttSocket_Read+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd4:	e02f      	b.n	8001c36 <MqttSocket_Read+0x98>
    }

    /* check for buffer position overflow */
    if (client->read.pos >= buf_len) {
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	db02      	blt.n	8001be6 <MqttSocket_Read+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8001be0:	f06f 0301 	mvn.w	r3, #1
 8001be4:	e027      	b.n	8001c36 <MqttSocket_Read+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	461a      	mov	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	1899      	adds	r1, r3, r2
            buf_len - client->read.pos, timeout_ms);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	1ad2      	subs	r2, r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f7ff ffb8 	bl	8001b70 <MqttSocket_ReadDo>
 8001c00:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	dd0b      	ble.n	8001c20 <MqttSocket_Read+0x82>
            break;
        }
        client->read.pos += rc;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	441a      	add	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
    } while (client->read.pos < buf_len);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dbe3      	blt.n	8001be6 <MqttSocket_Read+0x48>
 8001c1e:	e000      	b.n	8001c22 <MqttSocket_Read+0x84>
            break;
 8001c20:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	dd05      	ble.n	8001c34 <MqttSocket_Read+0x96>
        /* return length read and reset position */
        rc = client->read.pos;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	617b      	str	r3, [r7, #20]
        client->read.pos = 0;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    return rc;
 8001c34:	697b      	ldr	r3, [r7, #20]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <NVIC_EnableIRQ+0x2c>)
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	79fa      	ldrb	r2, [r7, #7]
 8001c54:	f002 021f 	and.w	r2, r2, #31
 8001c58:	2001      	movs	r0, #1
 8001c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <EnableGpioClk>:
	 		 #define PIN_CNF_PUSH_PULL		(0x2)
	 		 #define PIN_MODE_OUT			(0x1)



	 		 void EnableGpioClk (GPIO_TypeDef * gpioPort){
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	 		 	if (gpioPort == GPIOA){
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a17      	ldr	r2, [pc, #92]	; (8001cd8 <EnableGpioClk+0x68>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d106      	bne.n	8001c8e <EnableGpioClk+0x1e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001c80:	4a16      	ldr	r2, [pc, #88]	; (8001cdc <EnableGpioClk+0x6c>)
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <EnableGpioClk+0x6c>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6193      	str	r3, [r2, #24]
	 		 	} else if (gpioPort == GPIOC){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
	 		 	} else if (gpioPort == GPIOD){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
	 		 	}
	 		 }
 8001c8c:	e01f      	b.n	8001cce <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOB){
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a13      	ldr	r2, [pc, #76]	; (8001ce0 <EnableGpioClk+0x70>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d106      	bne.n	8001ca4 <EnableGpioClk+0x34>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8001c96:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <EnableGpioClk+0x6c>)
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <EnableGpioClk+0x6c>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	6193      	str	r3, [r2, #24]
	 		 }
 8001ca2:	e014      	b.n	8001cce <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOC){
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <EnableGpioClk+0x74>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d106      	bne.n	8001cba <EnableGpioClk+0x4a>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8001cac:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <EnableGpioClk+0x6c>)
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <EnableGpioClk+0x6c>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f043 0310 	orr.w	r3, r3, #16
 8001cb6:	6193      	str	r3, [r2, #24]
	 		 }
 8001cb8:	e009      	b.n	8001cce <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOD){
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <EnableGpioClk+0x78>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d105      	bne.n	8001cce <EnableGpioClk+0x5e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 8001cc2:	4a06      	ldr	r2, [pc, #24]	; (8001cdc <EnableGpioClk+0x6c>)
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <EnableGpioClk+0x6c>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f043 0320 	orr.w	r3, r3, #32
 8001ccc:	6193      	str	r3, [r2, #24]
	 		 }
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	40010800 	.word	0x40010800
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010c00 	.word	0x40010c00
 8001ce4:	40011000 	.word	0x40011000
 8001ce8:	40011400 	.word	0x40011400

08001cec <SetGpioAsInFloating>:
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 	}
	 		 }


	 		 void SetGpioAsInFloating (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	2b07      	cmp	r3, #7
 8001cfc:	d81d      	bhi.n	8001d3a <SetGpioAsInFloating+0x4e>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<pinNb);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	2103      	movs	r1, #3
 8001d06:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0a:	43d2      	mvns	r2, r2
 8001d0c:	401a      	ands	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<pinNb);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	78fa      	ldrb	r2, [r7, #3]
 8001d18:	2103      	movs	r1, #3
 8001d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1e:	43d2      	mvns	r2, r2
 8001d20:	401a      	ands	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_FLOAT<<pinNb);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	601a      	str	r2, [r3, #0]
	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
	 		 	}
	 		 }
 8001d38:	e023      	b.n	8001d82 <SetGpioAsInFloating+0x96>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	3a08      	subs	r2, #8
 8001d42:	0092      	lsls	r2, r2, #2
 8001d44:	2103      	movs	r1, #3
 8001d46:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4a:	43d2      	mvns	r2, r2
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	78fa      	ldrb	r2, [r7, #3]
 8001d58:	3a08      	subs	r2, #8
 8001d5a:	0092      	lsls	r2, r2, #2
 8001d5c:	2103      	movs	r1, #3
 8001d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d62:	43d2      	mvns	r2, r2
 8001d64:	401a      	ands	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	78fa      	ldrb	r2, [r7, #3]
 8001d70:	3a08      	subs	r2, #8
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	3202      	adds	r2, #2
 8001d76:	2101      	movs	r1, #1
 8001d78:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	605a      	str	r2, [r3, #4]
	 		 }
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <SetGpioAsInPullUp>:




	 		 void SetGpioAsInPullUp (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	2b07      	cmp	r3, #7
 8001d9c:	d82b      	bhi.n	8001df6 <SetGpioAsInPullUp+0x6a>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<(pinNb*4));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	78fa      	ldrb	r2, [r7, #3]
 8001da4:	0092      	lsls	r2, r2, #2
 8001da6:	2103      	movs	r1, #3
 8001da8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dac:	43d2      	mvns	r2, r2
 8001dae:	401a      	ands	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<((pinNb*4)+2));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	0092      	lsls	r2, r2, #2
 8001dbc:	3202      	adds	r2, #2
 8001dbe:	2103      	movs	r1, #3
 8001dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc4:	43d2      	mvns	r2, r2
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_PUSH_PULL<<((pinNb*4)+2));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	78fa      	ldrb	r2, [r7, #3]
 8001dd2:	0092      	lsls	r2, r2, #2
 8001dd4:	3202      	adds	r2, #2
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->ODR |= (1<<pinNb);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	78fa      	ldrb	r2, [r7, #3]
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f202 	lsl.w	r2, r1, r2
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	60da      	str	r2, [r3, #12]
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<((pinNb-8)*4)+2);
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
	 		 		gpioPort->ODR |=  (1<<pinNb);
	 		 	}
	 		 }
 8001df4:	e02d      	b.n	8001e52 <SetGpioAsInPullUp+0xc6>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	3a08      	subs	r2, #8
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	2103      	movs	r1, #3
 8001e02:	fa01 f202 	lsl.w	r2, r1, r2
 8001e06:	43d2      	mvns	r2, r2
 8001e08:	401a      	ands	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<((pinNb-8)*4)+2);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	78fa      	ldrb	r2, [r7, #3]
 8001e14:	3a08      	subs	r2, #8
 8001e16:	0092      	lsls	r2, r2, #2
 8001e18:	3202      	adds	r2, #2
 8001e1a:	2103      	movs	r1, #3
 8001e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e20:	43d2      	mvns	r2, r2
 8001e22:	401a      	ands	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	78fa      	ldrb	r2, [r7, #3]
 8001e2e:	3a08      	subs	r2, #8
 8001e30:	0092      	lsls	r2, r2, #2
 8001e32:	3202      	adds	r2, #2
 8001e34:	2102      	movs	r1, #2
 8001e36:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->ODR |=  (1<<pinNb);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	60da      	str	r2, [r3, #12]
	 		 }
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <SetGpioAsOutAltPushPUll>:




	 		 void SetGpioAsOutAltPushPUll (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	2b07      	cmp	r3, #7
 8001e6c:	d92f      	bls.n	8001ece <SetGpioAsOutAltPushPUll+0x72>
	 		 //
	 		 //		gpioPort->CRL |= (PIN_MODE_OUT<<pinNb);
	 		 //		gpioPort->CRL &= ~(PIN_CNF_PUSH_PULL<<pinNb);

	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	3a08      	subs	r2, #8
 8001e76:	0092      	lsls	r2, r2, #2
 8001e78:	2103      	movs	r1, #3
 8001e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7e:	43d2      	mvns	r2, r2
 8001e80:	401a      	ands	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	78fa      	ldrb	r2, [r7, #3]
 8001e8c:	3a08      	subs	r2, #8
 8001e8e:	0092      	lsls	r2, r2, #2
 8001e90:	3202      	adds	r2, #2
 8001e92:	2103      	movs	r1, #3
 8001e94:	fa01 f202 	lsl.w	r2, r1, r2
 8001e98:	43d2      	mvns	r2, r2
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	605a      	str	r2, [r3, #4]

	 		 		gpioPort->CRH |= (PIN_MODE_OUT<<(pinNb-8)*4);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	78fa      	ldrb	r2, [r7, #3]
 8001ea6:	3a08      	subs	r2, #8
 8001ea8:	0092      	lsls	r2, r2, #2
 8001eaa:	2101      	movs	r1, #1
 8001eac:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	3a08      	subs	r2, #8
 8001ebe:	0092      	lsls	r2, r2, #2
 8001ec0:	3202      	adds	r2, #2
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	605a      	str	r2, [r3, #4]
	 		 	}
	 		 }
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <EnableExti>:
	 		 	return (gpioPort->IDR & (1<<pinNb));
	 		 }



	 		 void EnableExti(GPIO_TypeDef * gpioPort, uint8_t pinNb, bool rise, bool fall){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	4608      	mov	r0, r1
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	70fb      	strb	r3, [r7, #3]
 8001eea:	460b      	mov	r3, r1
 8001eec:	70bb      	strb	r3, [r7, #2]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	707b      	strb	r3, [r7, #1]
	 		 	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8001ef2:	4a1a      	ldr	r2, [pc, #104]	; (8001f5c <EnableExti+0x84>)
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <EnableExti+0x84>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6193      	str	r3, [r2, #24]
	 		 	AFIO->EXTICR[1] |= AFIO_EXTICR2_EXTI5_PB;
 8001efe:	4a18      	ldr	r2, [pc, #96]	; (8001f60 <EnableExti+0x88>)
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <EnableExti+0x88>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f043 0310 	orr.w	r3, r3, #16
 8001f08:	60d3      	str	r3, [r2, #12]
	 		 	EXTI->IMR  |= (1<<pinNb);
 8001f0a:	4916      	ldr	r1, [pc, #88]	; (8001f64 <EnableExti+0x8c>)
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <EnableExti+0x8c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	2001      	movs	r0, #1
 8001f14:	fa00 f202 	lsl.w	r2, r0, r2
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
	 		 	if (rise){
 8001f1c:	78bb      	ldrb	r3, [r7, #2]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <EnableExti+0x5c>
	 		 		EXTI->RTSR |= (1<<pinNb);
 8001f22:	4910      	ldr	r1, [pc, #64]	; (8001f64 <EnableExti+0x8c>)
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <EnableExti+0x8c>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	fa00 f202 	lsl.w	r2, r0, r2
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
	 		 	}
	 		 	if (fall){
 8001f34:	787b      	ldrb	r3, [r7, #1]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d008      	beq.n	8001f4c <EnableExti+0x74>
	 		 		EXTI->FTSR |= (1<<pinNb);
 8001f3a:	490a      	ldr	r1, [pc, #40]	; (8001f64 <EnableExti+0x8c>)
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <EnableExti+0x8c>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	78fa      	ldrb	r2, [r7, #3]
 8001f42:	2001      	movs	r0, #1
 8001f44:	fa00 f202 	lsl.w	r2, r0, r2
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60cb      	str	r3, [r1, #12]
	 		 		//SetGpioAsInPullUp(GPIOB, 5);
	 		 	}
	 		 	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f4c:	2017      	movs	r0, #23
 8001f4e:	f7ff fe77 	bl	8001c40 <NVIC_EnableIRQ>


	 		 }
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010000 	.word	0x40010000
 8001f64:	40010400 	.word	0x40010400

08001f68 <_delay_ms>:




	 		 void _delay_ms(int n) {
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

	 		 	int i, j;
	 		 	j= n*1000;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	60bb      	str	r3, [r7, #8]
	 		 	while(j--) {
 8001f7c:	e007      	b.n	8001f8e <_delay_ms+0x26>
	 		 		i=2;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	60fb      	str	r3, [r7, #12]
	 		 		while(i--);
 8001f82:	bf00      	nop
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1e5a      	subs	r2, r3, #1
 8001f88:	60fa      	str	r2, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1fa      	bne.n	8001f84 <_delay_ms+0x1c>
	 		 	while(j--) {
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1e5a      	subs	r2, r3, #1
 8001f92:	60ba      	str	r2, [r7, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f2      	bne.n	8001f7e <_delay_ms+0x16>
	 		 	}
	 		 }
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <Rfm12bInit>:
/* SPI CS LOW and High should be declared in platform layer file
#define NSEL_RFM12_LOW
#define NSEL_RFM12_HIGH
*/

void Rfm12bInit() {
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  Rfm12bSpiInit();
 8001fa6:	f000 f9a5 	bl	80022f4 <Rfm12bSpiInit>
  Rfm12bWriteCmd(0x0000);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f000 fa0e 	bl	80023cc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x80E7); //EL,EF,868band,12.0pF
 8001fb0:	f248 00e7 	movw	r0, #32999	; 0x80e7
 8001fb4:	f000 fa0a 	bl	80023cc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x8208); //no tx/rx
 8001fb8:	f248 2008 	movw	r0, #33288	; 0x8208
 8001fbc:	f000 fa06 	bl	80023cc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xA640); //frequency select
 8001fc0:	f24a 6040 	movw	r0, #42560	; 0xa640
 8001fc4:	f000 fa02 	bl	80023cc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC648); //4,8kbps
 8001fc8:	f24c 6048 	movw	r0, #50760	; 0xc648
 8001fcc:	f000 f9fe 	bl	80023cc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x94A0); //VDI,FAST,134kHz,0dBm,-103dBm
 8001fd0:	f249 40a0 	movw	r0, #38048	; 0x94a0
 8001fd4:	f000 f9fa 	bl	80023cc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC2AC); //AL,!ml,DIG,DQD4
 8001fd8:	f24c 20ac 	movw	r0, #49836	; 0xc2ac
 8001fdc:	f000 f9f6 	bl	80023cc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCA81); //FIFO8,SYNC,!ff,DR
 8001fe0:	f64c 2081 	movw	r0, #51841	; 0xca81
 8001fe4:	f000 f9f2 	bl	80023cc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCED4); //SYNC=2DD4G
 8001fe8:	f64c 60d4 	movw	r0, #52948	; 0xced4
 8001fec:	f000 f9ee 	bl	80023cc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC483); //@PWR,NO RSTRIC,!st,!fi,OE,EN
 8001ff0:	f24c 4083 	movw	r0, #50307	; 0xc483
 8001ff4:	f000 f9ea 	bl	80023cc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x9850); //!mp,90kHz,MAX OUT
 8001ff8:	f649 0050 	movw	r0, #38992	; 0x9850
 8001ffc:	f000 f9e6 	bl	80023cc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCC17); //OB1COB0, LPX,IddyCDDITCBW0
 8002000:	f64c 4017 	movw	r0, #52247	; 0xcc17
 8002004:	f000 f9e2 	bl	80023cc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xE000); //NOT USE
 8002008:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 800200c:	f000 f9de 	bl	80023cc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC800); //NOT USE
 8002010:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 8002014:	f000 f9da 	bl	80023cc <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC040); //1.66MHz,2.2V
 8002018:	f24c 0040 	movw	r0, #49216	; 0xc040
 800201c:	f000 f9d6 	bl	80023cc <Rfm12bWriteCmd>
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <Rrm12bObjInit>:

void Rrm12bObjInit (volatile rfm12bObj_t * rfm12bObj){
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	memset(rfm12bObj, 0, sizeof(rfm12bObj_t));
 800202c:	f240 3207 	movw	r2, #775	; 0x307
 8002030:	2100      	movs	r1, #0
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fe39 	bl	8002caa <memset>
	rfm12bObj->state = receive;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <rfSend>:




static void rfSend(uint8_t data)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
	uint16_t temp=0xB800;
 8002052:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8002056:	81fb      	strh	r3, [r7, #14]
	uint16_t status=0x0000;
 8002058:	2300      	movs	r3, #0
 800205a:	81bb      	strh	r3, [r7, #12]
	temp|=data;
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	b29a      	uxth	r2, r3
 8002060:	89fb      	ldrh	r3, [r7, #14]
 8002062:	4313      	orrs	r3, r2
 8002064:	81fb      	strh	r3, [r7, #14]

	if (  !status )
 8002066:	89bb      	ldrh	r3, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10a      	bne.n	8002082 <rfSend+0x3a>
	{
		//status = RFM12B_RDSTATUS();
		status = Rfm12bWriteCmd(0x0000);
 800206c:	2000      	movs	r0, #0
 800206e:	f000 f9ad 	bl	80023cc <Rfm12bWriteCmd>
 8002072:	4603      	mov	r3, r0
 8002074:	81bb      	strh	r3, [r7, #12]
		status = status & 0x8000;
 8002076:	89bb      	ldrh	r3, [r7, #12]
 8002078:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800207c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002080:	81bb      	strh	r3, [r7, #12]
	}

	Rfm12bWriteCmd(temp);
 8002082:	89fb      	ldrh	r3, [r7, #14]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 f9a1 	bl	80023cc <Rfm12bWriteCmd>
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <Rfm12bStartSending>:

//void Rfm12bClearBuff (rfm12bBuff_t * rfm12bBuff){
//	memset(rfm12bBuff, 0, sizeof (rfm12bBuff_t));
//}

void Rfm12bStartSending (volatile rfm12bObj_t * rfm12b, uint8_t *data, uint8_t dataNb){
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	4613      	mov	r3, r2
 800209e:	71fb      	strb	r3, [r7, #7]

	rfm12b->txBuff.data[0] = 0xAA;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	22aa      	movs	r2, #170	; 0xaa
 80020a4:	701a      	strb	r2, [r3, #0]
	rfm12b->txBuff.data[1] = 0x2D;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	222d      	movs	r2, #45	; 0x2d
 80020aa:	705a      	strb	r2, [r3, #1]
	rfm12b->txBuff.data[2] = 0xD4;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	22d4      	movs	r2, #212	; 0xd4
 80020b0:	709a      	strb	r2, [r3, #2]
	rfm12b->txBuff.data[3] = dataNb;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	79fa      	ldrb	r2, [r7, #7]
 80020b6:	70da      	strb	r2, [r3, #3]
	memcpy((void*)&rfm12b->txBuff.data[4], data, dataNb);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3304      	adds	r3, #4
 80020bc:	79fa      	ldrb	r2, [r7, #7]
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fde7 	bl	8002c94 <memcpy>
	rfm12b->txBuff.pos =0;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	rfm12b->txBuff.dataNb = dataNb + RFM12_PREMBLE_LEN;
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	3305      	adds	r3, #5
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
    rfm12bSwitchTx();
 80020da:	f000 f903 	bl	80022e4 <rfm12bSwitchTx>
    rfm12b->state = transmit;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
	rfSend(0xAA);
 80020e6:	20aa      	movs	r0, #170	; 0xaa
 80020e8:	f7ff ffae 	bl	8002048 <rfSend>
}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <Rfm12bTranssmitSeqByte>:



static void Rfm12bTranssmitSeqByte(volatile rfm12bBuff_t * txBuff){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	uint16_t cmd = 0xB800;
 80020fc:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8002100:	81fb      	strh	r3, [r7, #14]
	uint8_t data = txBuff->data[txBuff->pos++];
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002108:	b2db      	uxtb	r3, r3
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	b2d1      	uxtb	r1, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
 8002114:	461a      	mov	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	5c9b      	ldrb	r3, [r3, r2]
 800211a:	737b      	strb	r3, [r7, #13]
	Rfm12bWriteCmd(cmd | data);
 800211c:	7b7b      	ldrb	r3, [r7, #13]
 800211e:	b29a      	uxth	r2, r3
 8002120:	89fb      	ldrh	r3, [r7, #14]
 8002122:	4313      	orrs	r3, r2
 8002124:	b29b      	uxth	r3, r3
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f950 	bl	80023cc <Rfm12bWriteCmd>
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <Rfm12bMantainSending>:

void Rfm12bMantainSending(volatile rfm12bObj_t * rfm12b){
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	 if (rfm12b->txBuff.pos < rfm12b->txBuff.dataNb){
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002142:	b2da      	uxtb	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800214a:	b2db      	uxtb	r3, r3
 800214c:	429a      	cmp	r2, r3
 800214e:	d204      	bcs.n	800215a <Rfm12bMantainSending+0x26>
		 Rfm12bTranssmitSeqByte(&rfm12b->txBuff);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ffce 	bl	80020f4 <Rfm12bTranssmitSeqByte>
	 } else{
		 rfm12b->state = receive;
		 rfm12bSwitchRx();
	 }
}
 8002158:	e005      	b.n	8002166 <Rfm12bMantainSending+0x32>
		 rfm12b->state = receive;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
		 rfm12bSwitchRx();
 8002162:	f000 f8b7 	bl	80022d4 <rfm12bSwitchRx>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <Rfm12bMoveDataToCompletedBuff>:

static void Rfm12bMoveDataToCompletedBuff(volatile rfm12bObj_t * rfm12b){
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
	memset(&rfm12b->completedRxBuff, 0, sizeof (rfm12bBuff_t));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800217c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f000 fd91 	bl	8002caa <memset>
	memcpy(rfm12b->completedRxBuff.data,  &rfm12b->rxBuff.data[1], rfm12b->rxBuff.dataNb);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f503 7001 	add.w	r0, r3, #516	; 0x204
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f203 1103 	addw	r1, r3, #259	; 0x103
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	f000 fd79 	bl	8002c94 <memcpy>
	rfm12b->completedRxBuff.dataNb = rfm12b->rxBuff.dataNb;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f883 2305 	strb.w	r2, [r3, #773]	; 0x305
	memset(&rfm12b->rxBuff, 0, sizeof (rfm12bBuff_t));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f503 7381 	add.w	r3, r3, #258	; 0x102
 80021b6:	f44f 7281 	mov.w	r2, #258	; 0x102
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fd74 	bl	8002caa <memset>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <Rfm12bresetRx>:

static void Rfm12bresetRx(volatile rfm12bObj_t * rfm12b){
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
	rfm12b->rxBuff.pos = 0;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	rfm12bFifoReset();
 80021da:	f000 f861 	bl	80022a0 <rfm12bFifoReset>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <Rfm12bMantainreceiving>:

//namieszane. przywrocic
void Rfm12bMantainreceiving(volatile rfm12bObj_t * rfm12b){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	uint8_t rxByte = rfm12bReadFifo();
 80021f0:	f000 f862 	bl	80022b8 <rfm12bReadFifo>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]
	if (rfm12b->rxBuff.pos < RFM12_MAX_FRAME_SIZE){
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
		rfm12b->rxBuff.data[rfm12b->rxBuff.pos++] = rxByte;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002204:	b2db      	uxtb	r3, r3
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	b2d1      	uxtb	r1, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	f882 1202 	strb.w	r1, [r2, #514]	; 0x202
 8002210:	461a      	mov	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
		rfm12b->rxBuff.dataNb =  rfm12b->rxBuff.data[0];
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8002222:	b2da      	uxtb	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
		if (rfm12b->rxBuff.pos == rfm12b->rxBuff.dataNb){
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002230:	b2da      	uxtb	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8002238:	b2db      	uxtb	r3, r3
 800223a:	429a      	cmp	r2, r3
 800223c:	d10b      	bne.n	8002256 <Rfm12bMantainreceiving+0x6e>
			Rfm12bMoveDataToCompletedBuff(rfm12b);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ff95 	bl	800216e <Rfm12bMoveDataToCompletedBuff>
			Rfm12bresetRx(rfm12b);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ffc0 	bl	80021ca <Rfm12bresetRx>
			GPIOC->ODR ^= GPIO_Pin_13;//
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <Rfm12bMantainreceiving+0x78>)
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <Rfm12bMantainreceiving+0x78>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002254:	60d3      	str	r3, [r2, #12]
		}
	}
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40011000 	.word	0x40011000

08002264 <Rfm12bIrqCallback>:


void Rfm12bIrqCallback (volatile rfm12bObj_t * rfm12b){
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	uint16_t status = Rfm12bWriteCmd(0x0000);
 800226c:	2000      	movs	r0, #0
 800226e:	f000 f8ad 	bl	80023cc <Rfm12bWriteCmd>
 8002272:	4603      	mov	r3, r0
 8002274:	81fb      	strh	r3, [r7, #14]

	if (status & RFM12_STATUS_FFIT ){
 8002276:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800227a:	2b00      	cmp	r3, #0
 800227c:	da0c      	bge.n	8002298 <Rfm12bIrqCallback+0x34>
		if (rfm12b->state == transmit){
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	d103      	bne.n	8002292 <Rfm12bIrqCallback+0x2e>
			Rfm12bMantainSending(rfm12b);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ff52 	bl	8002134 <Rfm12bMantainSending>
		}
		else{
			Rfm12bMantainreceiving(rfm12b);
		}
	}
}
 8002290:	e002      	b.n	8002298 <Rfm12bIrqCallback+0x34>
			Rfm12bMantainreceiving(rfm12b);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffa8 	bl	80021e8 <Rfm12bMantainreceiving>
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <rfm12bFifoReset>:
}




void rfm12bFifoReset() {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0xCA81);
 80022a4:	f64c 2081 	movw	r0, #51841	; 0xca81
 80022a8:	f000 f890 	bl	80023cc <Rfm12bWriteCmd>
	Rfm12bWriteCmd(0xCA83);
 80022ac:	f64c 2083 	movw	r0, #51843	; 0xca83
 80022b0:	f000 f88c 	bl	80023cc <Rfm12bWriteCmd>
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <rfm12bReadFifo>:
		}
	}
}


uint8_t rfm12bReadFifo(void){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
	uint8_t rxByte = Rfm12bWriteCmd(0xB000);
 80022be:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80022c2:	f000 f883 	bl	80023cc <Rfm12bWriteCmd>
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
	return (rxByte&0x00FF);
 80022ca:	79fb      	ldrb	r3, [r7, #7]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <rfm12bSwitchRx>:

void rfm12bSwitchRx(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8299);
 80022d8:	f248 2099 	movw	r0, #33433	; 0x8299
 80022dc:	f000 f876 	bl	80023cc <Rfm12bWriteCmd>
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <rfm12bSwitchTx>:

void rfm12bSwitchTx(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8239);
 80022e8:	f248 2039 	movw	r0, #33337	; 0x8239
 80022ec:	f000 f86e 	bl	80023cc <Rfm12bWriteCmd>
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <Rfm12bSpiInit>:





void Rfm12bSpiInit(void) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80022fa:	2101      	movs	r1, #1
 80022fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002300:	f7fe f9e4 	bl	80006cc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8002304:	2101      	movs	r1, #1
 8002306:	2004      	movs	r0, #4
 8002308:	f7fe f9e0 	bl	80006cc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800230c:	2101      	movs	r1, #1
 800230e:	2008      	movs	r0, #8
 8002310:	f7fe f9dc 	bl	80006cc <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8002314:	23e0      	movs	r3, #224	; 0xe0
 8002316:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8002318:	2318      	movs	r3, #24
 800231a:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 800231c:	2301      	movs	r3, #1
 800231e:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002320:	f107 0308 	add.w	r3, r7, #8
 8002324:	4619      	mov	r1, r3
 8002326:	4825      	ldr	r0, [pc, #148]	; (80023bc <Rfm12bSpiInit+0xc8>)
 8002328:	f7fe f8f8 	bl	800051c <GPIO_Init>


	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 800232c:	2340      	movs	r3, #64	; 0x40
 800232e:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8002330:	2310      	movs	r3, #16
 8002332:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8002334:	2301      	movs	r3, #1
 8002336:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002338:	f107 0308 	add.w	r3, r7, #8
 800233c:	4619      	mov	r1, r3
 800233e:	4820      	ldr	r0, [pc, #128]	; (80023c0 <Rfm12bSpiInit+0xcc>)
 8002340:	f7fe f8ec 	bl	800051c <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002344:	2300      	movs	r3, #0
 8002346:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8002348:	f44f 7382 	mov.w	r3, #260	; 0x104
 800234c:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 800234e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002352:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8002354:	2300      	movs	r3, #0
 8002356:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8002358:	2300      	movs	r3, #0
 800235a:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 800235c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002360:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 8002362:	2330      	movs	r3, #48	; 0x30
 8002364:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8002366:	2300      	movs	r3, #0
 8002368:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 800236a:	2307      	movs	r3, #7
 800236c:	83bb      	strh	r3, [r7, #28]
	SPI_SSOutputCmd(SPI1, ENABLE);
 800236e:	2101      	movs	r1, #1
 8002370:	4814      	ldr	r0, [pc, #80]	; (80023c4 <Rfm12bSpiInit+0xd0>)
 8002372:	f7fe fa45 	bl	8000800 <SPI_SSOutputCmd>
	SPI_Init(SPI1, &SPI_InitStructure);
 8002376:	f107 030c 	add.w	r3, r7, #12
 800237a:	4619      	mov	r1, r3
 800237c:	4811      	ldr	r0, [pc, #68]	; (80023c4 <Rfm12bSpiInit+0xd0>)
 800237e:	f7fe f9c3 	bl	8000708 <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI1, ENABLE);
 8002382:	2101      	movs	r1, #1
 8002384:	480f      	ldr	r0, [pc, #60]	; (80023c4 <Rfm12bSpiInit+0xd0>)
 8002386:	f7fe fa02 	bl	800078e <SPI_Cmd>

	GPIO_InitTypeDef PORT;

	// Enable the nRF24L01 GPIO peripherals
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800238a:	4a0f      	ldr	r2, [pc, #60]	; (80023c8 <Rfm12bSpiInit+0xd4>)
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <Rfm12bSpiInit+0xd4>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f043 0308 	orr.w	r3, r3, #8
 8002394:	6193      	str	r3, [r2, #24]

	// Configure CSN pin
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 8002396:	2310      	movs	r3, #16
 8002398:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 800239a:	2302      	movs	r3, #2
 800239c:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_1;
 800239e:	2302      	movs	r3, #2
 80023a0:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOB, &PORT);
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4806      	ldr	r0, [pc, #24]	; (80023c0 <Rfm12bSpiInit+0xcc>)
 80023a8:	f7fe f8b8 	bl	800051c <GPIO_Init>
	GPIO_SetBits(GPIOB, GPIO_Pin_1);
 80023ac:	2102      	movs	r1, #2
 80023ae:	4804      	ldr	r0, [pc, #16]	; (80023c0 <Rfm12bSpiInit+0xcc>)
 80023b0:	f7fe f970 	bl	8000694 <GPIO_SetBits>
}
 80023b4:	bf00      	nop
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40010800 	.word	0x40010800
 80023c0:	40010c00 	.word	0x40010c00
 80023c4:	40013000 	.word	0x40013000
 80023c8:	40021000 	.word	0x40021000

080023cc <Rfm12bWriteCmd>:



uint16_t Rfm12bWriteCmd( uint16_t cmd )
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	80fb      	strh	r3, [r7, #6]
	NSEL_RFM12_LOW;
 80023d6:	2102      	movs	r1, #2
 80023d8:	4812      	ldr	r0, [pc, #72]	; (8002424 <Rfm12bWriteCmd+0x58>)
 80023da:	f7fe f969 	bl	80006b0 <GPIO_ResetBits>
	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 80023de:	bf00      	nop
 80023e0:	2102      	movs	r1, #2
 80023e2:	4811      	ldr	r0, [pc, #68]	; (8002428 <Rfm12bWriteCmd+0x5c>)
 80023e4:	f7fe fa2b 	bl	800083e <SPI_I2S_GetFlagStatus>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f8      	beq.n	80023e0 <Rfm12bWriteCmd+0x14>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI1, cmd);
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	4619      	mov	r1, r3
 80023f2:	480d      	ldr	r0, [pc, #52]	; (8002428 <Rfm12bWriteCmd+0x5c>)
 80023f4:	f7fe f9ea 	bl	80007cc <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 80023f8:	bf00      	nop
 80023fa:	2101      	movs	r1, #1
 80023fc:	480a      	ldr	r0, [pc, #40]	; (8002428 <Rfm12bWriteCmd+0x5c>)
 80023fe:	f7fe fa1e 	bl	800083e <SPI_I2S_GetFlagStatus>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f8      	beq.n	80023fa <Rfm12bWriteCmd+0x2e>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI1);
 8002408:	4807      	ldr	r0, [pc, #28]	; (8002428 <Rfm12bWriteCmd+0x5c>)
 800240a:	f7fe f9ed 	bl	80007e8 <SPI_I2S_ReceiveData>
 800240e:	4603      	mov	r3, r0
 8002410:	81fb      	strh	r3, [r7, #14]

	NSEL_RFM12_HIGH;
 8002412:	2102      	movs	r1, #2
 8002414:	4803      	ldr	r0, [pc, #12]	; (8002424 <Rfm12bWriteCmd+0x58>)
 8002416:	f7fe f93d 	bl	8000694 <GPIO_SetBits>

	return recData;
 800241a:	89fb      	ldrh	r3, [r7, #14]

}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40010c00 	.word	0x40010c00
 8002428:	40013000 	.word	0x40013000

0800242c <NVIC_EnableIRQ>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8002436:	4908      	ldr	r1, [pc, #32]	; (8002458 <NVIC_EnableIRQ+0x2c>)
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	095b      	lsrs	r3, r3, #5
 800243e:	79fa      	ldrb	r2, [r7, #7]
 8002440:	f002 021f 	and.w	r2, r2, #31
 8002444:	2001      	movs	r0, #1
 8002446:	fa00 f202 	lsl.w	r2, r0, r2
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	e000e100 	.word	0xe000e100

0800245c <mqtt_message_cb>:

volatile rfm12bObj_t rfm12bObj;

uint8_t client_rec(uint8_t * buf, uint8_t buf_len);

int mqtt_message_cb(struct _MqttClient *client, MqttMessage *message, byte msg_new, byte msg_done){
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	4611      	mov	r1, r2
 8002468:	461a      	mov	r2, r3
 800246a:	460b      	mov	r3, r1
 800246c:	71fb      	strb	r3, [r7, #7]
 800246e:	4613      	mov	r3, r2
 8002470:	71bb      	strb	r3, [r7, #6]
	return 1;
 8002472:	2301      	movs	r3, #1
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <mqt_net_connect_cb>:

int mqt_net_connect_cb (void *context, const char* host, word16 port, int timeout_ms){
 800247e:	b480      	push	{r7}
 8002480:	b085      	sub	sp, #20
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	4613      	mov	r3, r2
 800248c:	80fb      	strh	r3, [r7, #6]
	return 1;
 800248e:	2301      	movs	r3, #1
}
 8002490:	4618      	mov	r0, r3
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <mqtt_net_read_cb>:

int mqtt_net_read_cb(void *context, byte* buf, int buf_len, int timeout_ms){
 800249a:	b580      	push	{r7, lr}
 800249c:	b086      	sub	sp, #24
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	603b      	str	r3, [r7, #0]

	uint32_t enterTimestamp = xTaskGetTickCount();
 80024a8:	f7fd ff06 	bl	80002b8 <xTaskGetTickCount>
 80024ac:	4603      	mov	r3, r0
 80024ae:	617b      	str	r3, [r7, #20]
	while (xTaskGetTickCount() - enterTimestamp  > timeout_ms){
 80024b0:	e00c      	b.n	80024cc <mqtt_net_read_cb+0x32>
		uint8_t rxNb = client_rec(buf, buf_len);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	4619      	mov	r1, r3
 80024b8:	68b8      	ldr	r0, [r7, #8]
 80024ba:	f000 f835 	bl	8002528 <client_rec>
 80024be:	4603      	mov	r3, r0
 80024c0:	74fb      	strb	r3, [r7, #19]
		if (rxNb >0){
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <mqtt_net_read_cb+0x32>
			return rxNb;
 80024c8:	7cfb      	ldrb	r3, [r7, #19]
 80024ca:	e00a      	b.n	80024e2 <mqtt_net_read_cb+0x48>
	while (xTaskGetTickCount() - enterTimestamp  > timeout_ms){
 80024cc:	f7fd fef4 	bl	80002b8 <xTaskGetTickCount>
 80024d0:	4603      	mov	r3, r0
 80024d2:	461a      	mov	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	1ad2      	subs	r2, r2, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d8e9      	bhi.n	80024b2 <mqtt_net_read_cb+0x18>
		}
	}
	return -1;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <mqtt_net_write_cb>:

int mqtt_net_write_cb(void *context, const byte* buff, int buffLen, int timeout_ms){
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]

	rfm12bObj_t * obj = (rfm12bObj_t*) context;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	617b      	str	r3, [r7, #20]
	Rfm12bStartSending(obj, (uint8_t *)buff, buffLen);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	6978      	ldr	r0, [r7, #20]
 8002506:	f7ff fdc4 	bl	8002092 <Rfm12bStartSending>
	return buffLen;
 800250a:	687b      	ldr	r3, [r7, #4]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <mqtt_net_disconnect_cb>:

int mqtt_net_disconnect_cb(void *context){
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	return 0;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <client_rec>:




uint8_t client_rec(uint8_t * buf, uint8_t buf_len){
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	70fb      	strb	r3, [r7, #3]
	uint8_t byteNb = rfm12bObj.completedRxBuff.dataNb;
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <client_rec+0x3c>)
 8002536:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 800253a:	73fb      	strb	r3, [r7, #15]
	if (byteNb > 0){
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <client_rec+0x32>
		byteNb = (byteNb < buf_len) ? byteNb : buf_len;
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	4293      	cmp	r3, r2
 8002548:	bf28      	it	cs
 800254a:	4613      	movcs	r3, r2
 800254c:	73fb      	strb	r3, [r7, #15]
		memcpy (buf, rfm12bObj.completedRxBuff.data, byteNb);
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	461a      	mov	r2, r3
 8002552:	4905      	ldr	r1, [pc, #20]	; (8002568 <client_rec+0x40>)
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fb9d 	bl	8002c94 <memcpy>
	}
	return byteNb;
 800255a:	7bfb      	ldrb	r3, [r7, #15]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	200000ac 	.word	0x200000ac
 8002568:	200002b0 	.word	0x200002b0

0800256c <EXTI9_5_IRQHandler>:

volatile uint8_t rxBuff[1024];
volatile uint16_t pos;
volatile bool rx_flag;

void EXTI9_5_IRQHandler (void){
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line5);
 8002570:	2020      	movs	r0, #32
 8002572:	f7fd ffc5 	bl	8000500 <EXTI_ClearITPendingBit>
	Rfm12bIrqCallback(&rfm12bObj);
 8002576:	4802      	ldr	r0, [pc, #8]	; (8002580 <EXTI9_5_IRQHandler+0x14>)
 8002578:	f7ff fe74 	bl	8002264 <Rfm12bIrqCallback>

}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	200000ac 	.word	0x200000ac

08002584 <StartSystick>:



void StartSystick(voi){
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = 72000 - 1;
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <StartSystick+0x2c>)
 800258e:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <StartSystick+0x30>)
 8002590:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <StartSystick+0x2c>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_ENABLE;
 8002598:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <StartSystick+0x2c>)
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <StartSystick+0x2c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e010 	.word	0xe000e010
 80025b4:	0001193f 	.word	0x0001193f

080025b8 <main>:



 int main(){
 80025b8:	b5b0      	push	{r4, r5, r7, lr}
 80025ba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80025be:	af04      	add	r7, sp, #16
	 	StartSystick();
 80025c0:	f7ff ffe0 	bl	8002584 <StartSystick>
	 	EnableGpioClk(LOG_UART_PORT);
 80025c4:	4877      	ldr	r0, [pc, #476]	; (80027a4 <main+0x1ec>)
 80025c6:	f7ff fb53 	bl	8001c70 <EnableGpioClk>
	 	SetGpioAsOutAltPushPUll(LOG_UART_PORT, LOG_UART_PIN_TX);
 80025ca:	2109      	movs	r1, #9
 80025cc:	4875      	ldr	r0, [pc, #468]	; (80027a4 <main+0x1ec>)
 80025ce:	f7ff fc45 	bl	8001e5c <SetGpioAsOutAltPushPUll>
	 	SetGpioAsInFloating(LOG_UART_PORT, LOG_UART_PIN_RX);
 80025d2:	210a      	movs	r1, #10
 80025d4:	4873      	ldr	r0, [pc, #460]	; (80027a4 <main+0x1ec>)
 80025d6:	f7ff fb89 	bl	8001cec <SetGpioAsInFloating>
	 	EnableUart(USART1);
 80025da:	4873      	ldr	r0, [pc, #460]	; (80027a8 <main+0x1f0>)
 80025dc:	f000 f91c 	bl	8002818 <EnableUart>

	 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80025e0:	2101      	movs	r1, #1
 80025e2:	2010      	movs	r0, #16
 80025e4:	f7fe f872 	bl	80006cc <RCC_APB2PeriphClockCmd>
	 	GPIO_InitTypeDef PORT;
	 	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 80025e8:	2310      	movs	r3, #16
 80025ea:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
	 	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 80025ee:	2302      	movs	r3, #2
 80025f0:	f887 31e6 	strb.w	r3, [r7, #486]	; 0x1e6
	 	PORT.GPIO_Pin = GPIO_Pin_13;
 80025f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f8:	f8a7 31e4 	strh.w	r3, [r7, #484]	; 0x1e4
	 	GPIO_Init(GPIOC, &PORT);
 80025fc:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8002600:	4619      	mov	r1, r3
 8002602:	486a      	ldr	r0, [pc, #424]	; (80027ac <main+0x1f4>)
 8002604:	f7fd ff8a 	bl	800051c <GPIO_Init>
	 	GPIOC->ODR |= GPIO_Pin_13;
 8002608:	4a68      	ldr	r2, [pc, #416]	; (80027ac <main+0x1f4>)
 800260a:	4b68      	ldr	r3, [pc, #416]	; (80027ac <main+0x1f4>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002612:	60d3      	str	r3, [r2, #12]


	 	Rfm12bInit();
 8002614:	f7ff fcc5 	bl	8001fa2 <Rfm12bInit>
	 	_delay_ms(1000);	//wymagane opoznienie
 8002618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800261c:	f7ff fca4 	bl	8001f68 <_delay_ms>
	 	Rfm12bWriteCmd(0x0000);
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff fed3 	bl	80023cc <Rfm12bWriteCmd>
	 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8002626:	2101      	movs	r1, #1
 8002628:	2008      	movs	r0, #8
 800262a:	f7fe f84f 	bl	80006cc <RCC_APB2PeriphClockCmd>
	 	EnableExti(GPIOB, 5, false, true);
 800262e:	2301      	movs	r3, #1
 8002630:	2200      	movs	r2, #0
 8002632:	2105      	movs	r1, #5
 8002634:	485e      	ldr	r0, [pc, #376]	; (80027b0 <main+0x1f8>)
 8002636:	f7ff fc4f 	bl	8001ed8 <EnableExti>
	 	SetGpioAsInPullUp(GPIOB, 5);
 800263a:	2105      	movs	r1, #5
 800263c:	485c      	ldr	r0, [pc, #368]	; (80027b0 <main+0x1f8>)
 800263e:	f7ff fba5 	bl	8001d8c <SetGpioAsInPullUp>
		SetGpioAsInPullUp(GPIOB, 11);
 8002642:	210b      	movs	r1, #11
 8002644:	485a      	ldr	r0, [pc, #360]	; (80027b0 <main+0x1f8>)
 8002646:	f7ff fba1 	bl	8001d8c <SetGpioAsInPullUp>


	 	rfm12bFifoReset();
 800264a:	f7ff fe29 	bl	80022a0 <rfm12bFifoReset>
	 	rfm12bSwitchRx();
 800264e:	f7ff fe41 	bl	80022d4 <rfm12bSwitchRx>
	 	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002652:	2017      	movs	r0, #23
 8002654:	f7ff feea 	bl	800242c <NVIC_EnableIRQ>
	 	Rrm12bObjInit (&rfm12bObj);
 8002658:	4856      	ldr	r0, [pc, #344]	; (80027b4 <main+0x1fc>)
 800265a:	f7ff fce3 	bl	8002024 <Rrm12bObjInit>

	 	RTC_Init();
 800265e:	f000 f98b 	bl	8002978 <RTC_Init>
	 	RtcClear();
 8002662:	f000 f94d 	bl	8002900 <RtcClear>



		const char * infoTxt = "Start Mqtt client";
 8002666:	4b54      	ldr	r3, [pc, #336]	; (80027b8 <main+0x200>)
 8002668:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	 	SendUart1Dma(infoTxt, strlen(infoTxt));
 800266c:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 8002670:	f7fd fd6e 	bl	8000150 <strlen>
 8002674:	4603      	mov	r3, r0
 8002676:	4619      	mov	r1, r3
 8002678:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 800267c:	f000 f904 	bl	8002888 <SendUart1Dma>


	 		MqttNet net;
	 		MqttClient client;
	 		net.context = &rfm12bObj;
 8002680:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <main+0x1fc>)
 8002682:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	 		net.connect = mqt_net_connect_cb;
 8002686:	4b4d      	ldr	r3, [pc, #308]	; (80027bc <main+0x204>)
 8002688:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	 		net.read = mqtt_net_read_cb;
 800268c:	4b4c      	ldr	r3, [pc, #304]	; (80027c0 <main+0x208>)
 800268e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	 		net.write = mqtt_net_write_cb;
 8002692:	4b4c      	ldr	r3, [pc, #304]	; (80027c4 <main+0x20c>)
 8002694:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	 		net.disconnect = mqtt_net_disconnect_cb;
 8002698:	4b4b      	ldr	r3, [pc, #300]	; (80027c8 <main+0x210>)
 800269a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

	 		uint8_t tx_buf[BUF_SIZE_TX];
	 		uint8_t rx_buf[BUF_SIZE_RX];
	 		MqttClient_Init(&client, &net, mqtt_message_cb, tx_buf, BUF_SIZE_TX, rx_buf, BUF_SIZE_RX, CMD_TIMEOUT_MS);
 800269e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80026a2:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 80026a6:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 80026aa:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80026ae:	9303      	str	r3, [sp, #12]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	4613      	mov	r3, r2
 80026c0:	4a42      	ldr	r2, [pc, #264]	; (80027cc <main+0x214>)
 80026c2:	f7fe fae9 	bl	8000c98 <MqttClient_Init>

	 		MqttConnect mqtt_con;
	 		mqtt_con.clean_session =0;
 80026c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026ca:	2200      	movs	r2, #0
 80026cc:	711a      	strb	r2, [r3, #4]
	 		mqtt_con.client_id = "rt1";
 80026ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026d2:	4a3f      	ldr	r2, [pc, #252]	; (80027d0 <main+0x218>)
 80026d4:	609a      	str	r2, [r3, #8]
	 		mqtt_con.enable_lwt = 0;
 80026d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026da:	2200      	movs	r2, #0
 80026dc:	731a      	strb	r2, [r3, #12]
	 		mqtt_con.keep_alive_sec =30;
 80026de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026e2:	221e      	movs	r2, #30
 80026e4:	805a      	strh	r2, [r3, #2]
	 		mqtt_con.stat = MQTT_MSG_BEGIN;
 80026e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
	 		mqtt_con.username ="bedroomTMP1";
 80026ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026f2:	4a38      	ldr	r2, [pc, #224]	; (80027d4 <main+0x21c>)
 80026f4:	615a      	str	r2, [r3, #20]
	 		mqtt_con.password = "passw0rd";
 80026f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026fa:	4a37      	ldr	r2, [pc, #220]	; (80027d8 <main+0x220>)
 80026fc:	619a      	str	r2, [r3, #24]
	 		MqttClient_Connect(&client, &mqtt_con);
 80026fe:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002702:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe fb01 	bl	8000d10 <MqttClient_Connect>

	 		const char* test_topic1 = "flat/livingroom/temp/1";
 800270e:	4b33      	ldr	r3, [pc, #204]	; (80027dc <main+0x224>)
 8002710:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	 		const char* test_topic2 = "flat/bedroom/humidity/2";
 8002714:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <main+0x228>)
 8002716:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	 		MqttTopic topics[2];
	 		topics[0].qos =1;
 800271a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800271e:	2201      	movs	r2, #1
 8002720:	711a      	strb	r2, [r3, #4]
	 		topics[0].topic_filter = test_topic1;
 8002722:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002726:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800272a:	601a      	str	r2, [r3, #0]
	 	    topics[1].qos =1;
 800272c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002730:	2201      	movs	r2, #1
 8002732:	731a      	strb	r2, [r3, #12]
	 		topics[1].topic_filter = test_topic2;
 8002734:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002738:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800273c:	609a      	str	r2, [r3, #8]


	 		MqttSubscribe subscribe;
	 		subscribe.packet_id = 1;
 800273e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002742:	2201      	movs	r2, #1
 8002744:	805a      	strh	r2, [r3, #2]
	 		uint8_t topic_count = 2;
 8002746:	2302      	movs	r3, #2
 8002748:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
	 		subscribe.topic_count = topic_count;
 800274c:	f897 21eb 	ldrb.w	r2, [r7, #491]	; 0x1eb
 8002750:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002754:	605a      	str	r2, [r3, #4]
	 		subscribe.topics = topics;
 8002756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800275a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800275e:	609a      	str	r2, [r3, #8]

	 		MqttClient_Subscribe(&client, &subscribe);
 8002760:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002764:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe fb17 	bl	8000d9e <MqttClient_Subscribe>



	 	while (1){

	 		if (!(GPIOB->IDR & (1<<11))){
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <main+0x1f8>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f9      	bne.n	8002770 <main+0x1b8>
	 			uint8_t buff[] = "helloWorld1helloWorld2helloWorld3";
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <main+0x22c>)
 8002780:	461c      	mov	r4, r3
 8002782:	4615      	mov	r5, r2
 8002784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800278a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800278c:	682b      	ldr	r3, [r5, #0]
 800278e:	8023      	strh	r3, [r4, #0]
	 			Rfm12bStartSending(&rfm12bObj, buff, 30);
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	221e      	movs	r2, #30
 8002794:	4619      	mov	r1, r3
 8002796:	4807      	ldr	r0, [pc, #28]	; (80027b4 <main+0x1fc>)
 8002798:	f7ff fc7b 	bl	8002092 <Rfm12bStartSending>
	 			_delay_ms(250);
 800279c:	20fa      	movs	r0, #250	; 0xfa
 800279e:	f7ff fbe3 	bl	8001f68 <_delay_ms>
	 		if (!(GPIOB->IDR & (1<<11))){
 80027a2:	e7e5      	b.n	8002770 <main+0x1b8>
 80027a4:	40010800 	.word	0x40010800
 80027a8:	40013800 	.word	0x40013800
 80027ac:	40011000 	.word	0x40011000
 80027b0:	40010c00 	.word	0x40010c00
 80027b4:	200000ac 	.word	0x200000ac
 80027b8:	08002ce0 	.word	0x08002ce0
 80027bc:	0800247f 	.word	0x0800247f
 80027c0:	0800249b 	.word	0x0800249b
 80027c4:	080024eb 	.word	0x080024eb
 80027c8:	08002515 	.word	0x08002515
 80027cc:	0800245d 	.word	0x0800245d
 80027d0:	08002cf4 	.word	0x08002cf4
 80027d4:	08002cf8 	.word	0x08002cf8
 80027d8:	08002d04 	.word	0x08002d04
 80027dc:	08002d10 	.word	0x08002d10
 80027e0:	08002d28 	.word	0x08002d28
 80027e4:	08002d40 	.word	0x08002d40

080027e8 <NVIC_EnableIRQ>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80027f2:	4908      	ldr	r1, [pc, #32]	; (8002814 <NVIC_EnableIRQ+0x2c>)
 80027f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	79fa      	ldrb	r2, [r7, #7]
 80027fc:	f002 021f 	and.w	r2, r2, #31
 8002800:	2001      	movs	r0, #1
 8002802:	fa00 f202 	lsl.w	r2, r0, r2
 8002806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	e000e100 	.word	0xe000e100

08002818 <EnableUart>:
#include "stm32f10x.h"
#include "platform.h"



void EnableUart (USART_TypeDef * usart){
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002820:	4a18      	ldr	r2, [pc, #96]	; (8002884 <EnableUart+0x6c>)
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <EnableUart+0x6c>)
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800282a:	6193      	str	r3, [r2, #24]
	usart->BRR = 72000000/115200;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f240 2271 	movw	r2, #625	; 0x271
 8002832:	811a      	strh	r2, [r3, #8]
	usart->CR1 |= USART_CR1_UE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	899b      	ldrh	r3, [r3, #12]
 8002838:	b29b      	uxth	r3, r3
 800283a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800283e:	b29a      	uxth	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_TE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	899b      	ldrh	r3, [r3, #12]
 8002848:	b29b      	uxth	r3, r3
 800284a:	f043 0308 	orr.w	r3, r3, #8
 800284e:	b29a      	uxth	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_RE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	899b      	ldrh	r3, [r3, #12]
 8002858:	b29b      	uxth	r3, r3
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	b29a      	uxth	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	819a      	strh	r2, [r3, #12]
	usart->CR3 |= USART_CR3_DMAT;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	8a9b      	ldrh	r3, [r3, #20]
 8002868:	b29b      	uxth	r3, r3
 800286a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286e:	b29a      	uxth	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	829a      	strh	r2, [r3, #20]

	NVIC_EnableIRQ(USART1_IRQn);
 8002874:	2025      	movs	r0, #37	; 0x25
 8002876:	f7ff ffb7 	bl	80027e8 <NVIC_EnableIRQ>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000

08002888 <SendUart1Dma>:
	uart1_send(0xA);
}



void SendUart1Dma(uint32_t sourceAddr, uint16_t bytesNb){
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	807b      	strh	r3, [r7, #2]
	RCC->AHBENR = RCC_AHBENR_DMA1EN;
 8002894:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <SendUart1Dma+0x6c>)
 8002896:	2201      	movs	r2, #1
 8002898:	615a      	str	r2, [r3, #20]
	DMA1_Channel4->CMAR = sourceAddr;
 800289a:	4a17      	ldr	r2, [pc, #92]	; (80028f8 <SendUart1Dma+0x70>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	60d3      	str	r3, [r2, #12]
	DMA1_Channel4->CPAR =   0x40013804;
 80028a0:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <SendUart1Dma+0x70>)
 80028a2:	4a16      	ldr	r2, [pc, #88]	; (80028fc <SendUart1Dma+0x74>)
 80028a4:	609a      	str	r2, [r3, #8]
	DMA1_Channel4->CNDTR = bytesNb;
 80028a6:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <SendUart1Dma+0x70>)
 80028a8:	887b      	ldrh	r3, [r7, #2]
 80028aa:	6053      	str	r3, [r2, #4]
	DMA1_Channel4->CCR |= DMA_CCR1_DIR;
 80028ac:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <SendUart1Dma+0x70>)
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <SendUart1Dma+0x70>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f043 0310 	orr.w	r3, r3, #16
 80028b6:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR |= DMA_CCR1_MINC;
 80028b8:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <SendUart1Dma+0x70>)
 80028ba:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <SendUart1Dma+0x70>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c2:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR &= ~DMA_CCR1_MSIZE;
 80028c4:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <SendUart1Dma+0x70>)
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <SendUart1Dma+0x70>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80028ce:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR &= ~DMA_CCR1_PSIZE;
 80028d0:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <SendUart1Dma+0x70>)
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <SendUart1Dma+0x70>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028da:	6013      	str	r3, [r2, #0]
//	DMA1_Channel4->CCR |= DMA_CCR1_CIRC;
//	DMA1_Channel4->CCR |= DMA_CCR1_MEM2MEM;
	DMA1_Channel4->CCR |= DMA_CCR1_EN;
 80028dc:	4a06      	ldr	r2, [pc, #24]	; (80028f8 <SendUart1Dma+0x70>)
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <SendUart1Dma+0x70>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6013      	str	r3, [r2, #0]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40020044 	.word	0x40020044
 80028fc:	40013804 	.word	0x40013804

08002900 <RtcClear>:
#include "stm32f10x.h"




void RtcClear (void){
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0

	PWR->CR |= PWR_CR_DBP;
 8002904:	4a1a      	ldr	r2, [pc, #104]	; (8002970 <RtcClear+0x70>)
 8002906:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <RtcClear+0x70>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290e:	6013      	str	r3, [r2, #0]
	RCC->BDCR |= RCC_BDCR_BDRST;
 8002910:	4a18      	ldr	r2, [pc, #96]	; (8002974 <RtcClear+0x74>)
 8002912:	4b18      	ldr	r3, [pc, #96]	; (8002974 <RtcClear+0x74>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291a:	6213      	str	r3, [r2, #32]
	RCC->BDCR &= ~RCC_BDCR_BDRST;
 800291c:	4a15      	ldr	r2, [pc, #84]	; (8002974 <RtcClear+0x74>)
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <RtcClear+0x74>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002926:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_LSEON;
 8002928:	4a12      	ldr	r2, [pc, #72]	; (8002974 <RtcClear+0x74>)
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <RtcClear+0x74>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6213      	str	r3, [r2, #32]
	while (!(RCC->BDCR & RCC_BDCR_LSERDY));
 8002934:	bf00      	nop
 8002936:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <RtcClear+0x74>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f9      	beq.n	8002936 <RtcClear+0x36>
	RCC->BDCR |= RCC_BDCR_RTCSEL_LSE;
 8002942:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <RtcClear+0x74>)
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <RtcClear+0x74>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294c:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_RTCEN;
 800294e:	4a09      	ldr	r2, [pc, #36]	; (8002974 <RtcClear+0x74>)
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <RtcClear+0x74>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002958:	6213      	str	r3, [r2, #32]
	PWR->CR &= ~PWR_CR_DBP;
 800295a:	4a05      	ldr	r2, [pc, #20]	; (8002970 <RtcClear+0x70>)
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <RtcClear+0x70>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002964:	6013      	str	r3, [r2, #0]

}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40007000 	.word	0x40007000
 8002974:	40021000 	.word	0x40021000

08002978 <RTC_Init>:


void RTC_Init (void){
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800297c:	4a32      	ldr	r2, [pc, #200]	; (8002a48 <RTC_Init+0xd0>)
 800297e:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <RTC_Init+0xd0>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002986:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_BKPEN;
 8002988:	4a2f      	ldr	r2, [pc, #188]	; (8002a48 <RTC_Init+0xd0>)
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <RTC_Init+0xd0>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002992:	61d3      	str	r3, [r2, #28]
	PWR->CR |= PWR_CR_DBP;
 8002994:	4a2d      	ldr	r2, [pc, #180]	; (8002a4c <RTC_Init+0xd4>)
 8002996:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <RTC_Init+0xd4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299e:	6013      	str	r3, [r2, #0]
	RCC->BDCR &= ~RCC_BDCR_BDRST;
 80029a0:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <RTC_Init+0xd0>)
 80029a2:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <RTC_Init+0xd0>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	6213      	str	r3, [r2, #32]

	RCC->BDCR |= RCC_BDCR_LSEON;
 80029ac:	4a26      	ldr	r2, [pc, #152]	; (8002a48 <RTC_Init+0xd0>)
 80029ae:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <RTC_Init+0xd0>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6213      	str	r3, [r2, #32]
	while (!(RCC->BDCR & RCC_BDCR_LSERDY));
 80029b8:	bf00      	nop
 80029ba:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <RTC_Init+0xd0>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f9      	beq.n	80029ba <RTC_Init+0x42>
	RCC->BDCR |= RCC_BDCR_RTCSEL_LSE;
 80029c6:	4a20      	ldr	r2, [pc, #128]	; (8002a48 <RTC_Init+0xd0>)
 80029c8:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <RTC_Init+0xd0>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d0:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_RTCEN;
 80029d2:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <RTC_Init+0xd0>)
 80029d4:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <RTC_Init+0xd0>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029dc:	6213      	str	r3, [r2, #32]

	while (!(RTC->CRL & RTC_CRL_RTOFF));
 80029de:	bf00      	nop
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <RTC_Init+0xd8>)
 80029e2:	889b      	ldrh	r3, [r3, #4]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f8      	beq.n	80029e0 <RTC_Init+0x68>
	RTC->CRL |= RTC_CRL_CNF;
 80029ee:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <RTC_Init+0xd8>)
 80029f0:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <RTC_Init+0xd8>)
 80029f2:	889b      	ldrh	r3, [r3, #4]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	f043 0310 	orr.w	r3, r3, #16
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	8093      	strh	r3, [r2, #4]

	RTC->PRLL = 0x7FFF;
 80029fe:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <RTC_Init+0xd8>)
 8002a00:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002a04:	819a      	strh	r2, [r3, #12]
	RTC->CNTH =0;
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <RTC_Init+0xd8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	831a      	strh	r2, [r3, #24]
	RTC->CNTL =0;
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <RTC_Init+0xd8>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	839a      	strh	r2, [r3, #28]

	RTC->CRL &= RTC_CRL_CNF;
 8002a12:	4a0f      	ldr	r2, [pc, #60]	; (8002a50 <RTC_Init+0xd8>)
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <RTC_Init+0xd8>)
 8002a16:	889b      	ldrh	r3, [r3, #4]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	8093      	strh	r3, [r2, #4]
	while (!(RTC->CRL & RTC_CRL_RTOFF));
 8002a22:	bf00      	nop
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <RTC_Init+0xd8>)
 8002a26:	889b      	ldrh	r3, [r3, #4]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f8      	beq.n	8002a24 <RTC_Init+0xac>
	PWR->CR &= ~PWR_CR_DBP;
 8002a32:	4a06      	ldr	r2, [pc, #24]	; (8002a4c <RTC_Init+0xd4>)
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <RTC_Init+0xd4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a3c:	6013      	str	r3, [r2, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	40002800 	.word	0x40002800

08002a54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a5a:	e003      	b.n	8002a64 <LoopCopyDataInit>

08002a5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002a5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a62:	3104      	adds	r1, #4

08002a64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a64:	480b      	ldr	r0, [pc, #44]	; (8002a94 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002a68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a6c:	d3f6      	bcc.n	8002a5c <CopyDataInit>
	ldr	r2, =_sbss
 8002a6e:	4a0b      	ldr	r2, [pc, #44]	; (8002a9c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002a70:	e002      	b.n	8002a78 <LoopFillZerobss>

08002a72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a74:	f842 3b04 	str.w	r3, [r2], #4

08002a78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002a7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a7c:	d3f9      	bcc.n	8002a72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a7e:	f000 f82b 	bl	8002ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a82:	f000 f8e3 	bl	8002c4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a86:	f7ff fd97 	bl	80025b8 <main>
	bx	lr
 8002a8a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a8c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8002a90:	08002d6c 	.word	0x08002d6c
	ldr	r0, =_sdata
 8002a94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002a98:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8002a9c:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8002aa0:	200007b8 	.word	0x200007b8

08002aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002aa4:	e7fe      	b.n	8002aa4 <ADC1_2_IRQHandler>

08002aa6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <HardFault_Handler+0x4>

08002ab8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002abc:	e7fe      	b.n	8002abc <MemManage_Handler+0x4>

08002abe <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002ac2:	e7fe      	b.n	8002ac2 <BusFault_Handler+0x4>

08002ac4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002ac8:	e7fe      	b.n	8002ac8 <UsageFault_Handler+0x4>

08002aca <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
	...

08002ad8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002adc:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <SystemInit+0x5c>)
 8002ade:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <SystemInit+0x5c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002ae8:	4912      	ldr	r1, [pc, #72]	; (8002b34 <SystemInit+0x5c>)
 8002aea:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <SystemInit+0x5c>)
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <SystemInit+0x60>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002af4:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <SystemInit+0x5c>)
 8002af6:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <SystemInit+0x5c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b02:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002b04:	4a0b      	ldr	r2, [pc, #44]	; (8002b34 <SystemInit+0x5c>)
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <SystemInit+0x5c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002b10:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <SystemInit+0x5c>)
 8002b12:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <SystemInit+0x5c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002b1a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <SystemInit+0x5c>)
 8002b1e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002b22:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002b24:	f000 f80c 	bl	8002b40 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <SystemInit+0x64>)
 8002b2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b2e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000
 8002b38:	f8ff0000 	.word	0xf8ff0000
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002b44:	f000 f802 	bl	8002b4c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002b48:	bf00      	nop
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	2300      	movs	r3, #0
 8002b58:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002b5a:	4a3a      	ldr	r2, [pc, #232]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002b5c:	4b39      	ldr	r3, [pc, #228]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3301      	adds	r3, #1
 8002b74:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d103      	bne.n	8002b84 <SetSysClockTo72+0x38>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002b82:	d1f0      	bne.n	8002b66 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002b84:	4b2f      	ldr	r3, [pc, #188]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002b90:	2301      	movs	r3, #1
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	e001      	b.n	8002b9a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002b96:	2300      	movs	r3, #0
 8002b98:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d14b      	bne.n	8002c38 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002ba0:	4a29      	ldr	r2, [pc, #164]	; (8002c48 <SetSysClockTo72+0xfc>)
 8002ba2:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <SetSysClockTo72+0xfc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f043 0310 	orr.w	r3, r3, #16
 8002baa:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002bac:	4a26      	ldr	r2, [pc, #152]	; (8002c48 <SetSysClockTo72+0xfc>)
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <SetSysClockTo72+0xfc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002bb8:	4a23      	ldr	r2, [pc, #140]	; (8002c48 <SetSysClockTo72+0xfc>)
 8002bba:	4b23      	ldr	r3, [pc, #140]	; (8002c48 <SetSysClockTo72+0xfc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002bc4:	4a1f      	ldr	r2, [pc, #124]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002bc6:	4b1f      	ldr	r3, [pc, #124]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002bd4:	4a1b      	ldr	r2, [pc, #108]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bde:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8002be0:	4a18      	ldr	r2, [pc, #96]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002be2:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002bea:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8002bec:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002bf6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002bf8:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c02:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002c04:	bf00      	nop
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f9      	beq.n	8002c06 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002c12:	4a0c      	ldr	r2, [pc, #48]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f023 0303 	bic.w	r3, r3, #3
 8002c1c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8002c2a:	bf00      	nop
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <SetSysClockTo72+0xf8>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d1f9      	bne.n	8002c2c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40022000 	.word	0x40022000

08002c4c <__libc_init_array>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	2500      	movs	r5, #0
 8002c50:	4e0c      	ldr	r6, [pc, #48]	; (8002c84 <__libc_init_array+0x38>)
 8002c52:	4c0d      	ldr	r4, [pc, #52]	; (8002c88 <__libc_init_array+0x3c>)
 8002c54:	1ba4      	subs	r4, r4, r6
 8002c56:	10a4      	asrs	r4, r4, #2
 8002c58:	42a5      	cmp	r5, r4
 8002c5a:	d109      	bne.n	8002c70 <__libc_init_array+0x24>
 8002c5c:	f000 f82e 	bl	8002cbc <_init>
 8002c60:	2500      	movs	r5, #0
 8002c62:	4e0a      	ldr	r6, [pc, #40]	; (8002c8c <__libc_init_array+0x40>)
 8002c64:	4c0a      	ldr	r4, [pc, #40]	; (8002c90 <__libc_init_array+0x44>)
 8002c66:	1ba4      	subs	r4, r4, r6
 8002c68:	10a4      	asrs	r4, r4, #2
 8002c6a:	42a5      	cmp	r5, r4
 8002c6c:	d105      	bne.n	8002c7a <__libc_init_array+0x2e>
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c74:	4798      	blx	r3
 8002c76:	3501      	adds	r5, #1
 8002c78:	e7ee      	b.n	8002c58 <__libc_init_array+0xc>
 8002c7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c7e:	4798      	blx	r3
 8002c80:	3501      	adds	r5, #1
 8002c82:	e7f2      	b.n	8002c6a <__libc_init_array+0x1e>
 8002c84:	08002d64 	.word	0x08002d64
 8002c88:	08002d64 	.word	0x08002d64
 8002c8c:	08002d64 	.word	0x08002d64
 8002c90:	08002d68 	.word	0x08002d68

08002c94 <memcpy>:
 8002c94:	b510      	push	{r4, lr}
 8002c96:	1e43      	subs	r3, r0, #1
 8002c98:	440a      	add	r2, r1
 8002c9a:	4291      	cmp	r1, r2
 8002c9c:	d100      	bne.n	8002ca0 <memcpy+0xc>
 8002c9e:	bd10      	pop	{r4, pc}
 8002ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ca8:	e7f7      	b.n	8002c9a <memcpy+0x6>

08002caa <memset>:
 8002caa:	4603      	mov	r3, r0
 8002cac:	4402      	add	r2, r0
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d100      	bne.n	8002cb4 <memset+0xa>
 8002cb2:	4770      	bx	lr
 8002cb4:	f803 1b01 	strb.w	r1, [r3], #1
 8002cb8:	e7f9      	b.n	8002cae <memset+0x4>
	...

08002cbc <_init>:
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	bf00      	nop
 8002cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc2:	bc08      	pop	{r3}
 8002cc4:	469e      	mov	lr, r3
 8002cc6:	4770      	bx	lr

08002cc8 <_fini>:
 8002cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cca:	bf00      	nop
 8002ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cce:	bc08      	pop	{r3}
 8002cd0:	469e      	mov	lr, r3
 8002cd2:	4770      	bx	lr
