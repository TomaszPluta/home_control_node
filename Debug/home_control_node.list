
home_control_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001850  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001960  08001960  00011960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800197c  0800197c  0001197c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001980  08001980  00011980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08001984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000134  20000068  080019ec  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000019c  080019ec  0002019c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006008  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001110  00000000  00000000  00026099  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000004d0  00000000  00000000  000271b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  00027680  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002484  00000000  00000000  00027a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001b96  00000000  00000000  00029f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002bab2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000129c  00000000  00000000  0002bb30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08001948 	.word	0x08001948

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08001948 	.word	0x08001948

08000150 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8000158:	f000 fda8 	bl	8000cac <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800015c:	6878      	ldr	r0, [r7, #4]
 800015e:	f001 fb05 	bl	800176c <malloc>
 8000162:	4603      	mov	r3, r0
 8000164:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000166:	f000 fdaf 	bl	8000cc8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800016a:	68fb      	ldr	r3, [r7, #12]
}
 800016c:	4618      	mov	r0, r3
 800016e:	3710      	adds	r7, #16
 8000170:	46bd      	mov	sp, r7
 8000172:	bd80      	pop	{r7, pc}

08000174 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
	if( pv )
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d006      	beq.n	8000190 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8000182:	f000 fd93 	bl	8000cac <vTaskSuspendAll>
		{
			free( pv );
 8000186:	6878      	ldr	r0, [r7, #4]
 8000188:	f001 faf8 	bl	800177c <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800018c:	f000 fd9c 	bl	8000cc8 <xTaskResumeAll>
	}
}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000198:	b480      	push	{r7}
 800019a:	b083      	sub	sp, #12
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f103 0208 	add.w	r2, r3, #8
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80001b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f103 0208 	add.w	r2, r3, #8
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	f103 0208 	add.w	r2, r3, #8
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr

080001d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001d6:	b480      	push	{r7}
 80001d8:	b083      	sub	sp, #12
 80001da:	af00      	add	r7, sp, #0
 80001dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2200      	movs	r2, #0
 80001e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr

080001ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001ee:	b480      	push	{r7}
 80001f0:	b085      	sub	sp, #20
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
 80001f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	68fa      	ldr	r2, [r7, #12]
 8000202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	689a      	ldr	r2, [r3, #8]
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	683a      	ldr	r2, [r7, #0]
 8000212:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	683a      	ldr	r2, [r7, #0]
 8000218:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	1c5a      	adds	r2, r3, #1
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
}
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800024a:	d103      	bne.n	8000254 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	691b      	ldr	r3, [r3, #16]
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	e00c      	b.n	800026e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3308      	adds	r3, #8
 8000258:	60fb      	str	r3, [r7, #12]
 800025a:	e002      	b.n	8000262 <vListInsert+0x2e>
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	429a      	cmp	r2, r3
 800026c:	d9f6      	bls.n	800025c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	685a      	ldr	r2, [r3, #4]
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	683a      	ldr	r2, [r7, #0]
 800027c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	68fa      	ldr	r2, [r7, #12]
 8000282:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	683a      	ldr	r2, [r7, #0]
 8000288:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	1c5a      	adds	r2, r3, #1
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	601a      	str	r2, [r3, #0]
}
 800029a:	bf00      	nop
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	6892      	ldr	r2, [r2, #8]
 80002ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	6852      	ldr	r2, [r2, #4]
 80002c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	685a      	ldr	r2, [r3, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d103      	bne.n	80002d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	689a      	ldr	r2, [r3, #8]
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	1e5a      	subs	r2, r3, #1
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	681b      	ldr	r3, [r3, #0]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3714      	adds	r7, #20
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
	...

080002f8 <CreateMessage>:

#include "rtc.h"

#include "systemDefines.h"

message_t CreateMessage(uint8_t * data, uint8_t dataLen, uint8_t type){
 80002f8:	b5b0      	push	{r4, r5, r7, lr}
 80002fa:	b08c      	sub	sp, #48	; 0x30
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	4611      	mov	r1, r2
 8000304:	461a      	mov	r2, r3
 8000306:	460b      	mov	r3, r1
 8000308:	71fb      	strb	r3, [r7, #7]
 800030a:	4613      	mov	r3, r2
 800030c:	71bb      	strb	r3, [r7, #6]
	message_t message;
	memcpy(&message.data, data, dataLen);
 800030e:	79fa      	ldrb	r2, [r7, #7]
 8000310:	f107 0310 	add.w	r3, r7, #16
 8000314:	68b9      	ldr	r1, [r7, #8]
 8000316:	4618      	mov	r0, r3
 8000318:	f001 fa38 	bl	800178c <memcpy>
	message.type = type;
 800031c:	79bb      	ldrb	r3, [r7, #6]
 800031e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	message.dataLen = dataLen;
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	message.timeStamp = getCurrentTime;
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <CreateMessage+0x50>)
 800032a:	62fb      	str	r3, [r7, #44]	; 0x2c
	return message;
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	461d      	mov	r5, r3
 8000330:	f107 0410 	add.w	r4, r7, #16
 8000334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000338:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800033c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000340:	68f8      	ldr	r0, [r7, #12]
 8000342:	3730      	adds	r7, #48	; 0x30
 8000344:	46bd      	mov	sp, r7
 8000346:	bdb0      	pop	{r4, r5, r7, pc}
 8000348:	080014c9 	.word	0x080014c9

0800034c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	3b04      	subs	r3, #4
 800035c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	3b04      	subs	r3, #4
 800036a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	f023 0201 	bic.w	r2, r3, #1
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	3b04      	subs	r3, #4
 800037a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800037c:	4a08      	ldr	r2, [pc, #32]	; (80003a0 <pxPortInitialiseStack+0x54>)
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	3b14      	subs	r3, #20
 8000386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	3b20      	subs	r3, #32
 8000392:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000394:	68fb      	ldr	r3, [r7, #12]
}
 8000396:	4618      	mov	r0, r3
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	080003a5 	.word	0x080003a5

080003a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003aa:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80003ae:	f383 8811 	msr	BASEPRI, r3
 80003b2:	f3bf 8f6f 	isb	sy
 80003b6:	f3bf 8f4f 	dsb	sy
 80003ba:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003bc:	e7fe      	b.n	80003bc <prvTaskExitError+0x18>
	...

080003c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <pxCurrentTCBConst2>)
 80003c2:	6819      	ldr	r1, [r3, #0]
 80003c4:	6808      	ldr	r0, [r1, #0]
 80003c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80003ca:	f380 8809 	msr	PSP, r0
 80003ce:	f3bf 8f6f 	isb	sy
 80003d2:	f04f 0000 	mov.w	r0, #0
 80003d6:	f380 8811 	msr	BASEPRI, r0
 80003da:	f04e 0e0d 	orr.w	lr, lr, #13
 80003de:	4770      	bx	lr

080003e0 <pxCurrentTCBConst2>:
 80003e0:	20000084 	.word	0x20000084
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80003e4:	bf00      	nop
 80003e6:	bf00      	nop

080003e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80003e8:	4806      	ldr	r0, [pc, #24]	; (8000404 <prvPortStartFirstTask+0x1c>)
 80003ea:	6800      	ldr	r0, [r0, #0]
 80003ec:	6800      	ldr	r0, [r0, #0]
 80003ee:	f380 8808 	msr	MSP, r0
 80003f2:	b662      	cpsie	i
 80003f4:	b661      	cpsie	f
 80003f6:	f3bf 8f4f 	dsb	sy
 80003fa:	f3bf 8f6f 	isb	sy
 80003fe:	df00      	svc	0
 8000400:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000402:	bf00      	nop
 8000404:	e000ed08 	.word	0xe000ed08

08000408 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800040c:	4a0b      	ldr	r2, [pc, #44]	; (800043c <xPortStartScheduler+0x34>)
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <xPortStartScheduler+0x34>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000416:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000418:	4a08      	ldr	r2, [pc, #32]	; (800043c <xPortStartScheduler+0x34>)
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <xPortStartScheduler+0x34>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000422:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000424:	f000 f888 	bl	8000538 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <xPortStartScheduler+0x38>)
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800042e:	f7ff ffdb 	bl	80003e8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8000432:	f7ff ffb7 	bl	80003a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000436:	2300      	movs	r3, #0
}
 8000438:	4618      	mov	r0, r3
 800043a:	bd80      	pop	{r7, pc}
 800043c:	e000ed20 	.word	0xe000ed20
 8000440:	20000000 	.word	0x20000000

08000444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800044e:	f383 8811 	msr	BASEPRI, r3
 8000452:	f3bf 8f6f 	isb	sy
 8000456:	f3bf 8f4f 	dsb	sy
 800045a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800045c:	4b04      	ldr	r3, [pc, #16]	; (8000470 <vPortEnterCritical+0x2c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	3301      	adds	r3, #1
 8000462:	4a03      	ldr	r2, [pc, #12]	; (8000470 <vPortEnterCritical+0x2c>)
 8000464:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	20000000 	.word	0x20000000

08000474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <vPortExitCritical+0x2c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	3b01      	subs	r3, #1
 8000480:	4a07      	ldr	r2, [pc, #28]	; (80004a0 <vPortExitCritical+0x2c>)
 8000482:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <vPortExitCritical+0x2c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d104      	bne.n	8000496 <vPortExitCritical+0x22>
 800048c:	2300      	movs	r3, #0
 800048e:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	20000000 	.word	0x20000000
	...

080004b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80004b0:	f3ef 8009 	mrs	r0, PSP
 80004b4:	f3bf 8f6f 	isb	sy
 80004b8:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <pxCurrentTCBConst>)
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80004c0:	6010      	str	r0, [r2, #0]
 80004c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80004c6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80004ca:	f380 8811 	msr	BASEPRI, r0
 80004ce:	f000 fd35 	bl	8000f3c <vTaskSwitchContext>
 80004d2:	f04f 0000 	mov.w	r0, #0
 80004d6:	f380 8811 	msr	BASEPRI, r0
 80004da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80004de:	6819      	ldr	r1, [r3, #0]
 80004e0:	6808      	ldr	r0, [r1, #0]
 80004e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80004e6:	f380 8809 	msr	PSP, r0
 80004ea:	f3bf 8f6f 	isb	sy
 80004ee:	4770      	bx	lr

080004f0 <pxCurrentTCBConst>:
 80004f0:	20000084 	.word	0x20000084
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop

080004f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
	__asm volatile
 80004fe:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000502:	f383 8811 	msr	BASEPRI, r3
 8000506:	f3bf 8f6f 	isb	sy
 800050a:	f3bf 8f4f 	dsb	sy
 800050e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000510:	f000 fc68 	bl	8000de4 <xTaskIncrementTick>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d003      	beq.n	8000522 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <SysTick_Handler+0x3c>)
 800051c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	e000ed04 	.word	0xe000ed04

08000538 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <vPortSetupTimerInterrupt+0x18>)
 800053e:	4a05      	ldr	r2, [pc, #20]	; (8000554 <vPortSetupTimerInterrupt+0x1c>)
 8000540:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <vPortSetupTimerInterrupt+0x20>)
 8000544:	2207      	movs	r2, #7
 8000546:	601a      	str	r2, [r3, #0]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	e000e014 	.word	0xe000e014
 8000554:	0001193f 	.word	0x0001193f
 8000558:	e000e010 	.word	0xe000e010

0800055c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 800056a:	f7ff ff6b 	bl	8000444 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000576:	68f9      	ldr	r1, [r7, #12]
 8000578:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800057a:	fb01 f303 	mul.w	r3, r1, r3
 800057e:	441a      	add	r2, r3
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2200      	movs	r2, #0
 8000588:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800059a:	3b01      	subs	r3, #1
 800059c:	68f9      	ldr	r1, [r7, #12]
 800059e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80005a0:	fb01 f303 	mul.w	r3, r1, r3
 80005a4:	441a      	add	r2, r3
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	22ff      	movs	r2, #255	; 0xff
 80005ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	22ff      	movs	r2, #255	; 0xff
 80005b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d114      	bne.n	80005ea <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	691b      	ldr	r3, [r3, #16]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d01a      	beq.n	80005fe <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3310      	adds	r3, #16
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fd11 	bl	8000ff4 <xTaskRemoveFromEventList>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d012      	beq.n	80005fe <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <xQueueGenericReset+0xb0>)
 80005da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	f3bf 8f4f 	dsb	sy
 80005e4:	f3bf 8f6f 	isb	sy
 80005e8:	e009      	b.n	80005fe <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3310      	adds	r3, #16
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fdd2 	bl	8000198 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	3324      	adds	r3, #36	; 0x24
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fdcd 	bl	8000198 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80005fe:	f7ff ff39 	bl	8000474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000602:	2301      	movs	r3, #1
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	e000ed04 	.word	0xe000ed04

08000610 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af02      	add	r7, sp, #8
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	4613      	mov	r3, r2
 800061c:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
 8000628:	e004      	b.n	8000634 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	fb02 f303 	mul.w	r3, r2, r3
 8000632:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	3350      	adds	r3, #80	; 0x50
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fd89 	bl	8000150 <pvPortMalloc>
 800063e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d00b      	beq.n	800065e <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	3350      	adds	r3, #80	; 0x50
 800064a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800064c:	79fa      	ldrb	r2, [r7, #7]
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	4613      	mov	r3, r2
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	68b9      	ldr	r1, [r7, #8]
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f000 f805 	bl	8000668 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800065e:	69bb      	ldr	r3, [r7, #24]
	}
 8000660:	4618      	mov	r0, r3
 8000662:	3720      	adds	r7, #32
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
 8000674:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d103      	bne.n	8000684 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	69ba      	ldr	r2, [r7, #24]
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	e002      	b.n	800068a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000696:	2101      	movs	r1, #1
 8000698:	69b8      	ldr	r0, [r7, #24]
 800069a:	f7ff ff5f 	bl	800055c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	78fa      	ldrb	r2, [r7, #3]
 80006a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80006c6:	f7ff febd 	bl	8000444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006ce:	6a3b      	ldr	r3, [r7, #32]
 80006d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d302      	bcc.n	80006dc <xQueueGenericSend+0x2c>
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d129      	bne.n	8000730 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80006dc:	683a      	ldr	r2, [r7, #0]
 80006de:	68b9      	ldr	r1, [r7, #8]
 80006e0:	6a38      	ldr	r0, [r7, #32]
 80006e2:	f000 f88f 	bl	8000804 <prvCopyDataToQueue>
 80006e6:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80006e8:	6a3b      	ldr	r3, [r7, #32]
 80006ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d010      	beq.n	8000712 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	3324      	adds	r3, #36	; 0x24
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fc7d 	bl	8000ff4 <xTaskRemoveFromEventList>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d013      	beq.n	8000728 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000700:	4b3f      	ldr	r3, [pc, #252]	; (8000800 <xQueueGenericSend+0x150>)
 8000702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	f3bf 8f4f 	dsb	sy
 800070c:	f3bf 8f6f 	isb	sy
 8000710:	e00a      	b.n	8000728 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d007      	beq.n	8000728 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000718:	4b39      	ldr	r3, [pc, #228]	; (8000800 <xQueueGenericSend+0x150>)
 800071a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	f3bf 8f4f 	dsb	sy
 8000724:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000728:	f7ff fea4 	bl	8000474 <vPortExitCritical>
				return pdPASS;
 800072c:	2301      	movs	r3, #1
 800072e:	e063      	b.n	80007f8 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d103      	bne.n	800073e <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000736:	f7ff fe9d 	bl	8000474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800073a:	2300      	movs	r3, #0
 800073c:	e05c      	b.n	80007f8 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	2b00      	cmp	r3, #0
 8000742:	d106      	bne.n	8000752 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fca7 	bl	800109c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800074e:	2301      	movs	r3, #1
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000752:	f7ff fe8f 	bl	8000474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000756:	f000 faa9 	bl	8000cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800075a:	f7ff fe73 	bl	8000444 <vPortEnterCritical>
 800075e:	6a3b      	ldr	r3, [r7, #32]
 8000760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000764:	b25b      	sxtb	r3, r3
 8000766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800076a:	d103      	bne.n	8000774 <xQueueGenericSend+0xc4>
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	2200      	movs	r2, #0
 8000770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800077a:	b25b      	sxtb	r3, r3
 800077c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000780:	d103      	bne.n	800078a <xQueueGenericSend+0xda>
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800078a:	f7ff fe73 	bl	8000474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800078e:	1d3a      	adds	r2, r7, #4
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4611      	mov	r1, r2
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fc96 	bl	80010c8 <xTaskCheckForTimeOut>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d124      	bne.n	80007ec <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80007a2:	6a38      	ldr	r0, [r7, #32]
 80007a4:	f000 f8ea 	bl	800097c <prvIsQueueFull>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d018      	beq.n	80007e0 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	3310      	adds	r3, #16
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fc06 	bl	8000fc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80007bc:	6a38      	ldr	r0, [r7, #32]
 80007be:	f000 f88b 	bl	80008d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80007c2:	f000 fa81 	bl	8000cc8 <xTaskResumeAll>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	f47f af7c 	bne.w	80006c6 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <xQueueGenericSend+0x150>)
 80007d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	f3bf 8f4f 	dsb	sy
 80007da:	f3bf 8f6f 	isb	sy
 80007de:	e772      	b.n	80006c6 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80007e0:	6a38      	ldr	r0, [r7, #32]
 80007e2:	f000 f879 	bl	80008d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80007e6:	f000 fa6f 	bl	8000cc8 <xTaskResumeAll>
 80007ea:	e76c      	b.n	80006c6 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80007ec:	6a38      	ldr	r0, [r7, #32]
 80007ee:	f000 f873 	bl	80008d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80007f2:	f000 fa69 	bl	8000cc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80007f6:	2300      	movs	r3, #0
		}
	}
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	e000ed04 	.word	0xe000ed04

08000804 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000818:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	2b00      	cmp	r3, #0
 8000820:	d10d      	bne.n	800083e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d14d      	bne.n	80008c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fd62 	bl	80012f8 <xTaskPriorityDisinherit>
 8000834:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	e043      	b.n	80008c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d119      	bne.n	8000878 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	6898      	ldr	r0, [r3, #8]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	461a      	mov	r2, r3
 800084e:	68b9      	ldr	r1, [r7, #8]
 8000850:	f000 ff9c 	bl	800178c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	689a      	ldr	r2, [r3, #8]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	441a      	add	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	689a      	ldr	r2, [r3, #8]
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	429a      	cmp	r2, r3
 800086c:	d32b      	bcc.n	80008c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	e026      	b.n	80008c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	68d8      	ldr	r0, [r3, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	461a      	mov	r2, r3
 8000882:	68b9      	ldr	r1, [r7, #8]
 8000884:	f000 ff82 	bl	800178c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	68da      	ldr	r2, [r3, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	425b      	negs	r3, r3
 8000892:	441a      	add	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	68da      	ldr	r2, [r3, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d207      	bcs.n	80008b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	685a      	ldr	r2, [r3, #4]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	425b      	negs	r3, r3
 80008ae:	441a      	add	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d105      	bne.n	80008c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80008ce:	697b      	ldr	r3, [r7, #20]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80008e0:	f7ff fdb0 	bl	8000444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80008ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80008ec:	e011      	b.n	8000912 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d012      	beq.n	800091c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3324      	adds	r3, #36	; 0x24
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fb7a 	bl	8000ff4 <xTaskRemoveFromEventList>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8000906:	f000 fc23 	bl	8001150 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	3b01      	subs	r3, #1
 800090e:	b2db      	uxtb	r3, r3
 8000910:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000916:	2b00      	cmp	r3, #0
 8000918:	dce9      	bgt.n	80008ee <prvUnlockQueue+0x16>
 800091a:	e000      	b.n	800091e <prvUnlockQueue+0x46>
					break;
 800091c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	22ff      	movs	r2, #255	; 0xff
 8000922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8000926:	f7ff fda5 	bl	8000474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800092a:	f7ff fd8b 	bl	8000444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000934:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000936:	e011      	b.n	800095c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d012      	beq.n	8000966 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3310      	adds	r3, #16
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fb55 	bl	8000ff4 <xTaskRemoveFromEventList>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8000950:	f000 fbfe 	bl	8001150 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8000954:	7bbb      	ldrb	r3, [r7, #14]
 8000956:	3b01      	subs	r3, #1
 8000958:	b2db      	uxtb	r3, r3
 800095a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800095c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000960:	2b00      	cmp	r3, #0
 8000962:	dce9      	bgt.n	8000938 <prvUnlockQueue+0x60>
 8000964:	e000      	b.n	8000968 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8000966:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	22ff      	movs	r2, #255	; 0xff
 800096c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8000970:	f7ff fd80 	bl	8000474 <vPortExitCritical>
}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000984:	f7ff fd5e 	bl	8000444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000990:	429a      	cmp	r2, r3
 8000992:	d102      	bne.n	800099a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8000994:	2301      	movs	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	e001      	b.n	800099e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800099e:	f7ff fd69 	bl	8000474 <vPortExitCritical>

	return xReturn;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	; 0x30
 80009b0:	af04      	add	r7, sp, #16
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	4613      	mov	r3, r2
 80009ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fbc5 	bl	8000150 <pvPortMalloc>
 80009c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00e      	beq.n	80009ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80009ce:	205c      	movs	r0, #92	; 0x5c
 80009d0:	f7ff fbbe 	bl	8000150 <pvPortMalloc>
 80009d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d003      	beq.n	80009e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
 80009e2:	e005      	b.n	80009f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80009e4:	6978      	ldr	r0, [r7, #20]
 80009e6:	f7ff fbc5 	bl	8000174 <vPortFree>
 80009ea:	e001      	b.n	80009f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d013      	beq.n	8000a1e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80009f6:	88fa      	ldrh	r2, [r7, #6]
 80009f8:	2300      	movs	r3, #0
 80009fa:	9303      	str	r3, [sp, #12]
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	9302      	str	r3, [sp, #8]
 8000a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68b9      	ldr	r1, [r7, #8]
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f000 f80e 	bl	8000a2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000a12:	69f8      	ldr	r0, [r7, #28]
 8000a14:	f000 f882 	bl	8000b1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	e002      	b.n	8000a24 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000a24:	69bb      	ldr	r3, [r7, #24]
	}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3720      	adds	r7, #32
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b086      	sub	sp, #24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	60f8      	str	r0, [r7, #12]
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	461a      	mov	r2, r3
 8000a46:	21a5      	movs	r1, #165	; 0xa5
 8000a48:	f000 feab 	bl	80017a2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8000a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a56:	3b01      	subs	r3, #1
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	f023 0307 	bic.w	r3, r3, #7
 8000a64:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	e012      	b.n	8000a92 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000a6c:	68ba      	ldr	r2, [r7, #8]
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	4413      	add	r3, r2
 8000a72:	7819      	ldrb	r1, [r3, #0]
 8000a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	4413      	add	r3, r2
 8000a7a:	3334      	adds	r3, #52	; 0x34
 8000a7c:	460a      	mov	r2, r1
 8000a7e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8000a80:	68ba      	ldr	r2, [r7, #8]
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	4413      	add	r3, r2
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d006      	beq.n	8000a9a <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d9e9      	bls.n	8000a6c <prvInitialiseNewTask+0x3e>
 8000a98:	e000      	b.n	8000a9c <prvInitialiseNewTask+0x6e>
		{
			break;
 8000a9a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	d901      	bls.n	8000aae <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab0:	6a3a      	ldr	r2, [r7, #32]
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab6:	6a3a      	ldr	r2, [r7, #32]
 8000ab8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8000aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000abc:	2200      	movs	r2, #0
 8000abe:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fb86 	bl	80001d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000acc:	3318      	adds	r3, #24
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fb81 	bl	80001d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ad8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	f1c3 0205 	rsb	r2, r3, #5
 8000ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aec:	2200      	movs	r2, #0
 8000aee:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	68f9      	ldr	r1, [r7, #12]
 8000afc:	6938      	ldr	r0, [r7, #16]
 8000afe:	f7ff fc25 	bl	800034c <pxPortInitialiseStack>
 8000b02:	4602      	mov	r2, r0
 8000b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b06:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d002      	beq.n	8000b14 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000b24:	f7ff fc8e 	bl	8000444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000b28:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <prvAddNewTaskToReadyList+0xc0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	4a2b      	ldr	r2, [pc, #172]	; (8000bdc <prvAddNewTaskToReadyList+0xc0>)
 8000b30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000b32:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <prvAddNewTaskToReadyList+0xc4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d109      	bne.n	8000b4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000b3a:	4a29      	ldr	r2, [pc, #164]	; (8000be0 <prvAddNewTaskToReadyList+0xc4>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000b40:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <prvAddNewTaskToReadyList+0xc0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d110      	bne.n	8000b6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000b48:	f000 fb26 	bl	8001198 <prvInitialiseTaskLists>
 8000b4c:	e00d      	b.n	8000b6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000b4e:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <prvAddNewTaskToReadyList+0xc8>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d109      	bne.n	8000b6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000b56:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <prvAddNewTaskToReadyList+0xc4>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d802      	bhi.n	8000b6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000b64:	4a1e      	ldr	r2, [pc, #120]	; (8000be0 <prvAddNewTaskToReadyList+0xc4>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <prvAddNewTaskToReadyList+0xcc>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a1d      	ldr	r2, [pc, #116]	; (8000be8 <prvAddNewTaskToReadyList+0xcc>)
 8000b72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <prvAddNewTaskToReadyList+0xcc>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b80:	2201      	movs	r2, #1
 8000b82:	409a      	lsls	r2, r3
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <prvAddNewTaskToReadyList+0xd0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	4a18      	ldr	r2, [pc, #96]	; (8000bec <prvAddNewTaskToReadyList+0xd0>)
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b92:	4613      	mov	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <prvAddNewTaskToReadyList+0xd4>)
 8000b9c:	441a      	add	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4610      	mov	r0, r2
 8000ba6:	f7ff fb22 	bl	80001ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000baa:	f7ff fc63 	bl	8000474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <prvAddNewTaskToReadyList+0xc8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00e      	beq.n	8000bd4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <prvAddNewTaskToReadyList+0xc4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d207      	bcs.n	8000bd4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <prvAddNewTaskToReadyList+0xd8>)
 8000bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	f3bf 8f4f 	dsb	sy
 8000bd0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2000015c 	.word	0x2000015c
 8000be0:	20000084 	.word	0x20000084
 8000be4:	20000168 	.word	0x20000168
 8000be8:	20000178 	.word	0x20000178
 8000bec:	20000164 	.word	0x20000164
 8000bf0:	20000088 	.word	0x20000088
 8000bf4:	e000ed04 	.word	0xe000ed04

08000bf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d008      	beq.n	8000c1c <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8000c0a:	f000 f84f 	bl	8000cac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000c0e:	2100      	movs	r1, #0
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 fbd5 	bl	80013c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000c16:	f000 f857 	bl	8000cc8 <xTaskResumeAll>
 8000c1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d107      	bne.n	8000c32 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <vTaskDelay+0x44>)
 8000c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	f3bf 8f4f 	dsb	sy
 8000c2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	e000ed04 	.word	0xe000ed04

08000c40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <vTaskStartScheduler+0x54>)
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2300      	movs	r3, #0
 8000c50:	2278      	movs	r2, #120	; 0x78
 8000c52:	4911      	ldr	r1, [pc, #68]	; (8000c98 <vTaskStartScheduler+0x58>)
 8000c54:	4811      	ldr	r0, [pc, #68]	; (8000c9c <vTaskStartScheduler+0x5c>)
 8000c56:	f7ff fea9 	bl	80009ac <xTaskCreate>
 8000c5a:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d114      	bne.n	8000c8c <vTaskStartScheduler+0x4c>
	__asm volatile
 8000c62:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000c66:	f383 8811 	msr	BASEPRI, r3
 8000c6a:	f3bf 8f6f 	isb	sy
 8000c6e:	f3bf 8f4f 	dsb	sy
 8000c72:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <vTaskStartScheduler+0x60>)
 8000c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <vTaskStartScheduler+0x64>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <vTaskStartScheduler+0x68>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000c88:	f7ff fbbe 	bl	8000408 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000180 	.word	0x20000180
 8000c98:	08001960 	.word	0x08001960
 8000c9c:	08001169 	.word	0x08001169
 8000ca0:	2000017c 	.word	0x2000017c
 8000ca4:	20000168 	.word	0x20000168
 8000ca8:	20000160 	.word	0x20000160

08000cac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <vTaskSuspendAll+0x18>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <vTaskSuspendAll+0x18>)
 8000cb8:	6013      	str	r3, [r2, #0]
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000184 	.word	0x20000184

08000cc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000cd6:	f7ff fbb5 	bl	8000444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000cda:	4b39      	ldr	r3, [pc, #228]	; (8000dc0 <xTaskResumeAll+0xf8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	4a37      	ldr	r2, [pc, #220]	; (8000dc0 <xTaskResumeAll+0xf8>)
 8000ce2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ce4:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <xTaskResumeAll+0xf8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d161      	bne.n	8000db0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000cec:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <xTaskResumeAll+0xfc>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d05d      	beq.n	8000db0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000cf4:	e02e      	b.n	8000d54 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000cf6:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <xTaskResumeAll+0x100>)
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	3318      	adds	r3, #24
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff face 	bl	80002a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fac9 	bl	80002a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d16:	2201      	movs	r2, #1
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <xTaskResumeAll+0x104>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	4a2a      	ldr	r2, [pc, #168]	; (8000dcc <xTaskResumeAll+0x104>)
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4a27      	ldr	r2, [pc, #156]	; (8000dd0 <xTaskResumeAll+0x108>)
 8000d32:	441a      	add	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	3304      	adds	r3, #4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	f7ff fa57 	bl	80001ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d44:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <xTaskResumeAll+0x10c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d302      	bcc.n	8000d54 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <xTaskResumeAll+0x110>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <xTaskResumeAll+0x100>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1cc      	bne.n	8000cf6 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000d62:	f000 faa5 	bl	80012b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <xTaskResumeAll+0x114>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d010      	beq.n	8000d94 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000d72:	f000 f837 	bl	8000de4 <xTaskIncrementTick>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <xTaskResumeAll+0x110>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1f1      	bne.n	8000d72 <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <xTaskResumeAll+0x114>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <xTaskResumeAll+0x110>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d009      	beq.n	8000db0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <xTaskResumeAll+0x118>)
 8000da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	f3bf 8f4f 	dsb	sy
 8000dac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000db0:	f7ff fb60 	bl	8000474 <vPortExitCritical>

	return xAlreadyYielded;
 8000db4:	68bb      	ldr	r3, [r7, #8]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000184 	.word	0x20000184
 8000dc4:	2000015c 	.word	0x2000015c
 8000dc8:	2000011c 	.word	0x2000011c
 8000dcc:	20000164 	.word	0x20000164
 8000dd0:	20000088 	.word	0x20000088
 8000dd4:	20000084 	.word	0x20000084
 8000dd8:	20000170 	.word	0x20000170
 8000ddc:	2000016c 	.word	0x2000016c
 8000de0:	e000ed04 	.word	0xe000ed04

08000de4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000dee:	4b48      	ldr	r3, [pc, #288]	; (8000f10 <xTaskIncrementTick+0x12c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d17c      	bne.n	8000ef0 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8000df6:	4b47      	ldr	r3, [pc, #284]	; (8000f14 <xTaskIncrementTick+0x130>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000dfe:	4a45      	ldr	r2, [pc, #276]	; (8000f14 <xTaskIncrementTick+0x130>)
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d110      	bne.n	8000e2c <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8000e0a:	4b43      	ldr	r3, [pc, #268]	; (8000f18 <xTaskIncrementTick+0x134>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	4b42      	ldr	r3, [pc, #264]	; (8000f1c <xTaskIncrementTick+0x138>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a40      	ldr	r2, [pc, #256]	; (8000f18 <xTaskIncrementTick+0x134>)
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4a40      	ldr	r2, [pc, #256]	; (8000f1c <xTaskIncrementTick+0x138>)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b40      	ldr	r3, [pc, #256]	; (8000f20 <xTaskIncrementTick+0x13c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	4a3e      	ldr	r2, [pc, #248]	; (8000f20 <xTaskIncrementTick+0x13c>)
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	f000 fa42 	bl	80012b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000e2c:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <xTaskIncrementTick+0x140>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d34d      	bcc.n	8000ed2 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e36:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <xTaskIncrementTick+0x134>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d101      	bne.n	8000e44 <xTaskIncrementTick+0x60>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <xTaskIncrementTick+0x62>
 8000e44:	2300      	movs	r3, #0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d004      	beq.n	8000e54 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e4a:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <xTaskIncrementTick+0x140>)
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e50:	601a      	str	r2, [r3, #0]
					break;
 8000e52:	e03e      	b.n	8000ed2 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000e54:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <xTaskIncrementTick+0x134>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d203      	bcs.n	8000e74 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000e6c:	4a2d      	ldr	r2, [pc, #180]	; (8000f24 <xTaskIncrementTick+0x140>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
						break;
 8000e72:	e02e      	b.n	8000ed2 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3304      	adds	r3, #4
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fa13 	bl	80002a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d004      	beq.n	8000e90 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	3318      	adds	r3, #24
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fa0a 	bl	80002a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	2201      	movs	r2, #1
 8000e96:	409a      	lsls	r2, r3
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <xTaskIncrementTick+0x144>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	4a22      	ldr	r2, [pc, #136]	; (8000f28 <xTaskIncrementTick+0x144>)
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <xTaskIncrementTick+0x148>)
 8000eb0:	441a      	add	r2, r3
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4610      	mov	r0, r2
 8000eba:	f7ff f998 	bl	80001ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <xTaskIncrementTick+0x14c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d3b4      	bcc.n	8000e36 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ed0:	e7b1      	b.n	8000e36 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <xTaskIncrementTick+0x14c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ed8:	4914      	ldr	r1, [pc, #80]	; (8000f2c <xTaskIncrementTick+0x148>)
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d907      	bls.n	8000efa <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 8000eea:	2301      	movs	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e004      	b.n	8000efa <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <xTaskIncrementTick+0x150>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	; (8000f34 <xTaskIncrementTick+0x150>)
 8000ef8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <xTaskIncrementTick+0x154>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 8000f02:	2301      	movs	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8000f06:	697b      	ldr	r3, [r7, #20]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000184 	.word	0x20000184
 8000f14:	20000160 	.word	0x20000160
 8000f18:	20000114 	.word	0x20000114
 8000f1c:	20000118 	.word	0x20000118
 8000f20:	20000174 	.word	0x20000174
 8000f24:	2000017c 	.word	0x2000017c
 8000f28:	20000164 	.word	0x20000164
 8000f2c:	20000088 	.word	0x20000088
 8000f30:	20000084 	.word	0x20000084
 8000f34:	2000016c 	.word	0x2000016c
 8000f38:	20000170 	.word	0x20000170

08000f3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <vTaskSwitchContext+0x78>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <vTaskSwitchContext+0x7c>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000f50:	e02a      	b.n	8000fa8 <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <vTaskSwitchContext+0x7c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <vTaskSwitchContext+0x80>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	fab3 f383 	clz	r3, r3
 8000f64:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	f1c3 031f 	rsb	r3, r3, #31
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <vTaskSwitchContext+0x84>)
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	3308      	adds	r3, #8
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d104      	bne.n	8000f9e <vTaskSwitchContext+0x62>
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <vTaskSwitchContext+0x88>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000184 	.word	0x20000184
 8000fb8:	20000170 	.word	0x20000170
 8000fbc:	20000164 	.word	0x20000164
 8000fc0:	20000088 	.word	0x20000088
 8000fc4:	20000084 	.word	0x20000084

08000fc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <vTaskPlaceOnEventList+0x28>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3318      	adds	r3, #24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff f92a 	bl	8000234 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	6838      	ldr	r0, [r7, #0]
 8000fe4:	f000 f9ec 	bl	80013c0 <prvAddCurrentTaskToDelayedList>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000084 	.word	0x20000084

08000ff4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	3318      	adds	r3, #24
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff f94b 	bl	80002a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <xTaskRemoveFromEventList+0x90>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d11c      	bne.n	8001050 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	3304      	adds	r3, #4
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff f942 	bl	80002a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001024:	2201      	movs	r2, #1
 8001026:	409a      	lsls	r2, r3
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <xTaskRemoveFromEventList+0x94>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4313      	orrs	r3, r2
 800102e:	4a16      	ldr	r2, [pc, #88]	; (8001088 <xTaskRemoveFromEventList+0x94>)
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4a13      	ldr	r2, [pc, #76]	; (800108c <xTaskRemoveFromEventList+0x98>)
 8001040:	441a      	add	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	3304      	adds	r3, #4
 8001046:	4619      	mov	r1, r3
 8001048:	4610      	mov	r0, r2
 800104a:	f7ff f8d0 	bl	80001ee <vListInsertEnd>
 800104e:	e005      	b.n	800105c <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	3318      	adds	r3, #24
 8001054:	4619      	mov	r1, r3
 8001056:	480e      	ldr	r0, [pc, #56]	; (8001090 <xTaskRemoveFromEventList+0x9c>)
 8001058:	f7ff f8c9 	bl	80001ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <xTaskRemoveFromEventList+0xa0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001066:	429a      	cmp	r2, r3
 8001068:	d905      	bls.n	8001076 <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800106a:	2301      	movs	r3, #1
 800106c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <xTaskRemoveFromEventList+0xa4>)
 8001070:	2201      	movs	r2, #1
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	e001      	b.n	800107a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000184 	.word	0x20000184
 8001088:	20000164 	.word	0x20000164
 800108c:	20000088 	.word	0x20000088
 8001090:	2000011c 	.word	0x2000011c
 8001094:	20000084 	.word	0x20000084
 8001098:	20000170 	.word	0x20000170

0800109c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <vTaskSetTimeOutState+0x24>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <vTaskSetTimeOutState+0x28>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	605a      	str	r2, [r3, #4]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000174 	.word	0x20000174
 80010c4:	20000160 	.word	0x20000160

080010c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 80010d2:	f7ff f9b7 	bl	8000444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <xTaskCheckForTimeOut+0x80>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010e4:	d102      	bne.n	80010ec <xTaskCheckForTimeOut+0x24>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	e026      	b.n	800113a <xTaskCheckForTimeOut+0x72>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <xTaskCheckForTimeOut+0x84>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d007      	beq.n	8001108 <xTaskCheckForTimeOut+0x40>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d802      	bhi.n	8001108 <xTaskCheckForTimeOut+0x40>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001102:	2301      	movs	r3, #1
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	e018      	b.n	800113a <xTaskCheckForTimeOut+0x72>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	1ad2      	subs	r2, r2, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d20e      	bcs.n	8001136 <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6859      	ldr	r1, [r3, #4]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1acb      	subs	r3, r1, r3
 8001124:	441a      	add	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffb6 	bl	800109c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	e001      	b.n	800113a <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
 8001136:	2301      	movs	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800113a:	f7ff f99b 	bl	8000474 <vPortExitCritical>

	return xReturn;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000160 	.word	0x20000160
 800114c:	20000174 	.word	0x20000174

08001150 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <vTaskMissedYield+0x14>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000170 	.word	0x20000170

08001168 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001170:	f000 f852 	bl	8001218 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <prvIdleTask+0x28>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d9f9      	bls.n	8001170 <prvIdleTask+0x8>
			{
				taskYIELD();
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <prvIdleTask+0x2c>)
 800117e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	f3bf 8f4f 	dsb	sy
 8001188:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800118c:	e7f0      	b.n	8001170 <prvIdleTask+0x8>
 800118e:	bf00      	nop
 8001190:	20000088 	.word	0x20000088
 8001194:	e000ed04 	.word	0xe000ed04

08001198 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	e00c      	b.n	80011be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <prvInitialiseTaskLists+0x60>)
 80011b0:	4413      	add	r3, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7fe fff0 	bl	8000198 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3301      	adds	r3, #1
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d9ef      	bls.n	80011a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <prvInitialiseTaskLists+0x64>)
 80011c6:	f7fe ffe7 	bl	8000198 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <prvInitialiseTaskLists+0x68>)
 80011cc:	f7fe ffe4 	bl	8000198 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <prvInitialiseTaskLists+0x6c>)
 80011d2:	f7fe ffe1 	bl	8000198 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <prvInitialiseTaskLists+0x70>)
 80011d8:	f7fe ffde 	bl	8000198 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80011dc:	480b      	ldr	r0, [pc, #44]	; (800120c <prvInitialiseTaskLists+0x74>)
 80011de:	f7fe ffdb 	bl	8000198 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <prvInitialiseTaskLists+0x78>)
 80011e4:	4a05      	ldr	r2, [pc, #20]	; (80011fc <prvInitialiseTaskLists+0x64>)
 80011e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <prvInitialiseTaskLists+0x7c>)
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <prvInitialiseTaskLists+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000088 	.word	0x20000088
 80011fc:	200000ec 	.word	0x200000ec
 8001200:	20000100 	.word	0x20000100
 8001204:	2000011c 	.word	0x2000011c
 8001208:	20000130 	.word	0x20000130
 800120c:	20000148 	.word	0x20000148
 8001210:	20000114 	.word	0x20000114
 8001214:	20000118 	.word	0x20000118

08001218 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800121e:	e028      	b.n	8001272 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8001220:	f7ff fd44 	bl	8000cac <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <prvCheckTasksWaitingTermination+0x6c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	bf0c      	ite	eq
 800122c:	2301      	moveq	r3, #1
 800122e:	2300      	movne	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8001234:	f7ff fd48 	bl	8000cc8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d119      	bne.n	8001272 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800123e:	f7ff f901 	bl	8000444 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <prvCheckTasksWaitingTermination+0x6c>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	3304      	adds	r3, #4
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f828 	bl	80002a4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <prvCheckTasksWaitingTermination+0x70>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3b01      	subs	r3, #1
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <prvCheckTasksWaitingTermination+0x70>)
 800125c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <prvCheckTasksWaitingTermination+0x74>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3b01      	subs	r3, #1
 8001264:	4a09      	ldr	r2, [pc, #36]	; (800128c <prvCheckTasksWaitingTermination+0x74>)
 8001266:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8001268:	f7ff f904 	bl	8000474 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800126c:	6838      	ldr	r0, [r7, #0]
 800126e:	f000 f80f 	bl	8001290 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <prvCheckTasksWaitingTermination+0x74>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1d2      	bne.n	8001220 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000130 	.word	0x20000130
 8001288:	2000015c 	.word	0x2000015c
 800128c:	20000144 	.word	0x20000144

08001290 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	4618      	mov	r0, r3
 800129e:	f7fe ff69 	bl	8000174 <vPortFree>
			vPortFree( pxTCB );
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7fe ff66 	bl	8000174 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <prvResetNextTaskUnblockTime+0x40>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <prvResetNextTaskUnblockTime+0x14>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <prvResetNextTaskUnblockTime+0x16>
 80012c4:	2300      	movs	r3, #0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <prvResetNextTaskUnblockTime+0x44>)
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80012d2:	e008      	b.n	80012e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <prvResetNextTaskUnblockTime+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <prvResetNextTaskUnblockTime+0x44>)
 80012e4:	6013      	str	r3, [r2, #0]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	20000114 	.word	0x20000114
 80012f4:	2000017c 	.word	0x2000017c

080012f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d04f      	beq.n	80013ae <xTaskPriorityDisinherit+0xb6>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001312:	1e5a      	subs	r2, r3, #1
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001320:	429a      	cmp	r2, r3
 8001322:	d044      	beq.n	80013ae <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001328:	2b00      	cmp	r3, #0
 800132a:	d140      	bne.n	80013ae <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	3304      	adds	r3, #4
 8001330:	4618      	mov	r0, r3
 8001332:	f7fe ffb7 	bl	80002a4 <uxListRemove>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d115      	bne.n	8001368 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001340:	491d      	ldr	r1, [pc, #116]	; (80013b8 <xTaskPriorityDisinherit+0xc0>)
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10a      	bne.n	8001368 <xTaskPriorityDisinherit+0x70>
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	2201      	movs	r2, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43da      	mvns	r2, r3
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <xTaskPriorityDisinherit+0xc4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4013      	ands	r3, r2
 8001364:	4a15      	ldr	r2, [pc, #84]	; (80013bc <xTaskPriorityDisinherit+0xc4>)
 8001366:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	f1c3 0205 	rsb	r2, r3, #5
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001380:	2201      	movs	r2, #1
 8001382:	409a      	lsls	r2, r3
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <xTaskPriorityDisinherit+0xc4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4313      	orrs	r3, r2
 800138a:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <xTaskPriorityDisinherit+0xc4>)
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <xTaskPriorityDisinherit+0xc0>)
 800139c:	441a      	add	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	3304      	adds	r3, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	4610      	mov	r0, r2
 80013a6:	f7fe ff22 	bl	80001ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80013aa:	2301      	movs	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80013ae:	68fb      	ldr	r3, [r7, #12]
	}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000088 	.word	0x20000088
 80013bc:	20000164 	.word	0x20000164

080013c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <prvAddCurrentTaskToDelayedList+0xb0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <prvAddCurrentTaskToDelayedList+0xb4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3304      	adds	r3, #4
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7fe ff64 	bl	80002a4 <uxListRemove>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10b      	bne.n	80013fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <prvAddCurrentTaskToDelayedList+0xb4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	2201      	movs	r2, #1
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <prvAddCurrentTaskToDelayedList+0xb8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4013      	ands	r3, r2
 80013f6:	4a20      	ldr	r2, [pc, #128]	; (8001478 <prvAddCurrentTaskToDelayedList+0xb8>)
 80013f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001400:	d10a      	bne.n	8001418 <prvAddCurrentTaskToDelayedList+0x58>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d007      	beq.n	8001418 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3304      	adds	r3, #4
 800140e:	4619      	mov	r1, r3
 8001410:	481a      	ldr	r0, [pc, #104]	; (800147c <prvAddCurrentTaskToDelayedList+0xbc>)
 8001412:	f7fe feec 	bl	80001ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001416:	e026      	b.n	8001466 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d209      	bcs.n	8001444 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3304      	adds	r3, #4
 800143a:	4619      	mov	r1, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f7fe fef9 	bl	8000234 <vListInsert>
}
 8001442:	e010      	b.n	8001466 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3304      	adds	r3, #4
 800144e:	4619      	mov	r1, r3
 8001450:	4610      	mov	r0, r2
 8001452:	f7fe feef 	bl	8000234 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	429a      	cmp	r2, r3
 800145e:	d202      	bcs.n	8001466 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001460:	4a09      	ldr	r2, [pc, #36]	; (8001488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	6013      	str	r3, [r2, #0]
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000160 	.word	0x20000160
 8001474:	20000084 	.word	0x20000084
 8001478:	20000164 	.word	0x20000164
 800147c:	20000148 	.word	0x20000148
 8001480:	20000118 	.word	0x20000118
 8001484:	20000114 	.word	0x20000114
 8001488:	2000017c 	.word	0x2000017c

0800148c <main>:

QueueHandle_t OutputQueue;



 int main(){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af02      	add	r7, sp, #8

	 OutputQueue = xQueueCreate(OUTPUT_QUEUE_SIZE, sizeof(message_t));
 8001492:	2200      	movs	r2, #0
 8001494:	2120      	movs	r1, #32
 8001496:	2010      	movs	r0, #16
 8001498:	f7ff f8ba 	bl	8000610 <xQueueGenericCreate>
 800149c:	4602      	mov	r2, r0
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <main+0x30>)
 80014a0:	601a      	str	r2, [r3, #0]

	// 	xTaskCreate( bmp280_read_temp_full,  "bmp280_read_temp_full", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
	// 	xTaskCreate( bmp280_read_press_full, "bmp280_read_press_full", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
	 	xTaskCreate( ThreadLightSensor, "ThreadLigtSensor", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 80014a2:	2300      	movs	r3, #0
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	2301      	movs	r3, #1
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2300      	movs	r3, #0
 80014ac:	2278      	movs	r2, #120	; 0x78
 80014ae:	4904      	ldr	r1, [pc, #16]	; (80014c0 <main+0x34>)
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <main+0x38>)
 80014b2:	f7ff fa7b 	bl	80009ac <xTaskCreate>
	// 	xTaskCreate( nr24l01_receiver, "rex", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
	 	vTaskStartScheduler();
 80014b6:	f7ff fbc3 	bl	8000c40 <vTaskStartScheduler>


   while (1) {
 80014ba:	e7fe      	b.n	80014ba <main+0x2e>
 80014bc:	20000194 	.word	0x20000194
 80014c0:	08001968 	.word	0x08001968
 80014c4:	080016e1 	.word	0x080016e1

080014c8 <getCurrentTime>:
 *  Created on: 05.08.2018
 *      Author: tomek
 */
#include "rtc.h"

uint32_t getCurrentTime (void){
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
	return 1;
 80014cc:	2301      	movs	r3, #1
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
	...

080014d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001510 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014de:	e003      	b.n	80014e8 <LoopCopyDataInit>

080014e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80014e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014e6:	3104      	adds	r1, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014e8:	480b      	ldr	r0, [pc, #44]	; (8001518 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80014ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014f0:	d3f6      	bcc.n	80014e0 <CopyDataInit>
	ldr	r2, =_sbss
 80014f2:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80014f4:	e002      	b.n	80014fc <LoopFillZerobss>

080014f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014f8:	f842 3b04 	str.w	r3, [r2], #4

080014fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80014fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001500:	d3f9      	bcc.n	80014f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001502:	f000 f82b 	bl	800155c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001506:	f000 f90d 	bl	8001724 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800150a:	f7ff ffbf 	bl	800148c <main>
	bx	lr
 800150e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001510:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001514:	08001984 	.word	0x08001984
	ldr	r0, =_sdata
 8001518:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800151c:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8001520:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001524:	2000019c 	.word	0x2000019c

08001528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <ADC1_2_IRQHandler>

0800152a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
	...

0800155c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001560:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <SystemInit+0x5c>)
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <SystemInit+0x5c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800156c:	4912      	ldr	r1, [pc, #72]	; (80015b8 <SystemInit+0x5c>)
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <SystemInit+0x5c>)
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <SystemInit+0x60>)
 8001574:	4013      	ands	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001578:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <SystemInit+0x5c>)
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <SystemInit+0x5c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001586:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001588:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <SystemInit+0x5c>)
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <SystemInit+0x5c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001592:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001594:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <SystemInit+0x5c>)
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <SystemInit+0x5c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800159e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SystemInit+0x5c>)
 80015a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80015a6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80015a8:	f000 f80c 	bl	80015c4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <SystemInit+0x64>)
 80015ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000
 80015bc:	f8ff0000 	.word	0xf8ff0000
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80015c8:	f000 f802 	bl	80015d0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80015de:	4a3a      	ldr	r2, [pc, #232]	; (80016c8 <SetSysClockTo72+0xf8>)
 80015e0:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <SetSysClockTo72+0xf8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80015ea:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <SetSysClockTo72+0xf8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3301      	adds	r3, #1
 80015f8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d103      	bne.n	8001608 <SetSysClockTo72+0x38>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001606:	d1f0      	bne.n	80015ea <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001608:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <SetSysClockTo72+0xf8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001614:	2301      	movs	r3, #1
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	e001      	b.n	800161e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d14b      	bne.n	80016bc <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001624:	4a29      	ldr	r2, [pc, #164]	; (80016cc <SetSysClockTo72+0xfc>)
 8001626:	4b29      	ldr	r3, [pc, #164]	; (80016cc <SetSysClockTo72+0xfc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001630:	4a26      	ldr	r2, [pc, #152]	; (80016cc <SetSysClockTo72+0xfc>)
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <SetSysClockTo72+0xfc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 0303 	bic.w	r3, r3, #3
 800163a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800163c:	4a23      	ldr	r2, [pc, #140]	; (80016cc <SetSysClockTo72+0xfc>)
 800163e:	4b23      	ldr	r3, [pc, #140]	; (80016cc <SetSysClockTo72+0xfc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001648:	4a1f      	ldr	r2, [pc, #124]	; (80016c8 <SetSysClockTo72+0xf8>)
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <SetSysClockTo72+0xf8>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001650:	4a1d      	ldr	r2, [pc, #116]	; (80016c8 <SetSysClockTo72+0xf8>)
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <SetSysClockTo72+0xf8>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <SetSysClockTo72+0xf8>)
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <SetSysClockTo72+0xf8>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001662:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001664:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <SetSysClockTo72+0xf8>)
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <SetSysClockTo72+0xf8>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800166e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001670:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <SetSysClockTo72+0xf8>)
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <SetSysClockTo72+0xf8>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800167a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <SetSysClockTo72+0xf8>)
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <SetSysClockTo72+0xf8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001686:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001688:	bf00      	nop
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <SetSysClockTo72+0xf8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f9      	beq.n	800168a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001696:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <SetSysClockTo72+0xf8>)
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <SetSysClockTo72+0xf8>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f023 0303 	bic.w	r3, r3, #3
 80016a0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80016a2:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <SetSysClockTo72+0xf8>)
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <SetSysClockTo72+0xf8>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80016ae:	bf00      	nop
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <SetSysClockTo72+0xf8>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d1f9      	bne.n	80016b0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40022000 	.word	0x40022000

080016d0 <GetLightLevel>:
void LightSensorInit(void){

}


lightLevel_t GetLightLevel(void){
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
	return 1;
 80016d4:	2301      	movs	r3, #1
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
	...

080016e0 <ThreadLightSensor>:



void ThreadLightSensor ( void * pvParameters )
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	; 0x30
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

	for (;;) {
		lightLevel_t lightLevel = GetLightLevel();
 80016e8:	f7ff fff2 	bl	80016d0 <GetLightLevel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		message_t message = CreateMessage((uint8_t*) &lightLevel, sizeof(lightLevel_t), lightLevel);
 80016f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016f6:	f107 000c 	add.w	r0, r7, #12
 80016fa:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 80016fe:	2201      	movs	r2, #1
 8001700:	f7fe fdfa 	bl	80002f8 <CreateMessage>
		xQueueSend(OutputQueue, &message, 0);
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <ThreadLightSensor+0x40>)
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	f107 010c 	add.w	r1, r7, #12
 800170c:	2300      	movs	r3, #0
 800170e:	2200      	movs	r2, #0
 8001710:	f7fe ffce 	bl	80006b0 <xQueueGenericSend>
		vTaskDelay(1000);
 8001714:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001718:	f7ff fa6e 	bl	8000bf8 <vTaskDelay>
	for (;;) {
 800171c:	e7e4      	b.n	80016e8 <ThreadLightSensor+0x8>
 800171e:	bf00      	nop
 8001720:	20000194 	.word	0x20000194

08001724 <__libc_init_array>:
 8001724:	b570      	push	{r4, r5, r6, lr}
 8001726:	2500      	movs	r5, #0
 8001728:	4e0c      	ldr	r6, [pc, #48]	; (800175c <__libc_init_array+0x38>)
 800172a:	4c0d      	ldr	r4, [pc, #52]	; (8001760 <__libc_init_array+0x3c>)
 800172c:	1ba4      	subs	r4, r4, r6
 800172e:	10a4      	asrs	r4, r4, #2
 8001730:	42a5      	cmp	r5, r4
 8001732:	d109      	bne.n	8001748 <__libc_init_array+0x24>
 8001734:	f000 f908 	bl	8001948 <_init>
 8001738:	2500      	movs	r5, #0
 800173a:	4e0a      	ldr	r6, [pc, #40]	; (8001764 <__libc_init_array+0x40>)
 800173c:	4c0a      	ldr	r4, [pc, #40]	; (8001768 <__libc_init_array+0x44>)
 800173e:	1ba4      	subs	r4, r4, r6
 8001740:	10a4      	asrs	r4, r4, #2
 8001742:	42a5      	cmp	r5, r4
 8001744:	d105      	bne.n	8001752 <__libc_init_array+0x2e>
 8001746:	bd70      	pop	{r4, r5, r6, pc}
 8001748:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800174c:	4798      	blx	r3
 800174e:	3501      	adds	r5, #1
 8001750:	e7ee      	b.n	8001730 <__libc_init_array+0xc>
 8001752:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001756:	4798      	blx	r3
 8001758:	3501      	adds	r5, #1
 800175a:	e7f2      	b.n	8001742 <__libc_init_array+0x1e>
 800175c:	0800197c 	.word	0x0800197c
 8001760:	0800197c 	.word	0x0800197c
 8001764:	0800197c 	.word	0x0800197c
 8001768:	08001980 	.word	0x08001980

0800176c <malloc>:
 800176c:	4b02      	ldr	r3, [pc, #8]	; (8001778 <malloc+0xc>)
 800176e:	4601      	mov	r1, r0
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	f000 b86b 	b.w	800184c <_malloc_r>
 8001776:	bf00      	nop
 8001778:	20000004 	.word	0x20000004

0800177c <free>:
 800177c:	4b02      	ldr	r3, [pc, #8]	; (8001788 <free+0xc>)
 800177e:	4601      	mov	r1, r0
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	f000 b817 	b.w	80017b4 <_free_r>
 8001786:	bf00      	nop
 8001788:	20000004 	.word	0x20000004

0800178c <memcpy>:
 800178c:	b510      	push	{r4, lr}
 800178e:	1e43      	subs	r3, r0, #1
 8001790:	440a      	add	r2, r1
 8001792:	4291      	cmp	r1, r2
 8001794:	d100      	bne.n	8001798 <memcpy+0xc>
 8001796:	bd10      	pop	{r4, pc}
 8001798:	f811 4b01 	ldrb.w	r4, [r1], #1
 800179c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80017a0:	e7f7      	b.n	8001792 <memcpy+0x6>

080017a2 <memset>:
 80017a2:	4603      	mov	r3, r0
 80017a4:	4402      	add	r2, r0
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d100      	bne.n	80017ac <memset+0xa>
 80017aa:	4770      	bx	lr
 80017ac:	f803 1b01 	strb.w	r1, [r3], #1
 80017b0:	e7f9      	b.n	80017a6 <memset+0x4>
	...

080017b4 <_free_r>:
 80017b4:	b538      	push	{r3, r4, r5, lr}
 80017b6:	4605      	mov	r5, r0
 80017b8:	2900      	cmp	r1, #0
 80017ba:	d043      	beq.n	8001844 <_free_r+0x90>
 80017bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017c0:	1f0c      	subs	r4, r1, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	bfb8      	it	lt
 80017c6:	18e4      	addlt	r4, r4, r3
 80017c8:	f000 f8ae 	bl	8001928 <__malloc_lock>
 80017cc:	4a1e      	ldr	r2, [pc, #120]	; (8001848 <_free_r+0x94>)
 80017ce:	6813      	ldr	r3, [r2, #0]
 80017d0:	4610      	mov	r0, r2
 80017d2:	b933      	cbnz	r3, 80017e2 <_free_r+0x2e>
 80017d4:	6063      	str	r3, [r4, #4]
 80017d6:	6014      	str	r4, [r2, #0]
 80017d8:	4628      	mov	r0, r5
 80017da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017de:	f000 b8a4 	b.w	800192a <__malloc_unlock>
 80017e2:	42a3      	cmp	r3, r4
 80017e4:	d90b      	bls.n	80017fe <_free_r+0x4a>
 80017e6:	6821      	ldr	r1, [r4, #0]
 80017e8:	1862      	adds	r2, r4, r1
 80017ea:	4293      	cmp	r3, r2
 80017ec:	bf01      	itttt	eq
 80017ee:	681a      	ldreq	r2, [r3, #0]
 80017f0:	685b      	ldreq	r3, [r3, #4]
 80017f2:	1852      	addeq	r2, r2, r1
 80017f4:	6022      	streq	r2, [r4, #0]
 80017f6:	6063      	str	r3, [r4, #4]
 80017f8:	6004      	str	r4, [r0, #0]
 80017fa:	e7ed      	b.n	80017d8 <_free_r+0x24>
 80017fc:	4613      	mov	r3, r2
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	b10a      	cbz	r2, 8001806 <_free_r+0x52>
 8001802:	42a2      	cmp	r2, r4
 8001804:	d9fa      	bls.n	80017fc <_free_r+0x48>
 8001806:	6819      	ldr	r1, [r3, #0]
 8001808:	1858      	adds	r0, r3, r1
 800180a:	42a0      	cmp	r0, r4
 800180c:	d10b      	bne.n	8001826 <_free_r+0x72>
 800180e:	6820      	ldr	r0, [r4, #0]
 8001810:	4401      	add	r1, r0
 8001812:	1858      	adds	r0, r3, r1
 8001814:	4282      	cmp	r2, r0
 8001816:	6019      	str	r1, [r3, #0]
 8001818:	d1de      	bne.n	80017d8 <_free_r+0x24>
 800181a:	6810      	ldr	r0, [r2, #0]
 800181c:	6852      	ldr	r2, [r2, #4]
 800181e:	4401      	add	r1, r0
 8001820:	6019      	str	r1, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	e7d8      	b.n	80017d8 <_free_r+0x24>
 8001826:	d902      	bls.n	800182e <_free_r+0x7a>
 8001828:	230c      	movs	r3, #12
 800182a:	602b      	str	r3, [r5, #0]
 800182c:	e7d4      	b.n	80017d8 <_free_r+0x24>
 800182e:	6820      	ldr	r0, [r4, #0]
 8001830:	1821      	adds	r1, r4, r0
 8001832:	428a      	cmp	r2, r1
 8001834:	bf01      	itttt	eq
 8001836:	6811      	ldreq	r1, [r2, #0]
 8001838:	6852      	ldreq	r2, [r2, #4]
 800183a:	1809      	addeq	r1, r1, r0
 800183c:	6021      	streq	r1, [r4, #0]
 800183e:	6062      	str	r2, [r4, #4]
 8001840:	605c      	str	r4, [r3, #4]
 8001842:	e7c9      	b.n	80017d8 <_free_r+0x24>
 8001844:	bd38      	pop	{r3, r4, r5, pc}
 8001846:	bf00      	nop
 8001848:	20000188 	.word	0x20000188

0800184c <_malloc_r>:
 800184c:	b570      	push	{r4, r5, r6, lr}
 800184e:	1ccd      	adds	r5, r1, #3
 8001850:	f025 0503 	bic.w	r5, r5, #3
 8001854:	3508      	adds	r5, #8
 8001856:	2d0c      	cmp	r5, #12
 8001858:	bf38      	it	cc
 800185a:	250c      	movcc	r5, #12
 800185c:	2d00      	cmp	r5, #0
 800185e:	4606      	mov	r6, r0
 8001860:	db01      	blt.n	8001866 <_malloc_r+0x1a>
 8001862:	42a9      	cmp	r1, r5
 8001864:	d903      	bls.n	800186e <_malloc_r+0x22>
 8001866:	230c      	movs	r3, #12
 8001868:	6033      	str	r3, [r6, #0]
 800186a:	2000      	movs	r0, #0
 800186c:	bd70      	pop	{r4, r5, r6, pc}
 800186e:	f000 f85b 	bl	8001928 <__malloc_lock>
 8001872:	4a23      	ldr	r2, [pc, #140]	; (8001900 <_malloc_r+0xb4>)
 8001874:	6814      	ldr	r4, [r2, #0]
 8001876:	4621      	mov	r1, r4
 8001878:	b991      	cbnz	r1, 80018a0 <_malloc_r+0x54>
 800187a:	4c22      	ldr	r4, [pc, #136]	; (8001904 <_malloc_r+0xb8>)
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	b91b      	cbnz	r3, 8001888 <_malloc_r+0x3c>
 8001880:	4630      	mov	r0, r6
 8001882:	f000 f841 	bl	8001908 <_sbrk_r>
 8001886:	6020      	str	r0, [r4, #0]
 8001888:	4629      	mov	r1, r5
 800188a:	4630      	mov	r0, r6
 800188c:	f000 f83c 	bl	8001908 <_sbrk_r>
 8001890:	1c43      	adds	r3, r0, #1
 8001892:	d126      	bne.n	80018e2 <_malloc_r+0x96>
 8001894:	230c      	movs	r3, #12
 8001896:	4630      	mov	r0, r6
 8001898:	6033      	str	r3, [r6, #0]
 800189a:	f000 f846 	bl	800192a <__malloc_unlock>
 800189e:	e7e4      	b.n	800186a <_malloc_r+0x1e>
 80018a0:	680b      	ldr	r3, [r1, #0]
 80018a2:	1b5b      	subs	r3, r3, r5
 80018a4:	d41a      	bmi.n	80018dc <_malloc_r+0x90>
 80018a6:	2b0b      	cmp	r3, #11
 80018a8:	d90f      	bls.n	80018ca <_malloc_r+0x7e>
 80018aa:	600b      	str	r3, [r1, #0]
 80018ac:	18cc      	adds	r4, r1, r3
 80018ae:	50cd      	str	r5, [r1, r3]
 80018b0:	4630      	mov	r0, r6
 80018b2:	f000 f83a 	bl	800192a <__malloc_unlock>
 80018b6:	f104 000b 	add.w	r0, r4, #11
 80018ba:	1d23      	adds	r3, r4, #4
 80018bc:	f020 0007 	bic.w	r0, r0, #7
 80018c0:	1ac3      	subs	r3, r0, r3
 80018c2:	d01b      	beq.n	80018fc <_malloc_r+0xb0>
 80018c4:	425a      	negs	r2, r3
 80018c6:	50e2      	str	r2, [r4, r3]
 80018c8:	bd70      	pop	{r4, r5, r6, pc}
 80018ca:	428c      	cmp	r4, r1
 80018cc:	bf0b      	itete	eq
 80018ce:	6863      	ldreq	r3, [r4, #4]
 80018d0:	684b      	ldrne	r3, [r1, #4]
 80018d2:	6013      	streq	r3, [r2, #0]
 80018d4:	6063      	strne	r3, [r4, #4]
 80018d6:	bf18      	it	ne
 80018d8:	460c      	movne	r4, r1
 80018da:	e7e9      	b.n	80018b0 <_malloc_r+0x64>
 80018dc:	460c      	mov	r4, r1
 80018de:	6849      	ldr	r1, [r1, #4]
 80018e0:	e7ca      	b.n	8001878 <_malloc_r+0x2c>
 80018e2:	1cc4      	adds	r4, r0, #3
 80018e4:	f024 0403 	bic.w	r4, r4, #3
 80018e8:	42a0      	cmp	r0, r4
 80018ea:	d005      	beq.n	80018f8 <_malloc_r+0xac>
 80018ec:	1a21      	subs	r1, r4, r0
 80018ee:	4630      	mov	r0, r6
 80018f0:	f000 f80a 	bl	8001908 <_sbrk_r>
 80018f4:	3001      	adds	r0, #1
 80018f6:	d0cd      	beq.n	8001894 <_malloc_r+0x48>
 80018f8:	6025      	str	r5, [r4, #0]
 80018fa:	e7d9      	b.n	80018b0 <_malloc_r+0x64>
 80018fc:	bd70      	pop	{r4, r5, r6, pc}
 80018fe:	bf00      	nop
 8001900:	20000188 	.word	0x20000188
 8001904:	2000018c 	.word	0x2000018c

08001908 <_sbrk_r>:
 8001908:	b538      	push	{r3, r4, r5, lr}
 800190a:	2300      	movs	r3, #0
 800190c:	4c05      	ldr	r4, [pc, #20]	; (8001924 <_sbrk_r+0x1c>)
 800190e:	4605      	mov	r5, r0
 8001910:	4608      	mov	r0, r1
 8001912:	6023      	str	r3, [r4, #0]
 8001914:	f000 f80a 	bl	800192c <_sbrk>
 8001918:	1c43      	adds	r3, r0, #1
 800191a:	d102      	bne.n	8001922 <_sbrk_r+0x1a>
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	b103      	cbz	r3, 8001922 <_sbrk_r+0x1a>
 8001920:	602b      	str	r3, [r5, #0]
 8001922:	bd38      	pop	{r3, r4, r5, pc}
 8001924:	20000198 	.word	0x20000198

08001928 <__malloc_lock>:
 8001928:	4770      	bx	lr

0800192a <__malloc_unlock>:
 800192a:	4770      	bx	lr

0800192c <_sbrk>:
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <_sbrk+0x14>)
 800192e:	4602      	mov	r2, r0
 8001930:	6819      	ldr	r1, [r3, #0]
 8001932:	b909      	cbnz	r1, 8001938 <_sbrk+0xc>
 8001934:	4903      	ldr	r1, [pc, #12]	; (8001944 <_sbrk+0x18>)
 8001936:	6019      	str	r1, [r3, #0]
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	4402      	add	r2, r0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	4770      	bx	lr
 8001940:	20000190 	.word	0x20000190
 8001944:	2000019c 	.word	0x2000019c

08001948 <_init>:
 8001948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194a:	bf00      	nop
 800194c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800194e:	bc08      	pop	{r3}
 8001950:	469e      	mov	lr, r3
 8001952:	4770      	bx	lr

08001954 <_fini>:
 8001954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001956:	bf00      	nop
 8001958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800195a:	bc08      	pop	{r3}
 800195c:	469e      	mov	lr, r3
 800195e:	4770      	bx	lr
