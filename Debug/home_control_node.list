
home_control_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002aec  08002aec  00012aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002b7c  08002b7c  00012b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00012b84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b3c  20000000  08002b84  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00002000  20000b3c  08002b84  00020b3c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00012b84  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a940  00000000  00000000  00012bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001cbd  00000000  00000000  0001d4ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007a0  00000000  00000000  0001f1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c8  00000000  00000000  0001f950  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000035da  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002b27  00000000  00000000  000235f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00026119  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001d68  00000000  00000000  00026198  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ad4 	.word	0x08002ad4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08002ad4 	.word	0x08002ad4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000164:	4a03      	ldr	r2, [pc, #12]	; (8000174 <EXTI_ClearITPendingBit+0x18>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	6153      	str	r3, [r2, #20]
}
 800016a:	bf00      	nop
 800016c:	370c      	adds	r7, #12
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr
 8000174:	40010400 	.word	0x40010400

08000178 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000178:	b480      	push	{r7}
 800017a:	b089      	sub	sp, #36	; 0x24
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
 8000180:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000182:	2300      	movs	r3, #0
 8000184:	61fb      	str	r3, [r7, #28]
 8000186:	2300      	movs	r3, #0
 8000188:	613b      	str	r3, [r7, #16]
 800018a:	2300      	movs	r3, #0
 800018c:	61bb      	str	r3, [r7, #24]
 800018e:	2300      	movs	r3, #0
 8000190:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000192:	2300      	movs	r3, #0
 8000194:	617b      	str	r3, [r7, #20]
 8000196:	2300      	movs	r3, #0
 8000198:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	78db      	ldrb	r3, [r3, #3]
 800019e:	f003 030f 	and.w	r3, r3, #15
 80001a2:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80001a4:	683b      	ldr	r3, [r7, #0]
 80001a6:	78db      	ldrb	r3, [r3, #3]
 80001a8:	f003 0310 	and.w	r3, r3, #16
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d005      	beq.n	80001bc <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	789b      	ldrb	r3, [r3, #2]
 80001b4:	461a      	mov	r2, r3
 80001b6:	69fb      	ldr	r3, [r7, #28]
 80001b8:	4313      	orrs	r3, r2
 80001ba:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	881b      	ldrh	r3, [r3, #0]
 80001c0:	b2db      	uxtb	r3, r3
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d044      	beq.n	8000250 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001cc:	2300      	movs	r3, #0
 80001ce:	61bb      	str	r3, [r7, #24]
 80001d0:	e038      	b.n	8000244 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001d2:	2201      	movs	r2, #1
 80001d4:	69bb      	ldr	r3, [r7, #24]
 80001d6:	fa02 f303 	lsl.w	r3, r2, r3
 80001da:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	881b      	ldrh	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	4013      	ands	r3, r2
 80001e6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001e8:	693a      	ldr	r2, [r7, #16]
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d126      	bne.n	800023e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001f0:	69bb      	ldr	r3, [r7, #24]
 80001f2:	009b      	lsls	r3, r3, #2
 80001f4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80001f6:	220f      	movs	r2, #15
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	fa02 f303 	lsl.w	r3, r2, r3
 80001fe:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	43db      	mvns	r3, r3
 8000204:	697a      	ldr	r2, [r7, #20]
 8000206:	4013      	ands	r3, r2
 8000208:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800020a:	69fa      	ldr	r2, [r7, #28]
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	697a      	ldr	r2, [r7, #20]
 8000214:	4313      	orrs	r3, r2
 8000216:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	78db      	ldrb	r3, [r3, #3]
 800021c:	2b28      	cmp	r3, #40	; 0x28
 800021e:	d105      	bne.n	800022c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000220:	2201      	movs	r2, #1
 8000222:	69bb      	ldr	r3, [r7, #24]
 8000224:	409a      	lsls	r2, r3
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	615a      	str	r2, [r3, #20]
 800022a:	e008      	b.n	800023e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	78db      	ldrb	r3, [r3, #3]
 8000230:	2b48      	cmp	r3, #72	; 0x48
 8000232:	d104      	bne.n	800023e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000234:	2201      	movs	r2, #1
 8000236:	69bb      	ldr	r3, [r7, #24]
 8000238:	409a      	lsls	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800023e:	69bb      	ldr	r3, [r7, #24]
 8000240:	3301      	adds	r3, #1
 8000242:	61bb      	str	r3, [r7, #24]
 8000244:	69bb      	ldr	r3, [r7, #24]
 8000246:	2b07      	cmp	r3, #7
 8000248:	d9c3      	bls.n	80001d2 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	697a      	ldr	r2, [r7, #20]
 800024e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	881b      	ldrh	r3, [r3, #0]
 8000254:	2bff      	cmp	r3, #255	; 0xff
 8000256:	d946      	bls.n	80002e6 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800025e:	2300      	movs	r3, #0
 8000260:	61bb      	str	r3, [r7, #24]
 8000262:	e03a      	b.n	80002da <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000264:	69bb      	ldr	r3, [r7, #24]
 8000266:	3308      	adds	r3, #8
 8000268:	2201      	movs	r2, #1
 800026a:	fa02 f303 	lsl.w	r3, r2, r3
 800026e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	881b      	ldrh	r3, [r3, #0]
 8000274:	461a      	mov	r2, r3
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	4013      	ands	r3, r2
 800027a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800027c:	693a      	ldr	r2, [r7, #16]
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	429a      	cmp	r2, r3
 8000282:	d127      	bne.n	80002d4 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000284:	69bb      	ldr	r3, [r7, #24]
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800028a:	220f      	movs	r2, #15
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	fa02 f303 	lsl.w	r3, r2, r3
 8000292:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	43db      	mvns	r3, r3
 8000298:	697a      	ldr	r2, [r7, #20]
 800029a:	4013      	ands	r3, r2
 800029c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800029e:	69fa      	ldr	r2, [r7, #28]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	fa02 f303 	lsl.w	r3, r2, r3
 80002a6:	697a      	ldr	r2, [r7, #20]
 80002a8:	4313      	orrs	r3, r2
 80002aa:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	78db      	ldrb	r3, [r3, #3]
 80002b0:	2b28      	cmp	r3, #40	; 0x28
 80002b2:	d105      	bne.n	80002c0 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002b4:	69bb      	ldr	r3, [r7, #24]
 80002b6:	3308      	adds	r3, #8
 80002b8:	2201      	movs	r2, #1
 80002ba:	409a      	lsls	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	78db      	ldrb	r3, [r3, #3]
 80002c4:	2b48      	cmp	r3, #72	; 0x48
 80002c6:	d105      	bne.n	80002d4 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002c8:	69bb      	ldr	r3, [r7, #24]
 80002ca:	3308      	adds	r3, #8
 80002cc:	2201      	movs	r2, #1
 80002ce:	409a      	lsls	r2, r3
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002d4:	69bb      	ldr	r3, [r7, #24]
 80002d6:	3301      	adds	r3, #1
 80002d8:	61bb      	str	r3, [r7, #24]
 80002da:	69bb      	ldr	r3, [r7, #24]
 80002dc:	2b07      	cmp	r3, #7
 80002de:	d9c1      	bls.n	8000264 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	697a      	ldr	r2, [r7, #20]
 80002e4:	605a      	str	r2, [r3, #4]
  }
}
 80002e6:	bf00      	nop
 80002e8:	3724      	adds	r7, #36	; 0x24
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80002fc:	887a      	ldrh	r2, [r7, #2]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	611a      	str	r2, [r3, #16]
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr

0800030c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000318:	887a      	ldrh	r2, [r7, #2]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	615a      	str	r2, [r3, #20]
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr

08000328 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	460b      	mov	r3, r1
 8000332:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000334:	78fb      	ldrb	r3, [r7, #3]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d006      	beq.n	8000348 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800033a:	4909      	ldr	r1, [pc, #36]	; (8000360 <RCC_APB2PeriphClockCmd+0x38>)
 800033c:	4b08      	ldr	r3, [pc, #32]	; (8000360 <RCC_APB2PeriphClockCmd+0x38>)
 800033e:	699a      	ldr	r2, [r3, #24]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4313      	orrs	r3, r2
 8000344:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000346:	e006      	b.n	8000356 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000348:	4905      	ldr	r1, [pc, #20]	; (8000360 <RCC_APB2PeriphClockCmd+0x38>)
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <RCC_APB2PeriphClockCmd+0x38>)
 800034c:	699a      	ldr	r2, [r3, #24]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	43db      	mvns	r3, r3
 8000352:	4013      	ands	r3, r2
 8000354:	618b      	str	r3, [r1, #24]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000

08000364 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	881b      	ldrh	r3, [r3, #0]
 8000376:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000378:	89fb      	ldrh	r3, [r7, #14]
 800037a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800037e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	881a      	ldrh	r2, [r3, #0]
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	885b      	ldrh	r3, [r3, #2]
 8000388:	4313      	orrs	r3, r2
 800038a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000390:	4313      	orrs	r3, r2
 8000392:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000398:	4313      	orrs	r3, r2
 800039a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80003a0:	4313      	orrs	r3, r2
 80003a2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80003a8:	4313      	orrs	r3, r2
 80003aa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80003b0:	4313      	orrs	r3, r2
 80003b2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80003b8:	4313      	orrs	r3, r2
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	89fb      	ldrh	r3, [r7, #14]
 80003be:	4313      	orrs	r3, r2
 80003c0:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	89fa      	ldrh	r2, [r7, #14]
 80003c6:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	8b9b      	ldrh	r3, [r3, #28]
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003d2:	b29a      	uxth	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	8a1a      	ldrh	r2, [r3, #16]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	821a      	strh	r2, [r3, #16]
}
 80003e0:	bf00      	nop
 80003e2:	3714      	adds	r7, #20
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr

080003ea <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80003ea:	b480      	push	{r7}
 80003ec:	b083      	sub	sp, #12
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
 80003f2:	460b      	mov	r3, r1
 80003f4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80003f6:	78fb      	ldrb	r3, [r7, #3]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d008      	beq.n	800040e <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	881b      	ldrh	r3, [r3, #0]
 8000400:	b29b      	uxth	r3, r3
 8000402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000406:	b29a      	uxth	r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 800040c:	e007      	b.n	800041e <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	881b      	ldrh	r3, [r3, #0]
 8000412:	b29b      	uxth	r3, r3
 8000414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000418:	b29a      	uxth	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	801a      	strh	r2, [r3, #0]
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	460b      	mov	r3, r1
 8000432:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	887a      	ldrh	r2, [r7, #2]
 8000438:	819a      	strh	r2, [r3, #12]
}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	899b      	ldrh	r3, [r3, #12]
 8000450:	b29b      	uxth	r3, r3
}
 8000452:	4618      	mov	r0, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	460b      	mov	r3, r1
 8000466:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000468:	78fb      	ldrb	r3, [r7, #3]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d008      	beq.n	8000480 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	889b      	ldrh	r3, [r3, #4]
 8000472:	b29b      	uxth	r3, r3
 8000474:	f043 0304 	orr.w	r3, r3, #4
 8000478:	b29a      	uxth	r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 800047e:	e007      	b.n	8000490 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	889b      	ldrh	r3, [r3, #4]
 8000484:	b29b      	uxth	r3, r3
 8000486:	f023 0304 	bic.w	r3, r3, #4
 800048a:	b29a      	uxth	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	809a      	strh	r2, [r3, #4]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr

0800049a <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800049a:	b480      	push	{r7}
 800049c:	b085      	sub	sp, #20
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
 80004a2:	460b      	mov	r3, r1
 80004a4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80004a6:	2300      	movs	r3, #0
 80004a8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	891b      	ldrh	r3, [r3, #8]
 80004ae:	b29a      	uxth	r2, r3
 80004b0:	887b      	ldrh	r3, [r7, #2]
 80004b2:	4013      	ands	r3, r2
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d002      	beq.n	80004c0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80004ba:	2301      	movs	r3, #1
 80004bc:	73fb      	strb	r3, [r7, #15]
 80004be:	e001      	b.n	80004c4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80004c0:	2300      	movs	r3, #0
 80004c2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <MqttClient_HandlePayload>:
#endif

/* Private functions */
static int MqttClient_HandlePayload(MqttClient* client, MqttMessage* msg,
    int timeout_ms, void* p_decode, word16* packet_id)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b091      	sub	sp, #68	; 0x44
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
 80004dc:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 80004de:	2300      	movs	r3, #0
 80004e0:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch (msg->type)
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	3b02      	subs	r3, #2
 80004e8:	2b0b      	cmp	r3, #11
 80004ea:	f200 817e 	bhi.w	80007ea <MqttClient_HandlePayload+0x31a>
 80004ee:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <MqttClient_HandlePayload+0x24>)
 80004f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f4:	08000525 	.word	0x08000525
 80004f8:	0800054b 	.word	0x0800054b
 80004fc:	080006db 	.word	0x080006db
 8000500:	080006db 	.word	0x080006db
 8000504:	080006db 	.word	0x080006db
 8000508:	080006db 	.word	0x080006db
 800050c:	080007eb 	.word	0x080007eb
 8000510:	0800076b 	.word	0x0800076b
 8000514:	080007eb 	.word	0x080007eb
 8000518:	080007a1 	.word	0x080007a1
 800051c:	080007eb 	.word	0x080007eb
 8000520:	080007d7 	.word	0x080007d7
    {
        case MQTT_PACKET_TYPE_CONNECT_ACK:
        {
            /* Decode connect ack */
            MqttConnectAck connect_ack, *p_connect_ack = &connect_ack;
 8000524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000528:	63bb      	str	r3, [r7, #56]	; 0x38
            if (p_decode) {
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MqttClient_HandlePayload+0x64>
                p_connect_ack = (MqttConnectAck*)p_decode;
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            rc = MqttDecode_ConnectAck(client->rx_buf, client->packet.buf_len,
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	6918      	ldr	r0, [r3, #16]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800053c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800053e:	4619      	mov	r1, r3
 8000540:	f000 fdaa 	bl	8001098 <MqttDecode_ConnectAck>
 8000544:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                                p_connect_ack);
            break;
 8000546:	bf00      	nop
 8000548:	e154      	b.n	80007f4 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_PUBLISH:
        {
            byte msg_done;

            if (msg->buffer_new) {
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	7e1b      	ldrb	r3, [r3, #24]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d00d      	beq.n	800056e <MqttClient_HandlePayload+0x9e>
                /* Decode publish message */
                rc = MqttDecode_Publish(client->rx_buf, client->packet.buf_len, msg);
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	6918      	ldr	r0, [r3, #16]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	4619      	mov	r1, r3
 800055e:	f000 fdd3 	bl	8001108 <MqttDecode_Publish>
 8000562:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 8000564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000566:	2b00      	cmp	r3, #0
 8000568:	dc01      	bgt.n	800056e <MqttClient_HandlePayload+0x9e>
                    return rc;
 800056a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800056c:	e143      	b.n	80007f6 <MqttClient_HandlePayload+0x326>
            }

            /* Handle packet callback and read remaining payload */
            do {
                /* Determine if message is done */
                msg_done = ((msg->buffer_pos + msg->buffer_len) >= msg->total_len) ? 1 : 0;
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	6a1a      	ldr	r2, [r3, #32]
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	441a      	add	r2, r3
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	691b      	ldr	r3, [r3, #16]
 800057c:	429a      	cmp	r2, r3
 800057e:	bf2c      	ite	cs
 8000580:	2301      	movcs	r3, #1
 8000582:	2300      	movcc	r3, #0
 8000584:	b2db      	uxtb	r3, r3
 8000586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if (msg->stat != MQTT_MSG_READ_PAYLOAD) {
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b04      	cmp	r3, #4
 8000590:	d029      	beq.n	80005e6 <MqttClient_HandlePayload+0x116>
                    /* Issue callback for new message */
                    if (client->msg_cb) {
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000596:	2b00      	cmp	r3, #0
 8000598:	d022      	beq.n	80005e0 <MqttClient_HandlePayload+0x110>
                        if (!msg->buffer_new) {
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	7e1b      	ldrb	r3, [r3, #24]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d105      	bne.n	80005ae <MqttClient_HandlePayload+0xde>
                            /* Reset topic name since valid on new message only */
                            msg->topic_name = NULL;
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
                            msg->topic_name_len = 0;
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	2200      	movs	r2, #0
 80005ac:	819a      	strh	r2, [r3, #12]
                        }
                        /* if using the temp publish message buffer,
                           then populate message context with client context */
                        if (&client->msg == msg)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d103      	bne.n	80005c2 <MqttClient_HandlePayload+0xf2>
                            msg->ctx = client->ctx;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
                        rc = client->msg_cb(client, msg, msg->buffer_new, msg_done);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	7e1a      	ldrb	r2, [r3, #24]
 80005ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005ce:	68b9      	ldr	r1, [r7, #8]
 80005d0:	68f8      	ldr	r0, [r7, #12]
 80005d2:	47a0      	blx	r4
 80005d4:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc != MQTT_CODE_SUCCESS) {
 80005d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MqttClient_HandlePayload+0x110>
                            return rc;
 80005dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005de:	e10a      	b.n	80007f6 <MqttClient_HandlePayload+0x326>
                        };
                    }
                    msg->buffer_new = 0;
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	2200      	movs	r2, #0
 80005e4:	761a      	strb	r2, [r3, #24]
                }

                /* Read payload */
                if (!msg_done) {
 80005e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d13b      	bne.n	8000666 <MqttClient_HandlePayload+0x196>
                    int msg_len;

                    /* add last length to position and reset len */
                    msg->buffer_pos += msg->buffer_len;
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	6a1a      	ldr	r2, [r3, #32]
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	441a      	add	r2, r3
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	621a      	str	r2, [r3, #32]
                    msg->buffer_len = 0;
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]

                    /* set state to reading payload */
                    msg->stat = MQTT_MSG_READ_PAYLOAD;
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	2204      	movs	r2, #4
 8000606:	701a      	strb	r2, [r3, #0]

                    msg_len = (msg->total_len - msg->buffer_pos);
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	691a      	ldr	r2, [r3, #16]
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	6a1b      	ldr	r3, [r3, #32]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	637b      	str	r3, [r7, #52]	; 0x34
                    if (msg_len > client->rx_buf_len) {
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	695a      	ldr	r2, [r3, #20]
 8000618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800061a:	429a      	cmp	r2, r3
 800061c:	da02      	bge.n	8000624 <MqttClient_HandlePayload+0x154>
                        msg_len = client->rx_buf_len;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	637b      	str	r3, [r7, #52]	; 0x34
                    }

                    /* make sure there is something to read */
                    rc = MQTT_CODE_SUCCESS;
 8000624:	2300      	movs	r3, #0
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
                    if (msg_len > 0) {
 8000628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800062a:	2b00      	cmp	r3, #0
 800062c:	dd16      	ble.n	800065c <MqttClient_HandlePayload+0x18c>
                        rc = MqttSocket_Read(client, client->rx_buf, msg_len, timeout_ms);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	6919      	ldr	r1, [r3, #16]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f001 f8df 	bl	80017fa <MqttSocket_Read>
 800063c:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc > 0) {
 800063e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000640:	2b00      	cmp	r3, #0
 8000642:	dd0b      	ble.n	800065c <MqttClient_HandlePayload+0x18c>
                            /* make sure state is back to read */
                            msg->stat = MQTT_MSG_READ;
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	2203      	movs	r2, #3
 8000648:	701a      	strb	r2, [r3, #0]

                            /* Update message */
                            msg->buffer = client->rx_buf;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	691a      	ldr	r2, [r3, #16]
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	615a      	str	r2, [r3, #20]
                            msg->buffer_len = rc;
 8000652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	61da      	str	r2, [r3, #28]
                            rc = MQTT_CODE_SUCCESS;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }
                    if (rc < 0) {
 800065c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800065e:	2b00      	cmp	r3, #0
 8000660:	da01      	bge.n	8000666 <MqttClient_HandlePayload+0x196>
                        return rc;
 8000662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000664:	e0c7      	b.n	80007f6 <MqttClient_HandlePayload+0x326>
                    }
                }
            } while (!msg_done);
 8000666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800066a:	2b00      	cmp	r3, #0
 800066c:	f43f af7f 	beq.w	800056e <MqttClient_HandlePayload+0x9e>

            /* Handle Qos */
            if (msg->qos > MQTT_QOS_0) {
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	795b      	ldrb	r3, [r3, #5]
 8000674:	2b00      	cmp	r3, #0
 8000676:	f000 80ba 	beq.w	80007ee <MqttClient_HandlePayload+0x31e>
                MqttPublishResp publish_resp;
                MqttPacketType type;

                *packet_id = msg->packet_id;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	885a      	ldrh	r2, [r3, #2]
 800067e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000680:	801a      	strh	r2, [r3, #0]

                /* Determine packet type to write */
                type = (msg->qos == MQTT_QOS_1) ?
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	795b      	ldrb	r3, [r3, #5]
                    MQTT_PACKET_TYPE_PUBLISH_ACK :
 8000686:	2b01      	cmp	r3, #1
 8000688:	d101      	bne.n	800068e <MqttClient_HandlePayload+0x1be>
 800068a:	2304      	movs	r3, #4
 800068c:	e000      	b.n	8000690 <MqttClient_HandlePayload+0x1c0>
 800068e:	2305      	movs	r3, #5
                type = (msg->qos == MQTT_QOS_1) ?
 8000690:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    MQTT_PACKET_TYPE_PUBLISH_REC;
                publish_resp.packet_id = msg->packet_id;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	885b      	ldrh	r3, [r3, #2]
 8000698:	843b      	strh	r3, [r7, #32]

                /* Encode publish response */
                rc = MqttEncode_PublishResp(client->tx_buf,
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6898      	ldr	r0, [r3, #8]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	68d9      	ldr	r1, [r3, #12]
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80006aa:	f000 fda4 	bl	80011f6 <MqttEncode_PublishResp>
 80006ae:	63f8      	str	r0, [r7, #60]	; 0x3c
                                    client->tx_buf_len, type, &publish_resp);
                if (rc <= 0) {
 80006b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	dc01      	bgt.n	80006ba <MqttClient_HandlePayload+0x1ea>
                    return rc;
 80006b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b8:	e09d      	b.n	80007f6 <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006be:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf,
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	6899      	ldr	r1, [r3, #8]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ce:	461a      	mov	r2, r3
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f000 ff35 	bl	8001540 <MqttPacket_Write>
 80006d6:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                    client->packet.buf_len);
            }
            break;
 80006d8:	e089      	b.n	80007ee <MqttClient_HandlePayload+0x31e>
        case MQTT_PACKET_TYPE_PUBLISH_ACK:
        case MQTT_PACKET_TYPE_PUBLISH_REC:
        case MQTT_PACKET_TYPE_PUBLISH_REL:
        case MQTT_PACKET_TYPE_PUBLISH_COMP:
        {
            MqttPublishResp publish_resp, *p_publish_resp = &publish_resp;
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
            if (p_decode) {
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MqttClient_HandlePayload+0x21a>
                p_publish_resp = (MqttPublishResp*)p_decode;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* Decode publish response message */
            rc = MqttDecode_PublishResp(client->rx_buf, client->packet.buf_len,
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6918      	ldr	r0, [r3, #16]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	791a      	ldrb	r2, [r3, #4]
 80006f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006f8:	f000 fdc3 	bl	8001282 <MqttDecode_PublishResp>
 80006fc:	63f8      	str	r0, [r7, #60]	; 0x3c
                msg->type, p_publish_resp);
            if (rc <= 0) {
 80006fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000700:	2b00      	cmp	r3, #0
 8000702:	dc01      	bgt.n	8000708 <MqttClient_HandlePayload+0x238>
                return rc;
 8000704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000706:	e076      	b.n	80007f6 <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_publish_resp->packet_id;
 8000708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800070a:	881a      	ldrh	r2, [r3, #0]
 800070c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800070e:	801a      	strh	r2, [r3, #0]

            /* If Qos then send response */
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	2b05      	cmp	r3, #5
 8000716:	d003      	beq.n	8000720 <MqttClient_HandlePayload+0x250>
                msg->type == MQTT_PACKET_TYPE_PUBLISH_REL) {
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	791b      	ldrb	r3, [r3, #4]
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 800071c:	2b06      	cmp	r3, #6
 800071e:	d168      	bne.n	80007f2 <MqttClient_HandlePayload+0x322>

                /* Encode publish response */
                publish_resp.packet_id = p_publish_resp->packet_id;
 8000720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	83bb      	strh	r3, [r7, #28]
                rc = MqttEncode_PublishResp(client->tx_buf,
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6898      	ldr	r0, [r3, #8]
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	68d9      	ldr	r1, [r3, #12]
                    client->tx_buf_len, msg->type+1, &publish_resp);
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	791b      	ldrb	r3, [r3, #4]
                rc = MqttEncode_PublishResp(client->tx_buf,
 8000732:	3301      	adds	r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	f000 fd5c 	bl	80011f6 <MqttEncode_PublishResp>
 800073e:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 8000740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000742:	2b00      	cmp	r3, #0
 8000744:	dc01      	bgt.n	800074a <MqttClient_HandlePayload+0x27a>
                    return rc;
 8000746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000748:	e055      	b.n	80007f6 <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800074e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf, client->packet.buf_len);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	6899      	ldr	r1, [r3, #8]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800075e:	461a      	mov	r2, r3
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f000 feed 	bl	8001540 <MqttPacket_Write>
 8000766:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000768:	e044      	b.n	80007f4 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_SUBSCRIBE_ACK:
        {
            /* Decode subscribe ack */
            MqttSubscribeAck subscribe_ack;
            MqttSubscribeAck *p_subscribe_ack = &subscribe_ack;
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (p_decode) {
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MqttClient_HandlePayload+0x2aa>
                p_subscribe_ack = (MqttSubscribeAck*)p_decode;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            rc = MqttDecode_SubscribeAck(client->rx_buf, client->packet.buf_len,
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6918      	ldr	r0, [r3, #16]
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000784:	4619      	mov	r1, r3
 8000786:	f000 fe36 	bl	80013f6 <MqttDecode_SubscribeAck>
 800078a:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_subscribe_ack);
            if (rc <= 0) {
 800078c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800078e:	2b00      	cmp	r3, #0
 8000790:	dc01      	bgt.n	8000796 <MqttClient_HandlePayload+0x2c6>
                return rc;
 8000792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000794:	e02f      	b.n	80007f6 <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_subscribe_ack->packet_id;
 8000796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000798:	881a      	ldrh	r2, [r3, #0]
 800079a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800079c:	801a      	strh	r2, [r3, #0]
 800079e:	e029      	b.n	80007f4 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK:
        {
            /* Decode unsubscribe ack */
            MqttUnsubscribeAck unsubscribe_ack;
            MqttUnsubscribeAck *p_unsubscribe_ack = &unsubscribe_ack;
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28

            if (p_decode) {
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MqttClient_HandlePayload+0x2e0>
                p_unsubscribe_ack = (MqttUnsubscribeAck*)p_decode;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            rc = MqttDecode_UnsubscribeAck(client->rx_buf, client->packet.buf_len,
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	6918      	ldr	r0, [r3, #16]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007ba:	4619      	mov	r1, r3
 80007bc:	f000 fe5b 	bl	8001476 <MqttDecode_UnsubscribeAck>
 80007c0:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_unsubscribe_ack);
            if (rc <= 0) {
 80007c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	dc01      	bgt.n	80007cc <MqttClient_HandlePayload+0x2fc>
                return rc;
 80007c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007ca:	e014      	b.n	80007f6 <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_unsubscribe_ack->packet_id;
 80007cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ce:	881a      	ldrh	r2, [r3, #0]
 80007d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007d2:	801a      	strh	r2, [r3, #0]
 80007d4:	e00e      	b.n	80007f4 <MqttClient_HandlePayload+0x324>
            break;
        }
        case MQTT_PACKET_TYPE_PING_RESP:
        {
            /* Decode ping */
            rc = MqttDecode_Ping(client->rx_buf, client->packet.buf_len);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	691a      	ldr	r2, [r3, #16]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007de:	4619      	mov	r1, r3
 80007e0:	4610      	mov	r0, r2
 80007e2:	f000 fe85 	bl	80014f0 <MqttDecode_Ping>
 80007e6:	63f8      	str	r0, [r7, #60]	; 0x3c
            break;
 80007e8:	e004      	b.n	80007f4 <MqttClient_HandlePayload+0x324>
            /* Other types are server side only, ignore */
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitMessage: Invalid client packet type %u!",
                msg->type);
        #endif
            break;
 80007ea:	bf00      	nop
 80007ec:	e002      	b.n	80007f4 <MqttClient_HandlePayload+0x324>
            break;
 80007ee:	bf00      	nop
 80007f0:	e000      	b.n	80007f4 <MqttClient_HandlePayload+0x324>
            break;
 80007f2:	bf00      	nop
        }
    } /* switch (msg->type) */

    return rc;
 80007f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3744      	adds	r7, #68	; 0x44
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd90      	pop	{r4, r7, pc}
 80007fe:	bf00      	nop

08000800 <MqttClient_WaitType>:

static int MqttClient_WaitType(MqttClient *client, MqttMessage* msg,
    int timeout_ms, byte wait_type, word16 wait_packet_id, void* p_decode)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af02      	add	r7, sp, #8
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	70fb      	strb	r3, [r7, #3]
    int rc;
    word16 packet_id = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	82fb      	strh	r3, [r7, #22]

wait_again:

    switch (msg->stat)
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b04      	cmp	r3, #4
 8000818:	d85e      	bhi.n	80008d8 <MqttClient_WaitType+0xd8>
 800081a:	a201      	add	r2, pc, #4	; (adr r2, 8000820 <MqttClient_WaitType+0x20>)
 800081c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000820:	08000835 	.word	0x08000835
 8000824:	0800083b 	.word	0x0800083b
 8000828:	080008d9 	.word	0x080008d9
 800082c:	08000891 	.word	0x08000891
 8000830:	08000891 	.word	0x08000891
    {
        case MQTT_MSG_BEGIN:
        {
            /* reset the packet state */
            client->packet.stat = MQTT_PK_BEGIN;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2200      	movs	r2, #0
 8000838:	771a      	strb	r2, [r3, #28]
        case MQTT_MSG_WAIT:
        {
            MqttPacket* header;

            /* Wait for packet */
            rc = MqttPacket_Read(client, client->rx_buf, client->rx_buf_len, timeout_ms);
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	6919      	ldr	r1, [r3, #16]
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	695a      	ldr	r2, [r3, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f000 fe8e 	bl	8001566 <MqttPacket_Read>
 800084a:	61f8      	str	r0, [r7, #28]
            if (rc <= 0) {
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	2b00      	cmp	r3, #0
 8000850:	dc01      	bgt.n	8000856 <MqttClient_WaitType+0x56>
                return rc;
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	e049      	b.n	80008ea <MqttClient_WaitType+0xea>
            }

            msg->stat = MQTT_MSG_WAIT;
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	2201      	movs	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
            client->packet.buf_len = rc;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	69fa      	ldr	r2, [r7, #28]
 8000860:	629a      	str	r2, [r3, #40]	; 0x28

            /* Determine packet type */
            header = (MqttPacket*)client->rx_buf;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	691b      	ldr	r3, [r3, #16]
 8000866:	61bb      	str	r3, [r7, #24]
            msg->type = MQTT_PACKET_TYPE_GET(header->type_flags);
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	091b      	lsrs	r3, r3, #4
 800086e:	b2da      	uxtb	r2, r3
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	711a      	strb	r2, [r3, #4]
            msg->qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	105b      	asrs	r3, r3, #1
 800087a:	f003 0303 	and.w	r3, r3, #3
 800087e:	b2da      	uxtb	r2, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	715a      	strb	r2, [r3, #5]
            msg->buffer_new = 1;
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	2201      	movs	r2, #1
 8000888:	761a      	strb	r2, [r3, #24]
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("Read Packet: Len %d, Type %d, Qos %d",
                client->packet.buf_len, msg->type, msg->qos);
        #endif

            msg->stat = MQTT_MSG_READ;
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	2203      	movs	r2, #3
 800088e:	701a      	strb	r2, [r3, #0]
        }

        case MQTT_MSG_READ:
        case MQTT_MSG_READ_PAYLOAD:
        {
            rc = MqttClient_HandlePayload(client, msg, timeout_ms, p_decode,
 8000890:	f107 0316 	add.w	r3, r7, #22
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	68f8      	ldr	r0, [r7, #12]
 800089e:	f7ff fe17 	bl	80004d0 <MqttClient_HandlePayload>
 80008a2:	61f8      	str	r0, [r7, #28]
                                                                &packet_id);
            if (rc < 0) {
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	da01      	bge.n	80008ae <MqttClient_WaitType+0xae>
                return rc;
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	e01d      	b.n	80008ea <MqttClient_WaitType+0xea>
            }
            rc = MQTT_CODE_SUCCESS;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]

            /* Check for type and packet id */
            if (wait_type < MQTT_PACKET_TYPE_MAX) {
 80008b2:	78fb      	ldrb	r3, [r7, #3]
 80008b4:	2b0e      	cmp	r3, #14
 80008b6:	d813      	bhi.n	80008e0 <MqttClient_WaitType+0xe0>
                if (wait_type == msg->type) {
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	791b      	ldrb	r3, [r3, #4]
 80008bc:	78fa      	ldrb	r2, [r7, #3]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d106      	bne.n	80008d0 <MqttClient_WaitType+0xd0>
                    if (wait_packet_id == 0 || wait_packet_id == packet_id) {
 80008c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d00c      	beq.n	80008e2 <MqttClient_WaitType+0xe2>
 80008c8:	8afb      	ldrh	r3, [r7, #22]
 80008ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d008      	beq.n	80008e2 <MqttClient_WaitType+0xe2>
                        /* We found the packet type and id */
                        break;
                    }
                }

                msg->stat = MQTT_MSG_BEGIN;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
                goto wait_again;
 80008d6:	e79c      	b.n	8000812 <MqttClient_WaitType+0x12>
        {
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitType: Invalid state %d!",
                msg->stat);
        #endif
            rc = MQTT_CODE_ERROR_STAT;
 80008d8:	f06f 0309 	mvn.w	r3, #9
 80008dc:	61fb      	str	r3, [r7, #28]
            break;
 80008de:	e000      	b.n	80008e2 <MqttClient_WaitType+0xe2>
            break;
 80008e0:	bf00      	nop
        }
    } /* switch (msg->stat) */

    /* reset state */
    msg->stat = MQTT_MSG_BEGIN;
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]

    return rc;
 80008e8:	69fb      	ldr	r3, [r7, #28]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3720      	adds	r7, #32
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop

080008f4 <MqttClient_Init>:
int MqttClient_Init(MqttClient *client, MqttNet* net,
    MqttMsgCb msg_cb,
    byte* tx_buf, int tx_buf_len,
    byte* rx_buf, int rx_buf_len,
    int cmd_timeout_ms)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
 8000900:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]

    /* Check arguments */
    if (client == NULL ||
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d00b      	beq.n	8000924 <MqttClient_Init+0x30>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d008      	beq.n	8000924 <MqttClient_Init+0x30>
        tx_buf == NULL || tx_buf_len <= 0 ||
 8000912:	6a3b      	ldr	r3, [r7, #32]
 8000914:	2b00      	cmp	r3, #0
 8000916:	dd05      	ble.n	8000924 <MqttClient_Init+0x30>
 8000918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091a:	2b00      	cmp	r3, #0
 800091c:	d002      	beq.n	8000924 <MqttClient_Init+0x30>
        rx_buf == NULL || rx_buf_len <= 0) {
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	2b00      	cmp	r3, #0
 8000922:	dc02      	bgt.n	800092a <MqttClient_Init+0x36>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000928:	e01c      	b.n	8000964 <MqttClient_Init+0x70>
    }

    /* Initialize the client structure to zero */
    XMEMSET(client, 0, sizeof(MqttClient));
 800092a:	226c      	movs	r2, #108	; 0x6c
 800092c:	2100      	movs	r1, #0
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f002 f8c7 	bl	8002ac2 <memset>

    /* Setup client structure */
    client->msg_cb = msg_cb;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	63da      	str	r2, [r3, #60]	; 0x3c
    client->tx_buf = tx_buf;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	609a      	str	r2, [r3, #8]
    client->tx_buf_len = tx_buf_len;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	6a3a      	ldr	r2, [r7, #32]
 8000944:	60da      	str	r2, [r3, #12]
    client->rx_buf = rx_buf;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800094a:	611a      	str	r2, [r3, #16]
    client->rx_buf_len = rx_buf_len;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000950:	615a      	str	r2, [r3, #20]
    client->cmd_timeout_ms = cmd_timeout_ms;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000956:	605a      	str	r2, [r3, #4]

    /* Init socket */
    rc = MqttSocket_Init(client, net);
 8000958:	68b9      	ldr	r1, [r7, #8]
 800095a:	68f8      	ldr	r0, [r7, #12]
 800095c:	f000 fea0 	bl	80016a0 <MqttSocket_Init>
 8000960:	6178      	str	r0, [r7, #20]

    return rc;
 8000962:	697b      	ldr	r3, [r7, #20]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <MqttClient_Connect>:

int MqttClient_Connect(MqttClient *client, MqttConnect *connect)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af02      	add	r7, sp, #8
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
    int rc, len;

    /* Validate required arguments */
    if (client == NULL || connect == NULL) {
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d002      	beq.n	8000982 <MqttClient_Connect+0x16>
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d102      	bne.n	8000988 <MqttClient_Connect+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000986:	e034      	b.n	80009f2 <MqttClient_Connect+0x86>
    }

    if (connect->stat == MQTT_MSG_BEGIN) {
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d120      	bne.n	80009d2 <MqttClient_Connect+0x66>

        /* Encode the connect packet */
        rc = MqttEncode_Connect(client->tx_buf, client->tx_buf_len, connect);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6898      	ldr	r0, [r3, #8]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	4619      	mov	r1, r3
 800099c:	f000 fa4c 	bl	8000e38 <MqttEncode_Connect>
 80009a0:	60f8      	str	r0, [r7, #12]
        if (rc <= 0) {
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	dc01      	bgt.n	80009ac <MqttClient_Connect+0x40>
            return rc;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	e022      	b.n	80009f2 <MqttClient_Connect+0x86>
        }
        len = rc;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	60bb      	str	r3, [r7, #8]

        /* Send connect packet */
        rc = MqttPacket_Write(client, client->tx_buf, len);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	68ba      	ldr	r2, [r7, #8]
 80009b6:	4619      	mov	r1, r3
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 fdc1 	bl	8001540 <MqttPacket_Write>
 80009be:	60f8      	str	r0, [r7, #12]
        if (rc != len) {
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d001      	beq.n	80009cc <MqttClient_Connect+0x60>
            return rc;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	e012      	b.n	80009f2 <MqttClient_Connect+0x86>
        }
        connect->stat = MQTT_MSG_WAIT;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
	broker_decode_connect(&broker, local_host.data, &stat);
	broker_send_conn_ack(&broker, &stat);
*/

    /* Wait for connect ack packet */
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685a      	ldr	r2, [r3, #4]
        MQTT_PACKET_TYPE_CONNECT_ACK, 0, &connect->ack);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	331c      	adds	r3, #28
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	2300      	movs	r3, #0
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2302      	movs	r3, #2
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff09 	bl	8000800 <MqttClient_WaitType>
 80009ee:	60f8      	str	r0, [r7, #12]

    return rc;
 80009f0:	68fb      	ldr	r3, [r7, #12]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <MqttClient_Subscribe>:

    return rc;
}

int MqttClient_Subscribe(MqttClient *client, MqttSubscribe *subscribe)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b08a      	sub	sp, #40	; 0x28
 80009fe:	af02      	add	r7, sp, #8
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
    int rc, len, i;
    MqttSubscribeAck subscribe_ack;
    MqttTopic* topic;

    /* Validate required arguments */
    if (client == NULL || subscribe == NULL) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d002      	beq.n	8000a10 <MqttClient_Subscribe+0x16>
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d102      	bne.n	8000a16 <MqttClient_Subscribe+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a14:	e050      	b.n	8000ab8 <MqttClient_Subscribe+0xbe>
    }

    if (subscribe->stat == MQTT_MSG_BEGIN) {
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d120      	bne.n	8000a60 <MqttClient_Subscribe+0x66>
        /* Encode the subscribe packet */
        rc = MqttEncode_Subscribe(client->tx_buf, client->tx_buf_len, subscribe);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6898      	ldr	r0, [r3, #8]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f000 fc67 	bl	80012fc <MqttEncode_Subscribe>
 8000a2e:	61b8      	str	r0, [r7, #24]
        if (rc <= 0) { return rc; }
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	dc01      	bgt.n	8000a3a <MqttClient_Subscribe+0x40>
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	e03e      	b.n	8000ab8 <MqttClient_Subscribe+0xbe>
        len = rc;
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	617b      	str	r3, [r7, #20]

        /* Send subscribe packet */
        rc = MqttPacket_Write(client, client->tx_buf, len);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	4619      	mov	r1, r3
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 fd7a 	bl	8001540 <MqttPacket_Write>
 8000a4c:	61b8      	str	r0, [r7, #24]
        if (rc != len) { return rc; }
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d001      	beq.n	8000a5a <MqttClient_Subscribe+0x60>
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	e02e      	b.n	8000ab8 <MqttClient_Subscribe+0xbe>

        subscribe->stat = MQTT_MSG_WAIT;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
    }

    /* Wait for subscribe ack packet */
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6858      	ldr	r0, [r3, #4]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	885b      	ldrh	r3, [r3, #2]
 8000a6e:	f107 0208 	add.w	r2, r7, #8
 8000a72:	9201      	str	r2, [sp, #4]
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2309      	movs	r3, #9
 8000a78:	4602      	mov	r2, r0
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff fec0 	bl	8000800 <MqttClient_WaitType>
 8000a80:	61b8      	str	r0, [r7, #24]
        MQTT_PACKET_TYPE_SUBSCRIBE_ACK, subscribe->packet_id, &subscribe_ack);

    /* Populate return codes */
    if (rc == MQTT_CODE_SUCCESS) {
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d116      	bne.n	8000ab6 <MqttClient_Subscribe+0xbc>
        for (i = 0; i < subscribe->topic_count; i++) {
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	e00e      	b.n	8000aac <MqttClient_Subscribe+0xb2>
            topic = &subscribe->topics[i];
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	4413      	add	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
            topic->return_code = subscribe_ack.return_codes[i];
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	715a      	strb	r2, [r3, #5]
        for (i = 0; i < subscribe->topic_count; i++) {
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	61fb      	str	r3, [r7, #28]
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	dceb      	bgt.n	8000a8e <MqttClient_Subscribe+0x94>
        }
    }

    return rc;
 8000ab6:	69bb      	ldr	r3, [r7, #24]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3720      	adds	r7, #32
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <MqttEncode_FixedHeader>:
#include "mqtt_client.h"

/* Positive return value is header length, zero or negative indicates error */
static int MqttEncode_FixedHeader(byte *tx_buf, int tx_buf_len, int remain_len,
    byte type, byte retain, byte qos, byte duplicate)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)tx_buf;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	617b      	str	r3, [r7, #20]

    /* Encode fixed header */
    header->type_flags = MQTT_PACKET_TYPE_SET(type) | MQTT_PACKET_FLAGS_SET(0);
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	011b      	lsls	r3, r3, #4
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	701a      	strb	r2, [r3, #0]
    if (retain) {
 8000adc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d006      	beq.n	8000af2 <MqttEncode_FixedHeader+0x32>
        header->type_flags |= MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_RETAIN);
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	701a      	strb	r2, [r3, #0]
    }
    if (qos) {
 8000af2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d00e      	beq.n	8000b18 <MqttEncode_FixedHeader+0x58>
        header->type_flags |= MQTT_PACKET_FLAGS_SET_QOS(qos);
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b25a      	sxtb	r2, r3
 8000b00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	f003 0306 	and.w	r3, r3, #6
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	b25b      	sxtb	r3, r3
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	701a      	strb	r2, [r3, #0]
    }
    if (duplicate) {
 8000b18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d006      	beq.n	8000b2e <MqttEncode_FixedHeader+0x6e>
        header->type_flags |=
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	f043 0308 	orr.w	r3, r3, #8
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	701a      	strb	r2, [r3, #0]
            MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_DUPLICATE);
    }

    /* Encode the length remaining into the header */
    header_len = MqttEncode_RemainLen(header, tx_buf_len, remain_len);
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	68b9      	ldr	r1, [r7, #8]
 8000b32:	6978      	ldr	r0, [r7, #20]
 8000b34:	f000 f89f 	bl	8000c76 <MqttEncode_RemainLen>
 8000b38:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	da01      	bge.n	8000b44 <MqttEncode_FixedHeader+0x84>
        return header_len;
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	e000      	b.n	8000b46 <MqttEncode_FixedHeader+0x86>
    }

    return header_len;
 8000b44:	693b      	ldr	r3, [r7, #16]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <MqttDecode_FixedHeader>:

static int MqttDecode_FixedHeader(byte *rx_buf, int rx_buf_len,
    int *remain_len, byte type, MqttQoS *p_qos, byte *p_retain,
    byte *p_duplicate)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	60f8      	str	r0, [r7, #12]
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)rx_buf;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	617b      	str	r3, [r7, #20]

    /* Decode the length remaining */
    header_len = MqttDecode_RemainLen(header, rx_buf_len, remain_len);
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	68b9      	ldr	r1, [r7, #8]
 8000b64:	6978      	ldr	r0, [r7, #20]
 8000b66:	f000 f840 	bl	8000bea <MqttDecode_RemainLen>
 8000b6a:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	da01      	bge.n	8000b76 <MqttDecode_FixedHeader+0x28>
        return header_len;
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	e035      	b.n	8000be2 <MqttDecode_FixedHeader+0x94>
    }

    /* Validate packet type */
    if (MQTT_PACKET_TYPE_GET(header->type_flags) != type) {
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	091b      	lsrs	r3, r3, #4
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	f003 020f 	and.w	r2, r3, #15
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d002      	beq.n	8000b8e <MqttDecode_FixedHeader+0x40>
        return MQTT_CODE_ERROR_PACKET_TYPE;
 8000b88:	f06f 0303 	mvn.w	r3, #3
 8000b8c:	e029      	b.n	8000be2 <MqttDecode_FixedHeader+0x94>
    }

    /* Extract header flags */
    if (p_qos) {
 8000b8e:	6a3b      	ldr	r3, [r7, #32]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d007      	beq.n	8000ba4 <MqttDecode_FixedHeader+0x56>
        *p_qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	105b      	asrs	r3, r3, #1
 8000b9a:	f003 0303 	and.w	r3, r3, #3
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	701a      	strb	r2, [r3, #0]
    }
    if (p_retain) {
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d00b      	beq.n	8000bc2 <MqttDecode_FixedHeader+0x74>
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	f003 0301 	and.w	r3, r3, #1
            MQTT_PACKET_FLAG_RETAIN) ? 1 : 0;
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bf14      	ite	ne
 8000bb6:	2301      	movne	r3, #1
 8000bb8:	2300      	moveq	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	461a      	mov	r2, r3
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	701a      	strb	r2, [r3, #0]
    }
    if (p_duplicate) {
 8000bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00b      	beq.n	8000be0 <MqttDecode_FixedHeader+0x92>
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	f003 0308 	and.w	r3, r3, #8
            MQTT_PACKET_FLAG_DUPLICATE) ? 1 : 0;
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bf14      	ite	ne
 8000bd4:	2301      	movne	r3, #1
 8000bd6:	2300      	moveq	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	461a      	mov	r2, r3
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bde:	701a      	strb	r2, [r3, #0]
    }

    return header_len;
 8000be0:	693b      	ldr	r3, [r7, #16]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <MqttDecode_RemainLen>:


/* Packet Element Encoders/Decoders */
/* Returns number of decoded bytes, errors are negative value */
int MqttDecode_RemainLen(MqttPacket *header, int buf_len, int *remain_len)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b089      	sub	sp, #36	; 0x24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
    int decode_bytes = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
    int multiplier = 1;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
    byte tmp_len;

    if (header == NULL || remain_len == NULL || buf_len <= 0) {
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d005      	beq.n	8000c10 <MqttDecode_RemainLen+0x26>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d002      	beq.n	8000c10 <MqttDecode_RemainLen+0x26>
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	dc02      	bgt.n	8000c16 <MqttDecode_RemainLen+0x2c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c14:	e02a      	b.n	8000c6c <MqttDecode_RemainLen+0x82>
    }

    *remain_len = 0;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
    do {
        /* Check decoded length byte count */
        if ((decode_bytes + 1) >= buf_len) {
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	db01      	blt.n	8000c2a <MqttDecode_RemainLen+0x40>
            return 0; /* Zero incidates we need another byte */
 8000c26:	2300      	movs	r3, #0
 8000c28:	e020      	b.n	8000c6c <MqttDecode_RemainLen+0x82>
        }
        if (decode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	dd02      	ble.n	8000c36 <MqttDecode_RemainLen+0x4c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8000c30:	f06f 0302 	mvn.w	r3, #2
 8000c34:	e01a      	b.n	8000c6c <MqttDecode_RemainLen+0x82>
        }

        /* Decode Length */
        tmp_len = header->len[decode_bytes++];
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	61fa      	str	r2, [r7, #28]
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	785b      	ldrb	r3, [r3, #1]
 8000c42:	75fb      	strb	r3, [r7, #23]
        *remain_len += (tmp_len & ~MQTT_PACKET_LEN_ENCODE_MASK) * multiplier;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	7dfb      	ldrb	r3, [r7, #23]
 8000c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c4e:	69b9      	ldr	r1, [r7, #24]
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	441a      	add	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	601a      	str	r2, [r3, #0]
        multiplier *= MQTT_PACKET_LEN_ENCODE_MASK;
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	01db      	lsls	r3, r3, #7
 8000c5e:	61bb      	str	r3, [r7, #24]
    } while (tmp_len & MQTT_PACKET_LEN_ENCODE_MASK);
 8000c60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	dbd9      	blt.n	8000c1c <MqttDecode_RemainLen+0x32>

    return decode_bytes + 1; /* Add byte for header flags/type */
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	3301      	adds	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3724      	adds	r7, #36	; 0x24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <MqttEncode_RemainLen>:

/* Returns number of encoded bytes, errors are negative value */
int MqttEncode_RemainLen(MqttPacket *header, int buf_len, int remain_len)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b087      	sub	sp, #28
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
    int encode_bytes = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
    byte tmp_len;

    if (header == NULL || remain_len < 0) {
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <MqttEncode_RemainLen+0x1c>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	da02      	bge.n	8000c98 <MqttEncode_RemainLen+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c96:	e02e      	b.n	8000cf6 <MqttEncode_RemainLen+0x80>
    }

    do {
        /* Check decoded length byte count */
        if ((encode_bytes + 1) >= buf_len) {
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	db01      	blt.n	8000ca6 <MqttEncode_RemainLen+0x30>
            return 0; /* Zero incidates we need another byte */
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e027      	b.n	8000cf6 <MqttEncode_RemainLen+0x80>
        }
        if (encode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	dd02      	ble.n	8000cb2 <MqttEncode_RemainLen+0x3c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8000cac:	f06f 0302 	mvn.w	r3, #2
 8000cb0:	e021      	b.n	8000cf6 <MqttEncode_RemainLen+0x80>
        }

        /* Encode length */
        tmp_len = (remain_len % MQTT_PACKET_LEN_ENCODE_MASK);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	425a      	negs	r2, r3
 8000cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000cbe:	bf58      	it	pl
 8000cc0:	4253      	negpl	r3, r2
 8000cc2:	74fb      	strb	r3, [r7, #19]
        remain_len /= MQTT_PACKET_LEN_ENCODE_MASK;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	da00      	bge.n	8000ccc <MqttEncode_RemainLen+0x56>
 8000cca:	337f      	adds	r3, #127	; 0x7f
 8000ccc:	11db      	asrs	r3, r3, #7
 8000cce:	607b      	str	r3, [r7, #4]

        /* If more length, set the top bit of this byte */
        if (remain_len > 0) {
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	dd03      	ble.n	8000cde <MqttEncode_RemainLen+0x68>
            tmp_len |= MQTT_PACKET_LEN_ENCODE_MASK;
 8000cd6:	7cfb      	ldrb	r3, [r7, #19]
 8000cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cdc:	74fb      	strb	r3, [r7, #19]
        }
        header->len[encode_bytes++] = tmp_len;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	1c5a      	adds	r2, r3, #1
 8000ce2:	617a      	str	r2, [r7, #20]
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	7cfa      	ldrb	r2, [r7, #19]
 8000cea:	705a      	strb	r2, [r3, #1]
    } while (remain_len > 0);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	dcd2      	bgt.n	8000c98 <MqttEncode_RemainLen+0x22>

    return encode_bytes + 1; /* Add byte for header flags/type */
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	371c      	adds	r7, #28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <MqttDecode_Num>:

/* Returns number of buffer bytes decoded */
int MqttDecode_Num(byte* buf, word16 *len)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
    if (len) {
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d011      	beq.n	8000d34 <MqttDecode_Num+0x34>
        *len = buf[0];
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	801a      	strh	r2, [r3, #0]
        *len = (*len << 8) | buf[1];
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	021b      	lsls	r3, r3, #8
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3301      	adds	r3, #1
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	801a      	strh	r2, [r3, #0]
    }
    return MQTT_DATA_LEN_SIZE;
 8000d34:	2302      	movs	r3, #2
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <MqttEncode_Num>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Num(byte *buf, word16 len)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]
    buf[0] = len >> 8;
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	0a1b      	lsrs	r3, r3, #8
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	701a      	strb	r2, [r3, #0]
    buf[1] = len & 0xFF;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	887a      	ldrh	r2, [r7, #2]
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	701a      	strb	r2, [r3, #0]
    return MQTT_DATA_LEN_SIZE;
 8000d62:	2302      	movs	r3, #2
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <MqttDecode_String>:

/* Returns number of buffer bytes decoded */
/* Returns pointer to string (which is not guarenteed to be null terminated) */
int MqttDecode_String(byte *buf, const char **pstr, word16 *pstr_len)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
    int len;
    word16 str_len;
    len = MqttDecode_Num(buf, &str_len);
 8000d7a:	f107 0312 	add.w	r3, r7, #18
 8000d7e:	4619      	mov	r1, r3
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f7ff ffbd 	bl	8000d00 <MqttDecode_Num>
 8000d86:	6178      	str	r0, [r7, #20]
    buf += len;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]
    if (pstr_len) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <MqttDecode_String+0x2e>
        *pstr_len = str_len;
 8000d96:	8a7a      	ldrh	r2, [r7, #18]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	801a      	strh	r2, [r3, #0]
    }
    if (pstr) {
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <MqttDecode_String+0x3a>
        *pstr = (char*)buf;
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	601a      	str	r2, [r3, #0]
    }
    return len + str_len;
 8000da8:	8a7b      	ldrh	r3, [r7, #18]
 8000daa:	461a      	mov	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	4413      	add	r3, r2
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <MqttEncode_String>:

/* Returns number of buffer bytes encoded */
int MqttEncode_String(byte *buf, const char *str)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
    int str_len = (int)XSTRLEN(str);
 8000dc2:	6838      	ldr	r0, [r7, #0]
 8000dc4:	f7ff f9c2 	bl	800014c <strlen>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60fb      	str	r3, [r7, #12]
    int len = (int)MqttEncode_Num(buf, (word16)str_len);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffb4 	bl	8000d40 <MqttEncode_Num>
 8000dd8:	60b8      	str	r0, [r7, #8]
    buf += len;
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	607b      	str	r3, [r7, #4]
    XMEMCPY(buf, str, str_len);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	461a      	mov	r2, r3
 8000de6:	6839      	ldr	r1, [r7, #0]
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f001 fe5f 	bl	8002aac <memcpy>
    return len + str_len;
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <MqttEncode_Data>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Data(byte *buf, const byte *data, word16 data_len)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	4613      	mov	r3, r2
 8000e08:	80fb      	strh	r3, [r7, #6]
    int len = (int)MqttEncode_Num(buf, data_len);
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f7ff ff96 	bl	8000d40 <MqttEncode_Num>
 8000e14:	6178      	str	r0, [r7, #20]
    buf += len;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
    XMEMCPY(buf, data, data_len);
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	461a      	mov	r2, r3
 8000e22:	68b9      	ldr	r1, [r7, #8]
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	f001 fe41 	bl	8002aac <memcpy>
    return len + data_len;
 8000e2a:	88fa      	ldrh	r2, [r7, #6]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	4413      	add	r3, r2
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <MqttEncode_Connect>:


/* Packet Type Encoders/Decoders */
int MqttEncode_Connect(byte *tx_buf, int tx_buf_len, MqttConnect *connect)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08e      	sub	sp, #56	; 0x38
 8000e3c:	af04      	add	r7, sp, #16
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    MqttConnectPacket packet = MQTT_CONNECT_INIT;
 8000e44:	4a93      	ldr	r2, [pc, #588]	; (8001094 <MqttEncode_Connect+0x25c>)
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e4c:	c303      	stmia	r3!, {r0, r1}
 8000e4e:	801a      	strh	r2, [r3, #0]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || connect == NULL || connect->client_id == NULL) {
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d006      	beq.n	8000e64 <MqttEncode_Connect+0x2c>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <MqttEncode_Connect+0x2c>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <MqttEncode_Connect+0x32>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e68:	e110      	b.n	800108c <MqttEncode_Connect+0x254>
    }

    /* Determine packet length */
    /* MQTT Version 4 header is 10 bytes */
    remain_len = sizeof(MqttConnectPacket);
 8000e6a:	230a      	movs	r3, #10
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    remain_len += (int)XSTRLEN(connect->client_id) + MQTT_DATA_LEN_SIZE;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff f96a 	bl	800014c <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7e:	4413      	add	r3, r2
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    if (connect->enable_lwt) {
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7b1b      	ldrb	r3, [r3, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d02c      	beq.n	8000ee4 <MqttEncode_Connect+0xac>
        /* Verify all required fields are present */
        if (connect->lwt_msg == NULL ||
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00e      	beq.n	8000eb0 <MqttEncode_Connect+0x78>
            connect->lwt_msg->topic_name == NULL ||
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	689b      	ldr	r3, [r3, #8]
        if (connect->lwt_msg == NULL ||
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d009      	beq.n	8000eb0 <MqttEncode_Connect+0x78>
            connect->lwt_msg->buffer == NULL ||
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	695b      	ldr	r3, [r3, #20]
            connect->lwt_msg->topic_name == NULL ||
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d004      	beq.n	8000eb0 <MqttEncode_Connect+0x78>
            connect->lwt_msg->total_len <= 0)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	691b      	ldr	r3, [r3, #16]
            connect->lwt_msg->buffer == NULL ||
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <MqttEncode_Connect+0x7e>
        {
            return MQTT_CODE_ERROR_BAD_ARG;
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eb4:	e0ea      	b.n	800108c <MqttEncode_Connect+0x254>
        }

        remain_len += (int)XSTRLEN(connect->lwt_msg->topic_name);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff f945 	bl	800014c <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	4413      	add	r3, r2
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	3302      	adds	r3, #2
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += connect->lwt_msg->total_len;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eda:	4413      	add	r3, r2
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->username) {
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d009      	beq.n	8000f00 <MqttEncode_Connect+0xc8>
        remain_len += (int)XSTRLEN(connect->username) + MQTT_DATA_LEN_SIZE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff f92b 	bl	800014c <strlen>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	3302      	adds	r3, #2
 8000efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000efc:	4413      	add	r3, r2
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->password) {
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d009      	beq.n	8000f1c <MqttEncode_Connect+0xe4>
        remain_len += (int)XSTRLEN(connect->password) + MQTT_DATA_LEN_SIZE;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff f91d 	bl	800014c <strlen>
 8000f12:	4603      	mov	r3, r0
 8000f14:	3302      	adds	r3, #2
 8000f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f18:	4413      	add	r3, r2
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2300      	movs	r3, #0
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	2300      	movs	r3, #0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f7ff fdc6 	bl	8000ac0 <MqttEncode_FixedHeader>
 8000f34:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT, 0, 0, 0);
    if (header_len < 0) {
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	da01      	bge.n	8000f40 <MqttEncode_Connect+0x108>
        return header_len;
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	e0a5      	b.n	800108c <MqttEncode_Connect+0x254>
    }
    tx_payload = &tx_buf[header_len];
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	4413      	add	r3, r2
 8000f46:	623b      	str	r3, [r7, #32]

    /* Encode variable header */
    /* Set connection flags */
    if (connect->clean_session) {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	791b      	ldrb	r3, [r3, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d004      	beq.n	8000f5a <MqttEncode_Connect+0x122>
        packet.flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->enable_lwt) {
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7b1b      	ldrb	r3, [r3, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d021      	beq.n	8000fa6 <MqttEncode_Connect+0x16e>
        packet.flags |= MQTT_CONNECT_FLAG_WILL_FLAG;
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	75fb      	strb	r3, [r7, #23]

        if (connect->lwt_msg->qos) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	795b      	ldrb	r3, [r3, #5]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00d      	beq.n	8000f92 <MqttEncode_Connect+0x15a>
            packet.flags |= MQTT_CONNECT_FLAG_SET_QOS(connect->lwt_msg->qos);
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
 8000f78:	b25a      	sxtb	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	795b      	ldrb	r3, [r3, #5]
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	f003 0318 	and.w	r3, r3, #24
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	75fb      	strb	r3, [r7, #23]
        }
        if (connect->lwt_msg->retain) {
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	799b      	ldrb	r3, [r3, #6]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <MqttEncode_Connect+0x16e>
            packet.flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	f043 0320 	orr.w	r3, r3, #32
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	75fb      	strb	r3, [r7, #23]
        }
    }
    if (connect->username) {
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d004      	beq.n	8000fb8 <MqttEncode_Connect+0x180>
        packet.flags |= MQTT_CONNECT_FLAG_USERNAME;
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->password) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d004      	beq.n	8000fca <MqttEncode_Connect+0x192>
        packet.flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8000fc0:	7dfb      	ldrb	r3, [r7, #23]
 8000fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	75fb      	strb	r3, [r7, #23]
    }
    MqttEncode_Num((byte*)&packet.keep_alive, connect->keep_alive_sec);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	885a      	ldrh	r2, [r3, #2]
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	3308      	adds	r3, #8
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff feb2 	bl	8000d40 <MqttEncode_Num>
    XMEMCPY(tx_payload, &packet, sizeof(MqttConnectPacket));
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	cb03      	ldmia	r3!, {r0, r1}
 8000fe6:	6010      	str	r0, [r2, #0]
 8000fe8:	6051      	str	r1, [r2, #4]
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	8113      	strh	r3, [r2, #8]
    tx_payload += sizeof(MqttConnectPacket);
 8000fee:	6a3b      	ldr	r3, [r7, #32]
 8000ff0:	330a      	adds	r3, #10
 8000ff2:	623b      	str	r3, [r7, #32]

    /* Encode payload */
    tx_payload += MqttEncode_String(tx_payload, connect->client_id);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6a38      	ldr	r0, [r7, #32]
 8000ffc:	f7ff fedc 	bl	8000db8 <MqttEncode_String>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	4413      	add	r3, r2
 8001008:	623b      	str	r3, [r7, #32]
    if (connect->enable_lwt) {
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7b1b      	ldrb	r3, [r3, #12]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d01b      	beq.n	800104a <MqttEncode_Connect+0x212>
        tx_payload += MqttEncode_String(tx_payload,
            connect->lwt_msg->topic_name);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_String(tx_payload,
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	4619      	mov	r1, r3
 800101a:	6a38      	ldr	r0, [r7, #32]
 800101c:	f7ff fecc 	bl	8000db8 <MqttEncode_String>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	4413      	add	r3, r2
 8001028:	623b      	str	r3, [r7, #32]
        tx_payload += MqttEncode_Data(tx_payload,
            connect->lwt_msg->buffer, (word16)connect->lwt_msg->total_len);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	6959      	ldr	r1, [r3, #20]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_Data(tx_payload,
 8001036:	b29b      	uxth	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	6a38      	ldr	r0, [r7, #32]
 800103c:	f7ff fede 	bl	8000dfc <MqttEncode_Data>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	6a3b      	ldr	r3, [r7, #32]
 8001046:	4413      	add	r3, r2
 8001048:	623b      	str	r3, [r7, #32]
    }
    if (connect->username) {
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00a      	beq.n	8001068 <MqttEncode_Connect+0x230>
        tx_payload += MqttEncode_String(tx_payload, connect->username);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	4619      	mov	r1, r3
 8001058:	6a38      	ldr	r0, [r7, #32]
 800105a:	f7ff fead 	bl	8000db8 <MqttEncode_String>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	4413      	add	r3, r2
 8001066:	623b      	str	r3, [r7, #32]
    }
    if (connect->password) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00a      	beq.n	8001086 <MqttEncode_Connect+0x24e>
        tx_payload += MqttEncode_String(tx_payload, connect->password);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4619      	mov	r1, r3
 8001076:	6a38      	ldr	r0, [r7, #32]
 8001078:	f7ff fe9e 	bl	8000db8 <MqttEncode_String>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	4413      	add	r3, r2
 8001084:	623b      	str	r3, [r7, #32]
    }
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	4413      	add	r3, r2
}
 800108c:	4618      	mov	r0, r3
 800108e:	3728      	adds	r7, #40	; 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	08002aec 	.word	0x08002aec

08001098 <MqttDecode_ConnectAck>:

int MqttDecode_ConnectAck(byte *rx_buf, int rx_buf_len,
    MqttConnectAck *connect_ack)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	; 0x30
 800109c:	af04      	add	r7, sp, #16
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d002      	beq.n	80010b0 <MqttDecode_ConnectAck+0x18>
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dc02      	bgt.n	80010b6 <MqttDecode_ConnectAck+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b4:	e024      	b.n	8001100 <MqttDecode_ConnectAck+0x68>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80010b6:	f107 0214 	add.w	r2, r7, #20
 80010ba:	2300      	movs	r3, #0
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	2300      	movs	r3, #0
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	2300      	movs	r3, #0
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2302      	movs	r3, #2
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f7ff fd3f 	bl	8000b4e <MqttDecode_FixedHeader>
 80010d0:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	da01      	bge.n	80010dc <MqttDecode_ConnectAck+0x44>
        return header_len;
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	e011      	b.n	8001100 <MqttDecode_ConnectAck+0x68>
    }
    rx_payload = &rx_buf[header_len];
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	4413      	add	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (connect_ack) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <MqttDecode_ConnectAck+0x62>
        connect_ack->flags = rx_payload[0];
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	781a      	ldrb	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	701a      	strb	r2, [r3, #0]
        connect_ack->return_code = rx_payload[1];
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	785a      	ldrb	r2, [r3, #1]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	705a      	strb	r2, [r3, #1]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	4413      	add	r3, r2
}
 8001100:	4618      	mov	r0, r3
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <MqttDecode_Publish>:
    /* Return length of packet placed into tx_buf */
    return header_len + variable_len + payload_len;
}

int MqttDecode_Publish(byte *rx_buf, int rx_buf_len, MqttPublish *publish)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08e      	sub	sp, #56	; 0x38
 800110c:	af04      	add	r7, sp, #16
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, variable_len, payload_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || publish == NULL) {
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d005      	beq.n	8001126 <MqttDecode_Publish+0x1e>
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	2b00      	cmp	r3, #0
 800111e:	dd02      	ble.n	8001126 <MqttDecode_Publish+0x1e>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <MqttDecode_Publish+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800112a:	e060      	b.n	80011ee <MqttDecode_Publish+0xe6>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3305      	adds	r3, #5
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	3206      	adds	r2, #6
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	3107      	adds	r1, #7
 8001138:	f107 0014 	add.w	r0, r7, #20
 800113c:	9102      	str	r1, [sp, #8]
 800113e:	9201      	str	r2, [sp, #4]
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2303      	movs	r3, #3
 8001144:	4602      	mov	r2, r0
 8001146:	68b9      	ldr	r1, [r7, #8]
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f7ff fd00 	bl	8000b4e <MqttDecode_FixedHeader>
 800114e:	61f8      	str	r0, [r7, #28]
        &remain_len, MQTT_PACKET_TYPE_PUBLISH, &publish->qos,
        &publish->retain, &publish->duplicate);
    if (header_len < 0) {
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	2b00      	cmp	r3, #0
 8001154:	da01      	bge.n	800115a <MqttDecode_Publish+0x52>
        return header_len;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	e049      	b.n	80011ee <MqttDecode_Publish+0xe6>
    }
    rx_payload = &rx_buf[header_len];
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	623b      	str	r3, [r7, #32]

    /* Decode variable header */
    variable_len = MqttDecode_String(rx_payload, &publish->topic_name,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f103 0108 	add.w	r1, r3, #8
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	330c      	adds	r3, #12
 800116c:	461a      	mov	r2, r3
 800116e:	6a38      	ldr	r0, [r7, #32]
 8001170:	f7ff fdfd 	bl	8000d6e <MqttDecode_String>
 8001174:	6278      	str	r0, [r7, #36]	; 0x24
        &publish->topic_name_len);
    rx_payload += variable_len;
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	6a3a      	ldr	r2, [r7, #32]
 800117a:	4413      	add	r3, r2
 800117c:	623b      	str	r3, [r7, #32]

    /* If QoS > 0 then get packet Id */
    if (publish->qos > MQTT_QOS_0) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	795b      	ldrb	r3, [r3, #5]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00c      	beq.n	80011a0 <MqttDecode_Publish+0x98>
        variable_len += MqttDecode_Num(rx_payload, &publish->packet_id);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3302      	adds	r3, #2
 800118a:	4619      	mov	r1, r3
 800118c:	6a38      	ldr	r0, [r7, #32]
 800118e:	f7ff fdb7 	bl	8000d00 <MqttDecode_Num>
 8001192:	4602      	mov	r2, r0
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	4413      	add	r3, r2
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
        rx_payload += MQTT_DATA_LEN_SIZE;
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	3302      	adds	r3, #2
 800119e:	623b      	str	r3, [r7, #32]
    }

    /* Decode Payload */
    payload_len = remain_len - variable_len;
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	61bb      	str	r3, [r7, #24]
    publish->buffer = rx_payload;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a3a      	ldr	r2, [r7, #32]
 80011ac:	615a      	str	r2, [r3, #20]
    publish->buffer_pos = 0;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	61da      	str	r2, [r3, #28]
    publish->total_len = payload_len;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	611a      	str	r2, [r3, #16]

    /* Only return the length provided in rx_buf_len */
    if ((int)publish->buffer_len >
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	4619      	mov	r1, r3
        (rx_buf_len - (header_len + variable_len)))
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	4413      	add	r3, r2
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	1ad3      	subs	r3, r2, r3
    if ((int)publish->buffer_len >
 80011d0:	4299      	cmp	r1, r3
 80011d2:	dd07      	ble.n	80011e4 <MqttDecode_Publish+0xdc>
    {
        publish->buffer_len = (rx_buf_len - (header_len + variable_len));
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	4413      	add	r3, r2
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	61da      	str	r2, [r3, #28]
    }

    return header_len + variable_len + payload_len;
 80011e4:	69fa      	ldr	r2, [r7, #28]
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	441a      	add	r2, r3
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	4413      	add	r3, r2
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <MqttEncode_PublishResp>:

int MqttEncode_PublishResp(byte* tx_buf, int tx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b08c      	sub	sp, #48	; 0x30
 80011fa:	af04      	add	r7, sp, #16
 80011fc:	60f8      	str	r0, [r7, #12]
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	4613      	mov	r3, r2
 8001204:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *tx_payload;
    MqttQoS qos;

    /* Validate required arguments */
    if (tx_buf == NULL || publish_resp == NULL) {
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <MqttEncode_PublishResp+0x1c>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <MqttEncode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001216:	e030      	b.n	800127a <MqttEncode_PublishResp+0x84>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 8001218:	2302      	movs	r3, #2
 800121a:	61fb      	str	r3, [r7, #28]

    /* Determine Qos value */
    qos = (type == MQTT_PACKET_TYPE_PUBLISH_REL) ? MQTT_QOS_1 : MQTT_QOS_0;
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2b06      	cmp	r3, #6
 8001220:	bf0c      	ite	eq
 8001222:	2301      	moveq	r3, #1
 8001224:	2300      	movne	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	76fb      	strb	r3, [r7, #27]

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 800122a:	79fa      	ldrb	r2, [r7, #7]
 800122c:	2300      	movs	r3, #0
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	7efb      	ldrb	r3, [r7, #27]
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	2300      	movs	r3, #0
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	4613      	mov	r3, r2
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff fc3e 	bl	8000ac0 <MqttEncode_FixedHeader>
 8001244:	6178      	str	r0, [r7, #20]
        type, 0, qos, 0);
    if (header_len < 0) {
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b00      	cmp	r3, #0
 800124a:	da01      	bge.n	8001250 <MqttEncode_PublishResp+0x5a>
        return header_len;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	e014      	b.n	800127a <MqttEncode_PublishResp+0x84>
    }
    tx_payload = &tx_buf[header_len];
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	4413      	add	r3, r2
 8001256:	613b      	str	r3, [r7, #16]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], publish_resp->packet_id);
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	441a      	add	r2, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	4619      	mov	r1, r3
 8001264:	4610      	mov	r0, r2
 8001266:	f7ff fd6b 	bl	8000d40 <MqttEncode_Num>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4413      	add	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	4413      	add	r3, r2
}
 800127a:	4618      	mov	r0, r3
 800127c:	3720      	adds	r7, #32
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <MqttDecode_PublishResp>:

int MqttDecode_PublishResp(byte* rx_buf, int rx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b08c      	sub	sp, #48	; 0x30
 8001286:	af04      	add	r7, sp, #16
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	4613      	mov	r3, r2
 8001290:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <MqttDecode_PublishResp+0x1c>
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	dc02      	bgt.n	80012a4 <MqttDecode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012a2:	e027      	b.n	80012f4 <MqttDecode_PublishResp+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80012a4:	79f9      	ldrb	r1, [r7, #7]
 80012a6:	f107 0214 	add.w	r2, r7, #20
 80012aa:	2300      	movs	r3, #0
 80012ac:	9302      	str	r3, [sp, #8]
 80012ae:	2300      	movs	r3, #0
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	2300      	movs	r3, #0
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	460b      	mov	r3, r1
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff fc47 	bl	8000b4e <MqttDecode_FixedHeader>
 80012c0:	61f8      	str	r0, [r7, #28]
        type, NULL, NULL, NULL);
    if (header_len < 0) {
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	da01      	bge.n	80012cc <MqttDecode_PublishResp+0x4a>
        return header_len;
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	e013      	b.n	80012f4 <MqttDecode_PublishResp+0x72>
    }
    rx_payload = &rx_buf[header_len];
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4413      	add	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (publish_resp) {
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d009      	beq.n	80012ee <MqttDecode_PublishResp+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &publish_resp->packet_id);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	69b8      	ldr	r0, [r7, #24]
 80012e0:	f7ff fd0e 	bl	8000d00 <MqttDecode_Num>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	4413      	add	r3, r2
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3720      	adds	r7, #32
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <MqttEncode_Subscribe>:

int MqttEncode_Subscribe(byte *tx_buf, int tx_buf_len,
    MqttSubscribe *subscribe)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	; 0x38
 8001300:	af04      	add	r7, sp, #16
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, i;
    byte *tx_payload;
    MqttTopic *topic;

    /* Validate required arguments */
    if (tx_buf == NULL || subscribe == NULL) {
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <MqttEncode_Subscribe+0x18>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <MqttEncode_Subscribe+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001318:	e069      	b.n	80013ee <MqttEncode_Subscribe+0xf2>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 800131a:	2302      	movs	r3, #2
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
 8001322:	e015      	b.n	8001350 <MqttEncode_Subscribe+0x54>
                                topic = &subscribe->topics[i];
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4413      	add	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        remain_len += (int)XSTRLEN(topic->topic_filter) + MQTT_DATA_LEN_SIZE;
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7fe ff09 	bl	800014c <strlen>
 800133a:	4603      	mov	r3, r0
 800133c:	3302      	adds	r3, #2
 800133e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001340:	4413      	add	r3, r2
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len++; /* For QoS */
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	3301      	adds	r3, #1
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	3301      	adds	r3, #1
 800134e:	623b      	str	r3, [r7, #32]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	429a      	cmp	r2, r3
 8001358:	dce4      	bgt.n	8001324 <MqttEncode_Subscribe+0x28>
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 800135a:	2300      	movs	r3, #0
 800135c:	9302      	str	r3, [sp, #8]
 800135e:	2301      	movs	r3, #1
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	2300      	movs	r3, #0
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2308      	movs	r3, #8
 8001368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800136a:	68b9      	ldr	r1, [r7, #8]
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f7ff fba7 	bl	8000ac0 <MqttEncode_FixedHeader>
 8001372:	6178      	str	r0, [r7, #20]
        MQTT_PACKET_TYPE_SUBSCRIBE, 0, MQTT_QOS_1, 0);
    if (header_len < 0) {
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2b00      	cmp	r3, #0
 8001378:	da01      	bge.n	800137e <MqttEncode_Subscribe+0x82>
        return header_len;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	e037      	b.n	80013ee <MqttEncode_Subscribe+0xf2>
    }
    tx_payload = &tx_buf[header_len];
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	61fb      	str	r3, [r7, #28]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], subscribe->packet_id);
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	441a      	add	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	885b      	ldrh	r3, [r3, #2]
 8001390:	4619      	mov	r1, r3
 8001392:	4610      	mov	r0, r2
 8001394:	f7ff fcd4 	bl	8000d40 <MqttEncode_Num>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	4413      	add	r3, r2
 80013a0:	61fb      	str	r3, [r7, #28]

    /* Encode payload */
    for (i = 0; i < subscribe->topic_count; i++) {
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
 80013a6:	e01a      	b.n	80013de <MqttEncode_Subscribe+0xe2>
        topic = &subscribe->topics[i];
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4413      	add	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        tx_payload += MqttEncode_String(tx_payload, topic->topic_filter);
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	69f8      	ldr	r0, [r7, #28]
 80013bc:	f7ff fcfc 	bl	8000db8 <MqttEncode_String>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	4413      	add	r3, r2
 80013c8:	61fb      	str	r3, [r7, #28]
        *tx_payload = topic->qos;
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	791a      	ldrb	r2, [r3, #4]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	701a      	strb	r2, [r3, #0]
        tx_payload++;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3301      	adds	r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < subscribe->topic_count; i++) {
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	3301      	adds	r3, #1
 80013dc:	623b      	str	r3, [r7, #32]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dcdf      	bgt.n	80013a8 <MqttEncode_Subscribe+0xac>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	4413      	add	r3, r2
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <MqttDecode_SubscribeAck>:

int MqttDecode_SubscribeAck(byte* rx_buf, int rx_buf_len,
    MqttSubscribeAck *subscribe_ack)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b08c      	sub	sp, #48	; 0x30
 80013fa:	af04      	add	r7, sp, #16
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || subscribe_ack == NULL) {
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <MqttDecode_SubscribeAck+0x1e>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	dd02      	ble.n	8001414 <MqttDecode_SubscribeAck+0x1e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <MqttDecode_SubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001418:	e029      	b.n	800146e <MqttDecode_SubscribeAck+0x78>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 800141a:	f107 0214 	add.w	r2, r7, #20
 800141e:	2300      	movs	r3, #0
 8001420:	9302      	str	r3, [sp, #8]
 8001422:	2300      	movs	r3, #0
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	2300      	movs	r3, #0
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2309      	movs	r3, #9
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f7ff fb8d 	bl	8000b4e <MqttDecode_FixedHeader>
 8001434:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_SUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	2b00      	cmp	r3, #0
 800143a:	da01      	bge.n	8001440 <MqttDecode_SubscribeAck+0x4a>
        return header_len;
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	e016      	b.n	800146e <MqttDecode_SubscribeAck+0x78>
    }
    rx_payload = &rx_buf[header_len];
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	4413      	add	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (subscribe_ack) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00c      	beq.n	8001468 <MqttDecode_SubscribeAck+0x72>
        rx_payload += MqttDecode_Num(rx_payload, &subscribe_ack->packet_id);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4619      	mov	r1, r3
 8001452:	69b8      	ldr	r0, [r7, #24]
 8001454:	f7ff fc54 	bl	8000d00 <MqttDecode_Num>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	4413      	add	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        subscribe_ack->return_codes = rx_payload; /* List of return codes */
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	605a      	str	r2, [r3, #4]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	4413      	add	r3, r2
}
 800146e:	4618      	mov	r0, r3
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <MqttDecode_UnsubscribeAck>:
    return header_len + remain_len;
}

int MqttDecode_UnsubscribeAck(byte *rx_buf, int rx_buf_len,
    MqttUnsubscribeAck *unsubscribe_ack)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b08c      	sub	sp, #48	; 0x30
 800147a:	af04      	add	r7, sp, #16
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || unsubscribe_ack == NULL) {
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <MqttDecode_UnsubscribeAck+0x1e>
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	dd02      	ble.n	8001494 <MqttDecode_UnsubscribeAck+0x1e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <MqttDecode_UnsubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001498:	e026      	b.n	80014e8 <MqttDecode_UnsubscribeAck+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 800149a:	f107 0214 	add.w	r2, r7, #20
 800149e:	2300      	movs	r3, #0
 80014a0:	9302      	str	r3, [sp, #8]
 80014a2:	2300      	movs	r3, #0
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	2300      	movs	r3, #0
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	230b      	movs	r3, #11
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f7ff fb4d 	bl	8000b4e <MqttDecode_FixedHeader>
 80014b4:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	da01      	bge.n	80014c0 <MqttDecode_UnsubscribeAck+0x4a>
        return header_len;
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	e013      	b.n	80014e8 <MqttDecode_UnsubscribeAck+0x72>
    }
    rx_payload = &rx_buf[header_len];
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (unsubscribe_ack) {
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d009      	beq.n	80014e2 <MqttDecode_UnsubscribeAck+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &unsubscribe_ack->packet_id);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4619      	mov	r1, r3
 80014d2:	69b8      	ldr	r0, [r7, #24]
 80014d4:	f7ff fc14 	bl	8000d00 <MqttDecode_Num>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	4413      	add	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	4413      	add	r3, r2
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <MqttDecode_Ping>:
    /* Return total length of packet */
    return header_len + remain_len;
}

int MqttDecode_Ping(byte *rx_buf, int rx_buf_len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af04      	add	r7, sp, #16
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
    int header_len, remain_len;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <MqttDecode_Ping+0x16>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	dc02      	bgt.n	800150c <MqttDecode_Ping+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800150a:	e015      	b.n	8001538 <MqttDecode_Ping+0x48>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 800150c:	f107 0208 	add.w	r2, r7, #8
 8001510:	2300      	movs	r3, #0
 8001512:	9302      	str	r3, [sp, #8]
 8001514:	2300      	movs	r3, #0
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	2300      	movs	r3, #0
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	230d      	movs	r3, #13
 800151e:	6839      	ldr	r1, [r7, #0]
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fb14 	bl	8000b4e <MqttDecode_FixedHeader>
 8001526:	60f8      	str	r0, [r7, #12]
        MQTT_PACKET_TYPE_PING_RESP, NULL, NULL, NULL);
    if (header_len < 0) {
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	da01      	bge.n	8001532 <MqttDecode_Ping+0x42>
        return header_len;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	e002      	b.n	8001538 <MqttDecode_Ping+0x48>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <MqttPacket_Write>:
    return header_len;
}


int MqttPacket_Write(MqttClient *client, byte* tx_buf, int tx_buf_len)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
    int rc;
    rc = MqttSocket_Write(client, tx_buf, tx_buf_len, client->cmd_timeout_ms);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	68b9      	ldr	r1, [r7, #8]
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 f8e9 	bl	800172c <MqttSocket_Write>
 800155a:	6178      	str	r0, [r7, #20]
    return rc;
 800155c:	697b      	ldr	r3, [r7, #20]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <MqttPacket_Read>:

/* Read return code is length when > 0 */
int MqttPacket_Read(MqttClient *client, byte* rx_buf, int rx_buf_len,
    int timeout_ms)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b088      	sub	sp, #32
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	603b      	str	r3, [r7, #0]
    int rc, len, remain_read = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    MqttPacket* header = (MqttPacket*)rx_buf;
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	61bb      	str	r3, [r7, #24]

    switch (client->packet.stat)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	7f1b      	ldrb	r3, [r3, #28]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d01e      	beq.n	80015c2 <MqttPacket_Read+0x5c>
 8001584:	2b02      	cmp	r3, #2
 8001586:	d057      	beq.n	8001638 <MqttPacket_Read+0xd2>
 8001588:	2b00      	cmp	r3, #0
 800158a:	d17e      	bne.n	800168a <MqttPacket_Read+0x124>
    {
        case MQTT_PK_BEGIN:
        {
            client->packet.header_len = 2;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2202      	movs	r2, #2
 8001590:	621a      	str	r2, [r3, #32]
            client->packet.remain_len = 0;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	625a      	str	r2, [r3, #36]	; 0x24

            /* Read fix header portion */
            rc = MqttSocket_Read(client, rx_buf, client->packet.header_len, timeout_ms);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a1a      	ldr	r2, [r3, #32]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68b9      	ldr	r1, [r7, #8]
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 f92a 	bl	80017fa <MqttSocket_Read>
 80015a6:	6178      	str	r0, [r7, #20]
            if (rc < 0) {
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	da01      	bge.n	80015b2 <MqttPacket_Read+0x4c>
                return rc;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	e072      	b.n	8001698 <MqttPacket_Read+0x132>
            }
            else if (rc != client->packet.header_len) {
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6a1a      	ldr	r2, [r3, #32]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d002      	beq.n	80015c2 <MqttPacket_Read+0x5c>
                return MQTT_CODE_ERROR_NETWORK;
 80015bc:	f06f 0307 	mvn.w	r3, #7
 80015c0:	e06a      	b.n	8001698 <MqttPacket_Read+0x132>
            FALL_THROUGH;
        }

        case MQTT_PK_READ_HEAD:
        {
            client->packet.stat = MQTT_PK_READ_HEAD;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2201      	movs	r2, #1
 80015c6:	771a      	strb	r2, [r3, #28]

            do {
                /* Try and decode remaining length */
                rc = MqttDecode_RemainLen(header, client->packet.header_len, &client->packet.remain_len);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6a19      	ldr	r1, [r3, #32]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3324      	adds	r3, #36	; 0x24
 80015d0:	461a      	mov	r2, r3
 80015d2:	69b8      	ldr	r0, [r7, #24]
 80015d4:	f7ff fb09 	bl	8000bea <MqttDecode_RemainLen>
 80015d8:	6178      	str	r0, [r7, #20]
                if (rc < 0) { /* Indicates error */
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da01      	bge.n	80015e4 <MqttPacket_Read+0x7e>
                    return rc;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	e059      	b.n	8001698 <MqttPacket_Read+0x132>
                }
                /* Indicates decode success and rc is len of header */
                else if (rc > 0) {
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	dd03      	ble.n	80015f2 <MqttPacket_Read+0x8c>
                    client->packet.header_len = rc;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	621a      	str	r2, [r3, #32]
                    break; /* exit while */
 80015f0:	e022      	b.n	8001638 <MqttPacket_Read+0xd2>
                }

                /* Read next byte and try decode again */
                len = 1;
 80015f2:	2301      	movs	r3, #1
 80015f4:	613b      	str	r3, [r7, #16]
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len], len, timeout_ms);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	1899      	adds	r1, r3, r2
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 f8f8 	bl	80017fa <MqttSocket_Read>
 800160a:	6178      	str	r0, [r7, #20]
                if (rc < 0) {
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	da01      	bge.n	8001616 <MqttPacket_Read+0xb0>
                    return rc;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	e040      	b.n	8001698 <MqttPacket_Read+0x132>
                }
                else if (rc != len) {
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	429a      	cmp	r2, r3
 800161c:	d002      	beq.n	8001624 <MqttPacket_Read+0xbe>
                    return MQTT_CODE_ERROR_NETWORK;
 800161e:	f06f 0307 	mvn.w	r3, #7
 8001622:	e039      	b.n	8001698 <MqttPacket_Read+0x132>
                }
                client->packet.header_len += len;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a1a      	ldr	r2, [r3, #32]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	441a      	add	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	621a      	str	r2, [r3, #32]

            } while (client->packet.header_len < MQTT_PACKET_MAX_SIZE);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	2b04      	cmp	r3, #4
 8001636:	ddc7      	ble.n	80015c8 <MqttPacket_Read+0x62>
            FALL_THROUGH;
        }

        case MQTT_PK_READ:
        {
            client->packet.stat = MQTT_PK_READ;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2202      	movs	r2, #2
 800163c:	771a      	strb	r2, [r3, #28]

            /* Make sure it does not overflow rx_buf */
            if (client->packet.remain_len > (rx_buf_len - client->packet.header_len)) {
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	1acb      	subs	r3, r1, r3
 800164a:	429a      	cmp	r2, r3
 800164c:	dd05      	ble.n	800165a <MqttPacket_Read+0xf4>
                client->packet.remain_len = rx_buf_len - client->packet.header_len;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	1ad2      	subs	r2, r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
            }

            /* Read remaining */
            if (client->packet.remain_len > 0) {
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	2b00      	cmp	r3, #0
 8001660:	dd12      	ble.n	8001688 <MqttPacket_Read+0x122>
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len],
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	461a      	mov	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	1899      	adds	r1, r3, r2
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 f8c1 	bl	80017fa <MqttSocket_Read>
 8001678:	6178      	str	r0, [r7, #20]
                    client->packet.remain_len, timeout_ms);
                if (rc <= 0) {
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	dc01      	bgt.n	8001684 <MqttPacket_Read+0x11e>
                    return rc;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	e009      	b.n	8001698 <MqttPacket_Read+0x132>
                }
                remain_read = rc;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	61fb      	str	r3, [r7, #28]
            }

            break;
 8001688:	bf00      	nop
        }
    } /* switch (client->packet.stat) */

    /* reset state */
    client->packet.stat = MQTT_PK_BEGIN;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	771a      	strb	r2, [r3, #28]

    /* Return read length */
    return client->packet.header_len + remain_read;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a1a      	ldr	r2, [r3, #32]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	4413      	add	r3, r2
}
 8001698:	4618      	mov	r0, r3
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <MqttSocket_Init>:
#endif


/* Public Functions */
int MqttSocket_Init(MqttClient *client, MqttNet *net)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
    int rc = MQTT_CODE_ERROR_BAD_ARG;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ae:	60fb      	str	r3, [r7, #12]
    if (client) {
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d01d      	beq.n	80016f2 <MqttSocket_Init+0x52>
        client->net = net;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	619a      	str	r2, [r3, #24]
        client->flags &= ~(MQTT_CLIENT_FLAG_IS_CONNECTED |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 0203 	bic.w	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	601a      	str	r2, [r3, #0]
        client->tls.ssl = NULL;
        client->tls.timeout_ms = client->cmd_timeout_ms;
    #endif

        /* Validate callbacks are not null! */
        if (net && net->connect && net->read && net->write && net->disconnect) {
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d011      	beq.n	80016f2 <MqttSocket_Init+0x52>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00d      	beq.n	80016f2 <MqttSocket_Init+0x52>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d009      	beq.n	80016f2 <MqttSocket_Init+0x52>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <MqttSocket_Init+0x52>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MqttSocket_Init+0x52>
            rc = MQTT_CODE_SUCCESS;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
        }
    }
    return rc;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <MqttSocket_WriteDo>:

static int MqttSocket_WriteDo(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 80016fe:	b590      	push	{r4, r7, lr}
 8001700:	b087      	sub	sp, #28
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->write(client->net->context, buf, buf_len,
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	68dc      	ldr	r4, [r3, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	47a0      	blx	r4
 8001720:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Write: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 8001722:	697b      	ldr	r3, [r7, #20]
}
 8001724:	4618      	mov	r0, r3
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}

0800172c <MqttSocket_Write>:

int MqttSocket_Write(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->write == NULL ||
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00e      	beq.n	800175e <MqttSocket_Write+0x32>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00a      	beq.n	800175e <MqttSocket_Write+0x32>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <MqttSocket_Write+0x32>
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <MqttSocket_Write+0x32>
        buf == NULL || buf_len <= 0) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	dc02      	bgt.n	8001764 <MqttSocket_Write+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001762:	e02f      	b.n	80017c4 <MqttSocket_Write+0x98>
    }

    /* check for buffer position overflow */
    if (client->write.pos >= buf_len) {
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	429a      	cmp	r2, r3
 800176c:	db02      	blt.n	8001774 <MqttSocket_Write+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 800176e:	f06f 0301 	mvn.w	r3, #1
 8001772:	e027      	b.n	80017c4 <MqttSocket_Write+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001778:	461a      	mov	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1899      	adds	r1, r3, r2
            buf_len - client->write.pos, timeout_ms);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	1ad2      	subs	r2, r2, r3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f7ff ffb8 	bl	80016fe <MqttSocket_WriteDo>
 800178e:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	2b00      	cmp	r3, #0
 8001794:	dd0b      	ble.n	80017ae <MqttSocket_Write+0x82>
            break;
        }
        client->write.pos += rc;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	441a      	add	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	635a      	str	r2, [r3, #52]	; 0x34
    } while (client->write.pos < buf_len);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dbe3      	blt.n	8001774 <MqttSocket_Write+0x48>
 80017ac:	e000      	b.n	80017b0 <MqttSocket_Write+0x84>
            break;
 80017ae:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	dd05      	ble.n	80017c2 <MqttSocket_Write+0x96>
        /* return length write and reset position */
        rc = client->write.pos;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ba:	617b      	str	r3, [r7, #20]
        client->write.pos = 0;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return rc;
 80017c2:	697b      	ldr	r3, [r7, #20]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <MqttSocket_ReadDo>:

static int MqttSocket_ReadDo(MqttClient *client, byte* buf, int buf_len,
    int timeout_ms)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->read(client->net->context, buf, buf_len, timeout_ms);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	689c      	ldr	r4, [r3, #8]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	47a0      	blx	r4
 80017ee:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Read: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 80017f0:	697b      	ldr	r3, [r7, #20]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd90      	pop	{r4, r7, pc}

080017fa <MqttSocket_Read>:

int MqttSocket_Read(MqttClient *client, byte* buf, int buf_len, int timeout_ms)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->read == NULL ||
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00e      	beq.n	800182c <MqttSocket_Read+0x32>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00a      	beq.n	800182c <MqttSocket_Read+0x32>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <MqttSocket_Read+0x32>
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <MqttSocket_Read+0x32>
        buf == NULL || buf_len <= 0) {
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	dc02      	bgt.n	8001832 <MqttSocket_Read+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 800182c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001830:	e02f      	b.n	8001892 <MqttSocket_Read+0x98>
    }

    /* check for buffer position overflow */
    if (client->read.pos >= buf_len) {
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	db02      	blt.n	8001842 <MqttSocket_Read+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 800183c:	f06f 0301 	mvn.w	r3, #1
 8001840:	e027      	b.n	8001892 <MqttSocket_Read+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	461a      	mov	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	1899      	adds	r1, r3, r2
            buf_len - client->read.pos, timeout_ms);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	1ad2      	subs	r2, r2, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f7ff ffb8 	bl	80017cc <MqttSocket_ReadDo>
 800185c:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	dd0b      	ble.n	800187c <MqttSocket_Read+0x82>
            break;
        }
        client->read.pos += rc;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	441a      	add	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
    } while (client->read.pos < buf_len);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	dbe3      	blt.n	8001842 <MqttSocket_Read+0x48>
 800187a:	e000      	b.n	800187e <MqttSocket_Read+0x84>
            break;
 800187c:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b00      	cmp	r3, #0
 8001882:	dd05      	ble.n	8001890 <MqttSocket_Read+0x96>
        /* return length read and reset position */
        rc = client->read.pos;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	617b      	str	r3, [r7, #20]
        client->read.pos = 0;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    return rc;
 8001890:	697b      	ldr	r3, [r7, #20]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80018a6:	4908      	ldr	r1, [pc, #32]	; (80018c8 <NVIC_EnableIRQ+0x2c>)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	095b      	lsrs	r3, r3, #5
 80018ae:	79fa      	ldrb	r2, [r7, #7]
 80018b0:	f002 021f 	and.w	r2, r2, #31
 80018b4:	2001      	movs	r0, #1
 80018b6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100

080018cc <EnableGpioClk>:
	 		 #define PIN_CNF_PUSH_PULL		(0x2)
	 		 #define PIN_MODE_OUT			(0x1)



	 		 void EnableGpioClk (GPIO_TypeDef * gpioPort){
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	 		 	if (gpioPort == GPIOA){
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a17      	ldr	r2, [pc, #92]	; (8001934 <EnableGpioClk+0x68>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d106      	bne.n	80018ea <EnableGpioClk+0x1e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80018dc:	4a16      	ldr	r2, [pc, #88]	; (8001938 <EnableGpioClk+0x6c>)
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <EnableGpioClk+0x6c>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	6193      	str	r3, [r2, #24]
	 		 	} else if (gpioPort == GPIOC){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
	 		 	} else if (gpioPort == GPIOD){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
	 		 	}
	 		 }
 80018e8:	e01f      	b.n	800192a <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOB){
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a13      	ldr	r2, [pc, #76]	; (800193c <EnableGpioClk+0x70>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d106      	bne.n	8001900 <EnableGpioClk+0x34>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80018f2:	4a11      	ldr	r2, [pc, #68]	; (8001938 <EnableGpioClk+0x6c>)
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <EnableGpioClk+0x6c>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6193      	str	r3, [r2, #24]
	 		 }
 80018fe:	e014      	b.n	800192a <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOC){
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <EnableGpioClk+0x74>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d106      	bne.n	8001916 <EnableGpioClk+0x4a>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8001908:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <EnableGpioClk+0x6c>)
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <EnableGpioClk+0x6c>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f043 0310 	orr.w	r3, r3, #16
 8001912:	6193      	str	r3, [r2, #24]
	 		 }
 8001914:	e009      	b.n	800192a <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOD){
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <EnableGpioClk+0x78>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d105      	bne.n	800192a <EnableGpioClk+0x5e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 800191e:	4a06      	ldr	r2, [pc, #24]	; (8001938 <EnableGpioClk+0x6c>)
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <EnableGpioClk+0x6c>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f043 0320 	orr.w	r3, r3, #32
 8001928:	6193      	str	r3, [r2, #24]
	 		 }
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	40010800 	.word	0x40010800
 8001938:	40021000 	.word	0x40021000
 800193c:	40010c00 	.word	0x40010c00
 8001940:	40011000 	.word	0x40011000
 8001944:	40011400 	.word	0x40011400

08001948 <SetGpioAsInFloating>:
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 	}
	 		 }


	 		 void SetGpioAsInFloating (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	2b07      	cmp	r3, #7
 8001958:	d81d      	bhi.n	8001996 <SetGpioAsInFloating+0x4e>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<pinNb);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	78fa      	ldrb	r2, [r7, #3]
 8001960:	2103      	movs	r1, #3
 8001962:	fa01 f202 	lsl.w	r2, r1, r2
 8001966:	43d2      	mvns	r2, r2
 8001968:	401a      	ands	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<pinNb);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	2103      	movs	r1, #3
 8001976:	fa01 f202 	lsl.w	r2, r1, r2
 800197a:	43d2      	mvns	r2, r2
 800197c:	401a      	ands	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_FLOAT<<pinNb);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	2101      	movs	r1, #1
 800198a:	fa01 f202 	lsl.w	r2, r1, r2
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	601a      	str	r2, [r3, #0]
	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
	 		 	}
	 		 }
 8001994:	e023      	b.n	80019de <SetGpioAsInFloating+0x96>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	3a08      	subs	r2, #8
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	2103      	movs	r1, #3
 80019a2:	fa01 f202 	lsl.w	r2, r1, r2
 80019a6:	43d2      	mvns	r2, r2
 80019a8:	401a      	ands	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	78fa      	ldrb	r2, [r7, #3]
 80019b4:	3a08      	subs	r2, #8
 80019b6:	0092      	lsls	r2, r2, #2
 80019b8:	2103      	movs	r1, #3
 80019ba:	fa01 f202 	lsl.w	r2, r1, r2
 80019be:	43d2      	mvns	r2, r2
 80019c0:	401a      	ands	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	3a08      	subs	r2, #8
 80019ce:	0092      	lsls	r2, r2, #2
 80019d0:	3202      	adds	r2, #2
 80019d2:	2101      	movs	r1, #1
 80019d4:	fa01 f202 	lsl.w	r2, r1, r2
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	605a      	str	r2, [r3, #4]
	 		 }
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <SetGpioAsInPullUp>:




	 		 void SetGpioAsInPullUp (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	2b07      	cmp	r3, #7
 80019f8:	d82b      	bhi.n	8001a52 <SetGpioAsInPullUp+0x6a>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<(pinNb*4));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	0092      	lsls	r2, r2, #2
 8001a02:	2103      	movs	r1, #3
 8001a04:	fa01 f202 	lsl.w	r2, r1, r2
 8001a08:	43d2      	mvns	r2, r2
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<((pinNb*4)+2));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	3202      	adds	r2, #2
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a20:	43d2      	mvns	r2, r2
 8001a22:	401a      	ands	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_PUSH_PULL<<((pinNb*4)+2));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	0092      	lsls	r2, r2, #2
 8001a30:	3202      	adds	r2, #2
 8001a32:	2102      	movs	r1, #2
 8001a34:	fa01 f202 	lsl.w	r2, r1, r2
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->ODR |= (1<<pinNb);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	2101      	movs	r1, #1
 8001a46:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	60da      	str	r2, [r3, #12]
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<((pinNb-8)*4)+2);
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
	 		 		gpioPort->ODR |=  (1<<pinNb);
	 		 	}
	 		 }
 8001a50:	e02d      	b.n	8001aae <SetGpioAsInPullUp+0xc6>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	3a08      	subs	r2, #8
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a62:	43d2      	mvns	r2, r2
 8001a64:	401a      	ands	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<((pinNb-8)*4)+2);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	3a08      	subs	r2, #8
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	3202      	adds	r2, #2
 8001a76:	2103      	movs	r1, #3
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	43d2      	mvns	r2, r2
 8001a7e:	401a      	ands	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	3a08      	subs	r2, #8
 8001a8c:	0092      	lsls	r2, r2, #2
 8001a8e:	3202      	adds	r2, #2
 8001a90:	2102      	movs	r1, #2
 8001a92:	fa01 f202 	lsl.w	r2, r1, r2
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->ODR |=  (1<<pinNb);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	60da      	str	r2, [r3, #12]
	 		 }
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <SetGpioAsOutAltPushPUll>:




	 		 void SetGpioAsOutAltPushPUll (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	2b07      	cmp	r3, #7
 8001ac8:	d92f      	bls.n	8001b2a <SetGpioAsOutAltPushPUll+0x72>
	 		 //
	 		 //		gpioPort->CRL |= (PIN_MODE_OUT<<pinNb);
	 		 //		gpioPort->CRL &= ~(PIN_CNF_PUSH_PULL<<pinNb);

	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	78fa      	ldrb	r2, [r7, #3]
 8001ad0:	3a08      	subs	r2, #8
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	2103      	movs	r1, #3
 8001ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ada:	43d2      	mvns	r2, r2
 8001adc:	401a      	ands	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	3a08      	subs	r2, #8
 8001aea:	0092      	lsls	r2, r2, #2
 8001aec:	3202      	adds	r2, #2
 8001aee:	2103      	movs	r1, #3
 8001af0:	fa01 f202 	lsl.w	r2, r1, r2
 8001af4:	43d2      	mvns	r2, r2
 8001af6:	401a      	ands	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	605a      	str	r2, [r3, #4]

	 		 		gpioPort->CRH |= (PIN_MODE_OUT<<(pinNb-8)*4);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	78fa      	ldrb	r2, [r7, #3]
 8001b02:	3a08      	subs	r2, #8
 8001b04:	0092      	lsls	r2, r2, #2
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	3a08      	subs	r2, #8
 8001b1a:	0092      	lsls	r2, r2, #2
 8001b1c:	3202      	adds	r2, #2
 8001b1e:	2102      	movs	r1, #2
 8001b20:	fa01 f202 	lsl.w	r2, r1, r2
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	605a      	str	r2, [r3, #4]
	 		 	}
	 		 }
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <EnableExti>:
	 		 	return (gpioPort->IDR & (1<<pinNb));
	 		 }



	 		 void EnableExti(GPIO_TypeDef * gpioPort, uint8_t pinNb, bool rise, bool fall){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	4608      	mov	r0, r1
 8001b3e:	4611      	mov	r1, r2
 8001b40:	461a      	mov	r2, r3
 8001b42:	4603      	mov	r3, r0
 8001b44:	70fb      	strb	r3, [r7, #3]
 8001b46:	460b      	mov	r3, r1
 8001b48:	70bb      	strb	r3, [r7, #2]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	707b      	strb	r3, [r7, #1]
	 		 	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8001b4e:	4a1a      	ldr	r2, [pc, #104]	; (8001bb8 <EnableExti+0x84>)
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <EnableExti+0x84>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6193      	str	r3, [r2, #24]
	 		 	AFIO->EXTICR[1] |= AFIO_EXTICR2_EXTI5_PB;
 8001b5a:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <EnableExti+0x88>)
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <EnableExti+0x88>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f043 0310 	orr.w	r3, r3, #16
 8001b64:	60d3      	str	r3, [r2, #12]
	 		 	EXTI->IMR  |= (1<<pinNb);
 8001b66:	4916      	ldr	r1, [pc, #88]	; (8001bc0 <EnableExti+0x8c>)
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <EnableExti+0x8c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	2001      	movs	r0, #1
 8001b70:	fa00 f202 	lsl.w	r2, r0, r2
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
	 		 	if (rise){
 8001b78:	78bb      	ldrb	r3, [r7, #2]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <EnableExti+0x5c>
	 		 		EXTI->RTSR |= (1<<pinNb);
 8001b7e:	4910      	ldr	r1, [pc, #64]	; (8001bc0 <EnableExti+0x8c>)
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <EnableExti+0x8c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	78fa      	ldrb	r2, [r7, #3]
 8001b86:	2001      	movs	r0, #1
 8001b88:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]
	 		 	}
	 		 	if (fall){
 8001b90:	787b      	ldrb	r3, [r7, #1]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d008      	beq.n	8001ba8 <EnableExti+0x74>
	 		 		EXTI->FTSR |= (1<<pinNb);
 8001b96:	490a      	ldr	r1, [pc, #40]	; (8001bc0 <EnableExti+0x8c>)
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <EnableExti+0x8c>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60cb      	str	r3, [r1, #12]
	 		 		//SetGpioAsInPullUp(GPIOB, 5);
	 		 	}
	 		 	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ba8:	2017      	movs	r0, #23
 8001baa:	f7ff fe77 	bl	800189c <NVIC_EnableIRQ>


	 		 }
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010000 	.word	0x40010000
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <_delay_ms>:




	 		 void _delay_ms(int n) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

	 		 	int i, j;
	 		 	j= n*1000;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bd2:	fb02 f303 	mul.w	r3, r2, r3
 8001bd6:	60bb      	str	r3, [r7, #8]
	 		 	while(j--) {
 8001bd8:	e007      	b.n	8001bea <_delay_ms+0x26>
	 		 		i=2;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	60fb      	str	r3, [r7, #12]
	 		 		while(i--);
 8001bde:	bf00      	nop
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1e5a      	subs	r2, r3, #1
 8001be4:	60fa      	str	r2, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1fa      	bne.n	8001be0 <_delay_ms+0x1c>
	 		 	while(j--) {
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1e5a      	subs	r2, r3, #1
 8001bee:	60ba      	str	r2, [r7, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f2      	bne.n	8001bda <_delay_ms+0x16>
	 		 	}
	 		 }
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <Rfm12bInit>:
/* SPI CS LOW and High should be declared in platform layer file
#define NSEL_RFM12_LOW
#define NSEL_RFM12_HIGH
*/

void Rfm12bInit() {
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
  Rfm12bSpiInit();
 8001c02:	f000 f9c1 	bl	8001f88 <Rfm12bSpiInit>
  Rfm12bWriteCmd(0x0000);
 8001c06:	2000      	movs	r0, #0
 8001c08:	f000 fa2a 	bl	8002060 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x80E7); //EL,EF,868band,12.0pF
 8001c0c:	f248 00e7 	movw	r0, #32999	; 0x80e7
 8001c10:	f000 fa26 	bl	8002060 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x8208); //no tx/rx
 8001c14:	f248 2008 	movw	r0, #33288	; 0x8208
 8001c18:	f000 fa22 	bl	8002060 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xA640); //frequency select
 8001c1c:	f24a 6040 	movw	r0, #42560	; 0xa640
 8001c20:	f000 fa1e 	bl	8002060 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC648); //4,8kbps
 8001c24:	f24c 6048 	movw	r0, #50760	; 0xc648
 8001c28:	f000 fa1a 	bl	8002060 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x94A0); //VDI,FAST,134kHz,0dBm,-103dBm
 8001c2c:	f249 40a0 	movw	r0, #38048	; 0x94a0
 8001c30:	f000 fa16 	bl	8002060 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC2AC); //AL,!ml,DIG,DQD4
 8001c34:	f24c 20ac 	movw	r0, #49836	; 0xc2ac
 8001c38:	f000 fa12 	bl	8002060 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCA81); //FIFO8,SYNC,!ff,DR
 8001c3c:	f64c 2081 	movw	r0, #51841	; 0xca81
 8001c40:	f000 fa0e 	bl	8002060 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCED4); //SYNC=2DD4G
 8001c44:	f64c 60d4 	movw	r0, #52948	; 0xced4
 8001c48:	f000 fa0a 	bl	8002060 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC483); //@PWR,NO RSTRIC,!st,!fi,OE,EN
 8001c4c:	f24c 4083 	movw	r0, #50307	; 0xc483
 8001c50:	f000 fa06 	bl	8002060 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x9850); //!mp,90kHz,MAX OUT
 8001c54:	f649 0050 	movw	r0, #38992	; 0x9850
 8001c58:	f000 fa02 	bl	8002060 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCC17); //OB1COB0, LPX,IddyCDDITCBW0
 8001c5c:	f64c 4017 	movw	r0, #52247	; 0xcc17
 8001c60:	f000 f9fe 	bl	8002060 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xE000); //NOT USE
 8001c64:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8001c68:	f000 f9fa 	bl	8002060 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC800); //NOT USE
 8001c6c:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 8001c70:	f000 f9f6 	bl	8002060 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC040); //1.66MHz,2.2V
 8001c74:	f24c 0040 	movw	r0, #49216	; 0xc040
 8001c78:	f000 f9f2 	bl	8002060 <Rfm12bWriteCmd>
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <Rrm12bObjInit>:

void Rrm12bObjInit (volatile rfm12bObj_t * rfm12bObj, uint8_t module_addr){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
	memset(rfm12bObj, 0, sizeof(rfm12bObj_t));
 8001c8c:	f240 320e 	movw	r2, #782	; 0x30e
 8001c90:	2100      	movs	r1, #0
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 ff15 	bl	8002ac2 <memset>
	rfm12bObj->module_addr = module_addr;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	rfm12bObj->state = receive;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <rfSend>:




static void rfSend(uint8_t data)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	uint16_t temp=0xB800;
 8001cba:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8001cbe:	81fb      	strh	r3, [r7, #14]
	uint16_t status=0x0000;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	81bb      	strh	r3, [r7, #12]
	temp|=data;
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	89fb      	ldrh	r3, [r7, #14]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	81fb      	strh	r3, [r7, #14]

	if (  !status )
 8001cce:	89bb      	ldrh	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10a      	bne.n	8001cea <rfSend+0x3a>
	{
		//status = RFM12B_RDSTATUS();
		status = Rfm12bWriteCmd(0x0000);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f000 f9c3 	bl	8002060 <Rfm12bWriteCmd>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	81bb      	strh	r3, [r7, #12]
		status = status & 0x8000;
 8001cde:	89bb      	ldrh	r3, [r7, #12]
 8001ce0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ce4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ce8:	81bb      	strh	r3, [r7, #12]
	}

	Rfm12bWriteCmd(temp);
 8001cea:	89fb      	ldrh	r3, [r7, #14]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 f9b7 	bl	8002060 <Rfm12bWriteCmd>
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <Rfm12bStartSending>:

//void Rfm12bClearBuff (rfm12bBuff_t * rfm12bBuff){
//	memset(rfm12bBuff, 0, sizeof (rfm12bBuff_t));
//}

void Rfm12bStartSending (volatile rfm12bObj_t * rfm12b, uint8_t *data, uint8_t dataNb, uint8_t toAddr){
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	4611      	mov	r1, r2
 8001d06:	461a      	mov	r2, r3
 8001d08:	460b      	mov	r3, r1
 8001d0a:	71fb      	strb	r3, [r7, #7]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	71bb      	strb	r3, [r7, #6]

	rfm12b->txBuff.data[0] = 0xAA;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	22aa      	movs	r2, #170	; 0xaa
 8001d14:	711a      	strb	r2, [r3, #4]
	rfm12b->txBuff.data[1] = 0x2D;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	222d      	movs	r2, #45	; 0x2d
 8001d1a:	715a      	strb	r2, [r3, #5]
	rfm12b->txBuff.data[2] = 0xD4;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	22d4      	movs	r2, #212	; 0xd4
 8001d20:	719a      	strb	r2, [r3, #6]
	rfm12b->txBuff.data[3] = dataNb;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	79fa      	ldrb	r2, [r7, #7]
 8001d26:	71da      	strb	r2, [r3, #7]
	rfm12b->txBuff.data[4] = toAddr;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	79ba      	ldrb	r2, [r7, #6]
 8001d2c:	721a      	strb	r2, [r3, #8]
	rfm12b->txBuff.data[5] = rfm12b->module_addr;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	725a      	strb	r2, [r3, #9]
	memcpy((void*)&rfm12b->txBuff.data[ALL_HEADER_SIZE], data, dataNb);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	330a      	adds	r3, #10
 8001d3e:	79fa      	ldrb	r2, [r7, #7]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 feb2 	bl	8002aac <memcpy>
	rfm12b->txBuff.pos =0;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
	rfm12b->txBuff.dataNb = dataNb + RFM12_PREMBLE_LEN;
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	3305      	adds	r3, #5
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	705a      	strb	r2, [r3, #1]
    rfm12bSwitchTx();
 8001d58:	f000 f90e 	bl	8001f78 <rfm12bSwitchTx>
    rfm12b->state = transmit;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
	rfSend(0xAA);
 8001d64:	20aa      	movs	r0, #170	; 0xaa
 8001d66:	f7ff ffa3 	bl	8001cb0 <rfSend>
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <Rfm12bTranssmitSeqByte>:



static void Rfm12bTranssmitSeqByte(volatile rfm12bBuff_t * txBuff){
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
	uint16_t cmd = 0xB800;
 8001d7a:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8001d7e:	81fb      	strh	r3, [r7, #14]
	uint8_t data = txBuff->data[txBuff->pos++];
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	b2d1      	uxtb	r1, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	7011      	strb	r1, [r2, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	791b      	ldrb	r3, [r3, #4]
 8001d96:	737b      	strb	r3, [r7, #13]
	Rfm12bWriteCmd(cmd | data);
 8001d98:	7b7b      	ldrb	r3, [r7, #13]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	89fb      	ldrh	r3, [r7, #14]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f95c 	bl	8002060 <Rfm12bWriteCmd>
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <Rfm12bMantainSending>:

void Rfm12bMantainSending(volatile rfm12bObj_t * rfm12b){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	 if (rfm12b->txBuff.pos < rfm12b->txBuff.dataNb){
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	785b      	ldrb	r3, [r3, #1]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d204      	bcs.n	8001dd2 <Rfm12bMantainSending+0x22>
		 Rfm12bTranssmitSeqByte(&rfm12b->txBuff);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ffd1 	bl	8001d72 <Rfm12bTranssmitSeqByte>
	 } else{
		 rfm12b->state = receive;
		 rfm12bSwitchRx();
	 }
}
 8001dd0:	e005      	b.n	8001dde <Rfm12bMantainSending+0x2e>
		 rfm12b->state = receive;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
		 rfm12bSwitchRx();
 8001dda:	f000 f8c5 	bl	8001f68 <rfm12bSwitchRx>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <Rfm12bMoveDataToCompletedBuff>:

static void Rfm12bMoveDataToCompletedBuff(volatile rfm12bObj_t * rfm12b){
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
	memset(&rfm12b->completedRxBuff, 0, sizeof (rfm12bBuff_t));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001df4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fe61 	bl	8002ac2 <memset>
	memcpy(rfm12b->completedRxBuff.data,  &rfm12b->rxBuff.data[L2_HEADER_SIZE], rfm12b->rxBuff.dataNb);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f503 7003 	add.w	r0, r3, #524	; 0x20c
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f203 110b 	addw	r1, r3, #267	; 0x10b
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	f000 fe49 	bl	8002aac <memcpy>
	rfm12b->completedRxBuff.dataNb = rfm12b->rxBuff.dataNb;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
	rfm12b->completedRxBuff.rxTOAddr = rfm12b->rxBuff.data[ADDR_TO_POS]; //cast this values as frame to struct
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
	rfm12b->completedRxBuff.rxFromAddr = rfm12b->rxBuff.data[ADDR_FROM_POS];
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
	memset(&rfm12b->rxBuff, 0, sizeof (rfm12bBuff_t));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001e4a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fe36 	bl	8002ac2 <memset>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <Rfm12bresetRx>:

static void Rfm12bresetRx(volatile rfm12bObj_t * rfm12b){
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
	rfm12b->rxBuff.pos = 0;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	rfm12bFifoReset();
 8001e6e:	f000 f861 	bl	8001f34 <rfm12bFifoReset>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <Rfm12bMantainreceiving>:

/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/
/* [BYTE_NUMBER] [ADDR_RECEIVER] [ADDR_SENDER] [DATA] */
/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/

void Rfm12bMantainreceiving(volatile rfm12bObj_t * rfm12b){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	uint8_t rxByte = rfm12bReadFifo();
 8001e84:	f000 f862 	bl	8001f4c <rfm12bReadFifo>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	73fb      	strb	r3, [r7, #15]
	if (rfm12b->rxBuff.pos < RFM12_MAX_FRAME_SIZE){
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
		rfm12b->rxBuff.data[rfm12b->rxBuff.pos++] = rxByte;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	b2d1      	uxtb	r1, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		rfm12b->rxBuff.dataNb =  rfm12b->rxBuff.data[BYTE_NB_POS];
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		if (rfm12b->rxBuff.pos == rfm12b->rxBuff.dataNb){
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d10b      	bne.n	8001eea <Rfm12bMantainreceiving+0x6e>
			Rfm12bMoveDataToCompletedBuff(rfm12b);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ff87 	bl	8001de6 <Rfm12bMoveDataToCompletedBuff>
			Rfm12bresetRx(rfm12b);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ffc0 	bl	8001e5e <Rfm12bresetRx>
			GPIOC->ODR ^= GPIO_Pin_13;//
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <Rfm12bMantainreceiving+0x78>)
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <Rfm12bMantainreceiving+0x78>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ee8:	60d3      	str	r3, [r2, #12]
		}
	} else {
		Rfm12bresetRx(rfm12b);
	}
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40011000 	.word	0x40011000

08001ef8 <Rfm12bIrqCallback>:


void Rfm12bIrqCallback (volatile rfm12bObj_t * rfm12b){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	uint16_t status = Rfm12bWriteCmd(0x0000);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f000 f8ad 	bl	8002060 <Rfm12bWriteCmd>
 8001f06:	4603      	mov	r3, r0
 8001f08:	81fb      	strh	r3, [r7, #14]

	if (status & RFM12_STATUS_FFIT ){
 8001f0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	da0c      	bge.n	8001f2c <Rfm12bIrqCallback+0x34>
		if (rfm12b->state == transmit){
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d103      	bne.n	8001f26 <Rfm12bIrqCallback+0x2e>
			Rfm12bMantainSending(rfm12b);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ff46 	bl	8001db0 <Rfm12bMantainSending>
		}
		else{
			Rfm12bMantainreceiving(rfm12b);
		}
	}
}
 8001f24:	e002      	b.n	8001f2c <Rfm12bIrqCallback+0x34>
			Rfm12bMantainreceiving(rfm12b);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ffa8 	bl	8001e7c <Rfm12bMantainreceiving>
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <rfm12bFifoReset>:
}




void rfm12bFifoReset() {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0xCA81);
 8001f38:	f64c 2081 	movw	r0, #51841	; 0xca81
 8001f3c:	f000 f890 	bl	8002060 <Rfm12bWriteCmd>
	Rfm12bWriteCmd(0xCA83);
 8001f40:	f64c 2083 	movw	r0, #51843	; 0xca83
 8001f44:	f000 f88c 	bl	8002060 <Rfm12bWriteCmd>
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <rfm12bReadFifo>:
		}
	}
}


uint8_t rfm12bReadFifo(void){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
	uint8_t rxByte = Rfm12bWriteCmd(0xB000);
 8001f52:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8001f56:	f000 f883 	bl	8002060 <Rfm12bWriteCmd>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
	return (rxByte&0x00FF);
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <rfm12bSwitchRx>:

void rfm12bSwitchRx(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8299);
 8001f6c:	f248 2099 	movw	r0, #33433	; 0x8299
 8001f70:	f000 f876 	bl	8002060 <Rfm12bWriteCmd>
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <rfm12bSwitchTx>:

void rfm12bSwitchTx(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8239);
 8001f7c:	f248 2039 	movw	r0, #33337	; 0x8239
 8001f80:	f000 f86e 	bl	8002060 <Rfm12bWriteCmd>
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <Rfm12bSpiInit>:





void Rfm12bSpiInit(void) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001f8e:	2101      	movs	r1, #1
 8001f90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f94:	f7fe f9c8 	bl	8000328 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8001f98:	2101      	movs	r1, #1
 8001f9a:	2004      	movs	r0, #4
 8001f9c:	f7fe f9c4 	bl	8000328 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	2008      	movs	r0, #8
 8001fa4:	f7fe f9c0 	bl	8000328 <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8001fa8:	23e0      	movs	r3, #224	; 0xe0
 8001faa:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8001fac:	2318      	movs	r3, #24
 8001fae:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001fb4:	f107 0308 	add.w	r3, r7, #8
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4825      	ldr	r0, [pc, #148]	; (8002050 <Rfm12bSpiInit+0xc8>)
 8001fbc:	f7fe f8dc 	bl	8000178 <GPIO_Init>


	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8001fc0:	2340      	movs	r3, #64	; 0x40
 8001fc2:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001fcc:	f107 0308 	add.w	r3, r7, #8
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4820      	ldr	r0, [pc, #128]	; (8002054 <Rfm12bSpiInit+0xcc>)
 8001fd4:	f7fe f8d0 	bl	8000178 <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001fdc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001fe0:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 8001fe2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fe6:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001fec:	2300      	movs	r3, #0
 8001fee:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff4:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 8001ff6:	2330      	movs	r3, #48	; 0x30
 8001ff8:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001ffe:	2307      	movs	r3, #7
 8002000:	83bb      	strh	r3, [r7, #28]
	SPI_SSOutputCmd(SPI1, ENABLE);
 8002002:	2101      	movs	r1, #1
 8002004:	4814      	ldr	r0, [pc, #80]	; (8002058 <Rfm12bSpiInit+0xd0>)
 8002006:	f7fe fa29 	bl	800045c <SPI_SSOutputCmd>
	SPI_Init(SPI1, &SPI_InitStructure);
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	4619      	mov	r1, r3
 8002010:	4811      	ldr	r0, [pc, #68]	; (8002058 <Rfm12bSpiInit+0xd0>)
 8002012:	f7fe f9a7 	bl	8000364 <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI1, ENABLE);
 8002016:	2101      	movs	r1, #1
 8002018:	480f      	ldr	r0, [pc, #60]	; (8002058 <Rfm12bSpiInit+0xd0>)
 800201a:	f7fe f9e6 	bl	80003ea <SPI_Cmd>

	GPIO_InitTypeDef PORT;

	// Enable the nRF24L01 GPIO peripherals
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800201e:	4a0f      	ldr	r2, [pc, #60]	; (800205c <Rfm12bSpiInit+0xd4>)
 8002020:	4b0e      	ldr	r3, [pc, #56]	; (800205c <Rfm12bSpiInit+0xd4>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f043 0308 	orr.w	r3, r3, #8
 8002028:	6193      	str	r3, [r2, #24]

	// Configure CSN pin
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 800202a:	2310      	movs	r3, #16
 800202c:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 800202e:	2302      	movs	r3, #2
 8002030:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_1;
 8002032:	2302      	movs	r3, #2
 8002034:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOB, &PORT);
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	4619      	mov	r1, r3
 800203a:	4806      	ldr	r0, [pc, #24]	; (8002054 <Rfm12bSpiInit+0xcc>)
 800203c:	f7fe f89c 	bl	8000178 <GPIO_Init>
	GPIO_SetBits(GPIOB, GPIO_Pin_1);
 8002040:	2102      	movs	r1, #2
 8002042:	4804      	ldr	r0, [pc, #16]	; (8002054 <Rfm12bSpiInit+0xcc>)
 8002044:	f7fe f954 	bl	80002f0 <GPIO_SetBits>
}
 8002048:	bf00      	nop
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40010800 	.word	0x40010800
 8002054:	40010c00 	.word	0x40010c00
 8002058:	40013000 	.word	0x40013000
 800205c:	40021000 	.word	0x40021000

08002060 <Rfm12bWriteCmd>:



uint16_t Rfm12bWriteCmd( uint16_t cmd )
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
	NSEL_RFM12_LOW;
 800206a:	2102      	movs	r1, #2
 800206c:	4812      	ldr	r0, [pc, #72]	; (80020b8 <Rfm12bWriteCmd+0x58>)
 800206e:	f7fe f94d 	bl	800030c <GPIO_ResetBits>
	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 8002072:	bf00      	nop
 8002074:	2102      	movs	r1, #2
 8002076:	4811      	ldr	r0, [pc, #68]	; (80020bc <Rfm12bWriteCmd+0x5c>)
 8002078:	f7fe fa0f 	bl	800049a <SPI_I2S_GetFlagStatus>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f8      	beq.n	8002074 <Rfm12bWriteCmd+0x14>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI1, cmd);
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	4619      	mov	r1, r3
 8002086:	480d      	ldr	r0, [pc, #52]	; (80020bc <Rfm12bWriteCmd+0x5c>)
 8002088:	f7fe f9ce 	bl	8000428 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 800208c:	bf00      	nop
 800208e:	2101      	movs	r1, #1
 8002090:	480a      	ldr	r0, [pc, #40]	; (80020bc <Rfm12bWriteCmd+0x5c>)
 8002092:	f7fe fa02 	bl	800049a <SPI_I2S_GetFlagStatus>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f8      	beq.n	800208e <Rfm12bWriteCmd+0x2e>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI1);
 800209c:	4807      	ldr	r0, [pc, #28]	; (80020bc <Rfm12bWriteCmd+0x5c>)
 800209e:	f7fe f9d1 	bl	8000444 <SPI_I2S_ReceiveData>
 80020a2:	4603      	mov	r3, r0
 80020a4:	81fb      	strh	r3, [r7, #14]

	NSEL_RFM12_HIGH;
 80020a6:	2102      	movs	r1, #2
 80020a8:	4803      	ldr	r0, [pc, #12]	; (80020b8 <Rfm12bWriteCmd+0x58>)
 80020aa:	f7fe f921 	bl	80002f0 <GPIO_SetBits>

	return recData;
 80020ae:	89fb      	ldrh	r3, [r7, #14]

}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40010c00 	.word	0x40010c00
 80020bc:	40013000 	.word	0x40013000

080020c0 <NVIC_EnableIRQ>:
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80020ca:	4908      	ldr	r1, [pc, #32]	; (80020ec <NVIC_EnableIRQ+0x2c>)
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	095b      	lsrs	r3, r3, #5
 80020d2:	79fa      	ldrb	r2, [r7, #7]
 80020d4:	f002 021f 	and.w	r2, r2, #31
 80020d8:	2001      	movs	r0, #1
 80020da:	fa00 f202 	lsl.w	r2, r0, r2
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100

080020f0 <GetTickCount>:


#define BROKER_ADDR		(1)
#define NODE_ADDR		(2)

 uint32_t GetTickCount(void){
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
	 return systickMsIRQ;
 80020f4:	4b02      	ldr	r3, [pc, #8]	; (8002100 <GetTickCount+0x10>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	20000330 	.word	0x20000330

08002104 <mqtt_message_cb>:
volatile rfm12bObj_t rfm12bObj;


uint8_t client_rec(void * context, uint8_t * buf, uint8_t buf_len);

int mqtt_message_cb(struct _MqttClient *client, MqttMessage *message, byte msg_new, byte msg_done){
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	4611      	mov	r1, r2
 8002110:	461a      	mov	r2, r3
 8002112:	460b      	mov	r3, r1
 8002114:	71fb      	strb	r3, [r7, #7]
 8002116:	4613      	mov	r3, r2
 8002118:	71bb      	strb	r3, [r7, #6]
	return 1;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <mqt_net_connect_cb>:

int mqt_net_connect_cb (void *context, const char* host, word16 port, int timeout_ms){
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	4613      	mov	r3, r2
 8002134:	80fb      	strh	r3, [r7, #6]
	return 1;
 8002136:	2301      	movs	r3, #1
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
	...

08002144 <mqtt_net_read_cb>:

int mqtt_net_read_cb(void *context, byte* buf, int buf_len, int timeout_ms){
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
	uint32_t enterTimestamp = GetTickCount();
 8002152:	f7ff ffcd 	bl	80020f0 <GetTickCount>
 8002156:	6178      	str	r0, [r7, #20]
	while (GetTickCount() - enterTimestamp < timeout_ms){
 8002158:	e00b      	b.n	8002172 <mqtt_net_read_cb+0x2e>
		uint8_t rxNb = RingBufferRead(&ringBuff, (uint8_t *)buf, buf_len);
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	480c      	ldr	r0, [pc, #48]	; (8002190 <mqtt_net_read_cb+0x4c>)
 8002160:	f000 fa79 	bl	8002656 <RingBufferRead>
 8002164:	4603      	mov	r3, r0
 8002166:	74fb      	strb	r3, [r7, #19]
		if (rxNb >0){
 8002168:	7cfb      	ldrb	r3, [r7, #19]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <mqtt_net_read_cb+0x2e>
			return rxNb;
 800216e:	7cfb      	ldrb	r3, [r7, #19]
 8002170:	e009      	b.n	8002186 <mqtt_net_read_cb+0x42>
	while (GetTickCount() - enterTimestamp < timeout_ms){
 8002172:	f7ff ffbd 	bl	80020f0 <GetTickCount>
 8002176:	4602      	mov	r2, r0
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	1ad2      	subs	r2, r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d3eb      	bcc.n	800215a <mqtt_net_read_cb+0x16>
		}
	}
	return -1;
 8002182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000734 	.word	0x20000734

08002194 <mqtt_net_write_cb>:

int mqtt_net_write_cb(void *context, const byte* buff, int buffLen, int timeout_ms){
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	603b      	str	r3, [r7, #0]

	rfm12bObj_t * obj = (rfm12bObj_t*) context;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	617b      	str	r3, [r7, #20]
	Rfm12bStartSending(obj, (uint8_t *)buff, buffLen, BROKER_ADDR);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	2301      	movs	r3, #1
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	6978      	ldr	r0, [r7, #20]
 80021b0:	f7ff fda3 	bl	8001cfa <Rfm12bStartSending>
	return buffLen;
 80021b4:	687b      	ldr	r3, [r7, #4]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <mqtt_net_disconnect_cb>:


int mqtt_net_disconnect_cb(void *context){
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
	return 0;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <radio_receive>:




uint8_t radio_receive (rfm12bObj_t* rfm12b, ringBuff_t * ringBuff){
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
	//here check if address we receive is our address and check who send this message
	uint8_t byteNb = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]
		byteNb = rfm12b->completedRxBuff.dataNb;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 80021e6:	73fb      	strb	r3, [r7, #15]
		if (byteNb > 0){
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <radio_receive+0x34>
			byteNb = (byteNb < R_BUFF_SIZE) ? byteNb : R_BUFF_SIZE;
			RingBufferWrite(ringBuff,  &rfm12b->completedRxBuff.data, byteNb);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	4619      	mov	r1, r3
 80021f8:	6838      	ldr	r0, [r7, #0]
 80021fa:	f000 f9ff 	bl	80025fc <RingBufferWrite>
			rfm12b->completedRxBuff.dataNb = 0;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		}
	return byteNb;
 8002206:	7bfb      	ldrb	r3, [r7, #15]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <EXTI9_5_IRQHandler>:
//	}
//}



void EXTI9_5_IRQHandler (void){
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line5);
 8002214:	2020      	movs	r0, #32
 8002216:	f7fd ffa1 	bl	800015c <EXTI_ClearITPendingBit>
	Rfm12bIrqCallback(&rfm12bObj);
 800221a:	4804      	ldr	r0, [pc, #16]	; (800222c <EXTI9_5_IRQHandler+0x1c>)
 800221c:	f7ff fe6c 	bl	8001ef8 <Rfm12bIrqCallback>
	radio_receive (&rfm12bObj, &ringBuff);
 8002220:	4903      	ldr	r1, [pc, #12]	; (8002230 <EXTI9_5_IRQHandler+0x20>)
 8002222:	4802      	ldr	r0, [pc, #8]	; (800222c <EXTI9_5_IRQHandler+0x1c>)
 8002224:	f7ff ffd5 	bl	80021d2 <radio_receive>

}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000020 	.word	0x20000020
 8002230:	20000734 	.word	0x20000734

08002234 <StartSystick>:



void StartSystick(void){
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
	SysTick->LOAD = 72000 - 1;
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <StartSystick+0x24>)
 800223a:	4a08      	ldr	r2, [pc, #32]	; (800225c <StartSystick+0x28>)
 800223c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <StartSystick+0x24>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_ENABLE | SysTick_CTRL_TICKINT;
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <StartSystick+0x24>)
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <StartSystick+0x24>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f043 0303 	orr.w	r3, r3, #3
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	e000e010 	.word	0xe000e010
 800225c:	0001193f 	.word	0x0001193f

08002260 <SysTick_Handler>:


void SysTick_Handler(void){
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
	systickMsIRQ++;
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <SysTick_Handler+0x18>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	4a03      	ldr	r2, [pc, #12]	; (8002278 <SysTick_Handler+0x18>)
 800226c:	6013      	str	r3, [r2, #0]
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	20000330 	.word	0x20000330

0800227c <main>:

 int main(){
 800227c:	b5b0      	push	{r4, r5, r7, lr}
 800227e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002282:	af04      	add	r7, sp, #16
	 	StartSystick();
 8002284:	f7ff ffd6 	bl	8002234 <StartSystick>
	 	EnableGpioClk(LOG_UART_PORT);
 8002288:	487d      	ldr	r0, [pc, #500]	; (8002480 <main+0x204>)
 800228a:	f7ff fb1f 	bl	80018cc <EnableGpioClk>
	 	SetGpioAsOutAltPushPUll(LOG_UART_PORT, LOG_UART_PIN_TX);
 800228e:	2109      	movs	r1, #9
 8002290:	487b      	ldr	r0, [pc, #492]	; (8002480 <main+0x204>)
 8002292:	f7ff fc11 	bl	8001ab8 <SetGpioAsOutAltPushPUll>
	 	SetGpioAsInFloating(LOG_UART_PORT, LOG_UART_PIN_RX);
 8002296:	210a      	movs	r1, #10
 8002298:	4879      	ldr	r0, [pc, #484]	; (8002480 <main+0x204>)
 800229a:	f7ff fb55 	bl	8001948 <SetGpioAsInFloating>
	 	EnableUart(USART1);
 800229e:	4879      	ldr	r0, [pc, #484]	; (8002484 <main+0x208>)
 80022a0:	f000 f92a 	bl	80024f8 <EnableUart>

	 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80022a4:	2101      	movs	r1, #1
 80022a6:	2010      	movs	r0, #16
 80022a8:	f7fe f83e 	bl	8000328 <RCC_APB2PeriphClockCmd>
	 	GPIO_InitTypeDef PORT;
	 	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 80022ac:	2310      	movs	r3, #16
 80022ae:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
	 	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 80022b2:	2302      	movs	r3, #2
 80022b4:	f887 31e6 	strb.w	r3, [r7, #486]	; 0x1e6
	 	PORT.GPIO_Pin = GPIO_Pin_13;
 80022b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022bc:	f8a7 31e4 	strh.w	r3, [r7, #484]	; 0x1e4
	 	GPIO_Init(GPIOC, &PORT);
 80022c0:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80022c4:	4619      	mov	r1, r3
 80022c6:	4870      	ldr	r0, [pc, #448]	; (8002488 <main+0x20c>)
 80022c8:	f7fd ff56 	bl	8000178 <GPIO_Init>
	 	GPIOC->ODR |= GPIO_Pin_13;
 80022cc:	4a6e      	ldr	r2, [pc, #440]	; (8002488 <main+0x20c>)
 80022ce:	4b6e      	ldr	r3, [pc, #440]	; (8002488 <main+0x20c>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022d6:	60d3      	str	r3, [r2, #12]


	 	Rfm12bInit();
 80022d8:	f7ff fc91 	bl	8001bfe <Rfm12bInit>
	 	_delay_ms(1000);	//wymagane opoznienie
 80022dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022e0:	f7ff fc70 	bl	8001bc4 <_delay_ms>
	 	Rfm12bWriteCmd(0x0000);
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7ff febb 	bl	8002060 <Rfm12bWriteCmd>
	 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80022ea:	2101      	movs	r1, #1
 80022ec:	2008      	movs	r0, #8
 80022ee:	f7fe f81b 	bl	8000328 <RCC_APB2PeriphClockCmd>
	 	EnableExti(GPIOB, 5, false, true);
 80022f2:	2301      	movs	r3, #1
 80022f4:	2200      	movs	r2, #0
 80022f6:	2105      	movs	r1, #5
 80022f8:	4864      	ldr	r0, [pc, #400]	; (800248c <main+0x210>)
 80022fa:	f7ff fc1b 	bl	8001b34 <EnableExti>
	 	SetGpioAsInPullUp(GPIOB, 5);
 80022fe:	2105      	movs	r1, #5
 8002300:	4862      	ldr	r0, [pc, #392]	; (800248c <main+0x210>)
 8002302:	f7ff fb71 	bl	80019e8 <SetGpioAsInPullUp>
		SetGpioAsInPullUp(GPIOB, 11);
 8002306:	210b      	movs	r1, #11
 8002308:	4860      	ldr	r0, [pc, #384]	; (800248c <main+0x210>)
 800230a:	f7ff fb6d 	bl	80019e8 <SetGpioAsInPullUp>


	 	rfm12bFifoReset();
 800230e:	f7ff fe11 	bl	8001f34 <rfm12bFifoReset>
	 	rfm12bSwitchRx();
 8002312:	f7ff fe29 	bl	8001f68 <rfm12bSwitchRx>
	 	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002316:	2017      	movs	r0, #23
 8002318:	f7ff fed2 	bl	80020c0 <NVIC_EnableIRQ>
	 	Rrm12bObjInit (&rfm12bObj, NODE_ADDR);
 800231c:	2102      	movs	r1, #2
 800231e:	485c      	ldr	r0, [pc, #368]	; (8002490 <main+0x214>)
 8002320:	f7ff fcae 	bl	8001c80 <Rrm12bObjInit>

 		RingBufferInit(&ringBuff);
 8002324:	485b      	ldr	r0, [pc, #364]	; (8002494 <main+0x218>)
 8002326:	f000 f95b 	bl	80025e0 <RingBufferInit>

	 	RTC_Init();
 800232a:	f000 fa31 	bl	8002790 <RTC_Init>
	 	RtcClear();
 800232e:	f000 f9f3 	bl	8002718 <RtcClear>



		const char * infoTxt = "Start Mqtt client";
 8002332:	4b59      	ldr	r3, [pc, #356]	; (8002498 <main+0x21c>)
 8002334:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	 	SendUart1Dma(infoTxt, strlen(infoTxt));
 8002338:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 800233c:	f7fd ff06 	bl	800014c <strlen>
 8002340:	4603      	mov	r3, r0
 8002342:	4619      	mov	r1, r3
 8002344:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 8002348:	f000 f90e 	bl	8002568 <SendUart1Dma>


	 		MqttNet net;
	 		MqttClient client;
	 		net.context = &rfm12bObj;
 800234c:	4b50      	ldr	r3, [pc, #320]	; (8002490 <main+0x214>)
 800234e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	 		net.connect = mqt_net_connect_cb;
 8002352:	4b52      	ldr	r3, [pc, #328]	; (800249c <main+0x220>)
 8002354:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	 		net.read = mqtt_net_read_cb;
 8002358:	4b51      	ldr	r3, [pc, #324]	; (80024a0 <main+0x224>)
 800235a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	 		net.write = mqtt_net_write_cb;
 800235e:	4b51      	ldr	r3, [pc, #324]	; (80024a4 <main+0x228>)
 8002360:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	 		net.disconnect = mqtt_net_disconnect_cb;
 8002364:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <main+0x22c>)
 8002366:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

	 		uint8_t tx_buf[BUF_SIZE_TX];
	 		uint8_t rx_buf[BUF_SIZE_RX];
	 		MqttClient_Init(&client, &net, mqtt_message_cb, tx_buf, BUF_SIZE_TX, rx_buf, BUF_SIZE_RX, CMD_TIMEOUT_MS);
 800236a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800236e:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8002372:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 8002376:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800237a:	9303      	str	r3, [sp, #12]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	9302      	str	r3, [sp, #8]
 8002380:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	4613      	mov	r3, r2
 800238c:	4a47      	ldr	r2, [pc, #284]	; (80024ac <main+0x230>)
 800238e:	f7fe fab1 	bl	80008f4 <MqttClient_Init>

	 		MqttConnect mqtt_con;
	 		mqtt_con.clean_session =0;
 8002392:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002396:	2200      	movs	r2, #0
 8002398:	711a      	strb	r2, [r3, #4]
	 		mqtt_con.client_id = "rt1";
 800239a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800239e:	4a44      	ldr	r2, [pc, #272]	; (80024b0 <main+0x234>)
 80023a0:	609a      	str	r2, [r3, #8]
	 		mqtt_con.enable_lwt = 0;
 80023a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023a6:	2200      	movs	r2, #0
 80023a8:	731a      	strb	r2, [r3, #12]
	 		mqtt_con.keep_alive_sec =30;
 80023aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023ae:	221e      	movs	r2, #30
 80023b0:	805a      	strh	r2, [r3, #2]
	 		mqtt_con.stat = MQTT_MSG_BEGIN;
 80023b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
	 		mqtt_con.username ="bedroomTMP1";
 80023ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023be:	4a3d      	ldr	r2, [pc, #244]	; (80024b4 <main+0x238>)
 80023c0:	615a      	str	r2, [r3, #20]
	 		mqtt_con.password = "passw0rd";
 80023c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023c6:	4a3c      	ldr	r2, [pc, #240]	; (80024b8 <main+0x23c>)
 80023c8:	619a      	str	r2, [r3, #24]
	 		MqttClient_Connect(&client, &mqtt_con);
 80023ca:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80023ce:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fac9 	bl	800096c <MqttClient_Connect>

	 		const char* test_topic1 = "flat/livingroom/temp/1";
 80023da:	4b38      	ldr	r3, [pc, #224]	; (80024bc <main+0x240>)
 80023dc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	 		const char* test_topic2 = "flat/bedroom/humidity/2";
 80023e0:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <main+0x244>)
 80023e2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	 		MqttTopic topics[2];
	 		topics[0].qos =1;
 80023e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023ea:	2201      	movs	r2, #1
 80023ec:	711a      	strb	r2, [r3, #4]
	 		topics[0].topic_filter = test_topic1;
 80023ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023f2:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80023f6:	601a      	str	r2, [r3, #0]
	 	    topics[1].qos =1;
 80023f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023fc:	2201      	movs	r2, #1
 80023fe:	731a      	strb	r2, [r3, #12]
	 		topics[1].topic_filter = test_topic2;
 8002400:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002404:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8002408:	609a      	str	r2, [r3, #8]


	 		MqttSubscribe subscribe;
	 		subscribe.packet_id = 1;
 800240a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800240e:	2201      	movs	r2, #1
 8002410:	805a      	strh	r2, [r3, #2]
	 		uint8_t topic_count = 2;
 8002412:	2302      	movs	r3, #2
 8002414:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
	 		subscribe.topic_count = topic_count;
 8002418:	f897 21eb 	ldrb.w	r2, [r7, #491]	; 0x1eb
 800241c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002420:	605a      	str	r2, [r3, #4]
	 		subscribe.topics = topics;
 8002422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002426:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800242a:	609a      	str	r2, [r3, #8]
	 		subscribe.stat = MQTT_MSG_BEGIN;
 800242c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
	 		MqttClient_Subscribe(&client, &subscribe);
 8002434:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002438:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fadb 	bl	80009fa <MqttClient_Subscribe>


	 	while (1){


	 		 radio_receive (&rfm12bObj, &ringBuff);
 8002444:	4913      	ldr	r1, [pc, #76]	; (8002494 <main+0x218>)
 8002446:	4812      	ldr	r0, [pc, #72]	; (8002490 <main+0x214>)
 8002448:	f7ff fec3 	bl	80021d2 <radio_receive>

	 		if (!(GPIOB->IDR & (1<<11))){
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <main+0x210>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f5      	bne.n	8002444 <main+0x1c8>
	 			uint8_t buff[] = "helloWorld1helloWorld2helloWorld3";
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <main+0x248>)
 800245c:	461c      	mov	r4, r3
 800245e:	4615      	mov	r5, r2
 8002460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	8023      	strh	r3, [r4, #0]
	 			Rfm12bStartSending(&rfm12bObj, buff, 30, BROKER_ADDR);
 800246c:	1d39      	adds	r1, r7, #4
 800246e:	2301      	movs	r3, #1
 8002470:	221e      	movs	r2, #30
 8002472:	4807      	ldr	r0, [pc, #28]	; (8002490 <main+0x214>)
 8002474:	f7ff fc41 	bl	8001cfa <Rfm12bStartSending>
	 			_delay_ms(250);
 8002478:	20fa      	movs	r0, #250	; 0xfa
 800247a:	f7ff fba3 	bl	8001bc4 <_delay_ms>
	 		 radio_receive (&rfm12bObj, &ringBuff);
 800247e:	e7e1      	b.n	8002444 <main+0x1c8>
 8002480:	40010800 	.word	0x40010800
 8002484:	40013800 	.word	0x40013800
 8002488:	40011000 	.word	0x40011000
 800248c:	40010c00 	.word	0x40010c00
 8002490:	20000020 	.word	0x20000020
 8002494:	20000734 	.word	0x20000734
 8002498:	08002af8 	.word	0x08002af8
 800249c:	08002127 	.word	0x08002127
 80024a0:	08002145 	.word	0x08002145
 80024a4:	08002195 	.word	0x08002195
 80024a8:	080021bf 	.word	0x080021bf
 80024ac:	08002105 	.word	0x08002105
 80024b0:	08002b0c 	.word	0x08002b0c
 80024b4:	08002b10 	.word	0x08002b10
 80024b8:	08002b1c 	.word	0x08002b1c
 80024bc:	08002b28 	.word	0x08002b28
 80024c0:	08002b40 	.word	0x08002b40
 80024c4:	08002b58 	.word	0x08002b58

080024c8 <NVIC_EnableIRQ>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80024d2:	4908      	ldr	r1, [pc, #32]	; (80024f4 <NVIC_EnableIRQ+0x2c>)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	095b      	lsrs	r3, r3, #5
 80024da:	79fa      	ldrb	r2, [r7, #7]
 80024dc:	f002 021f 	and.w	r2, r2, #31
 80024e0:	2001      	movs	r0, #1
 80024e2:	fa00 f202 	lsl.w	r2, r0, r2
 80024e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <EnableUart>:
#include "stm32f10x.h"
#include "platform.h"



void EnableUart (USART_TypeDef * usart){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002500:	4a18      	ldr	r2, [pc, #96]	; (8002564 <EnableUart+0x6c>)
 8002502:	4b18      	ldr	r3, [pc, #96]	; (8002564 <EnableUart+0x6c>)
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800250a:	6193      	str	r3, [r2, #24]
	usart->BRR = 72000000/115200;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f240 2271 	movw	r2, #625	; 0x271
 8002512:	811a      	strh	r2, [r3, #8]
	usart->CR1 |= USART_CR1_UE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	899b      	ldrh	r3, [r3, #12]
 8002518:	b29b      	uxth	r3, r3
 800251a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800251e:	b29a      	uxth	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_TE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	899b      	ldrh	r3, [r3, #12]
 8002528:	b29b      	uxth	r3, r3
 800252a:	f043 0308 	orr.w	r3, r3, #8
 800252e:	b29a      	uxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_RE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	899b      	ldrh	r3, [r3, #12]
 8002538:	b29b      	uxth	r3, r3
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	b29a      	uxth	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	819a      	strh	r2, [r3, #12]
	usart->CR3 |= USART_CR3_DMAT;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	8a9b      	ldrh	r3, [r3, #20]
 8002548:	b29b      	uxth	r3, r3
 800254a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800254e:	b29a      	uxth	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	829a      	strh	r2, [r3, #20]

	NVIC_EnableIRQ(USART1_IRQn);
 8002554:	2025      	movs	r0, #37	; 0x25
 8002556:	f7ff ffb7 	bl	80024c8 <NVIC_EnableIRQ>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000

08002568 <SendUart1Dma>:
	uart1_send(0xA);
}



void SendUart1Dma(uint32_t sourceAddr, uint16_t bytesNb){
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	807b      	strh	r3, [r7, #2]
	RCC->AHBENR = RCC_AHBENR_DMA1EN;
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <SendUart1Dma+0x6c>)
 8002576:	2201      	movs	r2, #1
 8002578:	615a      	str	r2, [r3, #20]
	DMA1_Channel4->CMAR = sourceAddr;
 800257a:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <SendUart1Dma+0x70>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	60d3      	str	r3, [r2, #12]
	DMA1_Channel4->CPAR =   0x40013804;
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <SendUart1Dma+0x70>)
 8002582:	4a16      	ldr	r2, [pc, #88]	; (80025dc <SendUart1Dma+0x74>)
 8002584:	609a      	str	r2, [r3, #8]
	DMA1_Channel4->CNDTR = bytesNb;
 8002586:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <SendUart1Dma+0x70>)
 8002588:	887b      	ldrh	r3, [r7, #2]
 800258a:	6053      	str	r3, [r2, #4]
	DMA1_Channel4->CCR |= DMA_CCR1_DIR;
 800258c:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <SendUart1Dma+0x70>)
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <SendUart1Dma+0x70>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f043 0310 	orr.w	r3, r3, #16
 8002596:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR |= DMA_CCR1_MINC;
 8002598:	4a0f      	ldr	r2, [pc, #60]	; (80025d8 <SendUart1Dma+0x70>)
 800259a:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <SendUart1Dma+0x70>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a2:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR &= ~DMA_CCR1_MSIZE;
 80025a4:	4a0c      	ldr	r2, [pc, #48]	; (80025d8 <SendUart1Dma+0x70>)
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <SendUart1Dma+0x70>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80025ae:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR &= ~DMA_CCR1_PSIZE;
 80025b0:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <SendUart1Dma+0x70>)
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <SendUart1Dma+0x70>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ba:	6013      	str	r3, [r2, #0]
//	DMA1_Channel4->CCR |= DMA_CCR1_CIRC;
//	DMA1_Channel4->CCR |= DMA_CCR1_MEM2MEM;
	DMA1_Channel4->CCR |= DMA_CCR1_EN;
 80025bc:	4a06      	ldr	r2, [pc, #24]	; (80025d8 <SendUart1Dma+0x70>)
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <SendUart1Dma+0x70>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40020044 	.word	0x40020044
 80025dc:	40013804 	.word	0x40013804

080025e0 <RingBufferInit>:
#include "ring_buff.h"




void RingBufferInit (volatile ringBuff_t * ringBuff){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	memset(ringBuff, 0, sizeof(ringBuff_t));
 80025e8:	f240 4204 	movw	r2, #1028	; 0x404
 80025ec:	2100      	movs	r1, #0
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fa67 	bl	8002ac2 <memset>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <RingBufferWrite>:


void RingBufferWrite (volatile ringBuff_t * ringBuff, uint8_t * data, uint16_t amount)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	4613      	mov	r3, r2
 8002608:	80fb      	strh	r3, [r7, #6]
	while (amount--){
 800260a:	e01a      	b.n	8002642 <RingBufferWrite+0x46>
		ringBuff->buffer[ringBuff->head++] = *data++;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	b291      	uxth	r1, r2
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	8011      	strh	r1, [r2, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	60ba      	str	r2, [r7, #8]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	b299      	uxth	r1, r3
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	0043      	lsls	r3, r0, #1
 800262a:	4413      	add	r3, r2
 800262c:	460a      	mov	r2, r1
 800262e:	809a      	strh	r2, [r3, #4]
		if(ringBuff->head == R_BUFF_SIZE){
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b29b      	uxth	r3, r3
 8002636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800263a:	d102      	bne.n	8002642 <RingBufferWrite+0x46>
			ringBuff->head =0;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	801a      	strh	r2, [r3, #0]
	while (amount--){
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	1e5a      	subs	r2, r3, #1
 8002646:	80fa      	strh	r2, [r7, #6]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1df      	bne.n	800260c <RingBufferWrite+0x10>
		}
	}
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <RingBufferRead>:


uint16_t RingBufferRead (volatile ringBuff_t * ringBuff, uint8_t * data, uint16_t amount)
{
 8002656:	b480      	push	{r7}
 8002658:	b089      	sub	sp, #36	; 0x24
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	4613      	mov	r3, r2
 8002662:	80fb      	strh	r3, [r7, #6]
	uint16_t just_read = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	83fb      	strh	r3, [r7, #30]
	uint16_t to_read=0;
 8002668:	2300      	movs	r3, #0
 800266a:	83bb      	strh	r3, [r7, #28]
	int32_t dist;

	dist = (ringBuff->head - ringBuff->tail);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	885b      	ldrh	r3, [r3, #2]
 8002678:	b29b      	uxth	r3, r3
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	617b      	str	r3, [r7, #20]
	if (dist>0){
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	dd02      	ble.n	800268a <RingBufferRead+0x34>
		to_read = dist;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	83bb      	strh	r3, [r7, #28]
 8002688:	e00d      	b.n	80026a6 <RingBufferRead+0x50>
	}
	else  if (dist < 0){
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b00      	cmp	r3, #0
 800268e:	da0a      	bge.n	80026a6 <RingBufferRead+0x50>
		to_read = (R_BUFF_END - ringBuff->tail) +  (ringBuff->head - R_BUFF_START);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	885b      	ldrh	r3, [r3, #2]
 800269a:	b29b      	uxth	r3, r3
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	b29b      	uxth	r3, r3
 80026a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80026a4:	83bb      	strh	r3, [r7, #28]
	}
	if (dist==0){
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <RingBufferRead+0x5a>
		return 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e02e      	b.n	800270e <RingBufferRead+0xb8>
	}

	if (amount > to_read){
 80026b0:	88fa      	ldrh	r2, [r7, #6]
 80026b2:	8bbb      	ldrh	r3, [r7, #28]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d901      	bls.n	80026bc <RingBufferRead+0x66>
		amount = to_read;
 80026b8:	8bbb      	ldrh	r3, [r7, #28]
 80026ba:	80fb      	strh	r3, [r7, #6]
	}

	uint16_t i=0;
 80026bc:	2300      	movs	r3, #0
 80026be:	837b      	strh	r3, [r7, #26]
	while (amount--){
 80026c0:	e01f      	b.n	8002702 <RingBufferRead+0xac>
		data[i++] = ringBuff->buffer[ringBuff->tail++];
 80026c2:	8b7b      	ldrh	r3, [r7, #26]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	837a      	strh	r2, [r7, #26]
 80026c8:	461a      	mov	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	441a      	add	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	885b      	ldrh	r3, [r3, #2]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	1c59      	adds	r1, r3, #1
 80026d6:	b288      	uxth	r0, r1
 80026d8:	68f9      	ldr	r1, [r7, #12]
 80026da:	8048      	strh	r0, [r1, #2]
 80026dc:	68f9      	ldr	r1, [r7, #12]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	440b      	add	r3, r1
 80026e2:	889b      	ldrh	r3, [r3, #4]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	7013      	strb	r3, [r2, #0]
		if (ringBuff->tail == R_BUFF_SIZE){
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	885b      	ldrh	r3, [r3, #2]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f4:	d102      	bne.n	80026fc <RingBufferRead+0xa6>
			ringBuff->tail =0;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	805a      	strh	r2, [r3, #2]
		}
		just_read++;
 80026fc:	8bfb      	ldrh	r3, [r7, #30]
 80026fe:	3301      	adds	r3, #1
 8002700:	83fb      	strh	r3, [r7, #30]
	while (amount--){
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	1e5a      	subs	r2, r3, #1
 8002706:	80fa      	strh	r2, [r7, #6]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1da      	bne.n	80026c2 <RingBufferRead+0x6c>
	}
	return just_read;
 800270c:	8bfb      	ldrh	r3, [r7, #30]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3724      	adds	r7, #36	; 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <RtcClear>:
#include "stm32f10x.h"




void RtcClear (void){
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0

	PWR->CR |= PWR_CR_DBP;
 800271c:	4a1a      	ldr	r2, [pc, #104]	; (8002788 <RtcClear+0x70>)
 800271e:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <RtcClear+0x70>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002726:	6013      	str	r3, [r2, #0]
	RCC->BDCR |= RCC_BDCR_BDRST;
 8002728:	4a18      	ldr	r2, [pc, #96]	; (800278c <RtcClear+0x74>)
 800272a:	4b18      	ldr	r3, [pc, #96]	; (800278c <RtcClear+0x74>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002732:	6213      	str	r3, [r2, #32]
	RCC->BDCR &= ~RCC_BDCR_BDRST;
 8002734:	4a15      	ldr	r2, [pc, #84]	; (800278c <RtcClear+0x74>)
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <RtcClear+0x74>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273e:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_LSEON;
 8002740:	4a12      	ldr	r2, [pc, #72]	; (800278c <RtcClear+0x74>)
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <RtcClear+0x74>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6213      	str	r3, [r2, #32]
	while (!(RCC->BDCR & RCC_BDCR_LSERDY));
 800274c:	bf00      	nop
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <RtcClear+0x74>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f9      	beq.n	800274e <RtcClear+0x36>
	RCC->BDCR |= RCC_BDCR_RTCSEL_LSE;
 800275a:	4a0c      	ldr	r2, [pc, #48]	; (800278c <RtcClear+0x74>)
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <RtcClear+0x74>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_RTCEN;
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <RtcClear+0x74>)
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <RtcClear+0x74>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002770:	6213      	str	r3, [r2, #32]
	PWR->CR &= ~PWR_CR_DBP;
 8002772:	4a05      	ldr	r2, [pc, #20]	; (8002788 <RtcClear+0x70>)
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <RtcClear+0x70>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800277c:	6013      	str	r3, [r2, #0]

}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40007000 	.word	0x40007000
 800278c:	40021000 	.word	0x40021000

08002790 <RTC_Init>:


void RTC_Init (void){
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002794:	4a32      	ldr	r2, [pc, #200]	; (8002860 <RTC_Init+0xd0>)
 8002796:	4b32      	ldr	r3, [pc, #200]	; (8002860 <RTC_Init+0xd0>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279e:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_BKPEN;
 80027a0:	4a2f      	ldr	r2, [pc, #188]	; (8002860 <RTC_Init+0xd0>)
 80027a2:	4b2f      	ldr	r3, [pc, #188]	; (8002860 <RTC_Init+0xd0>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027aa:	61d3      	str	r3, [r2, #28]
	PWR->CR |= PWR_CR_DBP;
 80027ac:	4a2d      	ldr	r2, [pc, #180]	; (8002864 <RTC_Init+0xd4>)
 80027ae:	4b2d      	ldr	r3, [pc, #180]	; (8002864 <RTC_Init+0xd4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b6:	6013      	str	r3, [r2, #0]
	RCC->BDCR &= ~RCC_BDCR_BDRST;
 80027b8:	4a29      	ldr	r2, [pc, #164]	; (8002860 <RTC_Init+0xd0>)
 80027ba:	4b29      	ldr	r3, [pc, #164]	; (8002860 <RTC_Init+0xd0>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c2:	6213      	str	r3, [r2, #32]

	RCC->BDCR |= RCC_BDCR_LSEON;
 80027c4:	4a26      	ldr	r2, [pc, #152]	; (8002860 <RTC_Init+0xd0>)
 80027c6:	4b26      	ldr	r3, [pc, #152]	; (8002860 <RTC_Init+0xd0>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6213      	str	r3, [r2, #32]
	while (!(RCC->BDCR & RCC_BDCR_LSERDY));
 80027d0:	bf00      	nop
 80027d2:	4b23      	ldr	r3, [pc, #140]	; (8002860 <RTC_Init+0xd0>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f9      	beq.n	80027d2 <RTC_Init+0x42>
	RCC->BDCR |= RCC_BDCR_RTCSEL_LSE;
 80027de:	4a20      	ldr	r2, [pc, #128]	; (8002860 <RTC_Init+0xd0>)
 80027e0:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <RTC_Init+0xd0>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_RTCEN;
 80027ea:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <RTC_Init+0xd0>)
 80027ec:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <RTC_Init+0xd0>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f4:	6213      	str	r3, [r2, #32]

	while (!(RTC->CRL & RTC_CRL_RTOFF));
 80027f6:	bf00      	nop
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <RTC_Init+0xd8>)
 80027fa:	889b      	ldrh	r3, [r3, #4]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f8      	beq.n	80027f8 <RTC_Init+0x68>
	RTC->CRL |= RTC_CRL_CNF;
 8002806:	4a18      	ldr	r2, [pc, #96]	; (8002868 <RTC_Init+0xd8>)
 8002808:	4b17      	ldr	r3, [pc, #92]	; (8002868 <RTC_Init+0xd8>)
 800280a:	889b      	ldrh	r3, [r3, #4]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f043 0310 	orr.w	r3, r3, #16
 8002812:	b29b      	uxth	r3, r3
 8002814:	8093      	strh	r3, [r2, #4]

	RTC->PRLL = 0x7FFF;
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <RTC_Init+0xd8>)
 8002818:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800281c:	819a      	strh	r2, [r3, #12]
	RTC->CNTH =0;
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <RTC_Init+0xd8>)
 8002820:	2200      	movs	r2, #0
 8002822:	831a      	strh	r2, [r3, #24]
	RTC->CNTL =0;
 8002824:	4b10      	ldr	r3, [pc, #64]	; (8002868 <RTC_Init+0xd8>)
 8002826:	2200      	movs	r2, #0
 8002828:	839a      	strh	r2, [r3, #28]

	RTC->CRL &= RTC_CRL_CNF;
 800282a:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <RTC_Init+0xd8>)
 800282c:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <RTC_Init+0xd8>)
 800282e:	889b      	ldrh	r3, [r3, #4]
 8002830:	b29b      	uxth	r3, r3
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	b29b      	uxth	r3, r3
 8002838:	8093      	strh	r3, [r2, #4]
	while (!(RTC->CRL & RTC_CRL_RTOFF));
 800283a:	bf00      	nop
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <RTC_Init+0xd8>)
 800283e:	889b      	ldrh	r3, [r3, #4]
 8002840:	b29b      	uxth	r3, r3
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f8      	beq.n	800283c <RTC_Init+0xac>
	PWR->CR &= ~PWR_CR_DBP;
 800284a:	4a06      	ldr	r2, [pc, #24]	; (8002864 <RTC_Init+0xd4>)
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <RTC_Init+0xd4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002854:	6013      	str	r3, [r2, #0]
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	40007000 	.word	0x40007000
 8002868:	40002800 	.word	0x40002800

0800286c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800286c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002870:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002872:	e003      	b.n	800287c <LoopCopyDataInit>

08002874 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002876:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002878:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800287a:	3104      	adds	r1, #4

0800287c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800287c:	480b      	ldr	r0, [pc, #44]	; (80028ac <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002880:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002882:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002884:	d3f6      	bcc.n	8002874 <CopyDataInit>
	ldr	r2, =_sbss
 8002886:	4a0b      	ldr	r2, [pc, #44]	; (80028b4 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002888:	e002      	b.n	8002890 <LoopFillZerobss>

0800288a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800288a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800288c:	f842 3b04 	str.w	r3, [r2], #4

08002890 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002892:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002894:	d3f9      	bcc.n	800288a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002896:	f000 f82b 	bl	80028f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800289a:	f000 f8e3 	bl	8002a64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800289e:	f7ff fced 	bl	800227c <main>
	bx	lr
 80028a2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028a4:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80028a8:	08002b84 	.word	0x08002b84
	ldr	r0, =_sdata
 80028ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80028b0:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 80028b4:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 80028b8:	20000b3c 	.word	0x20000b3c

080028bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028bc:	e7fe      	b.n	80028bc <ADC1_2_IRQHandler>

080028be <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80028ce:	e7fe      	b.n	80028ce <HardFault_Handler+0x4>

080028d0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <MemManage_Handler+0x4>

080028d6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80028da:	e7fe      	b.n	80028da <BusFault_Handler+0x4>

080028dc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <UsageFault_Handler+0x4>

080028e2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
	...

080028f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80028f4:	4a15      	ldr	r2, [pc, #84]	; (800294c <SystemInit+0x5c>)
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <SystemInit+0x5c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002900:	4912      	ldr	r1, [pc, #72]	; (800294c <SystemInit+0x5c>)
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <SystemInit+0x5c>)
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <SystemInit+0x60>)
 8002908:	4013      	ands	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800290c:	4a0f      	ldr	r2, [pc, #60]	; (800294c <SystemInit+0x5c>)
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <SystemInit+0x5c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800291c:	4a0b      	ldr	r2, [pc, #44]	; (800294c <SystemInit+0x5c>)
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <SystemInit+0x5c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002926:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002928:	4a08      	ldr	r2, [pc, #32]	; (800294c <SystemInit+0x5c>)
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <SystemInit+0x5c>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002932:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <SystemInit+0x5c>)
 8002936:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800293a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800293c:	f000 f80c 	bl	8002958 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <SystemInit+0x64>)
 8002942:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002946:	609a      	str	r2, [r3, #8]
#endif 
}
 8002948:	bf00      	nop
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000
 8002950:	f8ff0000 	.word	0xf8ff0000
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800295c:	f000 f802 	bl	8002964 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}

08002964 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	2300      	movs	r3, #0
 8002970:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002972:	4a3a      	ldr	r2, [pc, #232]	; (8002a5c <SetSysClockTo72+0xf8>)
 8002974:	4b39      	ldr	r3, [pc, #228]	; (8002a5c <SetSysClockTo72+0xf8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800297e:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <SetSysClockTo72+0xf8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3301      	adds	r3, #1
 800298c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d103      	bne.n	800299c <SetSysClockTo72+0x38>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800299a:	d1f0      	bne.n	800297e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800299c:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <SetSysClockTo72+0xf8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80029a8:	2301      	movs	r3, #1
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	e001      	b.n	80029b2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80029ae:	2300      	movs	r3, #0
 80029b0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d14b      	bne.n	8002a50 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80029b8:	4a29      	ldr	r2, [pc, #164]	; (8002a60 <SetSysClockTo72+0xfc>)
 80029ba:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <SetSysClockTo72+0xfc>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f043 0310 	orr.w	r3, r3, #16
 80029c2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80029c4:	4a26      	ldr	r2, [pc, #152]	; (8002a60 <SetSysClockTo72+0xfc>)
 80029c6:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <SetSysClockTo72+0xfc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 0303 	bic.w	r3, r3, #3
 80029ce:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80029d0:	4a23      	ldr	r2, [pc, #140]	; (8002a60 <SetSysClockTo72+0xfc>)
 80029d2:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <SetSysClockTo72+0xfc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f043 0302 	orr.w	r3, r3, #2
 80029da:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80029dc:	4a1f      	ldr	r2, [pc, #124]	; (8002a5c <SetSysClockTo72+0xf8>)
 80029de:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <SetSysClockTo72+0xf8>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <SetSysClockTo72+0xf8>)
 80029e6:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <SetSysClockTo72+0xf8>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <SetSysClockTo72+0xf8>)
 80029ee:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <SetSysClockTo72+0xf8>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029f6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80029f8:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <SetSysClockTo72+0xf8>)
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <SetSysClockTo72+0xf8>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002a02:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8002a04:	4a15      	ldr	r2, [pc, #84]	; (8002a5c <SetSysClockTo72+0xf8>)
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <SetSysClockTo72+0xf8>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002a0e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002a10:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <SetSysClockTo72+0xf8>)
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <SetSysClockTo72+0xf8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002a1c:	bf00      	nop
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <SetSysClockTo72+0xf8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f9      	beq.n	8002a1e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002a2a:	4a0c      	ldr	r2, [pc, #48]	; (8002a5c <SetSysClockTo72+0xf8>)
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <SetSysClockTo72+0xf8>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f023 0303 	bic.w	r3, r3, #3
 8002a34:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002a36:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <SetSysClockTo72+0xf8>)
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <SetSysClockTo72+0xf8>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8002a42:	bf00      	nop
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <SetSysClockTo72+0xf8>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d1f9      	bne.n	8002a44 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40022000 	.word	0x40022000

08002a64 <__libc_init_array>:
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	2500      	movs	r5, #0
 8002a68:	4e0c      	ldr	r6, [pc, #48]	; (8002a9c <__libc_init_array+0x38>)
 8002a6a:	4c0d      	ldr	r4, [pc, #52]	; (8002aa0 <__libc_init_array+0x3c>)
 8002a6c:	1ba4      	subs	r4, r4, r6
 8002a6e:	10a4      	asrs	r4, r4, #2
 8002a70:	42a5      	cmp	r5, r4
 8002a72:	d109      	bne.n	8002a88 <__libc_init_array+0x24>
 8002a74:	f000 f82e 	bl	8002ad4 <_init>
 8002a78:	2500      	movs	r5, #0
 8002a7a:	4e0a      	ldr	r6, [pc, #40]	; (8002aa4 <__libc_init_array+0x40>)
 8002a7c:	4c0a      	ldr	r4, [pc, #40]	; (8002aa8 <__libc_init_array+0x44>)
 8002a7e:	1ba4      	subs	r4, r4, r6
 8002a80:	10a4      	asrs	r4, r4, #2
 8002a82:	42a5      	cmp	r5, r4
 8002a84:	d105      	bne.n	8002a92 <__libc_init_array+0x2e>
 8002a86:	bd70      	pop	{r4, r5, r6, pc}
 8002a88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a8c:	4798      	blx	r3
 8002a8e:	3501      	adds	r5, #1
 8002a90:	e7ee      	b.n	8002a70 <__libc_init_array+0xc>
 8002a92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a96:	4798      	blx	r3
 8002a98:	3501      	adds	r5, #1
 8002a9a:	e7f2      	b.n	8002a82 <__libc_init_array+0x1e>
 8002a9c:	08002b7c 	.word	0x08002b7c
 8002aa0:	08002b7c 	.word	0x08002b7c
 8002aa4:	08002b7c 	.word	0x08002b7c
 8002aa8:	08002b80 	.word	0x08002b80

08002aac <memcpy>:
 8002aac:	b510      	push	{r4, lr}
 8002aae:	1e43      	subs	r3, r0, #1
 8002ab0:	440a      	add	r2, r1
 8002ab2:	4291      	cmp	r1, r2
 8002ab4:	d100      	bne.n	8002ab8 <memcpy+0xc>
 8002ab6:	bd10      	pop	{r4, pc}
 8002ab8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002abc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ac0:	e7f7      	b.n	8002ab2 <memcpy+0x6>

08002ac2 <memset>:
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4402      	add	r2, r0
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d100      	bne.n	8002acc <memset+0xa>
 8002aca:	4770      	bx	lr
 8002acc:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad0:	e7f9      	b.n	8002ac6 <memset+0x4>
	...

08002ad4 <_init>:
 8002ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad6:	bf00      	nop
 8002ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ada:	bc08      	pop	{r3}
 8002adc:	469e      	mov	lr, r3
 8002ade:	4770      	bx	lr

08002ae0 <_fini>:
 8002ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae2:	bf00      	nop
 8002ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ae6:	bc08      	pop	{r3}
 8002ae8:	469e      	mov	lr, r3
 8002aea:	4770      	bx	lr
